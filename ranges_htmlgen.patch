From 19a3ec21936da1c66a4c904cafda5e31a5eb6fb3 Mon Sep 17 00:00:00 2001
From: timsong-cpp <rs2740@gmail.com>
Date: Thu, 20 Jul 2017 07:28:17 -0400
Subject: [PATCH] Hacks to make cxxdraft-htmlgen work

---
 concepts.tex   |  1 -
 cxx.tex        |  4 ----
 intro.tex      |  6 ++---
 macros.tex     |  8 +++----
 statements.tex | 69 ++++++++++++++++++++++++++--------------------------------
 5 files changed, 38 insertions(+), 50 deletions(-)

diff --git a/concepts.tex b/concepts.tex
index aab41c1..2348b6f 100644
--- a/concepts.tex
+++ b/concepts.tex
@@ -1,5 +1,4 @@
 %!TEX root = std.tex
-
 \rSec0[concepts.lib]{Concepts library}
 
 \rSec1[concepts.lib.general]{General}
diff --git a/cxx.tex b/cxx.tex
index a130a1e..2c49cd8 100644
--- a/cxx.tex
+++ b/cxx.tex
@@ -16,10 +16,6 @@
 %  \cxxref{basic.def.odr}
 %
 % Expands to the string 3.2.
-\newcommand{\stdcxxref}[1]{%
-  \csname #1 \endcsname%
-}
-
 \newcommand{\cxxref}[1]{%
   ISO/IEC 14882:2014 \S\stdcxxref{#1}%
 }
diff --git a/intro.tex b/intro.tex
index 8aac742..efeca8a 100644
--- a/intro.tex
+++ b/intro.tex
@@ -72,7 +72,7 @@ edition of the referenced document (including any amendments) applies.
 \item ISO/IEC TS 19217:2015, \doccite{Programming Languages - \Cpp Extensions for Concepts}
 \end{itemize}
 
-ISO/IEC 14882:2014 is herein called the \defn{C\Rplus\Rplus\xspace Standard} and
+ISO/IEC 14882:2014 is herein called the \defn{\Cpp Standard} and
 ISO/IEC TS 19217:2015 is called the \defn{Concepts TS}.
 
 \rSec0[intro.defs]{Terms and definitions}
@@ -89,7 +89,7 @@ IEC Electropedia: available at http://www.electropedia.org/
 ISO Online browsing platform: available at http://www.iso.org/obp
 \end{itemize}
 
-\def\definition{\definitionx{\section}}%
+%\def\definition{\definitionx{\section}}%
 
 \indexdefn{constant subexpression}%
 \definition{constant subexpression}{defns.const.subexpr}
@@ -123,7 +123,7 @@ ranges::sort(pairs, std::less<>{}, [](auto const& p) { return p.first; });
 \end{codeblock}
 sorts the pairs in increasing order of their \tcode{first} members:
 \begin{codeblock}
-{{0, "baz"}, {1, "bar"}, {2, "foo"}}
+@\{@{0, "baz"}, {1, "bar"}, {2, "foo"}@\}@
 \end{codeblock}
 \exitexample
 
diff --git a/macros.tex b/macros.tex
index 9667c1c..14f82f9 100644
--- a/macros.tex
+++ b/macros.tex
@@ -12,8 +12,8 @@
 \definecolor{noteclr}{rgb}{0,0,1}
 
 \renewcommand{\added}[1]{\textcolor{addclr}{\uline{#1}}}
-\newcommand{\removed}[1]{\textcolor{remclr}{\sout{#1}}}
-\renewcommand{\changed}[2]{\removed{#1}\added{#2}}
+%\newcommand{\removed}[1]{\textcolor{remclr}{\sout{#1}}}
+\newcommand{\changed}[2]{\removed{#1}\added{#2}}
 
 % Mark-up text that is unique to the Ranges TS
 % (\oldtxt{X} gets deleted in next draft, \newtxt{X} becomes \added{X}.)
@@ -32,8 +32,8 @@
 \newcommand{\changednb}[3]{\removednb{#1}{#2}\added{#3}}
 \newcommand{\remitem}[1]{\item\removed{#1}}
 
-\newcommand{\ednote}[1]{\textcolor{noteclr}{[Editor's note: #1] }}
-% \newcommand{\ednote}[1]{}
+\newcommand{\ednote}[1]{\enote{[Editor's note: #1]}}
+\renewcommand{\ednote}[1]{\textcolor{noteclr}{[Editor's note: #1] }}
 
 \newenvironment{addedblock}
 {
diff --git a/statements.tex b/statements.tex
index 06d3f96..64d1c4b 100644
--- a/statements.tex
+++ b/statements.tex
@@ -1,5 +1,4 @@
 %!TEX root = std.tex
-
 \rSec0[stmt]{Statements}
 
 \rSec1[stmt.iter]{Iteration statements}
@@ -9,64 +8,59 @@
 \ednote{Modify \cxxref{stmt.ranged}/p1 to allow differently typed begin and end
 iterators, like in C++17.}
 
-\begin{quote}
 \pnum
-\begin{removedblock}
-For a range-based for statement of the form
+\removed{For a range-based for statement of the form}
 
 \begin{bnf}
-\terminal{for} \terminal{(} for-range-declaration \terminal{:} expression \terminal{)} statement
+\removed{\terminal{for} \terminal{(} for-range-declaration \terminal{:} expression \terminal{)} statement}
 \end{bnf}
 %
-let \grammarterm{range-init} be equivalent to the expression surrounded by parentheses
+\removed{let \grammarterm{range-init} be equivalent to the expression surrounded by parentheses}
 
 \begin{bnf}
-\terminal{(} expression \terminal{)}
+\removed{\terminal{(} expression \terminal{)}}
 \end{bnf}
 %
-and for a range-based for statement of the form
+\removed{and for a range-based for statement of the form}
 
 \begin{bnf}
-\terminal{for} \terminal{(} for-range-declaration \terminal{:} braced-init-list \terminal{)} statement
+\removed{\terminal{for} \terminal{(} for-range-declaration \terminal{:} braced-init-list \terminal{)} statement}
 \end{bnf}
 %
-let \grammarterm{range-init} be equivalent to the \grammarterm{braced-init-list}.
+\removed{let \grammarterm{range-init} be equivalent to the \grammarterm{braced-init-list}.}
 %
-In each case, a range-based for statement is equivalent to
+\removed{In each case, a range-based for statement is equivalent to}
 \begin{codeblock}
-{
-  auto && __range = range-init;
-  for ( auto __begin = begin-expr,
-             __end = end-expr;
-        __begin != __end;
-        ++__begin ) {
-    @\grammarterm{for-range-declaration}@ = *__begin;
-    @\grammarterm{statement}@
-  }
-}
+@\removed{\{}@
+  @\removed{auto && __range = \grammerterm{range-init};}@
+  @\removed{for ( auto __begin = \grammarterm{begin-expr},}@
+             @\removed{__end = \grammarterm{end-expr};}@
+        @\removed{__begin != __end;}@
+        @\removed{++__begin ) \{}@
+    @\removed{\grammarterm{for-range-declaration} = *__begin;}@
+    @\removed{\grammarterm{statement}}@
+  @\removed{\}}@
+@\removed{\}}@
 \end{codeblock}
-\end{removedblock}
 
-\begin{addedblock}
-The range-based for statement
+\added{The range-based for statement}
 
 \begin{bnf}
-\terminal{for} \terminal{(} for-range-declaration \terminal{:} for-range-initializer \terminal{)} statement
+\added{\terminal{for} \terminal{(} for-range-declaration \terminal{:} for-range-initializer \terminal{)} statement}
 \end{bnf}
 %
-is equivalent to
+\added{is equivalent to}
 \begin{codeblock}
-{
-  auto && __range = @\grammarterm{for-range-initializer}@;
-  auto __begin = @\grammarterm{begin-expr}@;
-  auto __end = @\grammarterm{end-expr}@;
-  for ( ; __begin != __end; ++__begin ) {
-    @\grammarterm{for-range-declaration}@ = *__begin;
-    @\grammarterm{statement}@
-  }
-}
+@\added{\{}@
+  @\added{auto && __range = \grammarterm{for-range-initializer};}@
+  @\added{auto __begin = \grammarterm{begin-expr};}@
+  @\added{auto __end = \grammarterm{end-expr};}@
+  @\added{for ( ; __begin != __end; ++__begin ) \{}@
+    @\added{\grammarterm{for-range-declaration} = *__begin;}@
+    @\added{\grammarterm{statement}}@
+  @\added{\}}@
+@\added{\}}@
 \end{codeblock}
-\end{addedblock}
 %
 where
 \begin{itemize}
@@ -96,7 +90,7 @@ the array bound. If \changed{\tcode{_RangeT}}{\tcode{R}} is an array of unknown
 if \changed{\tcode{_RangeT}}{the \grammarterm{for-range-initializer}} is
 \changed{a}{an expression of} class type \added{\tcode{C}}, the
 \grammarterm{unqualified-id}{s} \tcode{begin} and \tcode{end} are looked up in
-the scope of \changed{class \tcode{\mbox{_RangeT}}}{\tcode{C}} as if by class
+the scope of \changed{class \tcode{_RangeT}}{\tcode{C}} as if by class
 member access lookup~(\stdcxxref{basic.lookup.classref}), and if either
 (or both) finds at least one declaration, \grammarterm{begin-expr} and
 \grammarterm{end-expr} are \tcode{__range.begin()} and \tcode{__range.end()},
@@ -125,4 +119,3 @@ In the \grammarterm{decl-specifier-seq} of a \grammarterm{for-range-declaration}
 each \grammarterm{decl-specifier} shall be either a \grammarterm{type-specifier}
 or \tcode{constexpr}. The \grammarterm{decl-specifier-seq} shall not define a
 class or enumeration.
-\end{quote}
-- 
2.7.4

