From db8c134ddb71d57e24feb0b5cb16ba4283cf5e0f Mon Sep 17 00:00:00 2001
From: timsong-cpp <rs2740@gmail.com>
Date: Wed, 11 Jan 2017 09:29:56 -0500
Subject: [PATCH] Squashed commit containing the following formatting fixes:

commit 8fe3434aa63cc4f5291864bd3d86b1592fe462b6
Author: Eelis van der Weegen <eelis@eelis.net>
Date:   Sat Jan 7 22:36:42 2017 +0100

    [expr] Remove stray backslash.

commit 9af808c11db6167978f0404128fda7760190cc55
Author: Eelis van der Weegen <eelis@eelis.net>
Date:   Fri Jan 6 03:12:59 2017 +0100

    Remove \br and \- from \bigoh.

commit 0c9a6b904387d6a2cc7677e5b1a3a3e5268134e3
Author: Eelis van der Weegen <eelis@eelis.net>
Date:   Thu Jan 5 01:13:49 2017 +0100

    Avoid \, inside \mbox inside math, because MathJax does not support it.
    See https://github.com/mathjax/MathJax/issues/569

commit bfee78f508d50b58e2e9f8920784926c4c21c490
Author: timsong-cpp <rs2740@gmail.com>
Date:   Sun Jan 1 16:12:50 2017 +0100

    Use floattable for [optional] tables.

commit e5878e576bb93fc052d596ebc79dcccd13c19e95
Author: Eelis van der Weegen <eelis@eelis.net>
Date:   Thu Jan 5 23:06:32 2017 +0100

    Move index entries for first item in enumeration into item.

commit f168de0b46fe1c96c81d02f553cee5c1d1670506
Author: Eelis van der Weegen <eelis@eelis.net>
Date:   Sat Jan 7 01:59:05 2017 +0100

    [rand.req.eng] Omit superfluous dollar-math wrapping inside \bigoh.

commit 98d8c52a1d907a9e66cf917af21226ddce4204c3
Author: Eelis van der Weegen <eelis@eelis.net>
Date:   Mon Jan 9 14:28:37 2017 +0100

    Remove useless \mbox wrappings.
---
 source/containers.tex  | 14 +++++++-------
 source/expressions.tex |  2 +-
 source/lex.tex         |  3 ++-
 source/numerics.tex    | 22 +++++++++++-----------
 source/tables.tex      | 31 ++++---------------------------
 5 files changed, 25 insertions(+), 47 deletions(-)

diff --git a/source/containers.tex b/source/containers.tex
index 486fc6a..5e9a877 100644
--- a/source/containers.tex
+++ b/source/containers.tex
@@ -2418,7 +2418,7 @@ and \tcode{CopyAssignable}.\br
   pair is \tcode{true} if and only if the insertion takes place, and the iterator
   component of the pair points to the element with key equivalent to the
   key of \tcode{t}.  &
-  Average case \bigoh{1}, worst case \bigoh{\tcode{a_uniq.}\br\tcode{size()}}.
+  Average case \bigoh{1}, worst case \bigoh{\tcode{a_uniq.}\tcode{size()}}.
 \\ \rowsep
 
 \tcode{a_eq.}\tcode{emplace(args)}  &
@@ -2427,7 +2427,7 @@ and \tcode{CopyAssignable}.\br
   \effects\ Inserts a \tcode{value_type} object \tcode{t} constructed with
   \tcode{std::forward<Args>(args)...} and returns the iterator pointing
   to the newly inserted element.    &
-  Average case \bigoh{1}, worst case \bigoh{\tcode{a_eq.}\br\tcode{size()}}.
+  Average case \bigoh{1}, worst case \bigoh{\tcode{a_eq.}\tcode{size()}}.
 \\ \rowsep
 
 \tcode{a.emplace_hint(p, args)}  &
@@ -2453,7 +2453,7 @@ and \tcode{CopyAssignable}.\br
     with key equivalent to the key of \tcode{t}.%
     \indextext{unordered associative containers!\idxcode{insert}}%
     \indextext{\idxcode{insert}!unordered associative containers}%
-&   Average case \bigoh{1}, worst case \bigoh{\tcode{a_uniq.}\br\tcode{size()}}.
+&   Average case \bigoh{1}, worst case \bigoh{\tcode{a_uniq.}\tcode{size()}}.
 \\ \rowsep
 %
 \tcode{a_eq.insert(t)}
@@ -2465,7 +2465,7 @@ and \tcode{CopyAssignable}.\br
     inserted element.
     \indextext{unordered associative containers!\idxcode{insert}}%
     \indextext{\idxcode{insert}!unordered associative containers}%
-&   Average case \bigoh{1}, worst case \bigoh{\tcode{a_eq.}\br\tcode{size()}}.
+&   Average case \bigoh{1}, worst case \bigoh{\tcode{a_eq.}\tcode{size()}}.
 \\ \rowsep
 %
 \tcode{a.insert(p, t)}
@@ -2514,7 +2514,7 @@ start.  Implementations are permitted to ignore the hint.%
  if the insertion failed, \tcode{inserted} is \tcode{false},
  \tcode{node} has the previous value of \tcode{nh}, and \tcode{position}
  points to an element with a key equivalent to \tcode{nh.key()}. &
- Average case \bigoh{1}, worst case \bigoh{\tcode{a_uniq.}\br\tcode{size()}}.  \\ \rowsep
+ Average case \bigoh{1}, worst case \bigoh{\tcode{a_uniq.}\tcode{size()}}.  \\ \rowsep
 %
 \tcode{a_eq.}\br
  \tcode{insert(nh)}           &
@@ -2570,7 +2570,7 @@ start.  Implementations are permitted to ignore the hint.%
  remain valid.\br
  \throws{} Nothing unless the hash function or key equality predicate throws. &
  Average case \bigoh{N}, where $N$ is \tcode{a2.size()}.
- Worst case \bigoh{N\tcode{*a.size()}\br\tcode{+} N}.  \\ \rowsep
+ Worst case \bigoh{N\tcode{*a.size()}\tcode{+}N}.  \\ \rowsep
 %
 \tcode{a.erase(k)}
 &   \tcode{size_type}
@@ -2682,7 +2682,7 @@ the number of elements erased.
     Returns the number of elements in the $\texttt{n}^{\textrm{ th}}$ bucket.%
     \indextext{unordered associative containers!\idxcode{bucket_size}}%
     \indextext{\idxcode{bucket_size}!unordered associative containers}%
-&   \bigoh{\tcode{b.bucket_}\-\tcode{size(n)}}
+&   \bigoh{\tcode{b.bucket_size(n)}}
 \\ \rowsep
 %
 \tcode{b.begin(n)}
diff --git a/source/expressions.tex b/source/expressions.tex
index e49d419..b380696 100644
--- a/source/expressions.tex
+++ b/source/expressions.tex
@@ -245,7 +245,7 @@ The glvalue expression is evaluated and its value is discarded.
 \pnum
 The values of the floating operands and the results of floating
 expressions may be represented in greater precision and range than that
-required by the type; the types are not changed\
+required by the type; the types are not changed
 thereby.\footnote{The cast and assignment operators must still perform their specific
 conversions as described in~\ref{expr.cast},~\ref{expr.static.cast}
 and~\ref{expr.ass}.}
diff --git a/source/lex.tex b/source/lex.tex
index 15ce0d1..6679c37 100644
--- a/source/lex.tex
+++ b/source/lex.tex
@@ -58,9 +58,10 @@ following phases.\footnote{Implementations must behave as if these separate phas
 occur, although in practice different phases might be folded together.}
 
 \begin{enumerate}
+\item
 \indextext{character!source file}%
 \indextext{character set!basic source}%
-\item Physical source file characters are mapped, in an
+Physical source file characters are mapped, in an
 \impldef{mapping physical source file characters to basic source character set} manner,
 to the basic source character set (introducing new-line characters for end-of-line
 indicators) if necessary.
diff --git a/source/numerics.tex b/source/numerics.tex
index 5878309..6d3cd20 100644
--- a/source/numerics.tex
+++ b/source/numerics.tex
@@ -1912,21 +1912,21 @@ according to Clause~\ref{strings} and Clause~\ref{input.output}.
     with the same initial state
     as all other default-constructed engines
     of type \tcode{E}.
-  & \bigoh{$\mbox{size of state}$}
+  & \bigoh{\mbox{size of state}}
   \\ \rowsep
 \tcode{E(x)}
 \indextext{copy constructor!random number engine requirement}
   &
   & Creates an engine
     that compares equal to \tcode{x}.
-  & \bigoh{$\mbox{size of state}$}
+  & \bigoh{\mbox{size of state}}
   \\ \rowsep
 \tcode{E(s)}%
 \indextext{constructor!random number engine requirement}
   &
   & Creates an engine
       with initial state determined by \tcode{s}.
-  & \bigoh{$\mbox{size of state}$}
+  & \bigoh{\mbox{size of state}}
   \\ \rowsep
 \tcode{E(q)}%
 \indextext{constructor!random number engine requirement}\footnote{  This constructor
@@ -2005,13 +2005,13 @@ according to Clause~\ref{strings} and Clause~\ref{input.output}.
     returns \tcode{true}
       if $ S_x = S_y $;
     else returns \tcode{false}.
-  & \bigoh{$\mbox{size of state}$}
+  & \bigoh{\mbox{size of state}}
   \\ \rowsep
 \tcode{x != y}%
 \indextext{\idxcode{operator"!=}!random number engine requirement}
   & \tcode{bool}
   & \tcode{!(x == y)}.
-  & \bigoh{$\mbox{size of state}$}
+  & \bigoh{\mbox{size of state}}
   \\ \rowsep
 \tcode{os << x}%
 \indextext{\idxcode{operator<<}!random number engine requirement}
@@ -2027,7 +2027,7 @@ according to Clause~\ref{strings} and Clause~\ref{input.output}.
     by one or more space characters.
 
     post: The \tcode{os.}\textit{fmtflags} and fill character are unchanged.
-  & \bigoh{$\mbox{size of state}$}
+  & \bigoh{\mbox{size of state}}
   \\ \rowsep
 \tcode{is >> v}%
 \indextext{\idxcode{operator>>}!random number engine requirement}
@@ -2058,7 +2058,7 @@ according to Clause~\ref{strings} and Clause~\ref{input.output}.
     were respectively the same as those of \tcode{is}.
 
     post: The \tcode{is.}\textit{fmtflags} are unchanged.
-  & \bigoh{$\mbox{size of state}$}
+  & \bigoh{\mbox{size of state}}
   \\
 \end{libreqtab4d}
 
@@ -2695,7 +2695,7 @@ throws what and when the invocation of \tcode{q.generate} throws.
 \pnum
 Descriptions are provided in this section~\ref{rand.eng}
 only for engine operations
-that are not described in  \mbox{\ref{rand.req.eng}}
+that are not described in \ref{rand.req.eng}
 or for operations where there is additional semantic information.
 In particular,
 declarations for copy constructors,
@@ -9056,7 +9056,7 @@ shall be writable~(\ref{iterator.requirements.general}) to the \tcode{result} ou
 In the ranges
 \crange{first}{last}
 and
-\mbox{\crange{result}{result + (last - first)}}
+\crange{result}{result + (last - first)}
 \tcode{binary_op}
 shall neither modify elements nor invalidate iterators or subranges.\footnote{The use of fully closed ranges is intentional.
 }
@@ -10414,7 +10414,7 @@ long double hypot(long double x, long double y, long double z);
 
 \begin{itemdescr}
 \pnum
-\returns $\sqrt{x^2+y^2+z^2} \mbox{.}$
+\returns $\sqrt{x^2+y^2+z^2}$.
 \end{itemdescr}
 
 \rSec2[c.math.fpclass]{Classification / comparison functions}
@@ -10579,7 +10579,7 @@ of their respective arguments
   \mathsf{B}(x, y) =
   \frac{ \Gamma(x) \, \Gamma(y) }
        { \Gamma(x+y) },
-       \quad \mbox{for $x > 0$,\, $y > 0$}
+       \quad \mbox{for }x > 0,\, y > 0
 \]
 where
 $x$ is \tcode{x} and
diff --git a/source/tables.tex b/source/tables.tex
index 9a6adaf..2caff12 100644
--- a/source/tables.tex
+++ b/source/tables.tex
@@ -677,36 +677,13 @@
 % tables.
 \newenvironment{lib2dtab2base}[7]
 {
- %% no lines in the top-left cell, and leave a gap around the headers
- %% FIXME: I tried to use hhline here, but it doesn't appear to support
- %% the join between the leftmost top header and the topmost left header,
- %% so we fake it with an empty row and column.
- \newcommand{\topline}{\cline{3-4}}
- \newcommand{\rowsep}{\cline{1-1}\cline{3-4}}
- \newcommand{\capsep}{
-  \topline
-  \multicolumn{4}{c}{}\\[-0.8\normalbaselineskip]
-  \rowsep
- }
- \newcommand{\bottomline}{\rowsep}
- \newcommand{\hdstyle}[1]{\textbf{##1}}
- \newcommand{\rowhdr}[1]{\hdstyle{##1}&}
- \newcommand{\colhdr}[1]{\multicolumn{1}{|>{\centering}m{#6}|}{\hdstyle{##1}}}
- %% FIXME: figure out a way to reuse floattable here
- \begin{table}[htbp]
- \caption{\label{#2}#1}
- \begin{center}
- \begin{tabular}{|>{\centering}m{#5}|@{}p{0.2\normalbaselineskip}@{}|m{#6}|m{#7}|}
- %% table header
+ \newcommand{\rowhdr}[1]{\textbf{##1}}
+ \begin{floattable}{#1}{#2}{p{#5}|p{#6}|p{#7}}
  \topline
- \multicolumn{1}{c}{}&&\colhdr{#3}&\colhdr{#4}\\
- \capsep
+  & \chdr{#3} & \rhdr{#4} \\ \rowsep
 }
 {
- \bottomline
- \end{tabular}
- \end{center}
- \end{table}
+ \end{floattable}
 }
 
 \newenvironment{lib2dtab2}[4]{
-- 
2.7.4

