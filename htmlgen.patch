From 05523009588391aa71ccfd52cade8533fe104872 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Fri, 10 Mar 2017 14:45:02 +0100
Subject: [PATCH 01/18] [expr.mptr.oper] Add missing indentation in example
 code. [rejected upstream: 1529]

---
 source/expressions.tex | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/source/expressions.tex b/source/expressions.tex
index cea2b06..2ef07b6 100644
--- a/source/expressions.tex
+++ b/source/expressions.tex
@@ -4640,9 +4640,9 @@ struct S {
 };
 void f()
 {
-const S cs;
-int S::* pm = &S::i;            // \tcode{pm} refers to \tcode{mutable} member \tcode{S::i}
-cs.*pm = 88;                    // ill-formed: \tcode{cs} is a const object
+  const S cs;
+  int S::* pm = &S::i;          // \tcode{pm} refers to \tcode{mutable} member \tcode{S::i}
+  cs.*pm = 88;                  // ill-formed: \tcode{cs} is a const object
 }
 \end{codeblock}
 \end{note}
-- 
2.7.4


From f8b90499404f1df38059b8d4f31a0fb8bb72c7ec Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sun, 26 Feb 2017 14:24:19 +0100
Subject: [PATCH 02/18] Replace \term with \placeholder.

---
 source/expressions.tex | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/source/expressions.tex b/source/expressions.tex
index 2ef07b6..9ed3f5d 100644
--- a/source/expressions.tex
+++ b/source/expressions.tex
@@ -2790,7 +2790,7 @@ The result of a \tcode{typeid} expression is an lvalue of static type
 \indextext{\idxcode{type_info}}%
 \indexlibrary{\idxcode{type_info}}%
 \tcode{const} \tcode{std::type_info}\iref{type.info} and dynamic type \tcode{const}
-\tcode{std::type_info} or \tcode{const} \term{name} where \term{name} is an
+\tcode{std::type_info} or \tcode{const} \placeholder{name} where \term{name} is an
 \impldef{derived type for \tcode{typeid}} class publicly derived from
 \tcode{std::type_info} which preserves the behavior described
 in~\ref{type.info}.\footnote{The recommended name for such a class is
-- 
2.7.4


From f110cb893820797e378bf3b9db328c92b501b062 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Wed, 1 Feb 2017 03:39:27 +0100
Subject: [PATCH 03/18] Make references more precise.

---
 source/basic.tex        | 2 +-
 source/declarations.tex | 2 +-
 source/statements.tex   | 2 +-
 source/strings.tex      | 2 +-
 4 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/source/basic.tex b/source/basic.tex
index d51914e..7ccaf7e 100644
--- a/source/basic.tex
+++ b/source/basic.tex
@@ -105,7 +105,7 @@ A declaration may also have effects including:
 \item a static assertion\iref{dcl.dcl},
 \item controlling template instantiation\iref{temp.explicit},
 \item guiding template argument deduction for constructors\iref{temp.deduct.guide},
-\item use of attributes\iref{dcl.dcl}, and
+\item use of attributes\iref{dcl.attr}, and
 \item nothing (in the case of an \grammarterm{empty-declaration}).
 \end{itemize}
 
diff --git a/source/declarations.tex b/source/declarations.tex
index 79355c3..f86720e 100644
--- a/source/declarations.tex
+++ b/source/declarations.tex
@@ -3416,7 +3416,7 @@ extern "C" {
 Linkage specifications nest. When linkage specifications nest, the
 innermost one determines the language linkage. A linkage specification
 does not establish a scope. A \grammarterm{linkage-specification} shall
-occur only in namespace scope\iref{basic.scope}. In a
+occur only in namespace scope\iref{basic.scope.namespace}. In a
 \grammarterm{linkage-specification}, the specified language linkage applies
 to the function types of all function declarators, function names with
 external linkage, and variable names with external linkage declared
diff --git a/source/statements.tex b/source/statements.tex
index 668fe3d..c52687e 100644
--- a/source/statements.tex
+++ b/source/statements.tex
@@ -961,7 +961,7 @@ to determine whether this is the case. This resolves the meaning
 of many examples.
 \begin{example}
 Assuming \tcode{T} is a
-\grammarterm{simple-type-specifier}\iref{dcl.type},
+\grammarterm{simple-type-specifier}\iref{dcl.type.simple},
 
 \begin{codeblock}
 T(a)->m = 7;        // expression-statement
diff --git a/source/strings.tex b/source/strings.tex
index 3b0cfd8..1824141 100644
--- a/source/strings.tex
+++ b/source/strings.tex
@@ -1531,7 +1531,7 @@ basic_string& operator=(basic_string&& str)
 \begin{itemdescr}
 \pnum
 \effects
-Move assigns as a sequence container\iref{container.requirements},
+Move assigns as a sequence container\iref{sequence.reqmts},
 except that iterators, pointers and references may be invalidated.
 
 \pnum
-- 
2.7.4


From 0dee74f7a2ff91344a5209be74e4de32f296bc54 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sat, 7 Jan 2017 01:59:05 +0100
Subject: [PATCH 04/18] [rand.req.eng] Omit superfluous dollar-math wrapping
 inside \bigoh. [rejected upstream: 1340]

---
 source/numerics.tex | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

diff --git a/source/numerics.tex b/source/numerics.tex
index c1762a9..ac34a14 100644
--- a/source/numerics.tex
+++ b/source/numerics.tex
@@ -1900,21 +1900,21 @@ according to \ref{strings} and \ref{input.output}.
     with the same initial state
     as all other default-constructed engines
     of type \tcode{E}.
-  & \bigoh{$\text{size of state}$}
+  & \bigoh{\text{size of state}}
   \\ \rowsep
 \tcode{E(x)}
 \indextext{copy constructor!random number engine requirement}
   &
   & Creates an engine
     that compares equal to \tcode{x}.
-  & \bigoh{$\text{size of state}$}
+  & \bigoh{\text{size of state}}
   \\ \rowsep
 \tcode{E(s)}%
 \indextext{constructor!random number engine requirement}
   &
   & Creates an engine
       with initial state determined by \tcode{s}.
-  & \bigoh{$\text{size of state}$}
+  & \bigoh{\text{size of state}}
   \\ \rowsep
 \tcode{E(q)}%
 \indextext{constructor!random number engine requirement}\footnote{  This constructor
@@ -1993,13 +1993,13 @@ according to \ref{strings} and \ref{input.output}.
     returns \tcode{true}
       if $S_x = S_y$;
     else returns \tcode{false}.
-  & \bigoh{$\text{size of state}$}
+  & \bigoh{\text{size of state}}
   \\ \rowsep
 \tcode{x != y}%
 \indextext{\idxcode{operator"!=}!random number engine requirement}
   & \tcode{bool}
   & \tcode{!(x == y)}.
-  & \bigoh{$\text{size of state}$}
+  & \bigoh{\text{size of state}}
   \\ \rowsep
 \tcode{os << x}%
 \indextext{\idxcode{operator<<}!random number engine requirement}
@@ -2015,7 +2015,7 @@ according to \ref{strings} and \ref{input.output}.
     by one or more space characters.
 
     \postconditions The \tcode{os.}\textit{fmtflags} and fill character are unchanged.
-  & \bigoh{$\text{size of state}$}
+  & \bigoh{\text{size of state}}
   \\ \rowsep
 \tcode{is >> v}%
 \indextext{\idxcode{operator>>}!random number engine requirement}
@@ -2046,7 +2046,7 @@ according to \ref{strings} and \ref{input.output}.
     were respectively the same as those of \tcode{is}.
 
     \postconditions The \tcode{is.}\textit{fmtflags} are unchanged.
-  & \bigoh{$\text{size of state}$}
+  & \bigoh{\text{size of state}}
   \\
 \end{libreqtab4d}
 
-- 
2.7.4


From c335f631a2dcaa7bae78a513bf16515fe179b093 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Thu, 5 Jan 2017 23:06:32 +0100
Subject: [PATCH 05/18] Move index entries for first item in enumeration into
 item.

---
 source/lex.tex | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/source/lex.tex b/source/lex.tex
index 37b4af9..edca808 100644
--- a/source/lex.tex
+++ b/source/lex.tex
@@ -58,9 +58,10 @@ following phases.\footnote{Implementations must behave as if these separate phas
 occur, although in practice different phases might be folded together.}
 
 \begin{enumerate}
+\item
 \indextext{character!source file}%
 \indextext{character set!basic source}%
-\item Physical source file characters are mapped, in an
+Physical source file characters are mapped, in an
 \impldef{mapping physical source file characters to basic source character set} manner,
 to the basic source character set (introducing new-line characters for end-of-line
 indicators) if necessary.
-- 
2.7.4


From f0493c9dbb6c4c36f3840b65492af4f4d8a9085f Mon Sep 17 00:00:00 2001
From: timsong-cpp <rs2740@gmail.com>
Date: Sun, 1 Jan 2017 16:12:50 +0100
Subject: [PATCH 06/18] Use floattable for [optional] tables.

---
 source/tables.tex | 31 ++++---------------------------
 1 file changed, 4 insertions(+), 27 deletions(-)

diff --git a/source/tables.tex b/source/tables.tex
index 0c0cdf0..5be4f2a 100644
--- a/source/tables.tex
+++ b/source/tables.tex
@@ -446,36 +446,13 @@
 % tables.
 \newenvironment{lib2dtab2base}[7]
 {
- %% no lines in the top-left cell, and leave a gap around the headers
- %% FIXME: I tried to use hhline here, but it doesn't appear to support
- %% the join between the leftmost top header and the topmost left header,
- %% so we fake it with an empty row and column.
- \newcommand{\topline}{\cline{3-4}}
- \newcommand{\rowsep}{\cline{1-1}\cline{3-4}}
- \newcommand{\capsep}{
-  \topline
-  \multicolumn{4}{c}{}\\[-0.8\normalbaselineskip]
-  \rowsep
- }
- \newcommand{\bottomline}{\rowsep}
- \newcommand{\hdstyle}[1]{\textbf{##1}}
- \newcommand{\rowhdr}[1]{\hdstyle{##1}&}
- \newcommand{\colhdr}[1]{\multicolumn{1}{|>{\centering}m{#6}|}{\hdstyle{##1}}}
- %% FIXME: figure out a way to reuse floattable here
- \begin{table}[htbp]
- \caption{\label{#2}#1}
- \begin{center}
- \begin{tabular}{|>{\centering}m{#5}|@{}p{0.2\normalbaselineskip}@{}|m{#6}|m{#7}|}
- %% table header
+ \newcommand{\rowhdr}[1]{\textbf{##1}}
+ \begin{floattable}{#1}{#2}{p{#5}|p{#6}|p{#7}}
  \topline
- \multicolumn{1}{c}{}&&\colhdr{#3}&\colhdr{#4}\\
- \capsep
+  & \chdr{#3} & \rhdr{#4} \\ \rowsep
 }
 {
- \bottomline
- \end{tabular}
- \end{center}
- \end{table}
+ \end{floattable}
 }
 
 \newenvironment{lib2dtab2}[4]{
-- 
2.7.4


From 7e1ce05251fc7375beb1462344b3277a47c7e3e7 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Mon, 23 Jan 2017 06:58:26 +0100
Subject: [PATCH 07/18] Reduce excessive indentation of comments. Helps layout
 on smaller (e.g. half-screen) window sizes.

---
 source/basic.tex       | 30 +++++++++++++++---------------
 source/expressions.tex | 20 ++++++++++----------
 source/special.tex     | 16 ++++++++--------
 source/templates.tex   | 16 ++++++++--------
 4 files changed, 41 insertions(+), 41 deletions(-)

diff --git a/source/basic.tex b/source/basic.tex
index 7ccaf7e..5d630f8 100644
--- a/source/basic.tex
+++ b/source/basic.tex
@@ -228,7 +228,7 @@ or destructor\iref{class.dtor} member functions.
 #include <string>
 
 struct C {
-  std::string s;                // \tcode{std::string} is the standard library class\iref{strings}
+  std::string s;    // \tcode{std::string} is the standard library class\iref{strings}
 };
 
 int main() {
@@ -1573,8 +1573,8 @@ namespace N {
 
 void g() {
   N::S s;
-  f(s);             // OK: calls \tcode{N::f}
-  (f)(s);           // error: \tcode{N::f} not considered; parentheses prevent argument-dependent lookup
+  f(s);     // OK: calls \tcode{N::f}
+  (f)(s);   // error: \tcode{N::f} not considered; parentheses prevent argument-dependent lookup
 }
 \end{codeblock}
 \end{example}
@@ -1941,23 +1941,23 @@ namespace AB {
 
 void h()
 {
-  AB::g();          // \tcode{g} is declared directly in \tcode{AB}, therefore \tcode{S} is $\{ \tcode{AB::g()} \}$ and \tcode{AB::g()} is chosen
+  AB::g();      // \tcode{g} is declared directly in \tcode{AB}, therefore \tcode{S} is $\{ \tcode{AB::g()} \}$ and \tcode{AB::g()} is chosen
 
-  AB::f(1);         // \tcode{f} is not declared directly in \tcode{AB} so the rules are applied recursively to \tcode{A} and \tcode{B};
-                    // namespace \tcode{Y} is not searched and \tcode{Y::f(float)} is not considered;
-                    // \tcode{S} is $\{ \tcode{A::f(int)}, \tcode{B::f(char)} \}$ and overload resolution chooses \tcode{A::f(int)}
+  AB::f(1);     // \tcode{f} is not declared directly in \tcode{AB} so the rules are applied recursively to \tcode{A} and \tcode{B};
+                // namespace \tcode{Y} is not searched and \tcode{Y::f(float)} is not considered;
+                // \tcode{S} is $\{ \tcode{A::f(int)}, \tcode{B::f(char)} \}$ and overload resolution chooses \tcode{A::f(int)}
 
-  AB::f('c');       // as above but resolution chooses \tcode{B::f(char)}
+  AB::f('c');   // as above but resolution chooses \tcode{B::f(char)}
 
-  AB::x++;          // \tcode{x} is not declared directly in \tcode{AB}, and is not declared in \tcode{A} or \tcode{B}, so the rules
-                    // are applied recursively to \tcode{Y} and \tcode{Z}, \tcode{S} is $\{ \}$ so the program is ill-formed
+  AB::x++;      // \tcode{x} is not declared directly in \tcode{AB}, and is not declared in \tcode{A} or \tcode{B}, so the rules
+                // are applied recursively to \tcode{Y} and \tcode{Z}, \tcode{S} is $\{ \}$ so the program is ill-formed
 
-  AB::i++;          // \tcode{i} is not declared directly in \tcode{AB} so the rules are applied recursively to \tcode{A} and \tcode{B},
-                    // \tcode{S} is $\{ \tcode{A::i}, \tcode{B::i} \}$ so the use is ambiguous and the program is ill-formed
+  AB::i++;      // \tcode{i} is not declared directly in \tcode{AB} so the rules are applied recursively to \tcode{A} and \tcode{B},
+                // \tcode{S} is $\{ \tcode{A::i}, \tcode{B::i} \}$ so the use is ambiguous and the program is ill-formed
 
-  AB::h(16.8);      // \tcode{h} is not declared directly in \tcode{AB} and not declared directly in \tcode{A} or \tcode{B} so the rules
-                    // are applied recursively to \tcode{Y} and \tcode{Z}, \tcode{S} is $\{ \tcode{Y::h(int)}, \tcode{Z::h(double)} \}$ and
-                    // overload resolution chooses \tcode{Z::h(double)}
+  AB::h(16.8);  // \tcode{h} is not declared directly in \tcode{AB} and not declared directly in \tcode{A} or \tcode{B} so the rules
+                // are applied recursively to \tcode{Y} and \tcode{Z}, \tcode{S} is $\{ \tcode{Y::h(int)}, \tcode{Z::h(double)} \}$ and
+                // overload resolution chooses \tcode{Z::h(double)}
 }
 \end{codeblock}
 \end{example}
diff --git a/source/expressions.tex b/source/expressions.tex
index 9ed3f5d..5043851 100644
--- a/source/expressions.tex
+++ b/source/expressions.tex
@@ -1453,8 +1453,8 @@ void f1(int i) {
   auto m1 = [=]{
     int const M = 30;
     auto m2 = [i]{
-      int x[N][M];              // OK: \tcode{N} and \tcode{M} are not odr-used
-      x[0][0] = i;              // OK: \tcode{i} is explicitly captured by \tcode{m2} and implicitly captured by \tcode{m1}
+      int x[N][M];          // OK: \tcode{N} and \tcode{M} are not odr-used
+      x[0][0] = i;          // OK: \tcode{i} is explicitly captured by \tcode{m2} and implicitly captured by \tcode{m1}
     };
   };
   struct s1 {
@@ -1463,12 +1463,12 @@ void f1(int i) {
       int m = n*n;
       int j = 40;
       auto m3 = [this,m] {
-        auto m4 = [&,j] {       // error: \tcode{j} not odr-usable due to intervening lambda \tcode{m3}
-          int x = n;            // error: \tcode{n} is odr-used but not odr-usable due to intervening lambda \tcode{m3}
-          x += m;               // OK: \tcode{m} implicitly captured by \tcode{m4} and explicitly captured by \tcode{m3}
-          x += i;               // error: \tcode{i} is odr-used but not odr-usable
-                                // due to intervening function and class scopes
-          x += f;               // OK: \tcode{this} captured implicitly by \tcode{m4} and explicitly by \tcode{m3}
+        auto m4 = [&,j] {   // error: \tcode{j} not odr-usable due to intervening lambda \tcode{m3}
+          int x = n;        // error: \tcode{n} is odr-used but not odr-usable due to intervening lambda \tcode{m3}
+          x += m;           // OK: \tcode{m} implicitly captured by \tcode{m4} and explicitly captured by \tcode{m3}
+          x += i;           // error: \tcode{i} is odr-used but not odr-usable
+                            // due to intervening function and class scopes
+          x += f;           // OK: \tcode{this} captured implicitly by \tcode{m4} and explicitly by \tcode{m3}
         };
       };
     }
@@ -1480,13 +1480,13 @@ struct s2 {
   auto f() {
     return [this] {
       return [*this] {
-          return ohseven;       // OK
+          return ohseven;   // OK
       }
     }();
   }
   auto g() {
     return [] {
-      return [*this] { };       // error: \tcode{*this} not captured by outer \grammarterm{lambda-expression}
+      return [*this] { };   // error: \tcode{*this} not captured by outer \grammarterm{lambda-expression}
     }();
   }
 };
diff --git a/source/special.tex b/source/special.tex
index 5269df6..1fd38e8 100644
--- a/source/special.tex
+++ b/source/special.tex
@@ -2199,9 +2199,9 @@ struct D2 : V1, V2 {
   using V2::V2;
 };
 
-D1 d1(0);           // ill-formed: ambiguous
-D2 d2(0);           // OK: initializes virtual \tcode{B} base class, which initializes the \tcode{A} base class
-                    // then initializes the \tcode{V1} and \tcode{V2} base classes as if by a defaulted default constructor
+D1 d1(0);       // ill-formed: ambiguous
+D2 d2(0);       // OK: initializes virtual \tcode{B} base class, which initializes the \tcode{A} base class
+                // then initializes the \tcode{V1} and \tcode{V2} base classes as if by a defaulted default constructor
 
 struct M { M(); M(int); };
 struct N : M { using M::M; };
@@ -2428,11 +2428,11 @@ struct D : A, B {
 };
 
 B::B(V* v, A* a) {
-  typeid(*this);                // \tcode{type_info} for \tcode{B}
-  typeid(*v);                   // well-defined: \tcode{*v} has type \tcode{V}, a base of \tcode{B} yields \tcode{type_info} for \tcode{B}
-  typeid(*a);                   // undefined behavior: type \tcode{A} not a base of \tcode{B}
-  dynamic_cast<B*>(v);          // well-defined: \tcode{v} of type \tcode{V*}, \tcode{V} base of \tcode{B} results in \tcode{B*}
-  dynamic_cast<B*>(a);          // undefined behavior, \tcode{a} has type \tcode{A*}, \tcode{A} not a base of \tcode{B}
+  typeid(*this);        // \tcode{type_info} for \tcode{B}
+  typeid(*v);           // well-defined: \tcode{*v} has type \tcode{V}, a base of \tcode{B} yields \tcode{type_info} for \tcode{B}
+  typeid(*a);           // undefined behavior: type \tcode{A} not a base of \tcode{B}
+  dynamic_cast<B*>(v);  // well-defined: \tcode{v} of type \tcode{V*}, \tcode{V} base of \tcode{B} results in \tcode{B*}
+  dynamic_cast<B*>(a);  // undefined behavior, \tcode{a} has type \tcode{A*}, \tcode{A} not a base of \tcode{B}
 }
 \end{codeblock}
 \end{example}
diff --git a/source/templates.tex b/source/templates.tex
index 983ee8d..11c7f15 100644
--- a/source/templates.tex
+++ b/source/templates.tex
@@ -1464,11 +1464,11 @@ template <int N> struct C;
 template <class T1, int N> struct D;
 template <class T1, class T2, int N = 17> struct E;
 
-eval<A<int>> eA;                // OK: matches partial specialization of \tcode{eval}
-eval<B<int, float>> eB;         // OK: matches partial specialization of \tcode{eval}
-eval<C<17>> eC;                 // error: \tcode{C} does not match \tcode{TT} in partial specialization
-eval<D<int, 17>> eD;            // error: \tcode{D} does not match \tcode{TT} in partial specialization
-eval<E<int, float>> eE;         // error: \tcode{E} does not match \tcode{TT} in partial specialization
+eval<A<int>> eA;            // OK: matches partial specialization of \tcode{eval}
+eval<B<int, float>> eB;     // OK: matches partial specialization of \tcode{eval}
+eval<C<17>> eC;             // error: \tcode{C} does not match \tcode{TT} in partial specialization
+eval<D<int, 17>> eD;        // error: \tcode{D} does not match \tcode{TT} in partial specialization
+eval<E<int, float>> eE;     // error: \tcode{E} does not match \tcode{TT} in partial specialization
 \end{codeblock}
 \end{example}
 \begin{example}
@@ -5015,9 +5015,9 @@ struct C : A, T {
   int g() { return m; }         // finds \tcode{A::m} in the template definition context
 };
 
-template int C<B>::f();         // error: finds both \tcode{A::m} and \tcode{B::m}
-template int C<B>::g();         // OK: transformation to class member access syntax
-                                // does not occur in the template definition context; see~\ref{class.mfct.non-static}
+template int C<B>::f();     // error: finds both \tcode{A::m} and \tcode{B::m}
+template int C<B>::g();     // OK: transformation to class member access syntax
+                            // does not occur in the template definition context; see~\ref{class.mfct.non-static}
 \end{codeblock}
 \end{example}
 
-- 
2.7.4


From b725f9140e4bbcd0b066587b0425b304449d0d36 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sun, 29 Jan 2017 05:44:06 +0100
Subject: [PATCH 08/18] Where appropriate, replace \term with \grammarterm or
 math.

---
 source/expressions.tex | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/source/expressions.tex b/source/expressions.tex
index 5043851..fcf8c1d 100644
--- a/source/expressions.tex
+++ b/source/expressions.tex
@@ -3633,8 +3633,8 @@ applying \tcode{sizeof} to the subobject, due to virtual base classes
 and less strict padding requirements on potentially-overlapping subobjects.}
 \indextext{array!\idxcode{sizeof}}%
 When applied to an array, the result is the total number of bytes in the
-array. This implies that the size of an array of \term{n} elements is
-\term{n} times the size of an element.
+array. This implies that the size of an array of $n$ elements is
+$n$ times the size of an element.
 
 \pnum
 The \tcode{sizeof} operator can be applied to a pointer to a function,
-- 
2.7.4


From a09875fd0fdfd96fa457882f9bedcb329b02f524 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Mon, 20 Feb 2017 16:41:40 +0100
Subject: [PATCH 09/18] Annotate and index 'move/copy constructor' as defined
 terms.

Necessary to nicely linkify opening sentence in [special]/1.
---
 source/special.tex | 5 ++---
 1 file changed, 2 insertions(+), 3 deletions(-)

diff --git a/source/special.tex b/source/special.tex
index 1fd38e8..5e34def 100644
--- a/source/special.tex
+++ b/source/special.tex
@@ -2474,8 +2474,7 @@ A non-template constructor for class
 \tcode{X}
 is
 a
-copy
-constructor if its first parameter is of type
+\defnx{copy constructor}{constructor!copy} if its first parameter is of type
 \tcode{X\&},
 \tcode{const X\&},
 \tcode{volatile X\&}
@@ -2501,7 +2500,7 @@ X c = b;            // calls \tcode{X(const X\&, int);}
 \end{example}
 
 \pnum
-A non-template constructor for class \tcode{X} is a move constructor if its
+A non-template constructor for class \tcode{X} is a \defnx{move constructor}{constructor!move} if its
 first parameter is of type \tcode{X\&\&}, \tcode{const X\&\&},
 \tcode{volatile X\&\&}, or \tcode{const volatile X\&\&}, and either there are
 no other parameters or else all other parameters have default
-- 
2.7.4


From 3491644be38eec8a56d8bb11a6347e5ef33980aa Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Wed, 1 Feb 2017 03:24:29 +0100
Subject: [PATCH 10/18] Add and use new link macros.

---
 source/access.tex        |  20 +-
 source/algorithms.tex    |  78 +++----
 source/atomics.tex       |  10 +-
 source/basic.tex         | 326 ++++++++++++++--------------
 source/classes.tex       | 186 ++++++++--------
 source/compatibility.tex |  54 ++---
 source/containers.tex    |  88 ++++----
 source/conversions.tex   |  46 ++--
 source/declarations.tex  | 193 +++++++++--------
 source/declarators.tex   | 189 ++++++++---------
 source/derived.tex       |  33 +--
 source/diagnostics.tex   |  12 +-
 source/exceptions.tex    |  94 +++++----
 source/expressions.tex   | 539 ++++++++++++++++++++++++-----------------------
 source/future.tex        |  20 +-
 source/grammar.tex       |   8 +-
 source/intro.tex         |  25 +--
 source/iostreams.tex     | 164 +++++++-------
 source/iterators.tex     |  25 +--
 source/lex.tex           |  83 ++++----
 source/lib-intro.tex     | 151 ++++++-------
 source/locales.tex       |  20 +-
 source/macros.tex        |  44 ++++
 source/numerics.tex      | 103 ++++-----
 source/overloading.tex   | 132 ++++++------
 source/preprocessor.tex  |  22 +-
 source/regex.tex         |  20 +-
 source/special.tex       | 220 +++++++++----------
 source/statements.tex    |  76 +++----
 source/strings.tex       |  55 ++---
 source/support.tex       | 164 +++++++-------
 source/templates.tex     | 242 ++++++++++-----------
 source/threads.tex       | 117 +++++-----
 source/utilities.tex     | 321 +++++++++++++++-------------
 34 files changed, 2003 insertions(+), 1877 deletions(-)

diff --git a/source/access.tex b/source/access.tex
index ab35bc7..1f40da2 100644
--- a/source/access.tex
+++ b/source/access.tex
@@ -64,7 +64,7 @@ Access control is applied uniformly to all names, whether the names are
 referred to from declarations or expressions.
 \begin{note}
 Access control applies to names nominated by
-friend declarations\iref{class.friend} and
+\link{friend declarations}{\ref{class.friend}} and
 \grammarterm{using-declaration}{s}\iref{namespace.udecl}.
 \end{note}
 In the case of overloaded function names, access control is applied to
@@ -162,7 +162,7 @@ must be deferred until the entire \grammarterm{base-specifier-list} has been see
 \pnum
 \indextext{argument!access checking and default}%
 \indextext{access control!default argument}%
-The names in a default argument\iref{dcl.fct.default} are
+The names in a \link{default argument}{\ref{dcl.fct.default}} are
 bound at the point of declaration, and access is checked at that
 point rather than at any points of use of the default argument.
 Access checking for default arguments in function templates and in
@@ -281,7 +281,7 @@ class C : public B {
 \indextext{base class!\idxcode{public}}
 
 \pnum
-If a class is declared to be a base class\iref{class.derived} for another class using the
+If a class is declared to be a \link{base class}{\ref{class.derived}} for another class using the
 \tcode{public}
 access specifier, the
 public members of the base class are accessible as
@@ -352,7 +352,7 @@ and
 \begin{note}
 A member of a private base class might be inaccessible as an inherited
 member name, but accessible directly.
-Because of the rules on pointer conversions\iref{conv.ptr} and explicit casts\iref{expr.cast}, a conversion from a pointer to a derived class to a pointer
+Because of the rules on \link{pointer conversions}{\ref{conv.ptr}} and \link{explicit casts}{\ref{expr.cast}}, a conversion from a pointer to a derived class to a pointer
 to an inaccessible base class might be ill-formed if an implicit conversion
 is used, but well-formed if an explicit cast is used.
 For example,
@@ -474,7 +474,7 @@ up and found.
 \begin{note}
 This class can be explicit, e.g., when a
 \grammarterm{qualified-id}
-is used, or implicit, e.g., when a class member access operator\iref{expr.ref} is used (including cases where an implicit
+is used, or implicit, e.g., when a \link{class member access}{\ref{expr.ref}} operator is used (including cases where an implicit
 ``\tcode{this->}''
 is
 added).
@@ -737,7 +737,7 @@ class M {
 \end{example}
 
 \pnum
-Such a function is implicitly an inline function\iref{dcl.inline}.
+Such a function is implicitly an \deflink{inline function}{\ref{dcl.inline}}.
 A friend
 function defined in a class is in the (lexical) scope of the class in which it is defined.
 A friend function defined outside the class is not\iref{basic.lookup.unqual}.
@@ -790,7 +790,7 @@ class D : public B  {
 \pnum
 \indextext{local class!friend}%
 \indextext{friend!local class and}%
-If a friend declaration appears in a local class\iref{class.local} and the
+If a friend declaration appears in a \deflink{local class}{\ref{class.local}} and the
 name specified is an unqualified name, a prior declaration is looked
 up without considering scopes that are outside the innermost enclosing
 non-class scope.
@@ -837,8 +837,8 @@ As described earlier, access to a protected member is granted because the
 reference occurs in a friend or member of some class \tcode{C}. If the access is
 to form a pointer to member\iref{expr.unary.op}, the
 \grammarterm{nested-name-specifier} shall denote \tcode{C} or a class derived from
-\tcode{C}. All other accesses involve a (possibly implicit) object
-expression\iref{expr.ref}. In this case, the class of the object expression shall be
+\tcode{C}. All other accesses involve a (possibly implicit)
+\deflink{object expression}{\ref{expr.ref}}. In this case, the class of the object expression shall be
 \tcode{C} or a class derived from \tcode{C}.
 \begin{example}
 
@@ -959,7 +959,7 @@ access is allowed.
 \pnum
 A nested class is a member and as such has the same access rights as any other member.
 The members of an enclosing class have no special access to members of a nested
-class; the usual access rules\iref{class.access} shall be obeyed.
+class; the usual \link{access rules}{\ref{class.access}} shall be obeyed.
 \begin{example}
 \begin{codeblock}
 class E {
diff --git a/source/algorithms.tex b/source/algorithms.tex
index a9f0c66..d4c7dff 100644
--- a/source/algorithms.tex
+++ b/source/algorithms.tex
@@ -5,7 +5,7 @@
 
 \pnum
 This Clause describes components that \Cpp{} programs may use to perform
-algorithmic operations on containers\iref{containers} and other sequences.
+algorithmic operations on \link{containers}{\ref{containers}} and other sequences.
 
 \pnum
 The following subclauses describe components for
@@ -1126,7 +1126,7 @@ If an algorithm's template parameter is named
 or
 \tcode{Input\-Iterator2},
 the template argument shall satisfy the
-requirements of an input iterator\iref{input.iterators}.
+requirements of an \link{input iterator}{\ref{input.iterators}}.
 \item
 If an algorithm's template parameter is named
 \tcode{OutputIterator},
@@ -1134,7 +1134,7 @@ If an algorithm's template parameter is named
 or
 \tcode{Output\-Iterator2},
 the template argument shall satisfy the requirements
-of an output iterator\iref{output.iterators}.
+of an \link{output iterator}{\ref{output.iterators}}.
 \item
 If an algorithm's template parameter is named
 \tcode{ForwardIterator},
@@ -1142,7 +1142,7 @@ If an algorithm's template parameter is named
 or
 \tcode{Forward\-Iterator2},
 the template argument shall satisfy the requirements
-of a forward iterator\iref{forward.iterators}.
+of a \link{forward iterator}{\ref{forward.iterators}}.
 \item
 If an algorithm's template parameter is named
 \tcode{BidirectionalIterator},
@@ -1150,7 +1150,7 @@ If an algorithm's template parameter is named
 or
 \tcode{BidirectionalIterator2},
 the template argument shall satisfy the requirements
-of a bidirectional iterator\iref{bidirectional.iterators}.
+of a \link{bidirectional iterator}{\ref{bidirectional.iterators}}.
 \item
 If an algorithm's template parameter is named
 \tcode{RandomAccessIterator},
@@ -1158,7 +1158,7 @@ If an algorithm's template parameter is named
 or
 \tcode{RandomAccessIterator2},
 the template argument shall satisfy the requirements
-of a random-access iterator\iref{random.access.iterators}.
+of a \link{random-access iterator}{\ref{random.access.iterators}}.
 \end{itemize}
 
 \pnum
@@ -1168,7 +1168,7 @@ element specifies that a value pointed to by any iterator passed
 as an argument is modified, then that algorithm has an additional
 type requirement:
 The type of that argument shall satisfy the requirements
-of a mutable iterator\iref{iterator.requirements}.
+of a \link{mutable iterator}{\ref{iterator.requirements}}.
 \begin{note}
 This requirement does not affect arguments that are named
 \tcode{OutputIterator},
@@ -1192,7 +1192,7 @@ suffix \tcode{_if} (which follows the suffix \tcode{_copy}).
 \pnum
 The
 \tcode{Predicate}
-parameter is used whenever an algorithm expects a function object\iref{function.objects}
+parameter is used whenever an algorithm expects a \deflink{function object}{\ref{function.objects}}
 that, when applied to the result
 of dereferencing the corresponding iterator, returns a value testable as
 \tcode{true}.
@@ -1241,7 +1241,7 @@ apply any non-constant function through the dereferenced iterators.
 Unless otherwise specified, algorithms that take function objects as arguments
 are permitted to copy those function objects freely. Programmers for whom object
 identity is important should consider using a wrapper class that points to a
-noncopied implementation object such as \tcode{reference_wrapper<T>}\iref{refwrap}, or some equivalent solution.
+noncopied implementation object such as \link{\tcode{reference_wrapper<T>}}{\ref{refwrap}}, or some equivalent solution.
 \end{note}
 
 \pnum
@@ -1342,7 +1342,7 @@ identity of the provided objects.
 
 \pnum
 Parallel algorithms have template parameters
-named \tcode{ExecutionPolicy}\iref{execpol}
+named \link{\tcode{ExecutionPolicy}}{\ref{execpol}}
 which describe the manner in which the execution of these algorithms may be
 parallelized and the manner in which they apply the element access functions.
 
@@ -1386,8 +1386,8 @@ an execution policy object of type \tcode{execution::parallel_policy} are
 permitted to execute in either the invoking thread of execution or in a
 thread of execution implicitly
 created by the library to support parallel algorithm execution.
-If the threads of execution created by \tcode{thread}\iref{thread.thread.class} provide concurrent
-forward progress guarantees\iref{intro.progress}, then a thread of execution
+If the threads of execution created by \link{\tcode{thread}}{\ref{thread.thread.class}} provide
+\deflink{concurrent forward progress guarantees}{\ref{intro.progress}}, then a thread of execution
 implicitly created by the library will provide parallel forward progress guarantees;
 otherwise, the provided forward progress guarantee is
 \impldef{forward progress guarantees for implicit threads of parallel algorithms (if not defined for \tcode{thread})}.
@@ -1556,7 +1556,7 @@ Parallel algorithms shall not participate in overload resolution unless
 
 \rSec2[alg.all_of]{All of}
 
-\indexlibrary{\idxcode{all_of}}%
+\begin{indexed}{\indexlibrary{\idxcode{all_of}}}
 \begin{itemdecl}
 template<class InputIterator, class Predicate>
   constexpr bool all_of(InputIterator first, InputIterator last, Predicate pred);
@@ -1564,6 +1564,7 @@ template<class ExecutionPolicy, class ForwardIterator, class Predicate>
   bool all_of(ExecutionPolicy&& exec, ForwardIterator first, ForwardIterator last,
               Predicate pred);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1577,7 +1578,7 @@ template<class ExecutionPolicy, class ForwardIterator, class Predicate>
 
 \rSec2[alg.any_of]{Any of}
 
-\indexlibrary{\idxcode{any_of}}%
+\begin{indexed}{\indexlibrary{\idxcode{any_of}}}
 \begin{itemdecl}
 template<class InputIterator, class Predicate>
   constexpr bool any_of(InputIterator first, InputIterator last, Predicate pred);
@@ -1585,6 +1586,7 @@ template<class ExecutionPolicy, class ForwardIterator, class Predicate>
   bool any_of(ExecutionPolicy&& exec, ForwardIterator first, ForwardIterator last,
               Predicate pred);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1598,7 +1600,7 @@ if there is no iterator \tcode{i} in the range
 
 \rSec2[alg.none_of]{None of}
 
-\indexlibrary{\idxcode{none_of}}%
+\begin{indexed}{\indexlibrary{\idxcode{none_of}}}
 \begin{itemdecl}
 template<class InputIterator, class Predicate>
   constexpr bool none_of(InputIterator first, InputIterator last, Predicate pred);
@@ -1606,6 +1608,7 @@ template<class ExecutionPolicy, class ForwardIterator, class Predicate>
   bool none_of(ExecutionPolicy&& exec, ForwardIterator first, ForwardIterator last,
                Predicate pred);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1619,11 +1622,12 @@ template<class ExecutionPolicy, class ForwardIterator, class Predicate>
 
 \rSec2[alg.foreach]{For each}
 
-\indexlibrary{\idxcode{for_each}}%
+\begin{indexed}{\indexlibrary{\idxcode{for_each}}}
 \begin{itemdecl}
 template<class InputIterator, class Function>
   constexpr Function for_each(InputIterator first, InputIterator last, Function f);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2490,7 +2494,7 @@ for which \tcode{pred(*i)} is \tcode{true}.
 \complexity Exactly \tcode{last - first} applications of the corresponding predicate.
 
 \pnum
-\remarks Stable\iref{algorithm.stable}.
+\remarks \link{Stable}{\ref{algorithm.stable}}.
 \end{itemdescr}
 
 \indexlibrary{\idxcode{copy_backward}}%
@@ -2665,7 +2669,7 @@ The two ranges \range{first1}{last1}
 and
 \range{first2}{first2 + (last1 - first1)}
 shall not overlap.
-\tcode{*(first1 + n)} shall be swappable with\iref{swappable.requirements}
+\tcode{*(first1 + n)} shall be \deflink{swappable with}{\ref{swappable.requirements}}
 \tcode{*(first2 + n)}.
 
 \pnum
@@ -2696,7 +2700,7 @@ template<class ForwardIterator1, class ForwardIterator2>
 \pnum
 \requires
 \tcode{a} and \tcode{b} shall be dereferenceable. \tcode{*a} shall be
-swappable with\iref{swappable.requirements} \tcode{*b}.
+\deflink{swappable with}{\ref{swappable.requirements}} \tcode{*b}.
 
 \pnum
 \effects
@@ -2859,7 +2863,7 @@ The results of the expressions
 \tcode{*first}
 and
 \tcode{new_value}
-shall be writable\iref{iterator.requirements.general} to the
+shall be \deflink{writable}{\ref{iterator.requirements.general}} to the
 \tcode{result}
 output iterator.
 The ranges
@@ -2921,7 +2925,7 @@ template<class ExecutionPolicy, class ForwardIterator, class Size, class T>
 \requires
 The expression
 \tcode{value}
-shall be writable\iref{iterator.requirements.general} to the output iterator. The type
+shall be \deflink{writable}{\ref{iterator.requirements.general}} to the output iterator. The type
 \tcode{Size}
 shall be convertible to an integral type~(\ref{conv.integral}, \ref{class.conv}).
 
@@ -3034,7 +3038,7 @@ for which the following corresponding conditions hold:
 The end of the resulting range.
 
 \pnum
-\remarks Stable\iref{algorithm.stable}.
+\remarks \link{Stable}{\ref{algorithm.stable}}.
 
 \pnum
 \complexity
@@ -3111,7 +3115,7 @@ Exactly
 applications of the corresponding predicate.
 
 \pnum
-\remarks Stable\iref{algorithm.stable}.
+\remarks \link{Stable}{\ref{algorithm.stable}}.
 \end{itemdescr}
 
 \rSec2[alg.unique]{Unique}
@@ -3435,14 +3439,14 @@ template<class PopulationIterator, class SampleIterator,
 \requires
 \begin{itemize}
 \item
-\tcode{PopulationIterator} shall satisfy the requirements of an input iterator\iref{input.iterators}.
+\tcode{PopulationIterator} shall satisfy the requirements of an \link{input iterator}{\ref{input.iterators}}.
 \item
-\tcode{SampleIterator} shall satisfy the requirements of an output iterator\iref{output.iterators}.
+\tcode{SampleIterator} shall satisfy the requirements of an \link{output iterator}{\ref{output.iterators}}.
 \item
-\tcode{SampleIterator} shall satisfy the additional requirements of a random access iterator\iref{random.access.iterators}
-unless \tcode{PopulationIterator} satisfies the additional requirements of a forward iterator\iref{forward.iterators}.
+\tcode{SampleIterator} shall satisfy the additional requirements of a \link{random access iterator}{\ref{random.access.iterators}}
+unless \tcode{PopulationIterator} satisfies the additional requirements of a \link{forward iterator}{\ref{forward.iterators}}.
 \item
-\tcode{PopulationIterator}'s value type shall be writable\iref{iterator.requirements.general} to \tcode{out}.
+\tcode{PopulationIterator}'s value type shall be \deflink{writable}{\ref{iterator.requirements.general}} to \tcode{out}.
 \item
 \tcode{Distance} shall be an integer type.
 \item
@@ -3536,10 +3540,10 @@ and one that uses an
 
 \pnum
 \tcode{Compare}
-is a function object
-type\iref{function.objects}. The return value of the function call operation applied to
-an object of type \tcode{Compare}, when contextually converted to
-\tcode{bool}\iref{conv},
+is a \deflinkx{function object type}{function object!type}{\ref{function.objects}}.
+The return value of the function call operation applied to
+an object of type \tcode{Compare}, when \deflinkx{contextually converted to
+\tcode{bool}}{conversion!contextual to bool}{\ref{conv}},
 yields \tcode{true} if the first argument of the call
 is less than the second, and
 \tcode{false}
@@ -3728,7 +3732,7 @@ comparisons, where
 $N = \tcode{last - first}$, but only $N \log N$ comparisons if there is enough extra memory.
 
 \pnum
-\remarks Stable\iref{algorithm.stable}.
+\remarks \link{Stable}{\ref{algorithm.stable}}.
 \end{itemdescr}
 
 \rSec3[partial.sort]{\tcode{partial_sort}}
@@ -4482,7 +4486,7 @@ is \tcode{result + (last1 - first1) + (last2 - first2)}, such that the resulting
 \end{itemize}
 
 \pnum
-\remarks Stable\iref{algorithm.stable}.
+\remarks \link{Stable}{\ref{algorithm.stable}}.
 \end{itemdescr}
 
 \indexlibrary{\idxcode{inplace_merge}}%
@@ -4552,7 +4556,7 @@ memory is available,  \bigoh{N \log N} comparisons.
 
 
 \pnum
-\remarks Stable\iref{algorithm.stable}.
+\remarks \link{Stable}{\ref{algorithm.stable}}.
 \end{itemdescr}
 
 \rSec2[alg.set.operations]{Set operations on sorted structures}
@@ -4560,7 +4564,7 @@ memory is available,  \bigoh{N \log N} comparisons.
 \pnum
 This subclause defines all the basic set operations on sorted structures.
 They also work with
-\tcode{multiset}s\iref{multiset}
+\link{\tcode{multiset}s}{\ref{multiset}}
 containing multiple copies of equivalent elements.
 The semantics of the set operations are generalized to
 \tcode{multiset}s
@@ -5712,7 +5716,7 @@ swaps.
 \pnum
 \indexhdr{cstdlib}%
 \begin{note}
-The header \tcode{<cstdlib>}\iref{cstdlib.syn}
+The header \link{\tcode{<cstdlib>}}{\ref{cstdlib.syn}}
 declares the functions described in this subclause.
 \end{note}
 
diff --git a/source/atomics.tex b/source/atomics.tex
index 67bfb5b..bd10fe7 100644
--- a/source/atomics.tex
+++ b/source/atomics.tex
@@ -491,16 +491,18 @@ the read-modify-write operation.
 Implementations should make atomic stores visible to atomic loads within a reasonable
 amount of time.
 
-\indexlibrary{\idxcode{kill_dependency}}%
+\begin{indexed}{\indexlibrary{\idxcode{kill_dependency}}}
 \begin{itemdecl}
 template<class T>
   T kill_dependency(T y) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
-\effects The argument does not carry a dependency to the return
-value\iref{intro.multithread}.
+\effects The argument does not
+\deflinkx{carry a dependency}{carries a dependency}{\ref{intro.multithread}}
+to the return value.
 
 \pnum
 \returns \tcode{y}.
@@ -542,7 +544,7 @@ lock-free. A value of 1 indicates that the types are sometimes lock-free. A
 value of 2 indicates that the types are always lock-free.
 
 \pnum
-The function \tcode{atomic_is_lock_free}\iref{atomics.types.operations}
+The function \linkx{\tcode{atomic_is_lock_free}}{\idxcode{atomic_is_lock_free}}{\ref{atomics.types.operations}}
 indicates whether the object is lock-free. In any given program execution, the
 result of the lock-free query shall be consistent for all pointers of the same
 type.
diff --git a/source/basic.tex b/source/basic.tex
index 5d630f8..35d764f 100644
--- a/source/basic.tex
+++ b/source/basic.tex
@@ -44,7 +44,7 @@ label~(\ref{stmt.goto}, \ref{stmt.label}).
 \pnum
 Every name that denotes an entity is introduced by a
 \defn{declaration}. Every name that denotes a label is introduced
-either by a \tcode{goto} statement\iref{stmt.goto} or a
+either by a \link{\tcode{goto} statement}{\ref{stmt.goto}} or a
 \grammarterm{labeled-statement}\iref{stmt.label}.
 
 \pnum
@@ -77,7 +77,7 @@ the same operator, or
 with the same type, or
 \item they are \grammarterm{template-id}{s} that refer to the same class,
 function, or variable\iref{temp.type}, or
-\item they are the names of literal operators\iref{over.literal} formed with
+\item they are the names of \link{literal operators}{\ref{over.literal}} formed with
 the same literal suffix identifier.
 \end{itemize}
 
@@ -86,7 +86,7 @@ the same literal suffix identifier.
 \indextext{linkage}%
 A name used in more than one translation unit can potentially
 refer to the same entity in these translation units depending on the
-linkage\iref{basic.link} of the name specified in each
+\link{linkage}{\ref{basic.link}} of the name specified in each
 translation unit.
 
 \rSec1[basic.def]{Declarations and definitions}
@@ -95,17 +95,17 @@ translation unit.
 \indextext{declaration!definition versus}%
 \indextext{declaration}%
 \indextext{declaration!name}%
-A declaration\iref{dcl.dcl} may introduce
+A \link{declaration}{\ref{dcl.dcl}} may introduce
 one or more names into a translation
 unit or redeclare names introduced by previous declarations.
 If so, the
 declaration specifies the interpretation and attributes of these names.
 A declaration may also have effects including:
 \begin{itemize}
-\item a static assertion\iref{dcl.dcl},
-\item controlling template instantiation\iref{temp.explicit},
+\item a \linkx{static assertion}{\idxgram{static_assert}}{\ref{dcl.dcl}},
+\item controlling \link{template instantiation}{\ref{temp.explicit}},
 \item guiding template argument deduction for constructors\iref{temp.deduct.guide},
-\item use of attributes\iref{dcl.attr}, and
+\item use of \link{attributes}{\ref{dcl.attr}}, and
 \item nothing (in the case of an \grammarterm{empty-declaration}).
 \end{itemize}
 
@@ -122,7 +122,7 @@ without specifying the function's body\iref{dcl.fct.def},
 it contains
 the
 \indextext{declaration!\idxcode{extern}}%
-\tcode{extern} specifier\iref{dcl.stc} or a
+\linkx{\tcode{extern}}{\idxcode{extern}}{\ref{dcl.stc}} specifier or a
 \grammarterm{linkage-specification}\footnote{Appearing inside the brace-enclosed
 \grammarterm{declaration-seq} in a \grammarterm{linkage-specification} does
 not affect whether a declaration is a definition.}\iref{dcl.link}
@@ -157,7 +157,7 @@ declarator that is not the \grammarterm{declarator} of a
 \item
 it is a
 \indextext{declaration!\idxcode{typedef}}%
-\tcode{typedef} declaration\iref{dcl.typedef},
+\link{\tcode{typedef}}{\ref{dcl.typedef}} declaration,
 \item it is
 an \grammarterm{alias-declaration}\iref{dcl.typedef},
 \item it is
@@ -176,9 +176,9 @@ it is an
 \item it is
 a \grammarterm{using-directive}\iref{namespace.udir},
 \item it is
-an explicit instantiation declaration\iref{temp.explicit}, or
+an \link{explicit instantiation}{\ref{temp.explicit}} declaration, or
 \item it is
-an explicit specialization\iref{temp.expl.spec} whose
+an \link{explicit specialization}{\ref{temp.expl.spec}} whose
 \grammarterm{declaration} is not a definition.
 \end{itemize}
 A declaration is said to be a \defn{definition} of each entity that it defines.
@@ -216,12 +216,12 @@ using N::d;                     // declares \tcode{d}
 \begin{note}
 \indextext{implementation-generated}%
 In some circumstances, \Cpp{} implementations implicitly define the
-default constructor\iref{class.ctor},
-copy constructor\iref{class.copy},
-move constructor\iref{class.copy},
-copy assignment operator\iref{class.copy},
-move assignment operator\iref{class.copy},
-or destructor\iref{class.dtor} member functions.
+\deflinkx{default constructor}{constructor!default}{\ref{class.ctor}},
+\deflinkx{copy constructor}{constructor!copy}{\ref{class.copy}},
+\deflinkx{move constructor}{constructor!move}{\ref{class.copy}},
+\deflinkx{copy assignment operator}{assignment operator!copy}{\ref{class.copy}},
+\deflinkx{move assignment operator}{assignment operator!move}{\ref{class.copy}},
+or \link{destructor}{\ref{class.dtor}} member functions.
 \end{note}
 \begin{example} Given
 \begin{codeblock}
@@ -263,7 +263,7 @@ A class name can also be implicitly declared by an
 \pnum
 \indextext{type!incomplete}%
 A program is ill-formed if the definition of any object gives the object
-an incomplete type\iref{basic.types}.
+an \deflinkx{incomplete type}{type!incomplete}{\ref{basic.types}}.
 
 \indextext{object!definition}%
 \indextext{function!definition}%
@@ -279,28 +279,28 @@ variable, function, class type, enumeration type, or template.
 \pnum
 \indextext{expression!potentially evaluated}%
 An expression is \defn{potentially evaluated} unless it is an
-unevaluated operand\iref{expr.prop} or a subexpression thereof.
+\deflink{unevaluated operand}{\ref{expr.prop}} or a subexpression thereof.
 The set of \defn{potential results} of an expression \tcode{e} is
 defined as follows:
 \begin{itemize}
 \item If \tcode{e} is an
 \grammarterm{id-expression}\iref{expr.prim.id}, the set
 contains only \tcode{e}.
-\item If \tcode{e} is a subscripting operation\iref{expr.sub} with
+\item If \tcode{e} is a \link{subscripting operation}{\ref{expr.sub}} with
 an array operand, the set contains the potential results of that operand.
-\item If \tcode{e} is a class member access
-expression\iref{expr.ref}, the set contains the potential results of
+\item If \tcode{e} is a \link{class member access}{\ref{expr.ref}} expression,
+the set contains the potential results of
 the object expression.
-\item If \tcode{e} is a pointer-to-member
-expression\iref{expr.mptr.oper} whose second operand is a constant
+\item If \tcode{e} is a \link{pointer-to-member}{\ref{expr.mptr.oper}}
+expression whose second operand is a constant
 expression, the set contains the potential results of the object
 expression.
 \item If \tcode{e} has the form \tcode{(e1)}, the set contains the
 potential results of \tcode{e1}.
-\item If \tcode{e} is a glvalue conditional
-expression\iref{expr.cond}, the set is the union of the sets of
+\item If \tcode{e} is a glvalue \link{conditional}{\ref{expr.cond}}
+expression, the set is the union of the sets of
 potential results of the second and third operands.
-\item If \tcode{e} is a comma expression\iref{expr.comma}, the set
+\item If \tcode{e} is a \link{comma expression}{\ref{expr.comma}}, the set
 contains the potential results of the right operand.
 \item Otherwise, the set is empty.
 \end{itemize}
@@ -355,8 +355,8 @@ A function is \defn{named by an expression} as follows:
 \pnum
 A variable \tcode{x} whose name appears as a
 potentially-evaluated expression \tcode{ex} is \defn{odr-used} by \tcode{ex} unless
-applying the lvalue-to-rvalue conversion\iref{conv.lval} to \tcode{x} yields
-a constant expression\iref{expr.const} that does not invoke any non-trivial
+applying the \link{lvalue-to-rvalue conversion}{\ref{conv.lval}} to \tcode{x} yields
+a \link{constant expression}{\ref{expr.const}} that does not invoke any non-trivial
 functions
 and, if \tcode{x} is an object, \tcode{ex} is an element of
 the set of potential results of an expression \tcode{e}, where either the lvalue-to-rvalue
@@ -391,8 +391,8 @@ implicitly-defined
 copy-assignment or move-assignment function for another class as specified
 in~\ref{class.copy}.
 A constructor for a class is odr-used as specified
-in~\ref{dcl.init}. A destructor for a class is odr-used if it is potentially
-invoked\iref{class.dtor}.
+in~\ref{dcl.init}. A destructor for a class is odr-used if it is
+\deflink{potentially invoked}{\ref{class.dtor}}.
 
 \pnum
 A local entity\iref{basic}
@@ -436,7 +436,7 @@ void f(int n) {
 \pnum
 Every program shall contain exactly one definition of every non-inline
 function or variable that is odr-used in that program
-outside of a discarded statement\iref{stmt.if}; no diagnostic required.
+outside of a \deflink{discarded statement}{\ref{stmt.if}}; no diagnostic required.
 The definition can appear explicitly in the program, it can be found in
 the standard or a user-defined library, or (when appropriate) it is
 implicitly defined (see~\ref{class.ctor}, \ref{class.dtor} and
@@ -460,9 +460,9 @@ X* x2;                          // use \tcode{X} in pointer formation
 describe in which contexts complete class types are required. A class
 type \tcode{T} must be complete if:
 \begin{itemize}
-\item an object of type \tcode{T} is defined\iref{basic.def}, or
-\item a non-static class data member of type \tcode{T} is
-declared\iref{class.mem}, or
+\item an object of type \tcode{T} is \link{defined}{\ref{basic.def}}, or
+\item a non-static class \deflink{data member}{\ref{class.mem}} of
+type \tcode{T} is declared, or
 \item \tcode{T} is used as the allocated type or array element type in a
 \grammarterm{new-expression}\iref{expr.new}, or
 \item an lvalue-to-rvalue conversion is applied to
@@ -473,36 +473,36 @@ type \tcode{T} (\ref{conv}, \ref{expr.type.conv},
 \ref{expr.dynamic.cast}, \ref{expr.static.cast}, \ref{expr.cast}), or
 \item an expression that is not a null pointer constant, and has type
 other than \cv{}~\tcode{void*}, is converted to the type pointer to \tcode{T}
-or reference to \tcode{T} using a standard conversion\iref{conv},
-a \tcode{dynamic_cast}\iref{expr.dynamic.cast} or
-a \tcode{static_cast}\iref{expr.static.cast}, or
-\item a class member access operator is applied to an expression of type
-\tcode{T}\iref{expr.ref}, or
-\item the \tcode{typeid} operator\iref{expr.typeid} or the
-\tcode{sizeof} operator\iref{expr.sizeof} is applied to an operand of
+or reference to \tcode{T} using a \link{standard conversion}{\ref{conv}},
+a \link{\tcode{dynamic_cast}}{\ref{expr.dynamic.cast}} or
+a \link{\tcode{static_cast}}{\ref{expr.static.cast}}, or
+\item a \link{class member access}{\ref{expr.ref}} operator is applied to an expression of type
+\tcode{T}, or
+\item the \link{\tcode{typeid} operator}{\ref{expr.typeid}} or the
+\link{\tcode{sizeof} operator}{\ref{expr.sizeof}} is applied to an operand of
 type \tcode{T}, or
 \item a function with a return type or argument type of type \tcode{T}
-is defined\iref{basic.def} or called\iref{expr.call}, or
+is defined\iref{basic.def} or \link{called}{\ref{expr.call}}, or
 \item a class with a base class of type \tcode{T} is
 defined\iref{class.derived}, or
-\item an lvalue of type \tcode{T} is assigned to\iref{expr.ass}, or
+\item an lvalue of type \tcode{T} is \link{assigned to}{\ref{expr.ass}}, or
 \item the type \tcode{T} is the subject of an
-\tcode{alignof} expression\iref{expr.alignof}, or
+\link{\tcode{alignof} expression}{\ref{expr.alignof}}, or
 \item an \grammarterm{exception-declaration} has type \tcode{T}, reference to
 \tcode{T}, or pointer to \tcode{T}\iref{except.handle}.
 \end{itemize}
 \end{note}
 
 \pnum
-There can be more than one definition of a class type\iref{class},
-enumeration type\iref{dcl.enum}, inline function
+There can be more than one definition of a \link{class type}{\ref{class}},
+\link{enumeration type}{\ref{dcl.enum}}, inline function
 with external linkage\iref{dcl.inline}, inline variable with external
-linkage\iref{dcl.inline}, class template\iref{temp},
-non-static function template\iref{temp.fct},
+linkage\iref{dcl.inline}, \link{class template}{\ref{temp}},
+non-static \link{function template}{\ref{temp.fct}},
 concept\iref{temp.concept},
-static data member of a class template\iref{temp.static}, member
-function of a class template\iref{temp.mem.func}, or template
-specialization for which some template parameters are not
+\link{static data member of a class template}{\ref{temp.static}},
+\link{member function of a class template}{\ref{temp.mem.func}},
+or template specialization for which some template parameters are not
 specified~(\ref{temp.spec}, \ref{temp.class.spec}) in a program provided
 that each definition appears in a different translation unit, and
 provided the definitions satisfy the following requirements. Given such
@@ -514,14 +514,14 @@ tokens; and
 \item in each definition of \tcode{D}, corresponding names, looked up
 according to~\ref{basic.lookup}, shall refer to an entity defined within
 the definition of \tcode{D}, or shall refer to the same entity, after
-overload resolution\iref{over.match} and after matching of partial
+\link{overload resolution}{\ref{over.match}} and after matching of partial
 template specialization\iref{temp.over}, except that a name can refer to
 \begin{itemize}
 \item
 a non-volatile const object with internal or no linkage if the object
 \begin{itemize}
 \item has the same literal type in all definitions of \tcode{D},
-\item is initialized with a constant expression\iref{expr.const},
+\item is initialized with a \link{constant expression}{\ref{expr.const}},
 \item is not odr-used in any definition of \tcode{D}, and
 \item has the same value in all definitions of \tcode{D},
 \end{itemize}
@@ -551,7 +551,7 @@ requirement applies recursively)\footnote{\ref{dcl.fct.default}
 describes how default argument names are looked up.}; and
 
 \item if \tcode{D} is a class with an implicitly-declared
-constructor\iref{class.ctor}, it is as if the constructor was
+\link{constructor}{\ref{class.ctor}}, it is as if the constructor was
 implicitly defined in every translation unit where it is odr-used, and the
 implicit definition in every translation unit shall call the same
 constructor for a subobject of \tcode{D}.
@@ -653,7 +653,7 @@ declaration of \tcode{j} is the same as its potential scope.
 \pnum
 The names declared by a declaration are introduced into the scope in
 which the declaration occurs, except that the presence of a
-\tcode{friend} specifier\iref{class.friend}, certain uses of the
+\link{\tcode{friend} specifier}{\ref{class.friend}}, certain uses of the
 \grammarterm{elaborated-type-specifier}\iref{dcl.type.elab}, and
 \grammarterm{using-directive}{s}\iref{namespace.udir} alter this general
 behavior.
@@ -669,7 +669,7 @@ name that is not a typedef name and the other declarations shall
 all refer to the same variable, non-static data member, or enumerator,
 or all refer to functions and function templates;
 in this case the class name or enumeration name is
-hidden\iref{basic.scope.hiding}. \begin{note} A namespace name or a
+\link{hidden}{\ref{basic.scope.hiding}}. \begin{note} A namespace name or a
 class template name must be unique in its declarative
 region~(\ref{namespace.alias}, \ref{temp}). \end{note}
 \end{itemize}
@@ -677,7 +677,7 @@ region~(\ref{namespace.alias}, \ref{temp}). \end{note}
 a name is introduced, which is not necessarily the same as the region in
 which the declaration occurs. In particular,
 \grammarterm{elaborated-type-specifier}{s}\iref{dcl.type.elab} and
-friend declarations\iref{class.friend} may introduce a (possibly not
+\link{friend declarations}{\ref{class.friend}} may introduce a (possibly not
 visible) name into an enclosing namespace; these restrictions apply to
 that region. Local extern declarations\iref{basic.link} may introduce
 a name into the declarative region where the declaration appears and
@@ -701,7 +701,7 @@ that are or enclose \placeholder{R} and do not enclose \placeholder{P}.
 \pnum
 \indextext{name!point of declaration}%
 The \defn{point of declaration} for a name is immediately after its
-complete declarator\iref{dcl.decl} and before its
+complete \link{declarator}{\ref{dcl.decl}} and before its
 \grammarterm{initializer} (if any), except as noted below. \begin{example}
 
 \begin{codeblock}
@@ -803,7 +803,7 @@ See~\ref{basic.lookup.elab} and~\ref{dcl.type.elab}. \end{note}
 
 \pnum
 The point of declaration for an
-injected-class-name\iref{class} is immediately following
+\deflink{injected-class-name}{\ref{class}} is immediately following
 the opening brace of the class definition.
 
 \pnum
@@ -850,10 +850,10 @@ see~\ref{temp.point}.\end{note}%
 \pnum
 \indextext{scope!block}%
 \indextext{local scope|see{block scope}}%
-A name declared in a block\iref{stmt.block} is local to that block; it has
+A name declared in a \link{block}{\ref{stmt.block}} is local to that block; it has
 \defn{block scope}.
-Its potential scope begins at its point of
-declaration\iref{basic.scope.pdecl} and ends at the end of its block.
+Its potential scope begins at its \link{point of
+declaration}{\ref{basic.scope.pdecl}} and ends at the end of its block.
 A variable declared at block scope is a \defn{local variable}.
 
 \pnum
@@ -903,7 +903,7 @@ with a \grammarterm{function-try-block}.
 
 \pnum
 \indextext{label!scope of}%
-Labels\iref{stmt.label} have \defnx{function scope}{scope!function} and
+\link{Labels}{\ref{stmt.label}} have \defnx{function scope}{scope!function} and
 may be used anywhere in the function in which they are declared. Only
 labels have function scope.
 
@@ -917,8 +917,8 @@ The declarative region of a \grammarterm{namespace-definition} is its
 namespace, and names introduced by these declarations into the
 declarative region of the namespace are said to be \defn{member
 names} of the namespace. A namespace member name has namespace scope.
-Its potential scope includes its namespace from the name's point of
-declaration\iref{basic.scope.pdecl} onwards; and for each
+Its potential scope includes its namespace from the name's \link{point of
+declaration}{\ref{basic.scope.pdecl}} onwards; and for each
 \grammarterm{using-directive}\iref{namespace.udir} that nominates the
 member's namespace, the member's potential scope includes that portion
 of the potential scope of the \grammarterm{using-directive} that follows
@@ -963,7 +963,7 @@ The outermost declarative region of a translation unit is also a
 namespace, called the \defn{global namespace}. A name declared in
 the global namespace has \defn{global namespace scope} (also called
 \defn{global scope}). The potential scope of such a name begins at
-its point of declaration\iref{basic.scope.pdecl} and ends at the end
+its \link{point of declaration}{\ref{basic.scope.pdecl}} and ends at the end
 of the translation unit that is its declarative region.
 \indextext{name!global}%
 A name with global namespace scope is said to be a
@@ -999,8 +999,8 @@ the class (this includes static data member definitions, nested class
 definitions, and member function definitions, including the member function
 body and any portion of the
 declarator part of such definitions which follows the \grammarterm{declarator-id},
-including a \grammarterm{parameter-declaration-clause} and any default
-arguments\iref{dcl.fct.default}).
+including a \grammarterm{parameter-declaration-clause} and any \link{default
+arguments}{\ref{dcl.fct.default}}).
 
 \pnum
 \begin{example}
@@ -1032,8 +1032,8 @@ class D {
 \pnum
 The name of a class member shall only be used as follows:
 \begin{itemize}
-\item in the scope of its class (as described above) or a class derived\iref{class.derived}
-from its class,
+\item in the scope of its class (as described above) or a class
+\link{derived}{\ref{class.derived}} from its class,
 \item after the \tcode{.} operator applied to an expression of the type
 of its class\iref{expr.ref} or a class derived from its class,
 \item after the \tcode{->} operator applied to a pointer to an object of
@@ -1047,7 +1047,7 @@ applied to the name of its class or a class derived from its class.
 \indextext{scope!enumeration}
 
 \pnum
-The name of a scoped enumerator\iref{dcl.enum} has
+The name of a \deflinkx{scoped enumerator}{scoped enumerators}{\ref{dcl.enum}} has
 \defn{enumeration scope}. Its potential scope begins at
 its point of declaration and terminates at the end of the
 \grammarterm{enum-specifier}.
@@ -1088,8 +1088,8 @@ being hidden during qualified and unqualified name lookup.)
 \end{example}
 
 \pnum
-The potential scope of a template parameter name begins at its point of
-declaration\iref{basic.scope.pdecl} and ends at the end of its declarative region.
+The potential scope of a template parameter name begins at its \deflink{point of
+declaration}{\ref{basic.scope.pdecl}} and ends at the end of its declarative region.
 \begin{note} This implies that a \grammarterm{template-parameter} can be used in the
 declaration of subsequent \grammarterm{template-parameter}{s} and their default
 arguments but cannot be used in preceding \grammarterm{template-parameter}{s} or their
@@ -1115,8 +1115,8 @@ argument must be defined and not just declared when the class template is instan
 \pnum
 The declarative region of the name of a template parameter is nested within the
 immediately-enclosing declarative region. \begin{note} As a result, a
-\grammarterm{template-parameter} hides any entity with the same name in an enclosing
-scope\iref{basic.scope.hiding}. \begin{example}
+\grammarterm{template-parameter} \link{hides}{\ref{basic.scope.hiding}} any entity with the same name in an enclosing
+scope. \begin{example}
 
 \begin{codeblock}
 typedef int N;
@@ -1158,8 +1158,8 @@ In a member function definition, the declaration of a name
 at block scope
 hides
 the declaration of a member of the class with the same name;
-see~\ref{basic.scope.class}. The declaration of a member in a derived
-class\iref{class.derived} hides the declaration of a member of
+see~\ref{basic.scope.class}. The declaration of a member in a \link{derived
+class}{\ref{class.derived}} hides the declaration of a member of
 a base class of the same name; see~\ref{class.member.lookup}.
 
 \pnum
@@ -1189,9 +1189,9 @@ The declarations found by name lookup shall either all denote the same entity or
 shall all denote functions or function templates;
 in the latter case,
 the declarations are said to form a set of overloaded
-functions\iref{over.load}. Overload resolution\iref{over.match}
-takes place after name lookup has succeeded. The access rules\iref{class.access}
-are considered only once name lookup and
+functions\iref{over.load}. \link{Overload resolution}{\ref{over.match}}
+takes place after name lookup has succeeded. The
+\link{access rules}{\ref{class.access}} are considered only once name lookup and
 function overload resolution (if applicable) have succeeded. Only after
 name lookup, function overload resolution (if applicable) and access
 checking have succeeded are the attributes introduced by the name's
@@ -1202,7 +1202,7 @@ A name ``looked up in the context of an expression'' is looked up as an
 unqualified name in the scope where the expression is found.
 
 \pnum
-The injected-class-name of a class\iref{class} is also
+The \deflink{injected-class-name}{\ref{class}} of a class is also
 considered to be a member of that class for the purposes of name hiding
 and lookup.
 
@@ -1273,8 +1273,8 @@ namespace N {
 }
 \end{codeblock}
 
-Because the expression is not a function call, the argument-dependent
-name lookup\iref{basic.lookup.argdep} does not apply and the friend
+Because the expression is not a function call, the \link{argument-dependent
+name lookup}{\ref{basic.lookup.argdep}} does not apply and the friend
 function \tcode{f} is not found. \end{note}
 
 \pnum
@@ -1329,8 +1329,8 @@ shall be declared in one of the following ways:
 \begin{itemize}
 \item before its use in class \tcode{X} or be a member of a base class
 of \tcode{X}\iref{class.member.lookup}, or
-\item if \tcode{X} is a nested class of class
-\tcode{Y}\iref{class.nest}, before the definition of \tcode{X} in
+\item if \tcode{X} is a \deflink{nested class}{\ref{class.nest}} of class
+\tcode{Y}, before the definition of \tcode{X} in
 \tcode{Y}, or shall be a member of a base class of \tcode{Y} (this
 lookup applies in turn to \tcode{Y}'s enclosing classes, starting with
 the innermost enclosing class),\footnote{This lookup applies whether the
@@ -1339,7 +1339,7 @@ nested within \tcode{Y}'s definition or whether \tcode{X}'s definition
 appears in a namespace scope enclosing \tcode{Y}'s
 definition\iref{class.nest}.}
 or
-\item if \tcode{X} is a local class\iref{class.local} or is a nested
+\item if \tcode{X} is a \link{local class}{\ref{class.local}} or is a nested
 class of a local class, before the definition of class \tcode{X} in a
 block enclosing the definition of class \tcode{X}, or
 \item if \tcode{X} is a member of namespace \tcode{N}, or is a nested
@@ -1404,7 +1404,7 @@ block\iref{stmt.block}, or
 class of \tcode{X}\iref{class.member.lookup}, or
 
 \item if \tcode{X}
-is a nested class of class \tcode{Y}\iref{class.nest}, shall be a
+is a \deflink{nested class}{\ref{class.nest}} of class \tcode{Y}, shall be a
 member of \tcode{Y}, or shall be a member of a base class of \tcode{Y}
 (this lookup applies in turn to \tcode{Y}'s enclosing classes, starting
 with the innermost enclosing class),\footnote{This lookup applies whether
@@ -1413,7 +1413,7 @@ within the definition of class \tcode{X} or whether the member function
 is defined in a namespace scope enclosing \tcode{X}'s definition.}
 or
 
-\item if \tcode{X} is a local class\iref{class.local} or is a nested
+\item if \tcode{X} is a \link{local class}{\ref{class.local}} or is a nested
 class of a local class, before the definition of class \tcode{X} in a
 block enclosing the definition of class \tcode{X}, or
 
@@ -1453,8 +1453,8 @@ describes the restrictions on the use of names in local class
 definitions. \end{note}
 
 \pnum
-Name lookup for a name used in the definition of a friend
-function\iref{class.friend} defined inline in the class granting
+Name lookup for a name used in the definition of a \link{friend
+function}{\ref{class.friend}} defined inline in the class granting
 friendship shall proceed as described for lookup in member function
 definitions. If the friend function is not defined in the class
 granting friendship, name lookup in the friend function
@@ -1490,8 +1490,8 @@ struct B {
 \end{example}
 
 \pnum
-During the lookup for a name used as a default
-argument\iref{dcl.fct.default} in a function
+During the lookup for a name used as a \link{default
+argument}{\ref{dcl.fct.default}} in a function
 \grammarterm{parameter-declaration-clause} or used in the
 \grammarterm{expression} of a \grammarterm{mem-initializer} for a
 constructor\iref{class.base.init}, the function parameter names are
@@ -1510,8 +1510,8 @@ and hide the names of entities declared in the block, class, or namespace
 scopes containing the \grammarterm{enum-specifier}.
 
 \pnum
-A name used in the definition of a \tcode{static} data member of class
-\tcode{X}\iref{class.static.data} (after the \grammarterm{qualified-id}
+A name used in the definition of a \link{\tcode{static} data member}{\ref{class.static.data}}
+of class \tcode{X} (after the \grammarterm{qualified-id}
 of the static member) is looked up as if the name was used in a member
 function of \tcode{X}. \begin{note} \ref{class.static.data} further
 describes the restrictions on the use of names in the definition of a
@@ -1556,8 +1556,8 @@ described in~\ref{temp.res}. \end{note}
 
 \pnum
 When the \grammarterm{postfix-expression} in
-a function call\iref{expr.call} is an \grammarterm{unqualified-id}, other namespaces not considered
-during the usual unqualified lookup\iref{basic.lookup.unqual} may be
+a \link{function call}{\ref{expr.call}} is an \grammarterm{unqualified-id}, other namespaces not considered
+during the usual \link{unqualified lookup}{\ref{basic.lookup.unqual}} may be
 searched, and in those namespaces, namespace-scope friend function or
 function template declarations\iref{class.friend} not otherwise
 visible may be found.
@@ -1627,7 +1627,7 @@ associated with \tcode{X}.
 associated namespaces and classes are those associated with the member
 type together with those associated with \tcode{X}.
 \end{itemize}
-If an associated namespace is an inline namespace\iref{namespace.def}, its
+If an associated namespace is an \deflink{inline namespace}{\ref{namespace.def}}, its
 enclosing namespace is also included in the set. If an associated namespace
 directly contains inline namespaces, those inline namespaces are also included
 in the set.
@@ -1642,8 +1642,8 @@ those of its type \grammarterm{template-argument}{s} and its template
 \grammarterm{template-argument}{s}.
 
 \pnum
-Let \placeholder{X} be the lookup set produced by unqualified
-lookup\iref{basic.lookup.unqual} and let \placeholder{Y} be the lookup set produced
+Let \placeholder{X} be the lookup set produced by \link{unqualified
+lookup}{\ref{basic.lookup.unqual}} and let \placeholder{Y} be the lookup set produced
 by argument dependent lookup (defined as follows). If \placeholder{X} contains
 \begin{itemize}
 \item a declaration of a class member, or
@@ -1758,7 +1758,7 @@ The name shall be declared in global namespace scope or shall be a name
 whose declaration is visible in global scope because of a
 \grammarterm{using-directive}\iref{namespace.qual}. The use of \tcode{::}
 allows a global name to be referred to even if its identifier has been
-hidden\iref{basic.scope.hiding}.
+\link{hidden}{\ref{basic.scope.hiding}}.
 
 \pnum
 A name prefixed by a \grammarterm{nested-name-specifier} that
@@ -1829,8 +1829,8 @@ access (see~\ref{basic.lookup.classref});
 
 \item the lookup for a name specified in a
 \grammarterm{using-declaration}\iref{namespace.udecl} also finds class or
-enumeration names hidden within the same
-scope\iref{basic.scope.hiding}.
+enumeration names \link{hidden}{\ref{basic.scope.hiding}} within the same
+scope.
 \end{itemize}
 
 \pnum
@@ -1892,8 +1892,8 @@ entire \grammarterm{postfix-expression} occurs.
 \pnum
 For a namespace \tcode{X} and name \tcode{m}, the namespace-qualified lookup set
 $S(X, m)$ is defined as follows: Let $S'(X, m)$ be the set of all
-declarations of \tcode{m} in \tcode{X} and the inline namespace set of
-\tcode{X}\iref{namespace.def}. If $S'(X, m)$ is not empty, $S(X, m)$
+declarations of \tcode{m} in \tcode{X} and the \deflink{inline namespace set}{\ref{namespace.def}} of
+\tcode{X}. If $S'(X, m)$ is not empty, $S(X, m)$
 is $S'(X, m)$; otherwise, $S(X, m)$ is the union of $S(N_i, m)$ for
 all namespaces $N_i$ nominated by \grammarterm{using-directive}{s} in
 \tcode{X} and its inline namespace set.
@@ -2078,7 +2078,7 @@ nested-name-specifier unqualified-id
 the
 \grammarterm{unqualified-id} shall name a member of the namespace
 designated by the \grammarterm{nested-name-specifier}
-or of an element of the inline namespace set\iref{namespace.def} of that namespace.
+or of an element of the \deflink{inline namespace set}{\ref{namespace.def}} of that namespace.
 \begin{example}
 
 \begin{codeblock}
@@ -2123,8 +2123,9 @@ void B::f1(int){ }  // OK, defines \tcode{A::B::f1(int)}
 \pnum
 An \grammarterm{elaborated-type-specifier}\iref{dcl.type.elab} may be
 used to refer to a previously declared \grammarterm{class-name} or
-\grammarterm{enum-name} even though the name has been hidden by a non-type
-declaration\iref{basic.scope.hiding}.
+\grammarterm{enum-name} even though the name has been
+\link{hidden}{\ref{basic.scope.hiding}} by a non-type
+declaration.
 
 \pnum
 If the \grammarterm{elaborated-type-specifier} has no
@@ -2198,7 +2199,7 @@ struct Base::Data* pBase;       // OK: refers to nested \tcode{Data}
 
 \pnum
 \indextext{lookup!class member}%
-In a class member access expression\iref{expr.ref}, if the \tcode{.}
+In a \link{class member access}{\ref{expr.ref}} expression, if the \tcode{.}
 or \tcode{->} token is immediately followed by an \grammarterm{identifier}
 followed by a \tcode{<}, the identifier must be looked up to determine
 whether the \tcode{<} is the beginning of a template argument
@@ -2208,11 +2209,11 @@ not found, it is then looked up in the context of the entire
 \grammarterm{postfix-expression} and shall name a class template.
 
 \pnum
-If the \grammarterm{id-expression} in a class member
-access\iref{expr.ref} is an \grammarterm{unqualified-id}, and the type of
+If the \grammarterm{id-expression} in a \link{class member
+access}{\ref{expr.ref}} is an \grammarterm{unqualified-id}, and the type of
 the object expression is of a class type \tcode{C}, the
 \grammarterm{unqualified-id} is looked up in the scope of class \tcode{C}.
-For a pseudo-destructor call\iref{expr.pseudo},
+For a \link{pseudo-destructor call}{\ref{expr.pseudo}},
 the \grammarterm{unqualified-id} is looked up in the context of the complete
 \grammarterm{postfix-expression}.
 
@@ -2307,9 +2308,9 @@ only namespace names are considered.%
 
 \pnum
 \indextext{program}%
-A \defn{program} consists of one or more \defnx{translation units}{translation unit}\iref{lex}
-linked together. A translation unit consists
-of a sequence of declarations.
+A \defn{program} consists of one or more
+\deflinkx{translation units}{translation unit}{\ref{lex}} linked together.
+A translation unit consists of a sequence of declarations.
 
 \begin{bnf}
 \nontermdef{translation-unit}\br
@@ -2346,7 +2347,7 @@ cannot be referred to by names from other scopes.
 \indextext{\idxcode{const}!linkage of}%
 \indextext{linkage!\idxcode{inline} and}%
 \indextext{\idxcode{inline}!linkage of}%
-A name having namespace scope\iref{basic.scope.namespace} has internal
+A name having \link{namespace scope}{\ref{basic.scope.namespace}} has internal
 linkage if it is the name of
 \begin{itemize}
 \item
@@ -2374,7 +2375,7 @@ a named class\iref{class}, or an unnamed class defined in a
 typedef declaration in which the class has the typedef name for linkage
 purposes\iref{dcl.typedef}; or
 \item \indextext{enumeration!linkage of}%
-a named enumeration\iref{dcl.enum}, or an unnamed enumeration defined
+a named \link{enumeration}{\ref{dcl.enum}}, or an unnamed enumeration defined
 in a typedef declaration in which the enumeration has the typedef name
 for linkage purposes\iref{dcl.typedef}; or
 \item a template.
@@ -2445,7 +2446,7 @@ void q() { @\commentellip@ }          // some other, unrelated \tcode{q}
 \pnum
 \indextext{linkage!no}%
 Names not covered by these rules have no linkage. Moreover, except as
-noted, a name declared at block scope\iref{basic.scope.block} has no
+noted, a name declared at \deflink{block scope}{\ref{basic.scope.block}} has no
 linkage.
 
 \pnum
@@ -2462,12 +2463,12 @@ template has the linkage of the innermost enclosing class or namespace in which
 it is declared.};
 or
 
-\item it is a fundamental type\iref{basic.fundamental}; or
+\item it is a \link{fundamental type}{\ref{basic.fundamental}}; or
 
-\item it is a compound type\iref{basic.compound} other than a class or
+\item it is a \link{compound type}{\ref{basic.compound}} other than a class or
 enumeration, compounded exclusively from types that have linkage; or
 
-\item it is a cv-qualified\iref{basic.type.qualifier} version of a
+\item it is a \link{cv-qualified}{\ref{basic.type.qualifier}} version of a
 type that has linkage.
 \end{itemize}
 \begin{note}
@@ -2499,7 +2500,7 @@ void f() {
 \end{example}
 
 \pnum
-Two names that are the same\iref{basic} and that are declared
+Two names that are \deflinkx{the same}{name!same}{\ref{basic}} and that are declared
 in different scopes shall denote the same variable, function,
 type, template or namespace if
 \begin{itemize}
@@ -2520,7 +2521,7 @@ signatures\iref{temp.over.link} are the same.
 \indextext{consistency!type declaration}%
 \indextext{declaration!multiple}%
 After all adjustments of types (during which
-typedefs\iref{dcl.typedef} are replaced by their definitions), the
+\link{typedefs}{\ref{dcl.typedef}} are replaced by their definitions), the
 types specified by all declarations referring to a given variable or
 function shall be identical, except that declarations for an array
 object can specify array types that differ by the presence or absence of
@@ -3103,8 +3104,8 @@ one of the following:
 \indextext{storage duration!automatic}%
 \indextext{storage duration!dynamic}%
 Static, thread, and automatic storage durations are associated with objects
-introduced by declarations\iref{basic.def} and implicitly created by
-the implementation\iref{class.temporary}. The dynamic storage duration
+introduced by declarations\iref{basic.def} and \link{implicitly created by
+the implementation}{\ref{class.temporary}}. The dynamic storage duration
 is associated with objects created by a
 \grammarterm{new-expression}\iref{expr.new}.
 
@@ -3115,7 +3116,7 @@ The storage duration categories apply to references as well.
 When the end of the duration of a region of storage is reached,
 the values of all pointers
 representing the address of any part of that region of storage
-become invalid pointer values\iref{basic.compound}.
+become \deflinkx{invalid pointer values}{invalid pointer value}{\ref{basic.compound}}.
 Indirection through an invalid pointer value and
 passing an invalid pointer value to a deallocation function
 have undefined behavior.
@@ -3165,7 +3166,7 @@ the current thread.
 
 \pnum
 A variable with thread storage duration shall be initialized before
-its first odr-use\iref{basic.def.odr} and, if constructed, shall be destroyed on thread exit.
+its first \link{odr-use}{\ref{basic.def.odr}} and, if constructed, shall be destroyed on thread exit.
 
 \rSec3[basic.stc.auto]{Automatic storage duration}
 
@@ -3193,8 +3194,8 @@ specified in~\ref{class.copy}.
 \indextext{storage duration!dynamic|(}
 
 \pnum
-Objects can be created dynamically during program
-execution\iref{intro.execution}, using
+Objects can be created dynamically during \link{program
+execution}{\ref{intro.execution}}, using
 \indextext{\idxcode{new}}%
 \grammarterm{new-expression}{s}\iref{expr.new}, and destroyed using
 \indextext{\idxcode{delete}}%
@@ -3332,15 +3333,15 @@ that would match a handler\iref{except.handle} of type
 \tcode{std::bad_alloc}\iref{bad.alloc}.
 
 \pnum
-A global allocation function is only called as the result of a new
-expression\iref{expr.new}, or called directly using the function call
-syntax\iref{expr.call}, or called indirectly through calls to the
+A global allocation function is only called as the result of a \link{new
+expression}{\ref{expr.new}}, or called directly using the \link{function call}{\ref{expr.call}}
+syntax, or called indirectly through calls to the
 functions in the \Cpp{} standard library. \begin{note} In particular, a
 global allocation function is not called to allocate storage for objects
-with static storage duration\iref{basic.stc.static}, for objects or references
-with thread storage duration\iref{basic.stc.thread}, for objects of
-type \tcode{std::type_info}\iref{expr.typeid}, or for an
-exception object\iref{except.throw}.
+with \link{static storage duration}{\ref{basic.stc.static}}, for objects or references
+with \link{thread storage duration}{\ref{basic.stc.thread}}, for objects of
+type \link{\tcode{std::type_info}}{\ref{expr.typeid}}, or for an
+\link{exception object}{\ref{except.throw}}.
 \end{note}
 
 \rSec4[basic.stc.dynamic.deallocation]{Deallocation functions}
@@ -3394,7 +3395,7 @@ supplied in the standard library, the call has no effect.
 
 \pnum
 If the argument given to a deallocation function in the standard library
-is a pointer that is not the null pointer value\iref{conv.ptr}, the
+is a pointer that is not the \deflink{null pointer value}{\ref{conv.ptr}}, the
 deallocation function shall deallocate the storage referenced by the
 pointer, ending the duration of the region of storage.
 
@@ -3405,12 +3406,11 @@ pointer, ending the duration of the region of storage.
 \indextext{pointer!to traceable object}%
 A \defn{traceable pointer object} is
 \begin{itemize}
-\item an object of an object pointer
-type\iref{basic.compound}, or
+\item an object of an \deflink{object pointer type}{\ref{basic.compound}}, or
 \item an object of an integral type that is at least as large as \tcode{std::intptr_t},
 or
-\item a sequence of elements in an array of narrow character
-type\iref{basic.fundamental}, where the size and alignment of the sequence
+\item a sequence of elements in an array of
+\deflinkx{narrow character type}{type!narrow character}{\ref{basic.fundamental}}, where the size and alignment of the sequence
 match those of some object pointer type.
 \end{itemize}
 
@@ -3593,9 +3593,9 @@ supported by an implementation, the program is ill-formed.
 impose requirements on implementations regarding the representation
 of types.
 There are two kinds of types: fundamental types and compound types.
-Types describe objects\iref{intro.object},
-references\iref{dcl.ref},
-or functions\iref{dcl.fct}.
+Types describe \link{objects}{\ref{intro.object}},
+\link{references}{\ref{dcl.ref}},
+or \link{functions}{\ref{dcl.fct}}.
 \end{note}
 
 \pnum
@@ -3728,22 +3728,22 @@ An \defn{object type} is a (possibly cv-qualified) type that is not
 a function type, not a reference type, and not \cv{}~\tcode{void}.
 
 \pnum
-Arithmetic types\iref{basic.fundamental}, enumeration types, pointer
+\link{Arithmetic types}{\ref{basic.fundamental}}, enumeration types, pointer
 types, pointer-to-member types\iref{basic.compound},
 \tcode{std::nullptr_t},
 and
-cv-qualified\iref{basic.type.qualifier} versions of these
+\link{cv-qualified}{\ref{basic.type.qualifier}} versions of these
 types are collectively called
 \defnx{scalar types}{scalar type}.
 Cv-unqualified scalar types, trivially copyable class types\iref{class}, arrays of
 such types, and cv-qualified versions of these
 types are collectively called \defn{trivially
 copyable types}.
-Scalar types, trivial class types\iref{class},
+Scalar types, \deflink{trivial class}{\ref{class}} types,
 arrays of such types and cv-qualified versions of these
 types are collectively called
-\defn{trivial types}. Scalar types, standard-layout class
-types\iref{class}, arrays of such types and
+\defn{trivial types}. Scalar types, \deflink{standard-layout class}{\ref{class}}
+types, arrays of such types and
 cv-qualified versions of these types
 are collectively called \defn{standard-layout types}.
 
@@ -3754,14 +3754,14 @@ A type is a \defn{literal type} if it is:
 \item a scalar type; or
 \item a reference type; or
 \item an array of literal type; or
-\item a possibly cv-qualified class type\iref{class} that
+\item a possibly cv-qualified \link{class type}{\ref{class}} that
 has all of the following properties:
 \begin{itemize}
 \item it has a trivial destructor,
-\item it is either a closure type\iref{expr.prim.lambda.closure},
-an aggregate type\iref{dcl.init.aggr}, or
+\item it is either a \deflink{closure type}{\ref{expr.prim.lambda.closure}},
+an \link{aggregate type}{\ref{dcl.init.aggr}}, or
 has at least one constexpr constructor or constructor template
-(possibly inherited\iref{namespace.udecl} from a base class)
+(possibly \deflinkx{inherited}{inherits}{\ref{namespace.udecl}} from a base class)
 that is not a copy or move constructor,
 \item if it is a union, at least one of its non-static data members is
 of non-volatile literal type, and
@@ -3783,8 +3783,8 @@ will be usable in a constant expression.
 Two types \cvqual{cv1} \tcode{T1} and \cvqual{cv2} \tcode{T2} are
 \defn{layout-compatible} types
 if \tcode{T1} and \tcode{T2} are the same type,
-layout-compatible enumerations\iref{dcl.enum}, or
-layout-compatible standard-layout class types\iref{class.mem}.
+\deflinkx{layout-compatible enumerations}{layout-compatible!enumeration}{\ref{dcl.enum}}, or
+\deflinkx{layout-compatible standard-layout class types}{layout-compatible!class}{\ref{class.mem}}.
 
 \rSec2[basic.fundamental]{Fundamental types}
 
@@ -3813,7 +3813,7 @@ three distinct types, collectively called
 \defnx{narrow character types}{type!narrow character}.
 A \tcode{char}, a \tcode{signed char}, and an
 \tcode{unsigned char} occupy the same amount of storage and have the
-same alignment requirements\iref{basic.align}; that is, they have the
+same \link{alignment requirements}{\ref{basic.align}}; that is, they have the
 same object representation. For narrow character types, all bits of the object
 representation participate in the value representation.
 \begin{note}
@@ -3829,8 +3829,8 @@ either the same values as a \tcode{signed char} or an \tcode{unsigned
 char}; which one is \impldef{representation of \tcode{char}}.
 For each value \placeholder{i} of type \tcode{unsigned char} in the range
 0 to 255 inclusive, there exists a value \placeholder{j} of type
-\tcode{char} such that the result of an integral
-conversion\iref{conv.integral} from \placeholder{i} to \tcode{char} is
+\tcode{char} such that the result of an \link{integral
+conversion}{\ref{conv.integral}} from \placeholder{i} to \tcode{char} is
 \placeholder{j}, and the result of an integral conversion from
 \placeholder{j} to \tcode{unsigned char} is \placeholder{i}.
 
@@ -3877,8 +3877,8 @@ there exists a corresponding (but different)
 ``\tcode{unsigned char}'', ``\tcode{unsigned short int}'',
 ``\tcode{unsigned int}'', ``\tcode{unsigned long int}'', and
 ``\tcode{unsigned long long int}'', each of
-which occupies the same amount of storage and has the same alignment
-requirements\iref{basic.align} as the corresponding signed integer
+which occupies the same amount of storage and has the same \link{alignment
+requirements}{\ref{basic.align}} as the corresponding signed integer
 type\footnote{See~\ref{dcl.type.simple} regarding the correspondence between types and
 the sequences of \grammarterm{type-specifier}{s} that designate them.};
 that is, each signed integer type has the same object representation as
@@ -3926,9 +3926,9 @@ that can be represented by the resulting unsigned integer type.}
 \indextext{type!underlying!\idxcode{char32_t}}%
 Type \tcode{wchar_t} is a distinct type whose values can represent
 distinct codes for all members of the largest extended character set
-specified among the supported locales\iref{locale}. Type
-\tcode{wchar_t} shall have the same size, signedness, and alignment
-requirements\iref{basic.align} as one of the other integral types,
+specified among the supported \link{locales}{\ref{locale}}. Type
+\tcode{wchar_t} shall have the same size, signedness, and \link{alignment
+requirements}{\ref{basic.align}} as one of the other integral types,
 called its \defnx{underlying type}{type!underlying!\idxcode{wchar_t}}. Types \tcode{char16_t} and
 \tcode{char32_t} denote distinct types with the same size, signedness,
 and alignment as \tcode{uint_least16_t} and \tcode{uint_least32_t},
diff --git a/source/classes.tex b/source/classes.tex
index bb143e6..ebfc8d6 100644
--- a/source/classes.tex
+++ b/source/classes.tex
@@ -138,11 +138,11 @@ and move assignment operator~(\ref{class.copy}, \ref{over.ass})
 is either deleted or trivial,
 \item that has at least one non-deleted copy constructor, move constructor,
 copy assignment operator, or move assignment operator, and
-\item that has a trivial, non-deleted destructor\iref{class.dtor}.
+\item that has a trivial, non-deleted \link{destructor}{\ref{class.dtor}}.
 \end{itemize}
 
 A \defnx{trivial class}{class!trivial} is a class that is trivially copyable and
-has one or more default constructors\iref{class.ctor},
+has one or more \deflinkx{default constructors}{constructor!default}{\ref{class.ctor}},
 all of which are either trivial or deleted and
 at least one of which is not deleted.
 \begin{note} In particular, a trivially copyable or trivial class does not have
@@ -155,10 +155,10 @@ A class \tcode{S} is a \defnx{standard-layout class}{class!standard-layout} if i
 \item has no non-static data members of type non-standard-layout class
 (or array of such types) or reference,
 
-\item has no virtual functions\iref{class.virtual} and no
-virtual base classes\iref{class.mi},
+\item has no \link{virtual functions}{\ref{class.virtual}} and no
+\link{virtual base classes}{\ref{class.mi}},
 
-\item has the same access control\iref{class.access}
+\item has the same \link{access control}{\ref{class.access}}
 for all non-static data members,
 
 \item has no non-standard-layout base classes,
@@ -178,7 +178,7 @@ address\iref{expr.eq}.}
 $M(\mathtt{X})$ is defined as follows:
 \begin{itemize}
 \item If \tcode{X} is a non-union class type with no (possibly
-inherited\iref{class.derived}) non-static data members, the set
+\link{inherited}{\ref{class.derived}}) non-static data members, the set
 $M(\mathtt{X})$ is empty.
 
 \item If \tcode{X} is a non-union class type with a non-static data
@@ -264,7 +264,7 @@ If a \grammarterm{class-head-name} contains a \grammarterm{nested-name-specifier
 the \grammarterm{class-specifier} shall refer to a class that was
 previously declared directly in the class or namespace to which the
 \grammarterm{nested-name-specifier} refers,
-or in an element of the inline namespace set\iref{namespace.def} of that namespace
+or in an element of the \deflink{inline namespace set}{\ref{namespace.def}} of that namespace
 (i.e., not merely inherited or
 introduced by a \grammarterm{using-declaration}), and the
 \grammarterm{class-specifier} shall appear in a namespace enclosing the
@@ -305,7 +305,7 @@ int f(Y);
 \end{codeblock}
 
 \indextext{overloading}%
-declare an overloaded\iref{over} function \tcode{f()} and not
+declare an \link{overloaded}{\ref{over}} function \tcode{f()} and not
 simply a single function \tcode{f()} twice. For the same reason,
 
 \begin{codeblock}
@@ -323,7 +323,7 @@ A class declaration introduces the class name into the scope where
 \indextext{name hiding!class definition}%
 it is declared and hides any
 class, variable, function, or other declaration of that name in an
-enclosing scope\iref{basic.scope}. If a class name is declared in a
+enclosing \link{scope}{\ref{basic.scope}}. If a class name is declared in a
 scope where a variable, function, or enumerator of the same name is also
 declared, then when both declarations are in scope, the class can be
 referred to only using an
@@ -490,9 +490,9 @@ full set of members of the class; no member can be added elsewhere.
 A \defn{direct member} of a class \tcode{X} is a member of \tcode{X}
 that was first declared within the \grammarterm{member-specification} of \tcode{X},
 including anonymous union objects\iref{class.union.anon} and direct members thereof.
-Members of a class are data members, member
-functions\iref{class.mfct}, nested types, enumerators,
-and member templates\iref{temp.mem} and specializations thereof.
+Members of a class are data members, \link{member functions}{\ref{class.mfct}},
+nested types, enumerators,
+and \link{member templates}{\ref{temp.mem}} and specializations thereof.
 \begin{note}
 A specialization of a static data member template is a static data member.
 A specialization of a member function template is a member function.
@@ -503,14 +503,14 @@ A specialization of a member class template is a nested class.
 A \grammarterm{member-declaration} does not declare new members of the class
 if it is
 \begin{itemize}
-\item a friend declaration\iref{class.friend},
+\item a \link{friend declaration}{\ref{class.friend}},
 \item a \grammarterm{static_assert-declaration},
 \item a \grammarterm{using-declaration}\iref{namespace.udecl}, or
 \item an \grammarterm{empty-declaration}.
 \end{itemize}
 For any other \grammarterm{member-declaration},
 each declared entity
-that is not an unnamed bit-field\iref{class.bit}
+that is not an \deflinkx{unnamed bit-field}{bit-field!unnamed}{\ref{class.bit}}
 is a member of the class,
 and each such \grammarterm{member-declaration}
 shall either
@@ -522,10 +522,10 @@ A \defn{data member} is a non-function member introduced by a
 \grammarterm{member-declarator}.
 A \defn{member function} is a member that is a function.
 Nested types are classes~(\ref{class.name}, \ref{class.nest}) and
-enumerations\iref{dcl.enum} declared in the class and arbitrary types
-declared as members by use of a typedef declaration\iref{dcl.typedef}
+\link{enumerations}{\ref{dcl.enum}} declared in the class and arbitrary types
+declared as members by use of a \link{typedef declaration}{\ref{dcl.typedef}}
 or \grammarterm{alias-declaration}.
-The enumerators of an unscoped enumeration\iref{dcl.enum} defined in the class
+The enumerators of an \link{unscoped enumeration}{\ref{dcl.enum}} defined in the class
 are members of the class.
 
 \indextext{member!static}%
@@ -634,9 +634,9 @@ shall contain a \grammarterm{type-specifier} that is not a \grammarterm{cv-quali
 The
 \grammarterm{member-declarator-list} can be omitted only after a
 \grammarterm{class-specifier} or an \grammarterm{enum-specifier} or in a
-friend declaration\iref{class.friend}. A
+\link{friend declaration}{\ref{class.friend}}. A
 \grammarterm{pure-specifier} shall be used only in the declaration of a
-virtual function\iref{class.virtual}
+\link{virtual function}{\ref{class.virtual}}
 that is not a friend declaration.
 
 \pnum
@@ -703,17 +703,17 @@ of the \tcode{tword} member of the \tcode{right} subtree of \tcode{s}.
 \pnum
 \indextext{layout!class object}%
 Non-static data members of a (non-union) class
-with the same access control\iref{class.access}
+with the same \link{access control}{\ref{class.access}}
 are allocated so that later
 members have higher addresses within a class object.
 \indextext{allocation!unspecified}%
 The order of allocation of non-static data members
-with different access control
-is unspecified\iref{class.access}.
+with different \link{access control}{\ref{class.access}}
+is unspecified.
 Implementation alignment requirements might cause two adjacent members
 not to be allocated immediately after each other; so might requirements
-for space for managing virtual functions\iref{class.virtual} and
-virtual base classes\iref{class.mi}.
+for space for managing \link{virtual functions}{\ref{class.virtual}} and
+virtual \link{base classes}{\ref{class.mi}}.
 
 \pnum
 If \tcode{T} is the name of a class, then each of the following shall
@@ -724,8 +724,8 @@ have a name different from \tcode{T}:
 
 \item every member function of class \tcode{T}
 \begin{note}
-This restriction does not apply to constructors, which do not have
-names\iref{class.ctor}
+This restriction does not apply to \link{constructors}{\ref{class.ctor}},
+which do not have names
 \end{note};
 
 \item every member of class \tcode{T} that is itself a type;
@@ -741,11 +741,12 @@ unscoped enumerated type; and
 
 \pnum
 In addition, if class \tcode{T} has a user-declared
-constructor\iref{class.ctor}, every non-static data member of class
+\link{constructor}{\ref{class.ctor}}, every non-static data member of class
 \tcode{T} shall have a name different from \tcode{T}.
 
 \pnum
-The \defn{common initial sequence} of two standard-layout struct\iref{class}
+The \defn{common initial sequence} of two
+\deflink{standard-layout struct}{\ref{class}}
 types is the longest sequence of non-static data
 members and bit-fields in declaration order, starting with the first
 such entity in each of the structs, such that corresponding entities
@@ -770,7 +771,7 @@ The common initial sequence of \tcode{A} and \tcode{E} is empty.
 \end{example}
 
 \pnum
-Two standard-layout struct\iref{class} types are
+Two \deflink{standard-layout struct}{\ref{class}} types are
 \defnx{layout-compatible classes}{layout-compatible!class} if
 their common initial sequence comprises all members and bit-fields of
 both classes\iref{basic.types}.
@@ -778,11 +779,11 @@ both classes\iref{basic.types}.
 \pnum
 Two standard-layout unions are layout-compatible if they
 have the same number of non-static data members and corresponding
-non-static data members (in any order) have layout-compatible
-types\iref{basic.types}.
+non-static data members (in any order) have \deflinkx{layout-compatible
+types}{layout-compatible}{\ref{basic.types}}.
 
 \pnum
-In a standard-layout union with an active member\iref{class.union}
+In a standard-layout union with an \deflinkx{active member}{active!union member}{\ref{class.union}}
 of struct type \tcode{T1}, it is permitted to read a non-static
 data member \tcode{m} of another union member of struct type \tcode{T2}
 provided \tcode{m} is part of the common initial sequence of \tcode{T1} and \tcode{T2};
@@ -822,9 +823,9 @@ pointer-interconvertible~(\ref{basic.compound}, \ref{expr.static.cast}).
 \pnum
 \indextext{member function!inline}%
 \indextext{definition!member function}%
-A member function may be defined\iref{dcl.fct.def} in its class
-definition, in which case it is an inline member
-function\iref{dcl.inline}, or it may be defined outside of its class
+A member function may be \link{defined}{\ref{dcl.fct.def}} in its class
+definition, in which case it is an \deflinkx{inline}{inline function}{\ref{dcl.inline}} member
+function, or it may be defined outside of its class
 definition if it has already been declared but not defined in its class
 definition. A member function definition that appears outside of the
 class definition shall appear in a namespace scope enclosing the class
@@ -841,7 +842,7 @@ declaration in the class definition or its definition outside of the
 class definition declares the function as \tcode{inline} or \tcode{constexpr}.
 \begin{note}
 Member functions of a class in namespace scope have the linkage of that class.
-Member functions of a local class\iref{class.local} have no linkage.
+Member functions of a \link{local class}{\ref{class.local}} have no linkage.
 See~\ref{basic.link}.
 \end{note}
 
@@ -860,8 +861,8 @@ definition, the member function name shall be qualified by its class
 name using the \tcode{::} operator.
 \begin{note}
 A name used in a member function definition (that is, in the
-\grammarterm{parameter-declaration-clause} including the default
-arguments\iref{dcl.fct.default} or in the member function body) is looked up
+\grammarterm{parameter-declaration-clause} including the \link{default
+arguments}{\ref{dcl.fct.default}} or in the member function body) is looked up
 as described in~\ref{basic.lookup}.
 \end{note}
 \begin{example}
@@ -926,9 +927,9 @@ Also see~\ref{temp.arg}.
 
 \pnum
 A non-static member function may be called for an object of
-its class type, or for an object of a class derived\iref{class.derived}
-from its class type, using the class member
-access syntax~(\ref{expr.ref}, \ref{over.match.call}). A non-static
+its class type, or for an object of a class \link{derived}{\ref{class.derived}}
+from its class type, using the
+\link{class member access}{\ref{expr.ref}} syntax\iref{over.match.call}. A non-static
 member function may also be called directly using the function call
 syntax~(\ref{expr.call}, \ref{over.match.call}) from within
 the body of a member function of its class or of a class derived from
@@ -942,19 +943,18 @@ object that is not of type \tcode{X}, or of a type derived from
 
 \pnum
 When an \grammarterm{id-expression}\iref{expr.prim.id} that is not part of a
-class member access syntax\iref{expr.ref} and not used to form a
+\link{class member access}{\ref{expr.ref}} syntax and not used to form a
 pointer to member\iref{expr.unary.op} is used in
-a member of class \tcode{X} in a context where \tcode{this} can be
-used\iref{expr.prim.this},
-if name
-lookup\iref{basic.lookup} resolves the name in the
+a member of class \tcode{X} in a context where \link{\tcode{this}}{\ref{expr.prim.this}} can be
+used,
+if \link{name lookup}{\ref{basic.lookup}} resolves the name in the
 \grammarterm{id-expression} to a non-static non-type member of some class
 \tcode{C},
 and if either the \grammarterm{id-expression} is potentially evaluated or
 \tcode{C} is \tcode{X} or a base class of \tcode{X},
-the \grammarterm{id-expression} is transformed into a class
-member access expression\iref{expr.ref} using
-\tcode{(*this)}\iref{class.this} as the \grammarterm{postfix-expression}
+the \grammarterm{id-expression} is transformed into a
+\link{class member access}{\ref{expr.ref}} expression using
+\link{\tcode{(*this)}}{\ref{class.this}} as the \grammarterm{postfix-expression}
 to the left of the \tcode{.} operator.
 \begin{note}
 If \tcode{C} is not \tcode{X} or a base class of \tcode{X}, the class
@@ -1011,11 +1011,11 @@ declared elsewhere.\footnote{See, for example, \tcode{<cstring>}\iref{c.strings}
 \indextext{member function!const volatile}%
 A non-static member function may be declared \tcode{const},
 \tcode{volatile}, or \tcode{const} \tcode{volatile}. These
-\grammarterm{cv-qualifier}{s} affect the type of the \tcode{this}
-pointer\iref{class.this}. They also affect the function
-type\iref{dcl.fct} of the member function; a member function declared
-\tcode{const} is a \defn{const member function}, a member function
-declared \tcode{volatile} is a \defn{volatile member function} and a
+\grammarterm{cv-qualifier}{s} affect the type of the \link{\tcode{this}
+pointer}{\ref{class.this}}. They also affect the \link{function
+type}{\ref{dcl.fct}} of the member function; a member function declared
+\tcode{const} is a \term{const} member function, a member function
+declared \tcode{volatile} is a \term{volatile} member function and a
 member function declared \tcode{const} \tcode{volatile} is a
 \defn{const volatile member function}.
 \begin{example}
@@ -1044,7 +1044,7 @@ virtual\iref{class.virtual} or pure virtual\iref{class.abstract}.
 
 \pnum
 \indextext{this pointer@\tcode{this} pointer|see{\tcode{this}}}%
-In the body of a non-static\iref{class.mfct} member function, the
+In the body of a non-static \link{member function}{\ref{class.mfct}}, the
 keyword \tcode{this} is a prvalue expression whose value is the
 address of the object for which the function is called.
 \indextext{\idxcode{this}!type of}%
@@ -1079,13 +1079,13 @@ called. This is not allowed in a const member function because
 \end{example}
 
 \pnum
-Similarly, \tcode{volatile} semantics\iref{dcl.type.cv} apply in
+Similarly, \link{\tcode{volatile}}{\ref{dcl.type.cv}} semantics apply in
 volatile member functions when accessing the object and its
 non-static data members.
 
 \pnum
 A cv-qualified member function can be called on an
-object-expression\iref{expr.ref} only if the object-expression is as
+\link{object-expression}{\ref{expr.ref}} only if the object-expression is as
 cv-qualified or less-cv-qualified than the member function.
 \begin{example}
 
@@ -1108,7 +1108,7 @@ and \tcode{s::g()} is a non-const member function, that is,
 \indextext{\idxcode{const}!destructor and}%
 \indextext{\idxcode{volatile}!constructor and}%
 \indextext{\idxcode{volatile}!destructor and}%
-Constructors\iref{class.ctor} and destructors\iref{class.dtor} shall
+\link{Constructors}{\ref{class.ctor}} and \link{destructors}{\ref{class.dtor}} shall
 not be declared \tcode{const}, \tcode{volatile} or \tcode{const}
 \tcode{volatile}. \begin{note} However, these functions can be invoked to
 create and destroy objects with cv-qualified types,
@@ -1121,7 +1121,7 @@ see~\ref{class.ctor} and~\ref{class.dtor}.
 \pnum
 A static member \tcode{s} of class \tcode{X} may be referred to
 using the \grammarterm{qualified-id} expression \tcode{X::s}; it is not
-necessary to use the class member access syntax\iref{expr.ref} to
+necessary to use the \link{class member access}{\ref{expr.ref}} syntax to
 refer to a static member. A static member may be
 referred to using the class member access syntax, in which case the
 object expression is evaluated.
@@ -1142,7 +1142,7 @@ void f() {
 
 \pnum
 A static member may be referred to directly in the scope of its
-class or in the scope of a class derived\iref{class.derived}
+class or in the scope of a class \link{derived}{\ref{class.derived}}
 from its class; in this case, the static member is referred to
 as if a \grammarterm{qualified-id} expression was used, with the
 \grammarterm{nested-name-specifier} of the \grammarterm{qualified-id} naming
@@ -1164,7 +1164,7 @@ int Y::i = g();                 // equivalent to \tcode{Y::g();}
 \pnum
 If an \grammarterm{unqualified-id}\iref{expr.prim.id.unqual} is used in the
 definition of a static member following the member's
-\grammarterm{declarator-id}, and name lookup\iref{basic.lookup.unqual}
+\grammarterm{declarator-id}, and \link{name lookup}{\ref{basic.lookup.unqual}}
 finds that the \grammarterm{unqualified-id} refers to a static
 member, enumerator, or nested type of the member's class (or of a base
 class of the member's class), the \grammarterm{unqualified-id} is
@@ -1178,7 +1178,7 @@ members and non-static member functions.
 
 
 \pnum
-Static members obey the usual class member access rules\iref{class.access}.
+Static members obey the usual class \link{member access rules}{\ref{class.access}}.
 When used in the declaration of a class
 member, the \tcode{static} specifier shall only be used in the member
 declarations that appear within the \grammarterm{member-specification} of
@@ -1198,8 +1198,7 @@ functions.
 
 \pnum
 \begin{note}
-A static member function does not have a \tcode{this}
-pointer\iref{class.this}.
+A static member function does not have a \link{\tcode{this} pointer}{\ref{class.this}}.
 \end{note}
 A static member function shall not be \tcode{virtual}. There
 shall not be a static and a non-static member function with the
@@ -1271,7 +1270,7 @@ its declaration in the class definition can specify a
 \grammarterm{initializer-clause} that is an \grammarterm{assignment-expression}
 is a constant expression\iref{expr.const}.
 The member shall still be defined in a namespace scope if
-it is odr-used\iref{basic.def.odr} in the program and the
+it is \link{odr-used}{\ref{basic.def.odr}} in the program and the
 namespace scope definition shall not contain an \grammarterm{initializer}.
 An inline static data member may be defined in the class definition
 and may specify a \grammarterm{brace-or-equal-initializer}. If the
@@ -1283,7 +1282,7 @@ static data members shall not specify a \grammarterm{brace-or-equal-initializer}
 \pnum
 \begin{note}
 There shall be exactly one definition of a static data member
-that is odr-used\iref{basic.def.odr} in a program; no diagnostic is required.
+that is \link{odr-used}{\ref{basic.def.odr}} in a program; no diagnostic is required.
 \end{note}
 Unnamed classes and classes contained directly
 or indirectly within unnamed classes shall not contain static
@@ -1291,7 +1290,8 @@ data members.
 
 \pnum
 \begin{note}
-Static data members of a class in namespace scope have the linkage of that class\iref{basic.link}. A local class cannot have static data members\iref{class.local}.
+Static data members of a class in namespace scope have the \link{linkage}{\ref{basic.link}} of that class.
+A \link{local class}{\ref{class.local}} cannot have static data members.
 \end{note}
 
 \pnum
@@ -1301,7 +1301,7 @@ non-local variables~(\ref{basic.start.static}, \ref{basic.start.dynamic},
 
 \pnum
 A static data member shall not be
-\tcode{mutable}\iref{dcl.stc}.
+\linkx{\tcode{mutable}}{mutable}{\ref{dcl.stc}}.
 
 \rSec2[class.bit]{Bit-fields}%
 \indextext{bit-field}
@@ -1321,8 +1321,8 @@ attribute is not part of the type of the class member. The
 \grammarterm{constant-expression} shall be an integral constant expression
 with a value greater than or equal to zero. The
 value of the integral constant expression may
-be larger than the number of bits in the object
-representation\iref{basic.types} of the bit-field's type; in such
+be larger than the number of bits in the \deflink{object
+representation}{\ref{basic.types}} of the bit-field's type; in such
 cases the extra bits are padding bits\iref{basic.types}.
 \indextext{allocation!implementation-defined bit-field}%
 Allocation of bit-fields within a class object is
@@ -1382,7 +1382,7 @@ type \tcode{bool} of any size (including a one bit bit-field), the
 original \tcode{bool} value and the value of the bit-field shall compare
 equal. If the value of an enumerator is stored into a bit-field of the
 same enumeration type and the number of bits in the bit-field is large
-enough to hold all the values of that enumeration type\iref{dcl.enum},
+enough to hold all the values of that \link{enumeration type}{\ref{dcl.enum}},
 the original enumerator value and the value of the bit-field shall
 compare equal.
 \begin{example}
@@ -1479,10 +1479,10 @@ class E::I2 { };                // definition of nested class
 
 \pnum
 \indextext{friend function!nested class}%
-Like a member function, a friend function\iref{class.friend} defined
+Like a member function, a \link{friend function}{\ref{class.friend}} defined
 within a nested class is in the lexical scope of that class; it obeys
-the same rules for name binding as a static member function of that
-class\iref{class.static}, but it has no special access rights to
+the same rules for name binding as a \link{static member function}{\ref{class.static}}
+of that class, but it has no special access rights to
 members of an enclosing class.
 
 \rSec2[class.nested.type]{Nested type names}
@@ -1516,13 +1516,13 @@ X::I e;                         // OK
 In a union,
 a non-static data member is \defnx{active}{active!union member}
 if its name refers to an object
-whose lifetime has begun and has not ended\iref{basic.life}.
+whose \link{lifetime}{\ref{basic.life}} has begun and has not ended.
 At most one of the non-static data members of an object of union type
 can be active at any
 time, that is, the value of at most one of the non-static data members can be
 stored in a union at any time. \begin{note} One special guarantee is made in order to
 simplify the use of unions: If a standard-layout union contains several standard-layout
-structs that share a common initial sequence\iref{class.mem}, and
+structs that share a \deflink{common initial sequence}{\ref{class.mem}}, and
 if a non-static data member of an object of this standard-layout union type
 is active and is one of the standard-layout structs,
 it is permitted to inspect the common initial sequence
@@ -1535,8 +1535,8 @@ The size of a union is sufficient to contain the largest
 of its non-static data members. Each non-static data member is allocated
 as if it were the sole member of a struct.
 \begin{note}
-A union object and its non-static data members are
-pointer-interconvertible~(\ref{basic.compound}, \ref{expr.static.cast}).
+A standard-layout union object and its non-static data members are
+\deflink{pointer-interconvertible}{\ref{basic.compound}}~(\ref{expr.static.cast}).
 As a consequence, all non-static data members of a
 union object have the same address.
 \end{note}
@@ -1547,21 +1547,21 @@ union object have the same address.
 \indextext{destructor!\idxcode{union}}%
 A union can have member functions (including constructors and destructors),
 \indextext{restriction!\idxcode{union}}%
-but it shall not have virtual\iref{class.virtual} functions. A union shall not have
+but it shall not have \link{virtual}{\ref{class.virtual}} functions. A union shall not have
 base classes. A union shall not be used as a base class.
 \indextext{restriction!\idxcode{union}}%
 If a union contains a non-static data member of
 reference type the program is ill-formed.
-\begin{note} Absent default member initializers\iref{class.mem},
+\begin{note} Absent \deflink{default member initializers}{\ref{class.mem}},
 if any non-static data member of a union has a non-trivial
 default constructor\iref{class.ctor},
-copy constructor\iref{class.copy},
+\link{copy constructor}{\ref{class.copy}},
 move constructor\iref{class.copy},
-copy assignment operator\iref{class.copy},
-move assignment operator\iref{class.copy},
-or destructor\iref{class.dtor}, the corresponding member function
+\link{copy assignment operator}{\ref{class.copy}},
+\link{move assignment operator}{\ref{class.copy}},
+or \link{destructor}{\ref{class.dtor}}, the corresponding member function
 of the union must be user-provided or it will
-be implicitly deleted\iref{dcl.fct.def.delete} for the union. \end{note}
+be implicitly \link{deleted}{\ref{dcl.fct.def.delete}} for the union. \end{note}
 
 \pnum
 \begin{example} Consider the following union:
@@ -1574,7 +1574,7 @@ union U {
 };
 \end{codeblock}
 
-Since \tcode{std::string}\iref{string.classes} declares non-trivial versions of all of the special
+Since \link{\tcode{std::string}}{\ref{string.classes}} declares non-trivial versions of all of the special
 member functions, \tcode{U} will have an implicitly deleted default constructor,
 copy/move constructor,
 copy/move assignment operator, and destructor.
@@ -1583,7 +1583,7 @@ must be user-provided.\end{example}
 
 \pnum
 When the left operand of an assignment operator
-involves a member access expression\iref{expr.ref}
+involves a \link{member access expression}{\ref{expr.ref}}
 that nominates a union member,
 it may begin the lifetime of that union member,
 as described below.
@@ -1609,8 +1609,8 @@ and empty otherwise.
 Otherwise, $S(\mathtt{E})$ is empty.
 \end{itemize}
 In an assignment expression of the form \tcode{E1 = E2}
-that uses either the built-in assignment operator\iref{expr.ass}
-or a trivial assignment operator\iref{class.copy},
+that uses either the \link{built-in assignment operator}{\ref{expr.ass}}
+or a \link{trivial assignment operator}{\ref{class.copy}},
 for each element \tcode{X} of $S($\tcode{E1}$)$,
 if modification of \tcode{X} would have undefined behavior under~\ref{basic.life},
 an object of the type of \tcode{X} is implicitly created
@@ -1620,8 +1620,8 @@ the beginning of its lifetime is sequenced after
 the value computation of the left and right operands
 and before the assignment.
 \begin{note}
-This ends the lifetime of the previously-active
-member of the union, if any\iref{basic.life}.
+This ends the \deflink{lifetime}{\ref{basic.life}} of the previously-active
+member of the union, if any.
 \end{note}
 \begin{example}
 \begin{codeblock}
@@ -1776,7 +1776,7 @@ The local class is in the scope of the enclosing scope, and has the same
 access to names outside the function as does the enclosing function.
 \begin{note}
 A declaration in a local class
-cannot odr-use\iref{basic.def.odr}
+cannot \link{odr-use}{\ref{basic.def.odr}}
 a local entity
 from an
 enclosing scope.
@@ -1809,7 +1809,7 @@ local* p = 0;                   // error: \tcode{local} not in scope
 
 \pnum
 An enclosing function has no special access to members of the local
-class; it obeys the usual access rules\iref{class.access}.
+class; it obeys the usual \link{access rules}{\ref{class.access}}.
 \indextext{member function!local class}%
 Member functions of a local class shall be defined within their class
 definition, if they are defined at all.
diff --git a/source/compatibility.tex b/source/compatibility.tex
index 1686a25..2bcdaf3 100644
--- a/source/compatibility.tex
+++ b/source/compatibility.tex
@@ -1413,8 +1413,8 @@ deallocation functions\iref{expr.new}.
 \diffref{expr.cond}
 \change A conditional expression with a throw expression as its second or third
 operand keeps the type and value category of the other operand.
-\rationale Formerly mandated conversions (lvalue-to-rvalue\iref{conv.lval},
-array-to-pointer\iref{conv.array}, and function-to-pointer\iref{conv.func}
+\rationale Formerly mandated conversions (\link{lvalue-to-rvalue}{\ref{conv.lval}},
+\link{array-to-pointer}{\ref{conv.array}}, and \link{function-to-pointer}{\ref{conv.func}}
 standard conversions), especially the creation of the temporary due to
 lvalue-to-rvalue conversion, were considered gratuitous and surprising.
 \effect Valid \CppXI{} code that relies on the conversions may behave differently
@@ -1985,9 +1985,9 @@ and \tcode{<ctgmath>} is deprecated\iref{depr.c.headers}.
 The types \tcode{char16_t} and \tcode{char32_t}
 are distinct types rather than typedefs to existing integral types.
 The tokens \tcode{char16_t} and \tcode{char32_t}
-are keywords in this International Standard\iref{lex.key}.
+are \link{keywords}{\ref{lex.key}} in this International Standard.
 They do not appear as macro names defined in
-\tcode{<cuchar>}\indexhdr{cuchar}\iref{cuchar.syn}.
+\link{\tcode{<cuchar>}}{\ref{cuchar.syn}}.\indexhdr{cuchar}
 
 \rSec3[diff.wchar.t]{Type \tcode{wchar_t}}
 
@@ -1995,19 +1995,19 @@ They do not appear as macro names defined in
 The type \tcode{wchar_t} is a distinct type rather than a typedef to an
 existing integral type.
 The token \tcode{wchar_t}
-is a keyword in this International Standard\iref{lex.key}.
+is a \link{keyword}{\ref{lex.key}} in this International Standard.
 It does not appear as a type name defined in any of
-\tcode{<cstddef>}\iref{cstddef.syn}\indexhdr{cstddef},
-\tcode{<cstdlib>}\iref{cstdlib.syn}\indexhdr{cstdlib},
-or \tcode{<cwchar>}\iref{cwchar.syn}\indexhdr{cwchar}.
+\link{\tcode{<cstddef>}}{\ref{cstddef.syn}}\indexhdr{cstddef},
+\link{\tcode{<cstdlib>}}{\ref{cstdlib.syn}}\indexhdr{cstdlib},
+or \link{\tcode{<cwchar>}}{\ref{cwchar.syn}}\indexhdr{cwchar}.
 
 \rSec3[diff.header.assert.h]{Header \tcode{<assert.h>}}
 \indexhdr{assert.h}%
 
 \pnum
-The token \tcode{static_assert} is a keyword in this International
-Standard\iref{lex.key}. It does not appear as a macro name defined
-in \tcode{<cassert>}\indexhdr{cassert}\iref{cassert.syn}.
+The token \tcode{static_assert} is a \link{keyword}{\ref{lex.key}} in this International
+Standard. It does not appear as a macro name defined
+in \link{\tcode{<cassert>}}{\ref{cassert.syn}}.\indexhdr{cassert}
 
 \rSec3[diff.header.iso646.h]{Header \tcode{<iso646.h>}}
 \indexhdr{iso646.h}%
@@ -2026,8 +2026,8 @@ The tokens
 \tcode{xor},
 and
 \tcode{xor_eq}
-are keywords in this International
-Standard\iref{lex.key}.
+are \link{keywords}{\ref{lex.key}} in this International
+Standard.
 They do not appear as macro names defined in
 \tcode{<ciso646>}.
 \indexhdr{ciso646}%
@@ -2045,7 +2045,7 @@ in \tcode{<cstdalign>}\indexhdr{cstdalign}\iref{depr.cstdalign.syn}.
 
 \pnum
 The tokens \tcode{bool}, \tcode{true}, and \tcode{false}
-are keywords in this International Standard\iref{lex.key}.
+are \link{keywords}{\ref{lex.key}} in this International Standard.
 They do not appear as macro names defined in
 \tcode{<cstdbool>}\indexhdr{cstdbool}\iref{depr.cstdbool.syn}.
 
@@ -2055,20 +2055,20 @@ They do not appear as macro names defined in
 The macro
 \tcode{NULL},
 defined in any of
-\tcode{<clocale>}\iref{c.locales}\indexhdr{clocale},
-\tcode{<cstddef>}\iref{cstddef.syn}\indexhdr{cstddef},
-\tcode{<cstdio>}\iref{cstdio.syn}\indexhdr{cstdio},
-\tcode{<cstdlib>}\iref{cstdlib.syn}\indexhdr{cstdlib},
-\tcode{<cstring>}\iref{cstring.syn}\indexhdr{cstring},
-\tcode{<ctime>}\iref{ctime.syn}\indexhdr{ctime},
-or \tcode{<cwchar>}\iref{cwchar.syn}\indexhdr{cwchar},
+\link{\tcode{<clocale>}}{\ref{c.locales}}\indexhdr{clocale},
+\link{\tcode{<cstddef>}}{\ref{cstddef.syn}}\indexhdr{cstddef},
+\link{\tcode{<cstdio>}}{\ref{cstdio.syn}}\indexhdr{cstdio},
+\link{\tcode{<cstdlib>}}{\ref{cstdlib.syn}}\indexhdr{cstdlib},
+\link{\tcode{<cstring>}}{\ref{cstring.syn}}\indexhdr{cstring},
+\link{\tcode{<ctime>}}{\ref{ctime.syn}}\indexhdr{ctime},
+or \link{\tcode{<cwchar>}}{\ref{cwchar.syn}}\indexhdr{cwchar},
 is an \impldef{definition of \tcode{NULL}} \Cpp{} null pointer constant in
 this International Standard\iref{support.types}.
 
 \rSec2[diff.mods.to.declarations]{Modifications to declarations}
 
 \pnum
-Header \tcode{<cstring>}\iref{cstring.syn}\indexhdr{cstring}:
+Header \link{\tcode{<cstring>}}{\ref{cstring.syn}}\indexhdr{cstring}:
 The following functions have different declarations:
 
 \begin{itemize}
@@ -2082,7 +2082,7 @@ The following functions have different declarations:
 Subclause \ref{cstring.syn} describes the changes.
 
 \pnum
-Header \tcode{<cwchar>}\iref{cwchar.syn}\indexhdr{cwchar}:
+Header \link{\tcode{<cwchar>}}{\ref{cwchar.syn}}\indexhdr{cwchar}:
 The following functions have different declarations:
 
 \begin{itemize}
@@ -2096,14 +2096,14 @@ The following functions have different declarations:
 Subclause \ref{cwchar.syn} describes the changes.
 
 \pnum
-Header \tcode{<cstddef>}\iref{cstddef.syn}\indexhdr{cstddef}
+Header \link{\tcode{<cstddef>}}{\ref{cstddef.syn}}\indexhdr{cstddef}
 declares the name \tcode{nullptr_t} in addition to the names declared in
 \tcode{<stddef.h>} in the C standard library.
 
 \rSec2[diff.mods.to.behavior]{Modifications to behavior}
 
 \pnum
-Header \tcode{<cstdlib>}\iref{cstdlib.syn}\indexhdr{cstdlib}:
+Header \link{\tcode{<cstdlib>}}{\ref{cstdlib.syn}}\indexhdr{cstdlib}:
 The following functions have different behavior:
 
 \begin{itemize}
@@ -2115,7 +2115,7 @@ The following functions have different behavior:
 Subclause \ref{support.start.term} describes the changes.
 
 \pnum
-Header \tcode{<csetjmp>}\iref{csetjmp.syn}\indexhdr{csetjmp}:
+Header \link{\tcode{<csetjmp>}}{\ref{csetjmp.syn}}\indexhdr{csetjmp}:
 The following functions have different behavior:
 
 \begin{itemize}
@@ -2129,7 +2129,7 @@ Subclause \ref{csetjmp.syn} describes the changes.
 
 \pnum
 The macro \tcode{offsetof}, defined in
-\tcode{<cstddef>}\iref{cstddef.syn}\indexhdr{cstddef},
+\link{\tcode{<cstddef>}}{\ref{cstddef.syn}}\indexhdr{cstddef},
 accepts a restricted set of \tcode{\placeholder{type}} arguments in this International Standard.
 Subclause \ref{support.types.layout} describes the change.
 
diff --git a/source/containers.tex b/source/containers.tex
index 6fc9d17..8f65c06 100644
--- a/source/containers.tex
+++ b/source/containers.tex
@@ -58,9 +58,9 @@ is itself linear.
 \pnum
 For the components affected by this subclause that declare an \tcode{allocator_type},
 objects stored in these components shall be constructed using the function
-\tcode{allocator_traits<allocator_type>::rebind_traits<U>::\brk{}construct}
+\linkx{\tcode{allocator_traits<allocator_type>::rebind_traits<U>::\brk{}construct}}{allocator_traits!construct}{\ref{allocator.traits.members}}
 and destroyed using the function
-\tcode{allocator_traits<allocator_type>::rebind_traits<U>::\brk{}destroy}\iref{allocator.traits.members},
+\linkx{\tcode{allocator_traits<allocator_type>::rebind_traits<U>::\brk{}destroy}}{allocator_traits!destroy}{\ref{allocator.traits.members}},
 where \tcode{U} is either \tcode{allocator_type::value_type} or
 an internal type used by the container.
 These functions are called only for the
@@ -357,7 +357,7 @@ swap.
 
 \pnum
 If the iterator type of a container belongs to the bidirectional or
-random access iterator categories\iref{iterator.requirements},
+random access \link{iterator categories}{\ref{iterator.requirements}},
 the container is called
 \term{reversible}
 and satisfies the additional requirements
@@ -454,9 +454,9 @@ within that container.
 \pnum
 \indextext{container!contiguous}%
 A \defn{contiguous container}
-is a container that supports random access iterators\iref{random.access.iterators}
+is a container that supports \link{random access iterators}{\ref{random.access.iterators}}
 and whose member types \tcode{iterator} and \tcode{const_iterator}
-are contiguous iterators\iref{iterator.requirements.general}.
+are \deflink{contiguous iterators}{\ref{iterator.requirements.general}}.
 
 \pnum
 \tref{containers.optional.operations} lists operations that are provided
@@ -722,7 +722,7 @@ is well-formed when treated as an unevaluated operand.
 \rSec2[container.requirements.dataraces]{Container data races}
 
 \pnum
-For purposes of avoiding data races\iref{res.on.data.races}, implementations shall
+For purposes of \link{avoiding data races}{\ref{res.on.data.races}}, implementations shall
 consider the following functions to be \tcode{const}: \tcode{begin}, \tcode{end},
 \tcode{rbegin}, \tcode{rend}, \tcode{front}, \tcode{back}, \tcode{data}, \tcode{find},
 \tcode{lower_bound}, \tcode{upper_bound}, \tcode{equal_range}, \tcode{at} and, except in
@@ -832,7 +832,7 @@ The complexities of the expressions are sequence dependent.
                     &
  \requires\ \tcode{T} shall be \tcode{EmplaceConstructible} into \tcode{X} from \tcode{*i}.
  For \tcode{vector}, if the iterator does
- not meet the forward iterator requirements\iref{forward.iterators}, \tcode{T}
+ not meet the \link{forward iterator requirements}{\ref{forward.iterators}}, \tcode{T}
  shall also be
  \tcode{MoveInsertable} into \tcode{X}.
  Each iterator in the range \range{i}{j} shall be dereferenced exactly once.\br
@@ -891,7 +891,7 @@ The complexities of the expressions are sequence dependent.
  \requires\ \tcode{T} shall be \tcode{EmplaceConstructible} into \tcode{X} from \tcode{*i}.
  For \tcode{vector} and \tcode{deque}, \tcode{T} shall also be
  \tcode{MoveInsertable} into \tcode{X}, \tcode{MoveConstructible}, \tcode{MoveAssignable},
- and swappable\iref{swappable.requirements}.
+ and \link{swappable}{\ref{swappable.requirements}}.
  Each iterator in the range \range{i}{j} shall be dereferenced exactly once.\br
  \requires \tcode{i} and \tcode{j} are not iterators into \tcode{a}.\br
  Inserts copies of elements in \tcode{[i, j)} before \tcode{p}  \\ \rowsep
@@ -923,7 +923,7 @@ The complexities of the expressions are sequence dependent.
  \tcode{void}           &
  \requires\ \tcode{T} shall be \tcode{EmplaceConstructible} into \tcode{X} from \tcode{*i}
  and assignable from \tcode{*i}. For \tcode{vector}, if the iterator does not
- meet the forward iterator requirements\iref{forward.iterators}, \tcode{T}
+ meet the \link{forward iterator requirements}{\ref{forward.iterators}}, \tcode{T}
  shall also be
  \tcode{MoveInsertable} into \tcode{X}.\br
  Each iterator in the range \range{i}{j} shall be dereferenced exactly once.\br
@@ -1503,7 +1503,7 @@ Each associative container is parameterized on
 \tcode{Key}
 and an ordering relation
 \tcode{Compare}
-that induces a strict weak ordering\iref{alg.sorting} on
+that induces a \link{strict weak ordering}{\ref{alg.sorting}} on
 elements of
 \tcode{Key}.
 In addition,
@@ -1570,8 +1570,8 @@ are the same type.
 \begin{note} \tcode{iterator} and \tcode{const_iterator} have identical semantics in this case, and \tcode{iterator} is convertible to \tcode{const_iterator}. Users can avoid violating the one-definition rule by always using \tcode{const_iterator} in their function parameter lists. \end{note}
 
 \pnum
-The associative containers meet all the requirements of Allocator-aware
-containers\iref{container.requirements.general}, except that for
+The associative containers meet all the requirements of
+\link{Allocator-aware}{\ref{container.requirements.general}} containers, except that for
 \tcode{map} and \tcode{multimap}, the requirements placed on \tcode{value_type}
 in \tref{containers.allocatoraware} apply instead to \tcode{key_type}
 and \tcode{mapped_type}. \begin{note} For example, in some cases \tcode{key_type} and \tcode{mapped_type}
@@ -2099,16 +2099,16 @@ four unordered associative containers: \tcode{unordered_set},
 \indextext{unordered associative containers!lack of comparison functions}%
 \indextext{unordered associative containers!requirements}%
 \indextext{requirements!container!not required for unordered associated containers}%
-Unordered associative containers conform to the requirements for
-Containers\iref{container.requirements}, except that
+Unordered associative containers conform to the \link{requirements for
+Containers}{\ref{container.requirements}}, except that
 the expressions
 \tcode{a == b} and \tcode{a != b} have different semantics than for the other
 container types.
 
 \pnum
 Each unordered associative container is parameterized by \tcode{Key},
-by a function object type \tcode{Hash} that meets the \tcode{Hash}
-requirements\iref{hash.requirements} and acts as a hash function for
+by a function object type \tcode{Hash} that meets the \link{\tcode{Hash}
+requirements}{\ref{hash.requirements}} and acts as a hash function for
 argument values of type \tcode{Key}, and by a binary predicate \tcode{Pred}
 that induces an equivalence relation on values of type \tcode{Key}.
 Additionally, \tcode{unordered_map} and \tcode{unordered_multimap} associate
@@ -2187,8 +2187,8 @@ references to elements. For \tcode{unordered_multiset} and
 equivalent elements.
 
 \pnum
-The unordered associative containers meet all the requirements of Allocator-aware
-containers\iref{container.requirements.general}, except that for
+The unordered associative containers meet all the requirements of
+\link{Allocator-aware containers}{\ref{container.requirements.general}}, except that for
 \tcode{unordered_map} and \tcode{unordered_multimap}, the requirements placed on \tcode{value_type}
 in \tref{containers.allocatoraware} apply instead to \tcode{key_type}
 and \tcode{mapped_type}. \begin{note} For example, \tcode{key_type} and \tcode{mapped_type}
@@ -3121,14 +3121,14 @@ namespace std {
 \indextext{\idxcode{array}!contiguous storage}%
 The header \tcode{<array>} defines a class template for storing fixed-size
 sequences of objects.
-An \tcode{array} is a contiguous container\iref{container.requirements.general}.
+An \tcode{array} is a \deflink{contiguous container}{\ref{container.requirements.general}}.
 An instance of \tcode{array<T, N>} stores \tcode{N} elements of type \tcode{T},
 so that \tcode{size() == N} is an invariant.
 
 \pnum
 \indextext{\idxcode{array}!initialization}%
 \indextext{\idxcode{array}!as aggregate}%
-An \tcode{array} is an aggregate\iref{dcl.init.aggr} that can be
+An \tcode{array} is an \deflink{aggregate}{\ref{dcl.init.aggr}} that can be
 list-initialized with up
 to \tcode{N} elements whose types are convertible to \tcode{T}.
 
@@ -3137,8 +3137,8 @@ to \tcode{N} elements whose types are convertible to \tcode{T}.
 An \tcode{array} satisfies all of the requirements of a container and
 of a reversible container\iref{container.requirements}, except that a default
 constructed \tcode{array} object is not empty and that \tcode{swap} does not have constant
-complexity. An \tcode{array} satisfies some of the requirements of a sequence
-container\iref{sequence.reqmts}.
+complexity. An \tcode{array} satisfies some of the requirements of a
+\link{sequence container}{\ref{sequence.reqmts}}.
 Descriptions are provided here
 only for operations on \tcode{array} that are not described in
 one of these tables and
@@ -3220,7 +3220,7 @@ namespace std {
 \pnum
 \indextext{\idxcode{array}!initialization}%
 \indextext{requirements!container}%
-The conditions for an aggregate\iref{dcl.init.aggr} shall be
+The conditions for an \deflink{aggregate}{\ref{dcl.init.aggr}} shall be
 met. Class \tcode{array} relies on the implicitly-declared special
 member functions~(\ref{class.ctor}, \ref{class.dtor}, and \ref{class.copy}) to
 conform to the container requirements table in~\ref{container.requirements}.
@@ -3883,7 +3883,7 @@ namespace std {
 \pnum
 An incomplete type \tcode{T} may be used when instantiating \tcode{forward_list}
 if the allocator satisfies the
-allocator completeness requirements\iref{allocator.requirements.completeness}.
+\link{allocator completeness requirements}{\ref{allocator.requirements.completeness}}.
 \tcode{T} shall be complete before any member of the resulting specialization
 of \tcode{forward_list} is referenced.
 
@@ -4313,7 +4313,7 @@ Invalidates only the iterators and references to the erased elements.
 predicate.
 
 \pnum
-\remarks Stable\iref{algorithm.stable}.
+\remarks \link{Stable}{\ref{algorithm.stable}}.
 
 \pnum
 \complexity Exactly \tcode{distance(begin(), end())} applications of the corresponding
@@ -4366,7 +4366,7 @@ refer to their elements, but they now behave as iterators into \tcode{*this}, no
 \tcode{x}.
 
 \pnum
-\remarks Stable\iref{algorithm.stable}. The behavior is undefined if
+\remarks \link{Stable}{\ref{algorithm.stable}}. The behavior is undefined if
 \tcode{get_allocator() != x.get_allocator()}.
 
 \pnum
@@ -4387,7 +4387,7 @@ If an exception is thrown, the order of the elements in \tcode{*this} is unspeci
 Does not affect the validity of iterators and references.
 
 \pnum
-\remarks Stable\iref{algorithm.stable}.
+\remarks \link{Stable}{\ref{algorithm.stable}}.
 
 \pnum
 \complexity Approximately $N \log N$ comparisons, where $N$ is \tcode{distance(begin(), end())}.
@@ -4418,7 +4418,7 @@ A
 is a sequence container that supports
 bidirectional iterators and allows constant time insert and erase
 operations anywhere within the sequence, with storage management handled
-automatically. Unlike vectors\iref{vector} and deques\iref{deque},
+automatically. Unlike \link{vectors}{\ref{vector}} and \link{deques}{\ref{deque}},
 fast random access to list elements is not supported, but many
 algorithms only need sequential access anyway.
 
@@ -4575,7 +4575,7 @@ namespace std {
 \pnum
 An incomplete type \tcode{T} may be used when instantiating \tcode{list}
 if the allocator satisfies the
-allocator completeness requirements\iref{allocator.requirements.completeness}.
+\link{allocator completeness requirements}{\ref{allocator.requirements.completeness}}.
 \tcode{T} shall be complete before any member of the resulting specialization
 of \tcode{list} is referenced.
 
@@ -4949,7 +4949,7 @@ or
 \tcode{pred(*i) != false}.
 
 \pnum
-\remarks Stable\iref{algorithm.stable}.
+\remarks \link{Stable}{\ref{algorithm.stable}}.
 
 \pnum
 \complexity
@@ -5066,7 +5066,7 @@ the order of the elements in \tcode{*this} is unspecified.
 Does not affect the validity of iterators and references.
 
 \pnum
-\remarks Stable\iref{algorithm.stable}.
+\remarks \link{Stable}{\ref{algorithm.stable}}.
 
 \pnum
 \complexity
@@ -5097,7 +5097,7 @@ sequence container, including most of the optional sequence container
 requirements\iref{sequence.reqmts}, of an allocator-aware container
 (\tref{containers.allocatoraware}),
 and, for an element type other than \tcode{bool},
-of a contiguous container\iref{container.requirements.general}.
+of a \deflink{contiguous container}{\ref{container.requirements.general}}.
 The exceptions are the
 \tcode{push_front}, \tcode{pop_front}, and \tcode{emplace_front} member functions, which are not
 provided. Descriptions are provided here only for operations on \tcode{vector}
@@ -5223,7 +5223,7 @@ namespace std {
 \pnum
 An incomplete type \tcode{T} may be used when instantiating \tcode{vector}
 if the allocator satisfies the
-allocator completeness requirements\iref{allocator.requirements.completeness}.
+\link{allocator completeness requirements}{\ref{allocator.requirements.completeness}}.
 \tcode{T} shall be complete before any member of the resulting specialization
 of \tcode{vector} is referenced.
 
@@ -5674,7 +5674,7 @@ Unless described below, all operations have the same requirements and
 semantics as the primary \tcode{vector} template, except that operations
 dealing with the \tcode{bool} value type map to bit values in the
 container storage and
-\tcode{allocator_traits::construct}\iref{allocator.traits.members}
+\linkx{\tcode{allocator_traits::construct}}{allocator_traits!construct}{\ref{allocator.traits.members}}
 is not used to construct these values.
 
 \pnum
@@ -8912,9 +8912,9 @@ and
 can be used to instantiate
 \tcode{queue}.
 In particular,
-\tcode{list}\iref{list}
+\link{\tcode{list}}{\ref{list}}
 and
-\tcode{deque}\iref{deque}
+\link{\tcode{deque}}{\ref{deque}}
 can be used.
 
 \begin{codeblock}
@@ -9153,15 +9153,15 @@ and
 can be used to instantiate
 \tcode{priority_queue}.
 In particular,
-\tcode{vector}\iref{vector}
+\link{\tcode{vector}}{\ref{vector}}
 and
-\tcode{deque}\iref{deque}
+\link{\tcode{deque}}{\ref{deque}}
 can be used.
 Instantiating
 \tcode{priority_queue}
 also involves supplying a function or function object for making
 priority comparisons; the library assumes that the function or function
-object defines a strict weak ordering\iref{alg.sorting}.
+object defines a \link{strict weak ordering}{\ref{alg.sorting}}.
 
 \begin{codeblock}
 namespace std {
@@ -9245,7 +9245,7 @@ explicit priority_queue(const Compare& x = Compare(), Container&& y = Container(
 \begin{itemdescr}
 \pnum
 \requires
-\tcode{x} shall define a strict weak ordering\iref{alg.sorting}.
+\tcode{x} shall define a \link{strict weak ordering}{\ref{alg.sorting}}.
 
 \pnum
 \effects
@@ -9270,7 +9270,7 @@ template<class InputIterator>
 \begin{itemdescr}
 \pnum
 \requires
-\tcode{x} shall define a strict weak ordering\iref{alg.sorting}.
+\tcode{x} shall define a \link{strict weak ordering}{\ref{alg.sorting}}.
 
 \pnum
 \effects
@@ -9454,10 +9454,10 @@ and
 can be used to instantiate
 \tcode{stack}.
 In particular,
-\tcode{vector}\iref{vector},
-\tcode{list}\iref{list}
+\link{\tcode{vector}}{\ref{vector}},
+\link{\tcode{list}}{\ref{list}}
 and
-\tcode{deque}\iref{deque}
+\link{\tcode{deque}}{\ref{deque}}
 can be used.
 
 \rSec3[stack.defn]{Definition}
diff --git a/source/conversions.tex b/source/conversions.tex
index 13e028a..2199c19 100644
--- a/source/conversions.tex
+++ b/source/conversions.tex
@@ -97,8 +97,8 @@ is used as a glvalue if and only if the initialization uses it as a glvalue.
 \pnum
 \begin{note}
 For class types, user-defined conversions are considered as well;
-see~\ref{class.conv}. In general, an implicit conversion
-sequence\iref{over.best.ics} consists of a standard conversion
+see~\ref{class.conv}. In general, an \link{implicit conversion
+sequence}{\ref{over.best.ics}} consists of a standard conversion
 sequence followed by a user-defined conversion followed by another
 standard conversion sequence.
 \end{note}
@@ -116,7 +116,7 @@ descriptions of those operators and contexts.
 \pnum
 \indextext{conversion!lvalue-to-rvalue}%
 \indextext{type!incomplete}%
-A glvalue\iref{basic.lval} of a non-function, non-array type \tcode{T}
+A \deflink{glvalue}{\ref{basic.lval}} of a non-function, non-array type \tcode{T}
 can be converted to
 a prvalue.\footnote{For historical reasons, this conversion is called the ``lvalue-to-rvalue''
 conversion, even though that name does not accurately reflect the taxonomy
@@ -137,8 +137,8 @@ is applied to an expression \tcode{e}, and either
 \item \tcode{e} is not potentially evaluated, or
 \item the evaluation of \tcode{e} results in the evaluation of a member
       \tcode{ex} of the set of potential results of \tcode{e}, and \tcode{ex}
-      names a variable \tcode{x} that is not odr-used by
-      \tcode{ex}\iref{basic.def.odr},
+      names a variable \tcode{x} that is not \link{odr-used}{\ref{basic.def.odr}} by
+      \tcode{ex},
 \end{itemize}
 the value contained in the referenced object is not accessed.
 \begin{example}
@@ -162,11 +162,11 @@ following rules:
 \begin{itemize}
 
 \item If \tcode{T} is \cv{}~\tcode{std::nullptr_t}, the result is a
-null pointer constant\iref{conv.ptr}.
+\deflink{null pointer constant}{\ref{conv.ptr}}.
 \begin{note}
 Since no value is fetched from memory,
 there is no side effect for a volatile access\iref{intro.execution}, and
-an inactive member of a union\iref{class.union} may be accessed.
+an inactive member of a \link{union}{\ref{class.union}} may be accessed.
 \end{note}
 
 \item Otherwise, if \tcode{T} has a class
@@ -196,7 +196,7 @@ See also~\ref{basic.lval}.\end{note}
 An lvalue or rvalue of type ``array of \tcode{N} \tcode{T}'' or ``array
 of unknown bound of \tcode{T}'' can be converted to a prvalue of type
 ``pointer to \tcode{T}''.
-The temporary materialization conversion\iref{conv.rval} is applied.
+The \link{temporary materialization conversion}{\ref{conv.rval}} is applied.
 The result is a pointer to the first element of the array.
 
 \rSec1[conv.func]{Function-to-pointer conversion}
@@ -219,7 +219,7 @@ is overloaded.
 
 \pnum
 A prvalue of type \tcode{T} can be converted to an xvalue of type \tcode{T}.
-This conversion initializes a temporary object\iref{class.temporary} of type \tcode{T} from the prvalue
+This conversion initializes a \link{temporary object}{\ref{class.temporary}} of type \tcode{T} from the prvalue
 by evaluating the prvalue with the temporary object as its result object,
 and produces an xvalue denoting the temporary object.
 \tcode{T} shall be a complete type.
@@ -249,10 +249,10 @@ such that \tcode{T} is
 where
 each $\cv{}_i$ is a set of cv-qualifiers\iref{basic.type.qualifier}, and
 each $P_i$ is
-``pointer to''\iref{dcl.ptr},
-``pointer to member of class $C_i$ of type''\iref{dcl.mptr},
+\linkx{``pointer to''}{declarator!pointer}{\ref{dcl.ptr}},
+\linkx{``pointer to member of class $C_i$ of type''}{declarator!pointer to member}{\ref{dcl.mptr}},
 ``array of $N_i$'', or
-``array of unknown bound of''\iref{dcl.array}.
+``\link{array of unknown bound}{\ref{dcl.array}} of''.
 If $P_i$ designates an array,
 the cv-qualifiers $\cv{}_{i+1}$ on the element type are also taken as
 the cv-qualifiers $\cv{}_i$ of the array.
@@ -333,8 +333,8 @@ types) are never cv-qualified\iref{dcl.fct}.
 \pnum
 \indextext{promotion!integral}%
 A prvalue of an integer type other than \tcode{bool}, \tcode{char16_t},
-\tcode{char32_t}, or \tcode{wchar_t} whose integer conversion
-rank\iref{conv.rank} is less than the rank of \tcode{int} can be
+\tcode{char32_t}, or \tcode{wchar_t} whose \link{integer conversion
+rank}{\ref{conv.rank}} is less than the rank of \tcode{int} can be
 converted to a prvalue of type \tcode{int} if \tcode{int} can represent
 all the values of the source type; otherwise, the source prvalue can be
 converted to a prvalue of type \tcode{unsigned int}.
@@ -363,7 +363,7 @@ range $b_\text{min}$ to $b_\text{max}$ as described in~\ref{dcl.enum}): \tcode{i
 \tcode{long long int}, or \tcode{unsigned long long int}. If none of the types in that
 list can represent all the values of the enumeration, a prvalue of an unscoped
 enumeration type can be converted to a prvalue of the extended integer type with lowest
-integer conversion rank\iref{conv.rank} greater than the rank of \tcode{long long}
+\link{integer conversion rank}{\ref{conv.rank}} greater than the rank of \tcode{long long}
 in which all the values of the enumeration can be represented. If there are
 two such extended types, the signed one is chosen.
 
@@ -375,7 +375,7 @@ enumeration type whose underlying type is fixed can also be converted to a prval
 the promoted underlying type.
 
 \pnum
-A prvalue for an integral bit-field\iref{class.bit} can be converted
+A prvalue for an integral \link{bit-field}{\ref{class.bit}} can be converted
 to a prvalue of type \tcode{int} if \tcode{int} can represent all the
 values of the bit-field; otherwise, it can be converted to
 \tcode{unsigned int} if \tcode{unsigned int} can represent all the
@@ -489,7 +489,7 @@ source type is \tcode{bool}, the value \tcode{false} is converted to zero and th
 \indextext{null pointer conversion|see{conversion, null pointer}}%
 \indextext{pointer!zero|see{value, null pointer}}%
 \indextext{value!null pointer}%
-A \defnx{null pointer constant}{constant!null pointer} is an integer literal\iref{lex.icon} with
+A \defnx{null pointer constant}{constant!null pointer} is an \link{integer literal}{\ref{lex.icon}} with
 value zero
 or a prvalue of type \tcode{std::nullptr_t}. A null pointer constant can be
 converted to a pointer type; the
@@ -501,8 +501,8 @@ Such a conversion is called a \defnx{null pointer conversion}{conversion!null po
 Two null pointer values of the same type shall compare
 equal. The conversion of a null pointer constant to a pointer to
 cv-qualified type is a single conversion, and not the sequence of a
-pointer conversion followed by a qualification
-conversion\iref{conv.qual}. A null pointer constant of integral type
+pointer conversion followed by a \link{qualification
+conversion}{\ref{conv.qual}}. A null pointer constant of integral type
 can be converted to a prvalue of type \tcode{std::nullptr_t}.
 \begin{note} The resulting prvalue is not a null pointer value. \end{note}
 
@@ -540,7 +540,7 @@ Two null member pointer values of
 the same type shall compare equal. The conversion of a null pointer
 constant to a pointer to member of cv-qualified type is a single
 conversion, and not the sequence of a pointer-to-member conversion
-followed by a qualification conversion\iref{conv.qual}.
+followed by a \link{qualification conversion}{\ref{conv.qual}}.
 
 \pnum
 A prvalue of type ``pointer to member of \tcode{B} of type \cv{}
@@ -548,8 +548,8 @@ A prvalue of type ``pointer to member of \tcode{B} of type \cv{}
 a prvalue of type ``pointer to member of \tcode{D} of type \cv{}
 \tcode{T}'', where \tcode{D} is a derived class\iref{class.derived}
 of \tcode{B}. If \tcode{B} is an
-inaccessible\iref{class.access},
-ambiguous\iref{class.member.lookup}, or virtual\iref{class.mi} base
+\link{inaccessible}{\ref{class.access}},
+\link{ambiguous}{\ref{class.member.lookup}}, or \link{virtual}{\ref{class.mi}} base
 class of \tcode{D}, or a base class of a virtual base class of
 \tcode{D}, a program that necessitates this conversion is ill-formed.
 The result of the conversion refers to the same member as the pointer to
@@ -602,7 +602,7 @@ A prvalue of arithmetic, unscoped enumeration, pointer, or pointer-to-member
 type can be converted to a prvalue of type \tcode{bool}. A zero value, null
 pointer value, or null member pointer value is converted to \tcode{false}; any
 other value is converted to \tcode{true}. For
-direct-initialization\iref{dcl.init}, a prvalue of type
+\deflink{direct-initialization}{\ref{dcl.init}}, a prvalue of type
 \tcode{std::nullptr_t} can be converted to a prvalue of type
 \tcode{bool}; the resulting value is \tcode{false}.
 
diff --git a/source/declarations.tex b/source/declarations.tex
index f86720e..7f9e8a5 100644
--- a/source/declarations.tex
+++ b/source/declarations.tex
@@ -122,7 +122,7 @@ is \impldef{meaning of attribute declaration}.
 \pnum
 \indextext{declaration}%
 \indextext{scope}%
-A declaration occurs in a scope\iref{basic.scope}; the scope rules are
+A declaration occurs in a \deflink{scope}{\ref{basic.scope}}; the scope rules are
 summarized in~\ref{basic.lookup}. A declaration that declares a function
 or defines a class, namespace, template, or function also has one or
 more scopes nested within it. These nested scopes, in turn, can have
@@ -137,7 +137,7 @@ the declaration.
 \indextext{declarator}%
 In a \grammarterm{simple-declaration}, the optional
 \grammarterm{init-declarator-list} can be omitted only when declaring a
-class\iref{class} or enumeration\iref{dcl.enum}, that is,
+\link{class}{\ref{class}} or \link{enumeration}{\ref{dcl.enum}}, that is,
 when the \grammarterm{decl-specifier-seq} contains either a
 \grammarterm{class-specifier}, an \grammarterm{elaborated-type-specifier} with
 a \grammarterm{class-key}\iref{class.name}, or an
@@ -161,15 +161,15 @@ typedef class { };  // ill-formed
 \indextext{\idxgram{static_assert}}%
 In a \grammarterm{static_assert-declaration}, the
 \grammarterm{constant-expression} shall be
-a contextually converted constant expression
-of type \tcode{bool}\iref{expr.const}.
+a \deflinkx{contextually converted constant expression
+of type \tcode{bool}}{contextually converted constant expression of type bool}{\ref{expr.const}}.
 If the value of the expression when
 so converted is \tcode{true}, the declaration has no
 effect. Otherwise, the program is ill-formed, and the resulting
 diagnostic message\iref{intro.compliance} shall include the text of
 the \grammarterm{string-literal}, if one is supplied,
-except that characters not in the basic
-source character set\iref{lex.charset} are not required to appear in
+except that characters not in the \deflinkx{basic
+source character set}{character set!basic source}{\ref{lex.charset}} are not required to appear in
 the diagnostic message.
 \begin{example}
 
@@ -184,7 +184,7 @@ An \grammarterm{empty-declaration} has no effect.
 A \grammarterm{simple-declaration} with an \grammarterm{identifier-list} is called
 a \defn{structured binding declaration}\iref{dcl.struct.bind}.
 The \grammarterm{decl-specifier-seq} shall
-contain only the \grammarterm{type-specifier} \tcode{auto}\iref{dcl.spec.auto}
+contain only the \grammarterm{type-specifier} \link{\tcode{auto}}{\ref{dcl.spec.auto}}
 and \grammarterm{cv-qualifier}{s}.
 The \grammarterm{initializer} shall be
 of the form ``\tcode{=} \grammarterm{assignment-expression}'',
@@ -320,20 +320,16 @@ void k(unsigned int Pc);        // \tcode{void k(unsigned int)}
 \rSec2[dcl.stc]{Storage class specifiers}%
 \indextext{specifier!storage class}%
 \indextext{declaration!storage class}%
-\indextext{\idxcode{static}}%
-\indextext{\idxcode{thread_local}}%
-\indextext{\idxcode{extern}}%
-\indextext{\idxcode{mutable}}
 
 \pnum
 The storage class specifiers are
 
 \begin{bnf}
 \nontermdef{storage-class-specifier}\br
-    \terminal{static}\br
-    \terminal{thread_local}\br
-    \terminal{extern}\br
-    \terminal{mutable}
+    \indexedspan{\terminal{static}}{\indextext{\idxcode{static}}}\br
+    \indexedspan{\terminal{thread_local}}{\indextext{\idxcode{thread_local}}}\br
+    \indexedspan{\terminal{extern}}{\indextext{\idxcode{extern}}}\br
+    \indexedspan{\terminal{mutable}}{\indextext{\idxcode{mutable}}}
 \end{bnf}
 
 At most one \grammarterm{storage-class-specifier} shall appear in a given
@@ -354,21 +350,20 @@ global namespace, which shall be declared
 other specifiers. A \grammarterm{storage-class-specifier}
 other than \tcode{thread_local}
 shall not be
-specified in an explicit specialization\iref{temp.expl.spec} or an
-explicit instantiation\iref{temp.explicit} directive.
+specified in an \link{explicit specialization}{\ref{temp.expl.spec}} or an
+\link{explicit instantiation}{\ref{temp.explicit}} directive.
 
 \pnum
 \begin{note}
 A variable declared without a \grammarterm{storage-class-specifier}
 at block scope or declared as a function parameter
-has automatic storage duration by default\iref{basic.stc.auto}.
+has \deflink{automatic storage duration}{\ref{basic.stc.auto}} by default.
 \end{note}
 
 \pnum
 The \tcode{thread_local} specifier
-indicates that the named entity has thread storage duration\iref{basic.stc.thread}. It
-shall be applied only
-to the names of variables of namespace
+indicates that the named entity has \deflink{thread storage duration}{\ref{basic.stc.thread}}.
+It shall be applied only to the names of variables of namespace
 or block scope and to the names of static data members.
 When \tcode{thread_local} is applied to a variable of block scope the
 \grammarterm{storage-class-specifier} \tcode{static} is implied if no other
@@ -378,13 +373,13 @@ When \tcode{thread_local} is applied to a variable of block scope the
 \pnum
 \indextext{restriction!\idxcode{static}}%
 The \tcode{static} specifier can be applied only to names of variables and
-functions and to anonymous unions\iref{class.union.anon}. There can be no
+functions and to \link{anonymous unions}{\ref{class.union.anon}}. There can be no
 \tcode{static} function declarations within a block, nor any
 \tcode{static} function parameters. A \tcode{static} specifier used in
-the declaration of a variable declares the variable to have static storage
-duration\iref{basic.stc.static}, unless accompanied by the
-\tcode{thread_local} specifier, which declares the variable to have thread
-storage duration\iref{basic.stc.thread}. A \tcode{static} specifier can be
+the declaration of a variable declares the variable to have
+\deflink{static storage duration}{\ref{basic.stc.static}}, unless accompanied by the
+\tcode{thread_local} specifier, which declares the variable to have
+\deflink{thread storage duration}{\ref{basic.stc.thread}}. A \tcode{static} specifier can be
 used in declarations of class members;~\ref{class.static} describes its
 effect.
 \indextext{\idxcode{static}!linkage of}%
@@ -470,7 +465,7 @@ void h() {
 
 \pnum
 The \tcode{mutable} specifier shall appear only in the declaration of
-a non-static data member\iref{class.mem}
+a \deflink{non-static data member}{\ref{class.mem}}
 whose type is neither const-qualified nor a reference type.
 \begin{example}
 \begin{codeblock}
@@ -520,7 +515,7 @@ see~\ref{class.conv.ctor} and~\ref{class.conv.fct}.
 \pnum
 Declarations containing the \grammarterm{decl-specifier} \tcode{typedef}
 declare identifiers that can be used later for naming
-fundamental\iref{basic.fundamental} or compound\iref{basic.compound}
+\link{fundamental}{\ref{basic.fundamental}} or \link{compound}{\ref{basic.compound}}
 types. The \tcode{typedef} specifier shall not be
 combined in a \grammarterm{decl-specifier-seq} with any other kind of
 specifier except a \grammarterm{defining-type-specifier}, and it shall not be used in the
@@ -664,11 +659,12 @@ class complex { @\commentellip@ };    // error: redefinition
 \indextext{class name!\idxcode{typedef}}%
 A \grammarterm{typedef-name} that names a class type, or a cv-qualified
 version thereof, is also a \grammarterm{class-name}\iref{class.name}. If
-a \grammarterm{typedef-name} is used to identify the subject of an
-\grammarterm{elaborated-type-specifier}\iref{dcl.type.elab}, a class
-definition\iref{class}, a constructor
-declaration\iref{class.ctor}, or a destructor
-declaration\iref{class.dtor}, the program is ill-formed.
+a \grammarterm{typedef-name} is used to identify the subject of
+an \grammarterm{elaborated-type-specifier}\iref{dcl.type.elab},
+a \link{class}{\ref{class}} definition,
+a \link{constructor}{\ref{class.ctor}} declaration,
+or a \link{destructor}{\ref{class.dtor}} declaration,
+the program is ill-formed.
 \end{note}
 \begin{example}
 
@@ -771,7 +767,7 @@ requirements:
 
 \begin{itemize}
 \item
-it shall not be virtual\iref{class.virtual};
+it shall not be \link{virtual}{\ref{class.virtual}};
 
 \item
 its return type shall be a literal type;
@@ -788,7 +784,7 @@ that does not contain
 \begin{itemize}
 \item an \grammarterm{asm-definition},
 \item a \tcode{goto} statement,
-\item an identifier label\iref{stmt.label},
+\item an \deflink{identifier label}{\ref{stmt.label}},
 \item a \grammarterm{try-block}, or
 \item a definition of a variable
 of non-literal type or
@@ -885,8 +881,8 @@ private:
 For a constexpr function or constexpr constructor
 that is neither defaulted nor a template,
 if no argument values exist such that
-an invocation of the function or constructor could be an evaluated subexpression of a core
-constant expression\iref{expr.const}, or,
+an invocation of the function or constructor could be an evaluated subexpression of a
+\deflinkx{core constant expression}{expression!core constant}{\ref{expr.const}}, or,
 for a constructor, a constant initializer for some object\iref{basic.start.static},
 the program is ill-formed, no diagnostic required.
 \begin{example}
@@ -928,7 +924,7 @@ non-constexpr function in all respects except that
 \begin{itemize}
 \item
 a call to a constexpr
-function can appear in a constant expression\iref{expr.const} and
+function can appear in a \deflink{constant expression}{\ref{expr.const}} and
 \item
 copy elision is mandatory in a constant expression\iref{class.copy}.
 \end{itemize}
@@ -953,7 +949,7 @@ shall have literal type and
 shall be initialized.
 In any \tcode{constexpr} variable declaration,
 the full-expression of the initialization
-shall be a constant expression\iref{expr.const}.
+shall be a \link{constant expression}{\ref{expr.const}}.
 \begin{example}
 \begin{codeblock}
 struct pixel {
@@ -1140,7 +1136,7 @@ these could be introduced by typedefs.\end{note}
 \pnum
 \begin{note}
 Declaring a variable \tcode{const} can affect its linkage\iref{dcl.stc}
-and its usability in constant expressions\iref{expr.const}. As
+and its usability in \link{constant expressions}{\ref{expr.const}}. As
 described in~\ref{dcl.init}, the definition of an object or subobject
 of const-qualified type must specify an initializer or be subject to
 default-initialization.
@@ -1154,7 +1150,7 @@ the object referenced is a non-const object and can be modified through
 some other access path.
 \begin{note}
 Cv-qualifiers are supported by the type system so that they cannot be
-subverted without casting\iref{expr.const.cast}.
+subverted without \link{casting}{\ref{expr.const.cast}}.
 \end{note}
 
 \pnum
@@ -1373,8 +1369,7 @@ the specification of the structured binding declaration;
 
 \item otherwise, if \tcode{e} is an unparenthesized \grammarterm{id-expression} or
 an unparenthesized
-class
-member access\iref{expr.ref}, \tcode{decltype(e)} is the
+\link{class member access}{\ref{expr.ref}}, \tcode{decltype(e)} is the
 type of the entity named by \tcode{e}. If there is no such entity, or
 if \tcode{e} names a set of overloaded functions, the program is
 ill-formed;
@@ -1389,8 +1384,8 @@ is \tcode{T\&}, where \tcode{T} is the type of \tcode{e};
 \item otherwise, \tcode{decltype(e)} is the type of \tcode{e}.
 \end{itemize}
 
-The operand of the \tcode{decltype} specifier is an unevaluated
-operand\iref{expr.prop}.
+The operand of the \tcode{decltype} specifier is an
+\deflink{unevaluated operand}{\ref{expr.prop}}.
 
 \begin{example}
 \begin{codeblock}
@@ -1411,7 +1406,7 @@ in~\ref{dcl.spec.auto}.
 
 \pnum
 If the operand of a \grammarterm{decltype-specifier} is a prvalue,
-the temporary materialization conversion is not applied\iref{conv.rval}
+the \link{temporary materialization conversion}{\ref{conv.rval}} is not applied
 and no result object is provided for the prvalue.
 The type of the prvalue may be incomplete.
 \begin{note}
@@ -1477,9 +1472,9 @@ void r() {
 An \grammarterm{attribute-specifier-seq} shall not appear in an \grammarterm{elaborated-type-specifier}
 unless the latter is the sole constituent of a declaration.
 If an \grammarterm{elaborated-type-specifier} is the sole constituent of a
-declaration, the declaration is ill-formed unless it is an explicit
-specialization\iref{temp.expl.spec}, an explicit
-instantiation\iref{temp.explicit} or it has one of the following
+declaration, the declaration is ill-formed unless it is an \link{explicit
+specialization}{\ref{temp.expl.spec}}, an \link{explicit
+instantiation}{\ref{temp.explicit}} or it has one of the following
 forms:
 
 \begin{ncsimplebnf}
@@ -1529,10 +1524,10 @@ the form of \grammarterm{elaborated-type-specifier} that declares a
 as referring to the definition of the class. Thus, in any
 \grammarterm{elaborated-type-specifier}, the \tcode{enum} keyword
 shall be
-used to refer to an enumeration\iref{dcl.enum}, the \tcode{union}
-\grammarterm{class-key} shall be used to refer to a union\iref{class},
+used to refer to an \link{enumeration}{\ref{dcl.enum}}, the \tcode{union}
+\grammarterm{class-key} shall be used to refer to a \deflink{union}{\ref{class}},
 and either the \tcode{class} or \tcode{struct}
-\grammarterm{class-key} shall be used to refer to a class\iref{class}
+\grammarterm{class-key} shall be used to refer to a \link{class}{\ref{class}}
 declared using the \tcode{class} or \tcode{struct}
 \grammarterm{class-key}. \begin{example}
 
@@ -1554,7 +1549,7 @@ from an initializer. The \tcode{auto}
 introduce a function type having a \grammarterm{trailing-return-type} or to
 signify that a lambda is a generic lambda\iref{expr.prim.lambda}.
 The \tcode{auto} \grammarterm{type-specifier} is also used to introduce a
-structured binding declaration\iref{dcl.struct.bind}.
+\link{structured binding declaration}{\ref{dcl.struct.bind}}.
 
 \pnum
 The placeholder type can appear with a function declarator in the
@@ -1621,7 +1616,7 @@ explicitly allowed in this subclause is ill-formed.
 If the \grammarterm{init-declarator-list} contains more than one
 \grammarterm{init-declarator}, they shall all form declarations of
 variables. The type of each declared variable is determined
-by placeholder type deduction\iref{dcl.type.auto.deduct},
+by \deflink{placeholder type deduction}{\ref{dcl.type.auto.deduct}},
 and if the type that replaces the placeholder type is not the
 same in each deduction, the program is ill-formed.
 
@@ -1724,10 +1719,10 @@ auto frf(int i) { return i; }                   // not a friend of \tcode{A<int>
 
 \pnum
 A function declared with a return type that uses a placeholder type shall not
-be \tcode{virtual}\iref{class.virtual}.
+be \link{\tcode{virtual}}{\ref{class.virtual}}.
 
 \pnum
-An explicit instantiation declaration\iref{temp.explicit} does not cause the
+An \link{explicit instantiation declaration}{\ref{temp.explicit}} does not cause the
 instantiation of an entity declared using a placeholder type, but it also does
 not prevent that entity from being instantiated as needed to determine its
 type.
@@ -1800,7 +1795,7 @@ Obtain \tcode{P} from
 invented type template parameter \tcode{U} or,
 if the initialization is copy-list-initialization, with
 \tcode{std::initializer_list<U>}. Deduce a value for \tcode{U} using the rules
-of template argument deduction from a function call\iref{temp.deduct.call},
+of \link{template argument deduction from a function call}{\ref{temp.deduct.call}},
 where \tcode{P} is a
 function template parameter type and
 the corresponding argument is \tcode{e}.
@@ -1987,7 +1982,7 @@ type. \begin{example}
 \end{note}
 If an \grammarterm{opaque-enum-declaration} contains
 a \grammarterm{nested-name-specifier},
-the declaration shall be an explicit specialization\iref{temp.expl.spec}.
+the declaration shall be an \link{explicit specialization}{\ref{temp.expl.spec}}.
 
 \pnum
 \indextext{constant!enumeration}%
@@ -2065,8 +2060,9 @@ If the underlying type is fixed, the type of each enumerator
 prior to the closing brace is the underlying
 type
 and the \grammarterm{constant-expression} in the \grammarterm{enumerator-definition}
-shall be a converted constant expression of the underlying
-type\iref{expr.const}.
+shall be a
+\deflinkx{converted constant expression}{expression!converted constant}{\ref{expr.const}}
+of the underlying type.
 If the underlying
 type is not fixed,
 the type of each enumerator prior to the closing brace is determined as
@@ -2075,8 +2071,9 @@ follows:
 \begin{itemize}
 \item If an
 initializer is specified for an enumerator, the
-\grammarterm{constant-expression} shall be an integral constant
-expression\iref{expr.const}. If the expression has
+\grammarterm{constant-expression} shall be an
+\deflinkx{integral constant expression}{expression!integral constant}{\ref{expr.const}}.
+If the expression has
 unscoped enumeration type, the enumerator has the underlying type of that
 enumeration type, otherwise it has the same type as the expression.
 
@@ -2093,7 +2090,7 @@ is ill-formed.
 
 \pnum
 An enumeration whose underlying type is fixed is an incomplete type from its
-point of declaration\iref{basic.scope.pdecl} to immediately after its
+\deflink{point of declaration}{\ref{basic.scope.pdecl}} to immediately after its
 \grammarterm{enum-base} (if any), at which point it becomes a complete type.
 An enumeration whose underlying type is not fixed is an incomplete type from
 its point of declaration to immediately after the closing \tcode{\}} of its
@@ -2143,7 +2140,7 @@ if they have the same underlying type.
 
 \pnum
 The value of an enumerator or an object of an unscoped enumeration type is
-converted to an integer by integral promotion\iref{conv.prom}.
+converted to an integer by \deflinkx{integral promotion}{integral promotions}{\ref{conv.prom}}.
 \begin{example}
 \begin{codeblock}
   enum color { red, yellow, green=20, blue };
@@ -2370,13 +2367,13 @@ appertains to the namespace being defined or extended.
 Members of an inline namespace can be used in most respects as though they were members
 of the enclosing namespace. Specifically, the inline namespace and its enclosing
 namespace are both added to the set of associated namespaces used in
-argument-dependent lookup\iref{basic.lookup.argdep} whenever one of them is,
+\link{argument-dependent lookup}{\ref{basic.lookup.argdep}} whenever one of them is,
 and a \grammarterm{using-directive}\iref{namespace.udir} that names the inline
-namespace is implicitly inserted into the enclosing namespace as for an unnamed
-namespace\iref{namespace.unnamed}. Furthermore, each
-member of the inline namespace can subsequently be partially
-specialized\iref{temp.class.spec}, explicitly
-instantiated\iref{temp.explicit}, or explicitly specialized\iref{temp.expl.spec} as
+namespace is implicitly inserted into the enclosing namespace as for an \link{unnamed
+namespace}{\ref{namespace.unnamed}}. Furthermore, each
+member of the inline namespace can subsequently be \link{partially
+specialized}{\ref{temp.class.spec}}, \link{explicitly
+instantiated}{\ref{temp.explicit}}, or \link{explicitly specialized}{\ref{temp.expl.spec}} as
 though it were a member of the enclosing namespace. Finally, looking up a name in the
 enclosing namespace via explicit qualification\iref{namespace.qual} will include
 members of the inline namespace brought in by the \grammarterm{using-directive} even if
@@ -2477,8 +2474,8 @@ that is an \grammarterm{opaque-enum-declaration},
 declares (or redeclares) its \grammarterm{unqualified-id} or
 \grammarterm{identifier} as a member of \tcode{N}.
 \begin{note}
-An explicit instantiation\iref{temp.explicit} or
-explicit specialization\iref{temp.expl.spec} of a template
+An \link{explicit instantiation}{\ref{temp.explicit}} or
+\link{explicit specialization}{\ref{temp.expl.spec}} of a template
 does not introduce a name and thus may be declared using an
 \grammarterm{unqualified-id} in a member of the enclosing namespace set,
 if the primary template is declared in an inline namespace.
@@ -2882,8 +2879,8 @@ template is visible\iref{temp.class.spec}.
 
 \pnum
 Since a \grammarterm{using-declaration} is a declaration, the restrictions
-on declarations of the same name in the same declarative
-region\iref{basic.scope} also apply to \grammarterm{using-declaration}{s}.
+on declarations of the same name in the same
+\deflink{declarative region}{\ref{basic.scope}} also apply to \grammarterm{using-declaration}{s}.
 \begin{example}
 
 \begin{codeblock}
@@ -2919,7 +2916,7 @@ void func() {
 
 \pnum
 If a function declaration in namespace scope or block scope has the same
-name and the same parameter-type-list\iref{dcl.fct} as
+name and the same \deflink{parameter-type-list}{\ref{dcl.fct}} as
 a function introduced by a \grammarterm{using-declaration}, and the
 declarations do not declare the same function, the program is
 ill-formed. If a function template declaration in namespace scope has
@@ -2962,7 +2959,7 @@ When a \grammarterm{using-declarator} brings declarations from a base class into
 a derived class, member functions and member function templates in
 the derived class override and/or hide member functions and member
 function templates with the same name,
-parameter-type-list\iref{dcl.fct}, cv-qualification, and \grammarterm{ref-qualifier} (if any) in a base
+\deflink{parameter-type-list}{\ref{dcl.fct}}, cv-qualification, and \grammarterm{ref-qualifier} (if any) in a base
 class (rather than conflicting).
 Such hidden or overridden declarations are excluded from the set of
 declarations introduced by the \grammarterm{using-declarator}.
@@ -3138,7 +3135,7 @@ The optional \grammarterm{attribute-specifier-seq} appertains to the \grammarter
 A \grammarterm{using-directive} specifies that the names in the nominated
 namespace can be used in the scope in which the
 \grammarterm{using-directive} appears after the \grammarterm{using-directive}.
-During unqualified name lookup\iref{basic.lookup.unqual}, the names
+During \link{unqualified name lookup}{\ref{basic.lookup.unqual}}, the names
 appear as if they were declared in the nearest enclosing namespace which
 contains both the \grammarterm{using-directive} and the nominated
 namespace.
@@ -3181,7 +3178,7 @@ void f4() {
 \end{example}
 
 \pnum
-For unqualified lookup\iref{basic.lookup.unqual}, the
+For \link{unqualified lookup}{\ref{basic.lookup.unqual}}, the
 \grammarterm{using-directive} is transitive: if a scope contains a
 \grammarterm{using-directive} that nominates a second namespace that itself
 contains \grammarterm{using-directive}{s}, the effect is as if the
@@ -3234,7 +3231,7 @@ namespace B {
 
 
 \pnum
-If a namespace is extended\iref{namespace.def} after a
+If a namespace is \deflinkx{extended}{namespace!extend}{\ref{namespace.def}} after a
 \grammarterm{using-directive} for that namespace is given, the additional
 members of the extended namespace and the members of namespaces
 nominated by \grammarterm{using-directive}{s} in the
@@ -3368,7 +3365,7 @@ different language linkages are distinct types even if they are
 otherwise identical.
 
 \pnum
-Linkage\iref{basic.link} between \Cpp{} and  non-\Cpp{} code fragments can
+\link{Linkage}{\ref{basic.link}} between \Cpp{} and  non-\Cpp{} code fragments can
 be achieved using a \grammarterm{linkage-specification}:
 
 \indextext{\idxgram{linkage-specification}}%
@@ -3416,7 +3413,7 @@ extern "C" {
 Linkage specifications nest. When linkage specifications nest, the
 innermost one determines the language linkage. A linkage specification
 does not establish a scope. A \grammarterm{linkage-specification} shall
-occur only in namespace scope\iref{basic.scope.namespace}. In a
+occur only in \link{namespace scope}{\ref{basic.scope.namespace}}. In a
 \grammarterm{linkage-specification}, the specified language linkage applies
 to the function types of all function declarators, function names with
 external linkage, and variable names with external linkage declared
@@ -3487,7 +3484,7 @@ extern "C" {
 
 \pnum
 If two declarations declare functions with the same name and
-parameter-type-list\iref{dcl.fct} to be members of the same
+\deflink{parameter-type-list}{\ref{dcl.fct}} to be members of the same
 namespace or declare objects with the same name to be members of the same
 namespace and the declarations give the names different language linkages, the
 program is ill-formed; no diagnostic is required if the declarations appear in
@@ -3550,8 +3547,8 @@ extern "C" int h() { return 97; }   // definition for the function \tcode{h} wit
 A declaration directly contained in a
 \grammarterm{linkage-specification}
 is treated as if it contains the
-\tcode{extern}
-specifier\iref{dcl.stc} for the purpose of determining the linkage of the
+\linkx{\tcode{extern}
+specifier}{extern}{\ref{dcl.stc}} for the purpose of determining the linkage of the
 declared name and whether it is a definition. Such a declaration shall
 not specify a storage class.
 \begin{example}
@@ -3697,16 +3694,16 @@ affects the tokens in an \grammarterm{attribute-argument-clause}.
 \pnum
 In an \grammarterm{attribute-list}, an ellipsis may appear only if that
 \grammarterm{attribute}'s specification permits it. An \grammarterm{attribute} followed
-by an ellipsis is a pack expansion\iref{temp.variadic}.
+by an ellipsis is a \deflink{pack expansion}{\ref{temp.variadic}}.
 An \grammarterm{attribute-specifier} that contains no \grammarterm{attribute}{s} has no
 effect. The order in which the \grammarterm{attribute-token}{s} appear in an
 \grammarterm{attribute-list} is not significant. If a
-keyword\iref{lex.key}
-or an alternative token\iref{lex.digraph} that satisfies the syntactic requirements
+\link{keyword}{\ref{lex.key}}
+or an \link{alternative token}{\ref{lex.digraph}} that satisfies the syntactic requirements
 of an \grammarterm{identifier}\iref{lex.name} is
 contained in
-an \grammarterm{attribute-token}, it is considered an identifier. No name
-lookup\iref{basic.lookup} is performed on any of the identifiers contained in an
+an \grammarterm{attribute-token}, it is considered an identifier. No
+\link{name lookup}{\ref{basic.lookup}} is performed on any of the identifiers contained in an
 \grammarterm{attribute-token}. The \grammarterm{attribute-token} determines additional
 requirements on the \grammarterm{attribute-argument-clause} (if any).
 
@@ -3718,9 +3715,9 @@ statement, identified by the syntactic context where it appears
 entity or statement contains an \grammarterm{attribute} or \grammarterm{alignment-specifier} that
 is not allowed to apply to that
 entity or statement, the program is ill-formed. If an \grammarterm{attribute-specifier-seq}
-appertains to a friend declaration\iref{class.friend}, that declaration shall be a
-definition. No \grammarterm{attribute-specifier-seq} shall appertain to an explicit
-instantiation\iref{temp.explicit}.
+appertains to a \link{friend declaration}{\ref{class.friend}}, that declaration shall be a
+definition. No \grammarterm{attribute-specifier-seq} shall appertain to an
+\link{explicit instantiation}{\ref{temp.explicit}}.
 
 \pnum
 For an \grammarterm{attribute-token}
@@ -3770,7 +3767,7 @@ definition of a class (in an
 declaration or definition of an enumeration (in an
 \grammarterm{opaque-enum-declaration} or \grammarterm{enum-head},
 respectively\iref{dcl.enum}).
-An \grammarterm{alignment-specifier} with an ellipsis is a pack expansion\iref{temp.variadic}.
+An \grammarterm{alignment-specifier} with an ellipsis is a \deflink{pack expansion}{\ref{temp.variadic}}.
 
 \pnum
 When the \grammarterm{alignment-specifier} is of the form
@@ -3866,9 +3863,9 @@ in each \grammarterm{attribute-list} and no
 \grammarterm{attribute-argument-clause} shall be present. The attribute may be
 applied to the \grammarterm{declarator-id} of a
 \grammarterm{parameter-declaration} in a function declaration or lambda, in
-which case it specifies that the initialization of the parameter carries a
-dependency to\iref{intro.multithread} each lvalue-to-rvalue
-conversion\iref{conv.lval} of that object. The attribute may also be applied
+which case it specifies that the initialization of the parameter
+\deflink{carries a dependency}{\ref{intro.multithread}} to each \link{lvalue-to-rvalue
+conversion}{\ref{conv.lval}} of that object. The attribute may also be applied
 to the \grammarterm{declarator-id} of a function declaration, in which case it
 specifies that the return value, if any, carries a dependency to the evaluation
 of the function call expression.
@@ -3985,14 +3982,14 @@ to the name or entity. \end{note}
 
 \pnum
 The \grammarterm{attribute-token} \tcode{fallthrough}
-may be applied to a null statement\iref{stmt.expr};
+may be applied to a \deflink{null statement}{\ref{stmt.expr}};
 \indextext{statement!fallthrough}
 such a statement is a fallthrough statement.
 The \grammarterm{attribute-token} \tcode{fallthrough}
 shall appear at most once in each \grammarterm{attribute-list} and
 no \grammarterm{attribute-argument-clause} shall be present.
 A fallthrough statement may only appear within
-an enclosing \tcode{switch} statement\iref{stmt.switch}.
+an enclosing \link{\tcode{switch} statement}{\ref{stmt.switch}}.
 The next statement that would be executed after a fallthrough statement
 shall be a labeled statement whose label is a case label or
 default label for the same \tcode{switch} statement.
diff --git a/source/declarators.tex b/source/declarators.tex
index 4bd8d4c..71cc82c 100644
--- a/source/declarators.tex
+++ b/source/declarators.tex
@@ -35,7 +35,7 @@ each of which can have an initializer.
 The three components of a
 \grammarterm{simple-declaration}
 are the
-attributes\iref{dcl.attr}, the
+\link{attributes}{\ref{dcl.attr}}, the
 specifiers
 (\grammarterm{decl-specifier-seq};
 \ref{dcl.spec}) and the declarators
@@ -84,7 +84,7 @@ struct S { @\commentellip@ };
 S S;
 S T;                    // error
 \end{codeblock}
-Another exception is when \tcode{T} is \tcode{auto}\iref{dcl.spec.auto},
+Another exception is when \tcode{T} is \link{\tcode{auto}}{\ref{dcl.spec.auto}},
 for example:
 \begin{codeblock}
 auto i = 1, j = 2.0;    // error: deduced types for \tcode{i} and \tcode{j} do not match
@@ -532,7 +532,6 @@ Parentheses do not alter the type of the embedded
 but they can alter the binding of complex declarators.
 
 \rSec2[dcl.ptr]{Pointers}%
-\indextext{declarator!pointer}%
 
 \pnum
 In a declaration
@@ -553,8 +552,8 @@ is ``\placeholder{derived-declarator-type-list}
 \tcode{T}'',
 then the type of the identifier of
 \tcode{D}
-is ``\placeholder{derived-declarator-type-list} \grammarterm{cv-qualifier-seq} pointer to
-\tcode{T}''.
+is \indexedspan{``\placeholder{derived-declarator-type-list} \grammarterm{cv-qualifier-seq} pointer to
+\tcode{T}''}{\indextext{declarator!pointer}}.
 \indextext{declaration!pointer}%
 \indextext{declaration!constant pointer}%
 The
@@ -638,7 +637,7 @@ Forming a pointer to reference type is ill-formed; see~\ref{dcl.ref}.
 Forming a function pointer type is ill-formed if the function type has
 \grammarterm{cv-qualifier}{s} or a \grammarterm{ref-qualifier};
 see~\ref{dcl.fct}.
-Since the address of a bit-field\iref{class.bit} cannot be taken,
+Since the address of a \link{bit-field}{\ref{class.bit}} cannot be taken,
 a pointer can never point to a bit-field.
 \end{note}
 
@@ -788,7 +787,7 @@ The declaration of a reference shall contain an
 except when the declaration contains an explicit
 \tcode{extern}
 specifier\iref{dcl.stc},
-is a class member\iref{class.mem} declaration within a class definition,
+is a \link{class member}{\ref{class.mem}} declaration within a class definition,
 or is the declaration of a parameter or a return type\iref{dcl.fct}; see~\ref{basic.def}.
 A reference shall be initialized to refer to a valid object or function.
 \begin{note}
@@ -859,9 +858,9 @@ is ``\placeholder{derived-declarator-type-list}
 \tcode{T}'',
 then the type of the identifier of
 \tcode{D}
-is ``\placeholder{derived-declarator-type-list} \grammarterm{cv-qualifier-seq} pointer to member of class
+is \indexedspan{``\placeholder{derived-declarator-type-list} \grammarterm{cv-qualifier-seq} pointer to member of class
 \grammarterm{nested-name-specifier} of type
-\tcode{T}''.
+\tcode{T}''}{\indextext{declarator!pointer to member}}.
 The optional \grammarterm{attribute-specifier-seq}\iref{dcl.attr.grammar} appertains to the
 pointer-to-member.
 
@@ -927,8 +926,8 @@ obj.*pmi = 7;       // assign \tcode{7} to an integer member of \tcode{obj}
 \end{example}
 
 \pnum
-A pointer to member shall not point to a static member
-of a class\iref{class.static},
+A pointer to member shall not point to a \link{static member}{\ref{class.static}}
+of a class,
 a member with reference type,
 or
 ``\cv{}~\tcode{void}''.
@@ -1120,7 +1119,7 @@ is equivalent to
 \tcode{*(x3d + i)};
 in that expression,
 \tcode{x3d}
-is subject to the array-to-pointer conversion\iref{conv.array}
+is subject to the \link{array-to-pointer conversion}{\ref{conv.array}}
 and is first converted to
 a pointer to a 2-dimensional
 array with rank
@@ -1223,7 +1222,7 @@ function of
 returning \tcode{T}'',
 where the optional \tcode{noexcept} is present
 if and only if
-the exception specification\iref{except.spec} is non-throwing.
+the \link{exception specification}{\ref{except.spec}} is non-throwing.
 The optional \grammarterm{attribute-specifier-seq}
 appertains to the function type.
 
@@ -1323,8 +1322,9 @@ If the
 \indextext{declaration!ellipsis in function}%
 \indextext{argument list!variable}%
 \indextext{parameter list!variable}%
-terminates with an ellipsis or a function parameter
-pack\iref{temp.variadic}, the number of arguments shall be equal
+terminates with an ellipsis or a
+\deflink{function parameter pack}{\ref{temp.variadic}},
+the number of arguments shall be equal
 to or greater than the number of parameters that do not have a default
 argument and are not function parameter packs.
 Where syntactically correct and where ``\tcode{...}'' is not
@@ -1439,7 +1439,7 @@ struct S {
 The return type, the parameter-type-list, the \grammarterm{ref-qualifier},
 the \grammarterm{cv-qualifier-seq}, and
 the exception specification,
-but not the default arguments\iref{dcl.fct.default}
+but not the \link{default arguments}{\ref{dcl.fct.default}}
 or the trailing \grammarterm{requires-clause}\iref{dcl.decl},
 are part of the function type.
 \begin{note}
@@ -1482,12 +1482,12 @@ definition shall not be an incomplete
 (possibly cv-qualified) class type
 in the context of the function definition
 unless the function is
-deleted\iref{dcl.fct.def.delete}.
+\link{deleted}{\ref{dcl.fct.def.delete}}.
 
 \pnum
 \indextext{typedef!function}%
 A typedef of function type may be used to declare a function but shall not be
-used to define a function\iref{dcl.fct.def}.
+used to \link{define a function}{\ref{dcl.fct.def}}.
 \begin{example}
 
 \begin{codeblock}
@@ -1500,7 +1500,7 @@ void fv() { }       // OK: definition of \tcode{fv}
 
 \pnum
 An identifier can optionally be provided as a parameter name;
-if present in a function definition\iref{dcl.fct.def}, it names a parameter.
+if present in a \link{function definition}{\ref{dcl.fct.def}}, it names a parameter.
 \begin{note}
 In particular, parameter names are also optional in function definitions
 and names used for a parameter in different declarations and the definition
@@ -1751,7 +1751,7 @@ declaration of the function or function template in the translation unit.
 The default argument has the
 same semantic constraints as the initializer in a
 declaration of a variable of the parameter type, using the
-copy-initialization semantics\iref{dcl.init}.
+\deflink{copy-initialization}{\ref{dcl.init}} semantics.
 The names in the
 default argument are bound, and the semantic constraints are checked,
 at the point where the default argument appears.
@@ -1863,7 +1863,7 @@ int h(int a, int b = sizeof(a));    // OK, unevaluated operand
 \end{codeblock}
 \end{example}
 A non-static member shall not appear in a default argument unless it appears as
-the \grammarterm{id-expression} of a class member access expression\iref{expr.ref} or
+the \grammarterm{id-expression} of a \link{class member access expression}{\ref{expr.ref}} or
 unless it is used to form a pointer to member\iref{expr.unary.op}.
 \begin{example}
 The declaration of
@@ -1915,7 +1915,7 @@ is in scope.
 
 \pnum
 \indextext{argument and virtual function!default}%
-A virtual function call\iref{class.virtual} uses the default
+A \link{virtual function}{\ref{class.virtual}} call uses the default
 arguments in the declaration of the virtual function determined
 by the static type of the pointer or reference denoting the
 object.
@@ -2041,7 +2041,7 @@ In the \grammarterm{function-body}, a
 storage duration that is implicitly defined (see~\ref{basic.scope.block}).
 
 \pnum
-The function-local predefined variable \tcode{__func__} is
+The function-local predefined variable \indexedspan{\tcode{__func__}}{\indextext{\idxcode{__func__}}} is
 defined as if a definition of the form
 \begin{codeblock}
 static const char __func__[] = "@\placeholder{function-name}@";
@@ -2050,9 +2050,9 @@ had been provided, where \tcode{\placeholder{function-name}} is an \impldef{stri
 from \mname{func}} string.
 It is unspecified whether such a variable has an address
 distinct from that of any other object in the program.\footnote{Implementations are
-permitted to provide additional predefined variables with names that are reserved to the
-implementation\iref{lex.name}. If a predefined variable is not
-odr-used\iref{basic.def.odr}, its string value need not be present in the program image.}
+permitted to provide additional predefined variables with names that are
+\linkx{reserved to the implementation}{reserved identifier}{\ref{lex.name}}. If a predefined variable is not
+\link{odr-used}{\ref{basic.def.odr}}, its string value need not be present in the program image.}
 \begin{example}
 \begin{codeblock}
 struct S {
@@ -2187,7 +2187,7 @@ implicitly or explicitly and forming a pointer or pointer-to-member to the
 function. It applies even for references in expressions that are not
 potentially-evaluated. If a function is overloaded, it is referenced only if the
 function is selected by overload resolution. The implicit
-odr-use\iref{basic.def.odr} of a virtual function does not, by itself,
+\link{odr-use}{\ref{basic.def.odr}} of a virtual function does not, by itself,
 constitute a reference. \end{note}
 
 \pnum
@@ -2236,8 +2236,8 @@ moveonly q(*p);                 // error, deleted copy constructor
 \end{example}
 
 \pnum
-A deleted function is implicitly an inline function\iref{dcl.inline}. \begin{note} The
-one-definition rule\iref{basic.def.odr} applies to deleted definitions. \end{note}
+A deleted function is implicitly an \deflink{inline function}{\ref{dcl.inline}}. \begin{note} The
+\link{one-definition rule}{\ref{basic.def.odr}} applies to deleted definitions. \end{note}
 A deleted definition of a function shall be the first declaration of the function or,
 for an explicit specialization of a function template, the first declaration of that
 specialization.
@@ -2321,10 +2321,11 @@ that is a function template whose first template parameter
 is a non-type parameter,
 the initializer is
 \tcode{e.get<i>()}. Otherwise, the initializer is \tcode{get<i>(e)},
-where \tcode{get} is looked up in the associated namespaces\iref{basic.lookup.argdep}.
+where \tcode{get} is looked up in the
+\deflinkx{associated namespaces}{namespace!associated}{\ref{basic.lookup.argdep}}.
 In either case, \tcode{get<i>} is interpreted as a \grammarterm{template-id}.
 \begin{note}
-Ordinary unqualified lookup\iref{basic.lookup.unqual} is not performed.
+Ordinary \link{unqualified lookup}{\ref{basic.lookup.unqual}} is not performed.
 \end{note}
 In either case, \tcode{e} is an lvalue if the type of the entity \tcode{e}
 is an lvalue reference and an xvalue otherwise. Given the type $\tcode{T}_i$
@@ -2484,7 +2485,7 @@ means:
 \item
 if
 \tcode{T}
-is a scalar type\iref{basic.types}, the
+is a \deflink{scalar type}{\ref{basic.types}}, the
 object
 is initialized to the value obtained by converting the integer literal \tcode{0}
 (zero) to
@@ -2537,11 +2538,11 @@ means:
 \item
 If
 \tcode{T}
-is a (possibly cv-qualified) class type\iref{class},
+is a (possibly cv-qualified) \link{class type}{\ref{class}},
 constructors are considered. The applicable constructors are
 enumerated\iref{over.match.ctor}, and the best one for the
 \grammarterm{initializer} \tcode{()} is chosen through
-overload resolution\iref{over.match}. The constructor thus selected
+\link{overload resolution}{\ref{over.match}}. The constructor thus selected
 is called, with an empty argument list, to initialize the object.
 
 \item
@@ -2591,7 +2592,7 @@ means:
 \item
 if
 \tcode{T}
-is a (possibly cv-qualified) class type\iref{class} with
+is a (possibly cv-qualified) \link{class type}{\ref{class}} with
 either no default constructor\iref{class.ctor} or a default
 constructor that is user-provided or deleted, then the object is default-initialized;
 
@@ -2669,18 +2670,18 @@ undefined except in the following cases:
 
 \begin{itemize}
 \item
-If an indeterminate value of
-unsigned narrow character type\iref{basic.fundamental}
-or \tcode{std::byte} type\iref{cstddef.syn}
+If an indeterminate value of unsigned
+\deflinkx{narrow character type}{type!narrow character}{\ref{basic.fundamental}}
+or \tcode{std::byte} type\iref{cstddef.syn} % todo
 is produced by the evaluation of:
 \begin{itemize}
-\item the second or third operand of a conditional expression\iref{expr.cond},
-\item the right operand of a comma expression\iref{expr.comma},
+\item the second or third operand of a \link{conditional expression}{\ref{expr.cond}},
+\item the right operand of a \link{comma expression}{\ref{expr.comma}},
 \item the operand of a cast or conversion~(\ref{conv.integral},
 \ref{expr.type.conv}, \ref{expr.static.cast}, \ref{expr.cast}) to an
 unsigned narrow character type
 or \tcode{std::byte} type\iref{cstddef.syn}, or
-\item a discarded-value expression\iref{expr.prop},
+\item a \deflink{discarded-value expression}{\ref{expr.prop}},
 \end{itemize}
 then the result of the operation is an indeterminate value.
 
@@ -2689,7 +2690,7 @@ If an indeterminate value of
 unsigned narrow character type
 or \tcode{std::byte} type
 is produced by the evaluation of the right
-operand of a simple assignment operator\iref{expr.ass} whose first operand
+operand of a simple \link{assignment operator}{\ref{expr.ass}} whose first operand
 is an lvalue of
 unsigned narrow character type
 or \tcode{std::byte} type,
@@ -2751,9 +2752,9 @@ The initialization that occurs in the \tcode{=} form of a
 \grammarterm{brace-or-equal-initializer} or
 \grammarterm{condition}\iref{stmt.select},
 as well as in argument passing, function return,
-throwing an exception\iref{except.throw},
-handling an exception\iref{except.handle},
-and aggregate member initialization\iref{dcl.init.aggr},
+\link{throwing an exception}{\ref{except.throw}},
+\link{handling an exception}{\ref{except.handle}},
+and \link{aggregate member initialization}{\ref{dcl.init.aggr}},
 is called
 \defn{copy-initialization}.
 \begin{note} Copy-initialization may invoke a move\iref{class.copy}. \end{note}
@@ -2765,11 +2766,11 @@ T x(a);
 T x{a};
 \end{codeblock}
 as well as in
-\tcode{new}
-expressions\iref{expr.new},
-\tcode{static_cast}
-expressions\iref{expr.static.cast},
-functional notation type conversions\iref{expr.type.conv},
+\link{\tcode{new}
+expressions}{\ref{expr.new}},
+\link{\tcode{static_cast}
+expressions}{\ref{expr.static.cast}},
+\link{functional notation type conversions}{\ref{expr.type.conv}},
 \grammarterm{mem-initializer}{s}\iref{class.base.init}, and
 the \grammarterm{braced-init-list} form of a \grammarterm{condition}
 is called
@@ -2789,7 +2790,7 @@ source type is not defined.
 \item
 If the initializer is a (non-parenthesized) \grammarterm{braced-init-list}
 or is \tcode{=} \grammarterm{braced-init-list}, the object or reference
-is list-initialized\iref{dcl.init.list}.
+is \link{list-initialized}{\ref{dcl.init.list}}.
 \item
 If the destination type is a reference type, see~\ref{dcl.init.ref}.
 \item
@@ -2821,7 +2822,7 @@ type is the same class as, or a derived class of, the class of the destination,
 constructors are considered.
 The applicable constructors
 are enumerated\iref{over.match.ctor}, and the best one is chosen
-through overload resolution\iref{over.match}.
+through \link{overload resolution}{\ref{over.match}}.
 The constructor so selected
 is called to initialize the object, with the initializer
 expression or \grammarterm{expression-list} as its argument(s).
@@ -2831,8 +2832,8 @@ ambiguous, the initialization is ill-formed.
 Otherwise (i.e., for the remaining copy-initialization cases),
 user-defined conversion sequences that can convert from the
 source type to the destination type or (when a conversion function
-is used) to a derived class thereof are enumerated as described in~\ref{over.match.copy}, and the best one is chosen through overload
-resolution\iref{over.match}.  If the conversion cannot be done or
+is used) to a derived class thereof are enumerated as described in~\ref{over.match.copy}, and the best one is chosen through \link{overload
+resolution}{\ref{over.match}}.  If the conversion cannot be done or
 is ambiguous, the initialization is ill-formed.  The function
 selected is called with the initializer expression as its
 argument; if the function is a constructor, the call is a prvalue
@@ -2848,8 +2849,8 @@ Otherwise, if the source type
 is a (possibly cv-qualified) class type, conversion functions are
 considered.
 The applicable conversion functions are enumerated\iref{over.match.conv},
-and the best one is chosen through overload
-resolution\iref{over.match}.
+and the best one is chosen through \link{overload
+resolution}{\ref{over.match}}.
 The user-defined conversion so selected
 is called to convert the initializer expression into the
 object being initialized.
@@ -2858,7 +2859,7 @@ ambiguous, the initialization is ill-formed.
 \item
 Otherwise, the initial value of the object being initialized is
 the (possibly converted) value of the initializer expression.
-Standard conversions\iref{conv} will be used, if necessary,
+\link{Standard conversions}{\ref{conv}} will be used, if necessary,
 to convert the initializer expression to the cv-unqualified version of
 the destination type;
 no user-defined conversions are considered.
@@ -2888,12 +2889,12 @@ int c = b;
 
 \pnum
 An \grammarterm{initializer-clause} followed by an ellipsis is a
-pack expansion\iref{temp.variadic}.
+\deflink{pack expansion}{\ref{temp.variadic}}.
 
 \pnum
 If the initializer is a parenthesized \grammarterm{expression-list},
 the expressions are evaluated in the order
-specified for function calls\iref{expr.call}.
+specified for \link{function calls}{\ref{expr.call}}.
 
 \pnum
 The same \grammarterm{identifier}
@@ -2907,8 +2908,8 @@ even if no constructor of the object's class
 is invoked for the initialization.
 \begin{note}
 Such an object might have been value-initialized
-or initialized by aggregate initialization\iref{dcl.init.aggr}
-or by an inherited constructor\iref{class.inhctor.init}.
+or initialized by \link{aggregate initialization}{\ref{dcl.init.aggr}}
+or by an \link{inherited constructor}{\ref{class.inhctor.init}}.
 \end{note}
 
 \pnum
@@ -2934,14 +2935,14 @@ and not the definition at namespace scope.
 \indextext{\idxcode{\{\}}!initializer list}
 
 \pnum
-An \defn{aggregate} is an array or a class\iref{class} with
+An \defn{aggregate} is an array or a \link{class}{\ref{class}} with
 \begin{itemize}
 \item
 no user-provided, \tcode{explicit}, or inherited constructors\iref{class.ctor},
 \item
 no private or protected non-static data members\iref{class.access},
 \item
-no virtual functions\iref{class.virtual}, and
+no \link{virtual functions}{\ref{class.virtual}}, and
 \item
 no virtual, private, or protected base classes\iref{class.mi}.
 \end{itemize}
@@ -3006,7 +3007,7 @@ If that initializer is of the form
 \grammarterm{assignment-expression} or
 \tcode{= }\grammarterm{assignment-expression}
 and
-a narrowing conversion\iref{dcl.init.list} is required
+a \deflink{narrowing conversion}{\ref{dcl.init.list}} is required
 to convert the expression, the program is ill-formed.
 \begin{note} If an initializer is itself an initializer list,
 the element is list-initialized, which will result in a recursive application
@@ -3482,7 +3483,7 @@ union is a member of another aggregate.
 \indextext{initialization!character array}
 
 \pnum
-An array of narrow character type\iref{basic.fundamental},
+An array of \deflinkx{narrow character type}{type!narrow character}{\ref{basic.fundamental}},
 \tcode{char16_t} array,
 \tcode{char32_t} array,
 or \tcode{wchar_t} array
@@ -3530,14 +3531,14 @@ is ill-formed since there is no space for the implied trailing
 
 \pnum
 If there are fewer initializers than there are array elements, each element not
-explicitly initialized shall be zero-initialized\iref{dcl.init}.
+explicitly initialized shall be \deflinkx{zero-initialized}{zero-initialization}{\ref{dcl.init}}.
 
 \rSec2[dcl.init.ref]{References}%
 \indextext{initialization!reference}
 
 \pnum
 A variable whose declared type is
-``reference to type \tcode{T}''\iref{dcl.ref}
+\link{``reference to type \tcode{T}''}{\ref{dcl.ref}}
 shall be initialized.
 \begin{example}
 
@@ -3565,9 +3566,9 @@ A reference cannot be changed to refer to another object after initialization.
 Assignment to a reference assigns to the object referred to by the reference\iref{expr.ass}.
 \end{note}
 \indextext{argument passing!reference and}%
-Argument passing\iref{expr.call}
+\link{Argument passing}{\ref{expr.call}}
 \indextext{\idxcode{return}!reference and}%
-and function value return\iref{stmt.return} are initializations.
+and \link{function value return}{\ref{stmt.return}} are initializations.
 
 \pnum
 The initializer can be omitted for a reference only in a parameter declaration\iref{dcl.fct},
@@ -3608,7 +3609,7 @@ is a base class of
 \tcode{T2},
 a program that necessitates such a binding is ill-formed if
 \tcode{T1}
-is an inaccessible\iref{class.access} or ambiguous\iref{class.member.lookup}
+is an \link{inaccessible}{\ref{class.access}} or ambiguous\iref{class.member.lookup}
 base class of
 \tcode{T2}.
 
@@ -3633,18 +3634,18 @@ has a class type (i.e.,
 is a class type), where \tcode{T1} is not reference-related to \tcode{T2}, and can be converted
 to an lvalue of type ``\cvqual{cv3} \tcode{T3}'', where
 ``\cvqual{cv1} \tcode{T1}'' is reference-compatible with
-``\cvqual{cv3} \tcode{T3}''\footnote{This requires a conversion
-function\iref{class.conv.fct} returning a reference type.}
+``\cvqual{cv3} \tcode{T3}''\footnote{This requires a \link{conversion
+function}{\ref{class.conv.fct}} returning a reference type.}
 (this conversion is selected by enumerating the applicable conversion
-functions\iref{over.match.ref} and choosing the best one through overload
-resolution\iref{over.match}),
+functions\iref{over.match.ref} and choosing the best one through \link{overload
+resolution}{\ref{over.match}}),
 \end{itemize}
 then the reference is bound to the initializer expression lvalue in the
 first case and to the lvalue result of the conversion
 in the second case (or, in either case, to the appropriate base class subobject of the object).
 \begin{note}
-The usual lvalue-to-rvalue\iref{conv.lval}, array-to-pointer\iref{conv.array},
-and function-to-pointer\iref{conv.func} standard
+The usual \link{lvalue-to-rvalue}{\ref{conv.lval}}, \link{array-to-pointer}{\ref{conv.array}},
+and \link{function-to-pointer}{\ref{conv.func}} standard
 conversions are not needed, and therefore are suppressed, when such
 direct bindings to lvalues are done.
 \end{note}
@@ -3699,7 +3700,7 @@ the result of the conversion in the second case
 is called the converted initializer.
 If the converted initializer is a prvalue,
 its type \tcode{T4} is adjusted to type ``\cvqual{cv1} \tcode{T4}''\iref{conv.qual}
-and the temporary materialization conversion\iref{conv.rval} is applied.
+and the \link{temporary materialization conversion}{\ref{conv.rval}} is applied.
 In any case,
 the reference is bound to the resulting glvalue
 (or to an appropriate base class subobject).
@@ -3824,14 +3825,14 @@ List-initialization can be used
 \begin{itemize}
 \item as the initializer in a variable definition\iref{dcl.init}
 \item as the initializer in a \grammarterm{new-expression}\iref{expr.new}
-\item in a \tcode{return} statement\iref{stmt.return}
+\item in a \link{\tcode{return} statement}{\ref{stmt.return}}
 \item as a \grammarterm{for-range-initializer}\iref{stmt.iter}
 \item as a function argument\iref{expr.call}
-\item as a subscript\iref{expr.sub}
+\item as a \link{subscript}{\ref{expr.sub}}
 \item as an argument to a constructor invocation~(\ref{dcl.init}, \ref{expr.type.conv})
-\item as an initializer for a non-static data member\iref{class.mem}
+\item as an initializer for a \deflink{non-static data member}{\ref{class.mem}}
 \item in a \grammarterm{mem-initializer}\iref{class.base.init}
-\item on the right-hand side of an assignment\iref{expr.ass}
+\item on the right-hand side of an \link{assignment}{\ref{expr.ass}}
 \end{itemize}
 
 \begin{example}
@@ -3851,7 +3852,7 @@ std::map<std::string,int> anim = { {"bear",4}, {"cassowary",2}, {"tiger",7} };
 A constructor is an \defn{initializer-list constructor} if its first parameter is
 of type \tcode{std::initializer_list<E>} or reference to possibly cv-qualified
 \tcode{std::initializer_list<E>} for some type \tcode{E}, and either there are no other
-parameters or else all other parameters have default arguments\iref{dcl.fct.default}.
+parameters or else all other parameters have \link{default arguments}{\ref{dcl.fct.default}}.
 \begin{note} Initializer-list constructors are favored over other constructors in
 list-initialization\iref{over.match.list}. Passing an initializer list as the argument
 to the constructor template \tcode{template<class T> C(T)} of a class \tcode{C} does not
@@ -3860,8 +3861,8 @@ corresponding parameter to be a non-deduced context\iref{temp.deduct.call}. \end
 The template
 \tcode{std::initializer_list} is not predefined; if the header
 \tcode{<initializer_list>} is not included prior to a use of
-\tcode{std::initializer_list} --- even an implicit use in which the type is not
-named\iref{dcl.spec.auto} --- the program is ill-formed.
+\tcode{std::initializer_list} --- even an implicit use in which the type is \link{not
+named}{\ref{dcl.spec.auto}} --- the program is ill-formed.
 
 \pnum
 List-initialization of an object or reference of type \tcode{T} is defined as follows:
@@ -3896,8 +3897,8 @@ direct-list-initialization).
 single element that is an appropriately-typed string literal\iref{dcl.init.string},
 initialization is performed as described in that subclause.
 
-\item Otherwise, if \tcode{T} is an aggregate, aggregate initialization is
-performed\iref{dcl.init.aggr}.
+\item Otherwise, if \tcode{T} is an aggregate,
+\link{aggregate initialization}{\ref{dcl.init.aggr}} is performed.
 
 \begin{example}
 \begin{codeblock}
@@ -4067,8 +4068,9 @@ int k { };                          // initialize to 0
 
 \pnum
 Within the \grammarterm{initializer-list} of a \grammarterm{braced-init-list},
-the \grammarterm{initializer-clause}{s}, including any that result from pack
-expansions\iref{temp.variadic}, are evaluated in the order in which they
+the \grammarterm{initializer-clause}{s}, including any that result from
+\deflinkx{pack expansions}{pack expansion}{\ref{temp.variadic}},
+are evaluated in the order in which they
 appear. That is, every value computation and side effect associated with a
 given \grammarterm{initializer-clause} is sequenced before every value
 computation and side effect associated with any \grammarterm{initializer-clause}
@@ -4082,14 +4084,14 @@ arguments of a call. \end{note}
 \pnum
 An object of type \tcode{std::initializer_list<E>} is constructed from
 an initializer list as if
-the implementation generated and materialized\iref{conv.rval}
+the implementation generated and \link{materialized}{\ref{conv.rval}}
 a prvalue of type ``array of $N$ \tcode{const E}'',
 where $N$ is the number of elements in the
 initializer list. Each element of that array is copy-initialized with the
 corresponding element of the initializer list, and the
 \tcode{std::initializer_list<E>} object is constructed to refer to that array.
 \begin{note} A constructor or conversion function selected for the copy shall be
-accessible\iref{class.access} in the context of the initializer list.
+\link{accessible}{\ref{class.access}} in the context of the initializer list.
 \end{note}
 If a narrowing conversion is required to initialize any of the elements, the program is ill-formed. \begin{example}
 \begin{codeblock}
@@ -4109,8 +4111,8 @@ X x(std::initializer_list<double>(__a, __a+3));
 assuming that the implementation can construct an \tcode{initializer_list} object with a pair of pointers. \end{example}
 
 \pnum
-The array has the same lifetime as any other temporary
-object\iref{class.temporary}, except that initializing an
+The array has the same lifetime as any other \link{temporary
+object}{\ref{class.temporary}}, except that initializing an
 \tcode{initializer_list} object from the array extends the lifetime of
 the array exactly like binding a reference to a temporary.
 \begin{example}
@@ -4145,9 +4147,8 @@ The implementation is free to allocate the array in read-only memory if an expli
 
 \pnum
 A
-\indextext{narrowing conversion}%
 \indextext{conversion!narrowing}%
-\term{narrowing conversion} is an implicit conversion
+\defn{narrowing conversion} is an implicit conversion
 
 \begin{itemize}
 \item from a floating-point type to an integer type, or
diff --git a/source/derived.tex b/source/derived.tex
index bd073cf..de0cc9a 100644
--- a/source/derived.tex
+++ b/source/derived.tex
@@ -128,12 +128,12 @@ Here, an object of class \tcode{Derived2} will have a subobject of class
 \end{example}
 
 \pnum
-A \grammarterm{base-specifier} followed by an ellipsis is a pack
-expansion\iref{temp.variadic}.
+A \grammarterm{base-specifier} followed by an ellipsis is a
+\deflink{pack expansion}{\ref{temp.variadic}}.
 
 \pnum
-The order in which the base class subobjects are allocated in the most
-derived object\iref{intro.object} is unspecified.
+The order in which the base class subobjects are allocated in the
+\deflink{most derived object}{\ref{intro.object}} is unspecified.
 \begin{note}
 \indextext{directed acyclic graph|see{DAG}}%
 \indextext{lattice|see{DAG, subobject}}%
@@ -191,7 +191,7 @@ class D : public A, public B, public C { @\commentellip@ };
 \begin{note}
 The order of derivation is not significant except as specified by the
 semantics of initialization by constructor\iref{class.base.init},
-cleanup\iref{class.dtor}, and storage
+\link{cleanup}{\ref{class.dtor}}, and storage
 layout~(\ref{class.mem}, \ref{class.access.spec}).
 \end{note}
 
@@ -228,7 +228,7 @@ A base class specifier that does not contain the keyword
 class specifier that contains the keyword \tcode{virtual} specifies a
 \defnx{virtual base class}{base class!virtual}. For each distinct occurrence of a
 non-virtual base class in the class lattice of the most derived class,
-the most derived object\iref{intro.object} shall contain a
+the \deflink{most derived object}{\ref{intro.object}} shall contain a
 corresponding distinct base class subobject of that type. For each
 distinct base class that is specified virtual, the most derived object
 shall contain a single base class subobject of that type.
@@ -256,7 +256,7 @@ void C::f() { A::next = B::next; }      // well-formed
 \end{codeblock}
 Without the \tcode{A::} or \tcode{B::} qualifiers, the definition of
 \tcode{C::f} above would be ill-formed because of
-ambiguity\iref{class.member.lookup}.
+\deflink{ambiguity}{\ref{class.member.lookup}}.
 \end{note}
 
 \pnum
@@ -320,13 +320,14 @@ by \tcode{X} and \tcode{Y}, as shown in Figure~\ref{fig:virtnonvirt}.
 
 \pnum
 Member name lookup determines the meaning of a name
-(\grammarterm{id-expression}) in a class scope\iref{basic.scope.class}.
+(\grammarterm{id-expression}) in a \link{class scope}{\ref{basic.scope.class}}.
 Name lookup can result in an \term{ambiguity}, in which case the
 program is ill-formed. For an \grammarterm{id-expression}, name lookup
 begins in the class scope of \tcode{this}; for a
 \grammarterm{qualified-id}, name lookup begins in the scope of the
-\grammarterm{nested-name-specifier}. Name lookup takes place before access
-control~(\ref{basic.lookup}, \ref{class.access}).
+\grammarterm{nested-name-specifier}.
+\link{Name lookup}{\ref{basic.lookup}} takes place before
+\link{access control}{\ref{class.access}}.
 
 \pnum
 The following steps define the result of name lookup for a member name
@@ -418,7 +419,7 @@ $S(x,D)$ is discarded in the first merge step.
 \pnum
 \indextext{access control!overload resolution and}%
 If the name of an overloaded function is unambiguously found,
-overload resolution\iref{over.match} also takes place before access
+\link{overload resolution}{\ref{over.match}} also takes place before access
 control.
 \indextext{overloading!resolution!scoping ambiguity}%
 Ambiguities can often be resolved by qualifying a name with its class name.
@@ -582,20 +583,20 @@ called a \defnx{polymorphic class}{class!polymorphic}.
 If a virtual member function \tcode{vf} is declared in a class
 \tcode{Base} and in a class \tcode{Derived}, derived directly or
 indirectly from \tcode{Base}, a member function \tcode{vf} with the same
-name, parameter-type-list\iref{dcl.fct}, cv-qualification, and ref-qualifier
+name, \deflink{parameter-type-list}{\ref{dcl.fct}}, cv-qualification, and ref-qualifier
 (or absence of same) as
 \tcode{Base::vf} is declared, then \tcode{Derived::vf} is also virtual
 (whether or not it is so declared) and it \term{overrides}\footnote{A function with the same name but a different parameter list\iref{over}
 as a virtual function is not necessarily virtual and
 does not override. The use of the \tcode{virtual} specifier in the
 declaration of an overriding function is legal but redundant (has empty
-semantics). Access control\iref{class.access} is not considered in
+semantics). \link{Access control}{\ref{class.access}} is not considered in
 determining overriding.}
 \tcode{Base::vf}. For convenience we say that any virtual function
 overrides itself.
 \indextext{overrider!final}%
 A virtual member function \tcode{C::vf} of a class object \tcode{S} is a \defn{final
-overrider} unless the most derived class\iref{intro.object} of which \tcode{S} is a
+overrider} unless the \deflink{most derived class}{\ref{intro.object}} of which \tcode{S} is a
 base class subobject (if any) declares or inherits another member function that overrides
 \tcode{vf}. In a derived class, if a virtual member function of a base class subobject
 has more than one final overrider the program is ill-formed.
@@ -795,7 +796,7 @@ another class.
 \pnum
 \indextext{definition!virtual function}%
 A virtual function declared in a class shall be defined, or declared
-pure\iref{class.abstract} in that class, or both; no diagnostic is
+\deflink{pure}{\ref{class.abstract}} in that class, or both; no diagnostic is
 required\iref{basic.def.odr}.
 \indextext{friend!\tcode{virtual} and}%
 
@@ -1017,7 +1018,7 @@ pure.
 Member functions can be called from a constructor (or destructor) of an
 abstract class;
 \indextext{virtual function call!undefined pure}%
-the effect of making a virtual call\iref{class.virtual} to a pure
+the effect of making a \link{virtual call}{\ref{class.virtual}} to a pure
 virtual function directly or indirectly for the object being created (or
 destroyed) from such a constructor (or destructor) is undefined.%
 \indextext{derived class|)}
diff --git a/source/diagnostics.tex b/source/diagnostics.tex
index deceed9..0f04aa6 100644
--- a/source/diagnostics.tex
+++ b/source/diagnostics.tex
@@ -563,13 +563,13 @@ is not defined.
 
 \pnum
 An expression \tcode{assert(E)}
-is a constant subexpression\iref{defns.const.subexpr}, if
+is a \link{constant subexpression}{\ref{defns.const.subexpr}}, if
 \begin{itemize}
 \item
 \tcode{NDEBUG} is defined at the point where \tcode{assert}
 is last defined or redefined, or
 \item
-\tcode{E} contextually converted to \tcode{bool}\iref{conv}
+\tcode{E} \deflinkx{contextually converted to \tcode{bool}}{conversion!contextual to bool}{\ref{conv}}
 is a constant subexpression that evaluates to the value \tcode{true}.
 \end{itemize}
 
@@ -763,7 +763,7 @@ the operating system or other low-level application program interfaces.
 
 \pnum
 Components described in this subclause shall not change the value of
-\tcode{errno}\iref{errno}.
+\link{\tcode{errno}}{\ref{errno}}.
 Implementations should leave the error states provided by other
 libraries unchanged.
 
@@ -1069,7 +1069,7 @@ bool operator<(const error_category& rhs) const noexcept;
 \pnum
 \returns \tcode{less<const error_category*>()(this, \&rhs)}.
 
-\begin{note} \tcode{less}\iref{comparisons} provides a total ordering for pointers. \end{note}
+\begin{note} \link{\tcode{less}}{\ref{comparisons.less}} provides a total ordering for pointers. \end{note}
 \end{itemdescr}
 
 \rSec3[syserr.errcat.derived]{Program defined classes derived from \tcode{error_category}}
@@ -1374,7 +1374,7 @@ As if by: \tcode{os << ec.category().name() << ':' << ec.value();}
 \pnum
 The class \tcode{error_condition} describes an object used to hold values identifying
 error conditions. \begin{note} \tcode{error_condition} values are portable abstractions,
-while \tcode{error_code} values\iref{syserr.errcode} are implementation specific. \end{note}
+while \link{\tcode{error_code}}{\ref{syserr.errcode}} values are implementation specific. \end{note}
 
 \indexlibrary{\idxcode{error_condition}}%
 \begin{codeblock}
@@ -1670,7 +1670,7 @@ application program interfaces.
 \pnum
 \begin{note}
 If an error represents an out-of-memory condition, implementations are
-encouraged to throw an exception object of type \tcode{bad_alloc}\iref{bad.alloc} rather
+encouraged to throw an exception object of type \link{\tcode{bad_alloc}}{\ref{bad.alloc}} rather
 than \tcode{system_error}.
 \end{note}
 \indexlibrary{\idxcode{system_error}}%
diff --git a/source/exceptions.tex b/source/exceptions.tex
index f6d0e27..8068c90 100644
--- a/source/exceptions.tex
+++ b/source/exceptions.tex
@@ -181,7 +181,7 @@ try : i(f(ii)), d(id) {
 
 \pnum
 In this Clause, ``before'' and ``after'' refer to the
-``sequenced before'' relation\iref{intro.execution}.
+\deflinkx{``sequenced before''}{sequenced before}{\ref{intro.execution}} relation.
 
 \rSec1[except.throw]{Throwing an exception}%
 \indextext{exception handling!throwing}%
@@ -192,9 +192,9 @@ Throwing an exception transfers control to a handler.
 \begin{note}
 An exception can be thrown from one of the following contexts:
 \grammarterm{throw-expression}{s}\iref{expr.throw},
-allocation functions\iref{basic.stc.dynamic.allocation},
-\tcode{dynamic_cast}\iref{expr.dynamic.cast},
-\tcode{typeid}\iref{expr.typeid},
+\link{allocation functions}{\ref{basic.stc.dynamic.allocation}},
+\link{\tcode{dynamic_cast}}{\ref{expr.dynamic.cast}},
+\link{\tcode{typeid}}{\ref{expr.typeid}},
 \grammarterm{new-expression}{s}\iref{expr.new}, and standard library
 functions\iref{structure.specifications}.
 \end{note}
@@ -283,7 +283,7 @@ immediately after the destruction of the object (if any)
 declared in the \grammarterm{exception-declaration} in the handler;
 
 \item
-when an object of type \tcode{std::exception_ptr}\iref{propagation}
+when an object of type \liblinkx{\tcode{std::exception_ptr}}{\idxcode{exception_ptr}}{\ref{propagation}}
 that refers to the exception object is destroyed,
 before the destructor of \tcode{std::exception_ptr} returns.
 \end{itemize}
@@ -291,7 +291,7 @@ before the destructor of \tcode{std::exception_ptr} returns.
 Among all points of potential destruction for the exception object,
 there is an unspecified last one
 where the exception object is destroyed.
-All other points happen before that last one\iref{intro.races}.
+All other points \deflinkx{happen before}{happens before}{\ref{intro.races}} that last one.
 \begin{note}
 No other thread synchronization is implied in exception handling.
 \end{note}
@@ -309,14 +309,14 @@ When the thrown object is a class object, the constructor selected for
 the copy-initialization as well as the constructor selected for
 a copy-initialization considering the thrown object as an lvalue
 shall be non-deleted and accessible, even if the copy/move operation is
-elided\iref{class.copy}.
-The destructor is potentially invoked\iref{class.dtor}.
+\link{elided}{\ref{class.copy.elision}}.
+The destructor is \deflink{potentially invoked}{\ref{class.dtor}}.
 
 \pnum
 \indextext{exception handling!rethrow}%
 \indextext{rethrow|see{exception handling, rethrow}}%
 An exception is considered caught when a handler for that exception
-becomes active\iref{except.handle}.
+becomes \deflinkx{active}{exception handling!handler!active}{\ref{except.handle}}.
 \begin{note}
 An exception can have active handlers and still be considered uncaught if
 it is rethrown.
@@ -326,9 +326,9 @@ it is rethrown.
 \indextext{exception handling!terminate called@\tcode{terminate} called}%
 \indextext{\idxcode{terminate}!called}%
 If the exception handling mechanism
-handling an uncaught exception\iref{except.uncaught}
+handling an \link{uncaught exception}{\ref{except.uncaught}}
 directly invokes a function that exits via an
-exception, \tcode{std::terminate} is called\iref{except.terminate}.
+exception, \link{\tcode{std::terminate}}{\ref{except.terminate}} is called.
 \begin{example}
 \begin{codeblock}
 struct C {
@@ -343,7 +343,7 @@ struct C {
 int main() {
   try {
     throw C();      // calls \tcode{std::terminate()} if construction of the handler's
-                    // \grammarterm{exception-declaration} object is not elided\iref{class.copy}
+                    // \grammarterm{exception-declaration} object is not \link{elided}{\ref{class.copy.elision}}
   } catch(C) { }
 }
 \end{codeblock}
@@ -370,7 +370,7 @@ The destructor is invoked for each automatic object of class type constructed,
 but not yet destroyed,
 since the try block was entered.
 If an exception is thrown during the destruction of temporaries or
-local variables for a \tcode{return} statement\iref{stmt.return},
+local variables for a \link{\tcode{return} statement}{\ref{stmt.return}},
 the destructor for the returned object (if any) is also invoked.
 The objects are destroyed in the reverse order of the completion
 of their construction.
@@ -428,7 +428,7 @@ Such destruction is sequenced before entering a handler of the
 \pnum
 \begin{note}
 If the object was allocated by a \grammarterm{new-expression}\iref{expr.new},
-the matching deallocation function\iref{basic.stc.dynamic.deallocation},
+the matching \link{deallocation function}{\ref{basic.stc.dynamic.deallocation}},
 if any, is called to free the storage occupied by the object.
 \end{note}
 
@@ -502,12 +502,12 @@ that can be converted to \tcode{T} by one or more of
 \begin{itemize}
 
 \item%
-a standard pointer conversion\iref{conv.ptr} not involving conversions
+a standard \link{pointer conversion}{\ref{conv.ptr}} not involving conversions
 to pointers to private or protected or ambiguous classes
 \item%
-a function pointer conversion\iref{conv.fctptr}
+a \link{function pointer conversion}{\ref{conv.fctptr}}
 \item%
-a qualification conversion\iref{conv.qual}, or
+a \link{qualification conversion}{\ref{conv.qual}}, or
 
 \end{itemize}
 
@@ -628,7 +628,7 @@ Exceptions thrown in destructors of objects with static storage duration or in
 constructors of namespace-scope objects with static storage duration are not caught by a
 \grammarterm{function-try-block}
 on
-the \tcode{main} function\iref{basic.start.main}.
+the \link{\tcode{main} function}{\ref{basic.start.main}}.
 Exceptions thrown in destructors of objects with thread storage duration or in constructors of namespace-scope objects with thread storage duration are not caught by a
 \grammarterm{function-try-block}
 on the initial function of the thread.
@@ -660,9 +660,11 @@ of type \tcode{E}, as follows:
 \begin{itemize}
 \item
 if \tcode{T} is a base class of \tcode{E}, the variable is
-copy-initialized\iref{dcl.init} from the corresponding base class subobject
+\deflinkx{copy-initialized}{copy-initialization}{\ref{dcl.init}}
+from the corresponding base class subobject
 of the exception object;
-\item otherwise, the variable is copy-initialized\iref{dcl.init}
+\item otherwise, the variable is
+\deflinkx{copy-initialized}{copy-initialization}{\ref{dcl.init}}
 from the exception object.
 \end{itemize}
 
@@ -697,7 +699,7 @@ otherwise it has a
 The exception specification is either defined implicitly,
 or defined explicitly
 by using a \grammarterm{noexcept-specifier}
-as a suffix of a function declarator\iref{dcl.fct}.
+as a suffix of a \link{function declarator}{\ref{dcl.fct}}.
 
 \begin{bnf}
 \nontermdef{noexcept-specifier}\br
@@ -709,20 +711,20 @@ as a suffix of a function declarator\iref{dcl.fct}.
 \pnum
 \indextext{exception specification!noexcept!constant expression and}%
 In a \grammarterm{noexcept-specifier}, the \grammarterm{constant-expression},
-if supplied, shall be a contextually converted constant expression
-of type \tcode{bool}\iref{expr.const};
+if supplied, shall be a
+\deflink{contextually converted constant expression of type \tcode{bool}}{\ref{expr.const}};
 that constant expression is the exception specification of
 the function type in which the \grammarterm{noexcept-specifier} appears.
 A \tcode{(} token that follows \tcode{noexcept} is part of the
 \grammarterm{noexcept-specifier} and does not commence an
-initializer\iref{dcl.init}.
+\link{initializer}{\ref{dcl.init}}.
 The \grammarterm{noexcept-specifier} \tcode{noexcept}
 without a \grammarterm{constant-expression}
 is
 equivalent to the \grammarterm{noexcept-specifier}
 \tcode{noexcept(true)}.
 The \grammarterm{noexcept-specifier} \tcode{throw()}
-is deprecated\iref{depr.except.spec}, and
+is \link{deprecated}{\ref{depr.except.spec}}, and
 equivalent to the \grammarterm{noexcept-specifier}
 \tcode{noexcept(true)}.
 
@@ -736,7 +738,7 @@ in which cases the exception specification
 is as specified below
 and no other declaration for that function
 shall have a \grammarterm{noexcept-specifier}.
-In an explicit instantiation\iref{temp.explicit}
+In an \link{explicit instantiation}{\ref{temp.explicit}}
 a \grammarterm{noexcept-specifier} may be specified,
 but is not required.
 If a \grammarterm{noexcept-specifier} is specified
@@ -787,7 +789,7 @@ Whenever an exception is thrown
 and the search for a handler\iref{except.handle}
 encounters the outermost block of a function with a
 non-throwing exception specification,
-the function \tcode{std::terminate()} is called\iref{except.terminate}.
+the function \link{\tcode{std::terminate()}}{\ref{except.terminate}} is called.
 \begin{note}
 An implementation shall not reject an expression merely because, when
 executed, it throws or might
@@ -815,7 +817,7 @@ An expression \tcode{e} is
 
 \begin{itemize}
 \item
-\tcode{e} is a function call\iref{expr.call}
+\tcode{e} is a \link{function call}{\ref{expr.call}}
 whose \grammarterm{postfix-expression}
 has a function type,
 or a pointer-to-function type,
@@ -826,15 +828,15 @@ or
 (such as an overloaded operator,
 an allocation function in a \grammarterm{new-expression},
 a constructor for a function argument,
-or a destructor if \tcode{e} is a full-expression\iref{intro.execution})
+or a destructor if \tcode{e} is a \deflink{full-expression}{\ref{intro.execution}})
 that is potentially-throwing,
 or
 \item
 \tcode{e} is a \grammarterm{throw-expression}\iref{expr.throw},
 or
 \item
-\tcode{e} is a \tcode{dynamic_cast} expression that casts to a reference type and
-requires a runtime check\iref{expr.dynamic.cast},
+\tcode{e} is a \link{\tcode{dynamic_cast}}{\ref{expr.dynamic.cast}} expression that casts to a reference type and
+requires a runtime check,
 or
 \item
 \tcode{e} is a \tcode{typeid} expression applied to a
@@ -843,7 +845,7 @@ applied to a pointer to a
 polymorphic class type\iref{expr.typeid},
 or
 \item
-any of the immediate subexpressions\iref{intro.execution}
+any of the \deflinkx{immediate subexpressions}{immediate subexpression}{\ref{intro.execution}}
 of \tcode{e} is potentially-throwing.
 \end{itemize}
 
@@ -895,7 +897,7 @@ the invocation of any assignment operator
 in the implicit definition is potentially-throwing.
 
 \pnum
-A deallocation function\iref{basic.stc.dynamic.deallocation}
+A \link{deallocation function}{\ref{basic.stc.dynamic.deallocation}}
 with no explicit \grammarterm{noexcept-specifier}
 has a non-throwing exception specification.
 
@@ -948,7 +950,7 @@ An exception specification is considered to be \defnx{needed}{needed!exception s
 \item in an expression, the function is the unique lookup result or the selected
 member of a set of overloaded functions~(\ref{basic.lookup}, \ref{over.match}, \ref{over.over});
 
-\item the function is odr-used\iref{basic.def.odr} or, if it appears in an
+\item the function is \link{odr-used}{\ref{basic.def.odr}} or, if it appears in an
 unevaluated operand, would be odr-used if the expression were
 potentially-evaluated;
 
@@ -978,12 +980,12 @@ needed.
 \rSec1[except.special]{Special functions}
 
 \pnum
-The function \tcode{std::terminate()}\iref{except.terminate}
+The function \link{\tcode{std::terminate()}}{\ref{except.terminate}}
 is used by the exception
 handling mechanism for coping with errors related to the exception handling
 mechanism itself. The function
-\tcode{std::current_exception()}\iref{propagation} and the class
-\tcode{std::nested_exception}\iref{except.nested} can be used by a program to
+\link{\tcode{std::current_exception()}}{\ref{propagation}} and the class
+\link{\tcode{std::nested_exception}}{\ref{except.nested}} can be used by a program to
 capture the currently handled exception.
 
 \rSec2[except.terminate]{The \tcode{std::terminate()} function}
@@ -1006,12 +1008,12 @@ via an exception, or
 \item%
 when the exception handling mechanism cannot find a handler for a thrown exception\iref{except.handle}, or
 
-\item when the search for a handler\iref{except.handle} encounters the
+\item when the search for a \link{handler}{\ref{except.handle}} encounters the
 outermost block of a function
-with a non-throwing exception specification\iref{except.spec}, or
+with a non-throwing \link{exception specification}{\ref{except.spec}}, or
 
 \item%
-when the destruction of an object during stack unwinding\iref{except.ctor}
+when the destruction of an object during \deflink{stack unwinding}{\ref{except.ctor}}
 terminates by throwing an exception, or
 
 \item%
@@ -1065,17 +1067,17 @@ fails to meet a postcondition.
 \pnum
 \indextext{\idxcode{terminate}}%
 In such cases,
-\tcode{std::terminate()}
-is called\iref{exception.terminate}.
+\link{\tcode{std::terminate()}
+is called}{\ref{exception.terminate}}.
 In the situation where no matching handler is found, it is
 \impldef{stack unwinding before call to \tcode{std::terminate()}} whether or not the
 stack is unwound
 before
 \tcode{std::terminate()}
 is called.
-In the situation where the search for a handler\iref{except.handle} encounters the
+In the situation where the search for a \link{handler}{\ref{except.handle}} encounters the
 outermost block of a function
-with a non-throwing exception specification\iref{except.spec}, it is
+with a non-throwing \link{exception specification}{\ref{except.spec}}, it is
 \impldef{whether stack is unwound before calling \tcode{std::ter\-mi\-nate()}
 when a \tcode{noexcept} specification
 is violated}
@@ -1094,12 +1096,12 @@ will eventually cause a call to
 
 \pnum
 An exception is considered uncaught
-after completing the initialization of the exception object\iref{except.throw}
+after completing the initialization of the \deflinkx{exception object}{exception handling!exception object}{\ref{except.throw}}
 until completing the activation of a handler for the exception\iref{except.handle}.
 This includes stack unwinding.
 If an exception is rethrown~(\ref{expr.throw}, \ref{propagation}),
 it is considered uncaught from the point of rethrow
 until the rethrown exception is caught.
-The function \tcode{std::uncaught_exceptions()}\iref{uncaught.exceptions}
+The function \link{\tcode{std::uncaught_exceptions()}}{\ref{uncaught.exceptions}}
 returns the number of uncaught exceptions in the current thread.%
 \indextext{exception handling|)}
diff --git a/source/expressions.tex b/source/expressions.tex
index fcf8c1d..1058255 100644
--- a/source/expressions.tex
+++ b/source/expressions.tex
@@ -30,14 +30,14 @@ effects.
 \indextext{operator!overloaded}%
 \begin{note}
 Operators can be overloaded, that is, given meaning when applied to
-expressions of class type\iref{class} or enumeration
-type\iref{dcl.enum}. Uses of overloaded operators are transformed into
+expressions of \link{class}{\ref{class}} type or
+\link{enumeration}{\ref{dcl.enum}} type. Uses of overloaded operators are transformed into
 function calls as described in~\ref{over.oper}. Overloaded operators
 obey the rules for syntax and evaluation order specified in \ref{expr.compound},
 but the requirements of operand type and value category are replaced
 by the rules for function call. Relations between operators, such as
-\tcode{++a} meaning \tcode{a+=1}, are not guaranteed for overloaded
-operators\iref{over.oper}.
+\tcode{++a} meaning \tcode{a+=1}, are not guaranteed for \link{overloaded
+operators}{\ref{over.oper}}.
 \end{note}
 
 \pnum
@@ -183,8 +183,8 @@ The \defnx{result}{result!glvalue} of a glvalue is the entity denoted by the exp
 \pnum
 Whenever a glvalue expression appears as an operand of an operator that
 expects a prvalue for that operand, the
-lvalue-to-rvalue\iref{conv.lval}, array-to-pointer\iref{conv.array},
-or function-to-pointer\iref{conv.func} standard conversions are
+\link{lvalue-to-rvalue}{\ref{conv.lval}}, \link{array-to-pointer}{\ref{conv.array}},
+or \link{function-to-pointer}{\ref{conv.func}} standard conversions are
 applied to convert the expression to a prvalue.
 \begin{note}
 An attempt to bind an rvalue reference to an lvalue is not such a context; see~\ref{dcl.init.ref}.
@@ -204,7 +204,7 @@ created, which might then be promoted\iref{conv.prom}.
 \pnum
 Whenever a prvalue expression appears as an operand of an operator that
 expects a glvalue for that operand, the
-temporary materialization conversion\iref{conv.rval} is
+\link{temporary materialization conversion}{\ref{conv.rval}} is
 applied to convert the expression to an xvalue.
 
 \pnum
@@ -282,7 +282,7 @@ the expression is adjusted to \tcode{T} prior to any further analysis.
 \pnum
 The \defnx{cv-combined type}{type!cv-combined} of two types \tcode{T1} and \tcode{T2}
 is a type \tcode{T3}
-similar to \tcode{T1} whose cv-qualification signature\iref{conv.qual} is:
+similar to \tcode{T1} whose \deflink{cv-qualification signature}{\ref{conv.qual}} is:
 \begin{itemize}
 \item
 for every $i > 0$, $\cv{}^3_i$ is the union of
@@ -329,20 +329,20 @@ other type is ``pointer to function'', where the function types are otherwise th
 
 \item
 if \tcode{T1} is ``pointer to \cvqual{cv1} \tcode{C1}'' and \tcode{T2} is ``pointer to
-\cvqual{cv2} \tcode{C2}'', where \tcode{C1} is reference-related to \tcode{C2} or \tcode{C2} is
-reference-related to \tcode{C1}\iref{dcl.init.ref}, the cv-combined type
+\cvqual{cv2} \tcode{C2}'', where \tcode{C1} is \deflink{reference-related}{\ref{dcl.init.ref}} to \tcode{C2} or \tcode{C2} is
+reference-related to \tcode{C1}, the cv-combined type
 of \tcode{T1} and \tcode{T2} or the cv-combined type of \tcode{T2} and \tcode{T1},
 respectively;
 
 \item
 if \tcode{T1} is ``pointer to member of \tcode{C1} of type \cvqual{cv1} \tcode{U1}'' and \tcode{T2} is
 ``pointer to member of \tcode{C2} of type \cvqual{cv2} \tcode{U2}'' where \tcode{C1} is
-reference-related to \tcode{C2} or \tcode{C2} is reference-related to
-\tcode{C1}\iref{dcl.init.ref}, the cv-combined type of \tcode{T2} and \tcode{T1} or the cv-combined type
+reference-related to \tcode{C2} or \tcode{C2} is \deflink{reference-related}{\ref{dcl.init.ref}} to
+\tcode{C1}, the cv-combined type of \tcode{T2} and \tcode{T1} or the cv-combined type
 of \tcode{T1} and \tcode{T2}, respectively;
 
 \item
-if \tcode{T1} and \tcode{T2} are similar types\iref{conv.qual}, the cv-combined type of \tcode{T1} and
+if \tcode{T1} and \tcode{T2} are \deflink{similar types}{\ref{conv.qual}}, the cv-combined type of \tcode{T1} and
 \tcode{T2};
 
 \item
@@ -494,15 +494,15 @@ A
 \indextext{constant}%
 \grammarterm{literal}
 is a primary expression.
-Its type depends on its form\iref{lex.literal}.
+Its type depends on its \link{form}{\ref{lex.literal}}.
 A string literal is an lvalue; all other literals are prvalues.
 
 \rSec2[expr.prim.this]{This}
 
 \pnum
 \indextext{\idxcode{this}}%
-The keyword \tcode{this} names a pointer to the object for which a non-static member
-function\iref{class.this} is invoked or a non-static data member's
+The keyword \link{\tcode{this}}{\ref{class.this}} names a pointer to the object for which a non-static member
+function is invoked or a non-static data member's
 initializer\iref{class.mem} is evaluated.
 
 \pnum
@@ -519,7 +519,7 @@ occur until the complete declarator is known. \end{note}
 \begin{note}
 In a \grammarterm{trailing-return-type},
 the class being defined is not required to be complete
-for purposes of class member access\iref{expr.ref}.
+for purposes of \link{class member access}{\ref{expr.ref}}.
 Class members declared later are not visible.
 \begin{example}
 \begin{codeblock}
@@ -534,10 +534,10 @@ template auto A::f(int t) -> decltype(t + g());
 \end{note}
 
 \pnum
-Otherwise, if a \grammarterm{member-declarator} declares a non-static data
-member\iref{class.mem} of a class \tcode{X}, the expression \tcode{this} is
+Otherwise, if a \grammarterm{member-declarator} declares a non-static \link{data
+member}{\ref{class.mem}} of a class \tcode{X}, the expression \tcode{this} is
 a prvalue of type ``pointer to \tcode{X}'' within the
-optional default member initializer\iref{class.mem}. It shall not appear elsewhere
+optional \deflink{default member initializer}{\ref{class.mem}}. It shall not appear elsewhere
 in the \grammarterm{member-declarator}.
 
 \pnum
@@ -583,8 +583,8 @@ meaning, except as otherwise indicated.
 An \grammarterm{id-expression} is a restricted form of a
 \grammarterm{primary-expression}.
 \begin{note}
-An \grammarterm{id-expression} can appear after \tcode{.} and \tcode{->}
-operators\iref{expr.ref}.
+An \grammarterm{id-expression} can appear after
+\link{\tcode{.} and \tcode{->} operators}{\ref{expr.ref}}.
 \end{note}
 
 \pnum
@@ -592,7 +592,7 @@ An \grammarterm{id-expression} that denotes a non-static data member or
 non-static member function of a class can only be used:
 
 \begin{itemize}
-\item as part of a class member access\iref{expr.ref} in which the
+\item as part of a \link{class member access}{\ref{expr.ref}} in which the
 object expression
 refers to the member's class\footnote{This also applies when the object expression
 is an implicit \tcode{(*this)}~(\ref{class.mfct.non-static}).} or a class derived from
@@ -764,7 +764,7 @@ type.
 A \grammarterm{nested-name-specifier} that denotes a class, optionally
 followed by the keyword \tcode{template}\iref{temp.names}, and then
 followed by the name of a member of either that class\iref{class.mem}
-or one of its base classes\iref{class.derived}, is a
+or one of its \link{base classes}{\ref{class.derived}}, is a
 \indextext{id!qualified}%
 \grammarterm{qualified-id};~\ref{class.qual} describes name lookup for
 class members that appear in \grammarterm{qualified-id}{s}. The result is the
@@ -778,7 +778,7 @@ point in its potential scope\iref{basic.scope.class}.
 Where
 \grammarterm{class-name} \tcode{::\~}~\grammarterm{class-name} is used,
 the two \grammarterm{class-name}{s} shall refer to the same class; this
-notation names the destructor\iref{class.dtor}.
+notation names the \link{destructor}{\ref{class.dtor}}.
 The form \tcode{\~}~\grammarterm{decltype-specifier} also denotes the destructor,
 but it shall not be used as the \grammarterm{unqualified-id} in a \grammarterm{qualified-id}.
 \begin{note}
@@ -801,7 +801,7 @@ is an lvalue if the member is a function or a variable and a prvalue otherwise.
 
 \pnum
 A \grammarterm{nested-name-specifier} that denotes an
-enumeration\iref{dcl.enum}, followed by the name of an
+\link{enumeration}{\ref{dcl.enum}}, followed by the name of an
 enumerator of that enumeration, is a \grammarterm{qualified-id}
 that refers to the enumerator. The result is the enumerator. The type
 of the result is the type of the enumeration. The result is a prvalue.
@@ -854,8 +854,8 @@ void abssort(float* x, unsigned N) {
 A \grammarterm{lambda-expression} is a prvalue
 whose result object is called the \defn{closure object}.
 \begin{note}
-A closure object behaves like a function
-object\iref{function.objects}.\end{note}
+A closure object behaves like a \link{function
+object}{\ref{function.objects}}.\end{note}
 
 \pnum
 In the \grammarterm{decl-specifier-seq} of the \grammarterm{lambda-declarator},
@@ -917,9 +917,9 @@ other than by changing:
 \begin{itemize}
 \item the size and/or alignment of the closure type,
 
-\item whether the closure type is trivially copyable\iref{class}, or
+\item whether the closure type is \deflink{trivially copyable}{\ref{class}}, or
 
-\item whether the closure type is a standard-layout class\iref{class}.
+\item whether the closure type is a \deflink{standard-layout class}{\ref{class}}.
 \end{itemize}
 
 An implementation shall not add members of rvalue reference type to the closure
@@ -927,12 +927,12 @@ type.
 
 \pnum
 The closure type for a non-generic \grammarterm{lambda-expression} has a public
-inline function call operator\iref{over.call} whose parameters and return type
+inline \link{function call operator}{\ref{over.call}} whose parameters and return type
 are described by the \grammarterm{lambda-expression}'s
 \grammarterm{parameter-declaration-clause} and \grammarterm{trailing-return-type}
 respectively.
 For a generic lambda, the closure type has a public inline function call
-operator member template\iref{temp.mem} whose
+operator \link{member template}{\ref{temp.mem}} whose
 \grammarterm{template-parameter-list} consists of
 the specified \grammarterm{template-parameter-list}, if any,
 to which is appended one invented type
@@ -987,7 +987,7 @@ The function call operator or any given operator template specialization
 is a constexpr function if either
 the corresponding \grammarterm{lambda-expression}{'s}
 \grammarterm{parameter-declaration-clause} is followed by \tcode{constexpr}, or
-it satisfies the requirements for a constexpr function\iref{dcl.constexpr}.
+it satisfies the requirements for a \link{constexpr}{\ref{dcl.constexpr}} function.
 \begin{note} Names referenced in
 the \grammarterm{lambda-declarator} are looked up in the context in which the
 \grammarterm{lambda-expression} appears. \end{note}
@@ -1056,7 +1056,7 @@ The closure type for a non-generic \grammarterm{lambda-expression} with no
 \grammarterm{lambda-capture}
 whose constraints (if any) are satisfied
 has a conversion function to pointer to
-function with \Cpp{} language linkage\iref{dcl.link} having
+function with \Cpp{} language \link{linkage}{\ref{dcl.link}} having
 the same parameter and return types as the closure type's function call operator.
 The conversion is to ``pointer to \tcode{noexcept} function''
 if the function call operator
@@ -1148,8 +1148,8 @@ GL_int(3);                // OK: same as \tcode{GL(3)}
 
 \pnum
 The conversion function or conversion function template is public,
-constexpr, non-virtual, non-explicit, const, and has a non-throwing exception
-specification\iref{except.spec}.
+constexpr, non-virtual, non-explicit, const, and has a non-throwing \link{exception
+specification}{\ref{except.spec}}.
 \begin{example}
 \begin{codeblock}
 auto Fwd = [](int (*fp)(int), auto a) { return fp(a); };
@@ -1166,8 +1166,8 @@ static_assert(Fwd(NC,3) == 3); // ill-formed
 \pnum
 The \grammarterm{lambda-expression}'s \grammarterm{compound-statement} yields the
 \grammarterm{function-body}\iref{dcl.fct.def} of the function call operator, but for
-purposes of name lookup\iref{basic.lookup}, determining the type and value of
-\tcode{this}\iref{class.this} and transforming \grammarterm{id-expression}{s}
+purposes of \link{name lookup}{\ref{basic.lookup}}, determining the type and value of
+\link{\tcode{this}}{\ref{class.this}} and transforming \grammarterm{id-expression}{s}
 referring to non-static class members into class member access expressions using
 \tcode{(*this)}~(\ref{class.mfct.non-static}), the \grammarterm{compound-statement} is
 considered in the context of the \grammarterm{lambda-expression}. \begin{example}
@@ -1294,7 +1294,7 @@ void S2::f(int i) {
 \pnum
 A \grammarterm{lambda-expression}
 is a \defn{local lambda expression}
-if its innermost enclosing scope is a block scope\iref{basic.scope.block},
+if its innermost enclosing scope is a \link{block scope}{\ref{basic.scope.block}},
 or if it appears within a default member initializer
 and its innermost enclosing scope is
 the corresponding class scope\iref{basic.scope.class};
@@ -1532,7 +1532,7 @@ A member of an anonymous union shall not be captured by copy.
 
 \pnum
 Every \grammarterm{id-expression} within the \grammarterm{compound-statement} of a
-\grammarterm{lambda-expression} that is an odr-use\iref{basic.def.odr} of an
+\grammarterm{lambda-expression} that is an \link{odr-use}{\ref{basic.def.odr}} of an
 entity captured by copy is transformed into an access to the corresponding unnamed data
 member of the closure type.
 \begin{note} An \grammarterm{id-expression} that is not an odr-use refers to
@@ -2182,9 +2182,9 @@ For a call to a non-static
 member function,
 the postfix expression shall be an
 implicit~(\ref{class.mfct.non-static}, \ref{class.static}) or explicit
-class member access\iref{expr.ref} whose \grammarterm{id-expression} is a
-function member name, or a pointer-to-member
-expression\iref{expr.mptr.oper} selecting a function member; the call is as a member of
+\link{class member access}{\ref{expr.ref}} whose \grammarterm{id-expression} is a
+function member name, or a \link{pointer-to-member
+expression}{\ref{expr.mptr.oper}} selecting a function member; the call is as a member of
 the class object referred to by the
 object expression. In the case of an implicit class
 member access, the implied object is the one pointed to by \tcode{this}.
@@ -2199,7 +2199,7 @@ the appropriate function and the validity of the call are determined
 according to the rules in~\ref{over.match}. If the selected
 function is non-virtual, or if the \grammarterm{id-expression} in the class
 member access expression is a \grammarterm{qualified-id}, that function is
-called. Otherwise, its final overrider\iref{class.virtual} in the dynamic type
+called. Otherwise, its \deflink{final overrider}{\ref{class.virtual}} in the dynamic type
 of the object expression is called; such a call is referred to as a
 \defnx{virtual function call}{function!virtual function call}.
 \begin{note}
@@ -2212,14 +2212,14 @@ an object under construction or destruction.
 
 \pnum
 \begin{note}
-If a function or member function name is used, and name
-lookup\iref{basic.lookup} does not find a declaration of that name,
+If a function or member function name is used, and \link{name
+lookup}{\ref{basic.lookup}} does not find a declaration of that name,
 the program is ill-formed. No function is implicitly declared by such a
 call.
 \end{note}
 
 \pnum
-If the \grammarterm{postfix-expression} designates a destructor\iref{class.dtor},
+If the \grammarterm{postfix-expression} designates a \link{destructor}{\ref{class.dtor}},
 the type of the function call expression is \tcode{void}; otherwise, the
 type of the function call expression is the return type of the
 statically chosen function (i.e., ignoring the \tcode{virtual} keyword),
@@ -2241,9 +2241,9 @@ When a function is called, each parameter\iref{dcl.fct} shall be
 initialized~(\ref{dcl.init}, \ref{class.copy}, \ref{class.ctor}) with
 its corresponding argument.
 If the function is a non-static member
-function, the \tcode{this} parameter of the function\iref{class.this}
+function, the \link{\tcode{this} parameter}{\ref{class.this}} of the function
 shall be initialized with a pointer to the object of the call, converted
-as if by an explicit type conversion\iref{expr.cast}.
+as if by an \link{explicit type conversion}{\ref{expr.cast}}.
 \begin{note}
 There is no access or ambiguity checking on this conversion; the access
 checking and disambiguation are done as part of the (possibly implicit)
@@ -2322,7 +2322,7 @@ but it is unspecified whether the value of \tcode{j} is 1 or 2.
 
 \pnum
 The result of a function call is the
-result of the operand of the evaluated \tcode{return} statement\iref{stmt.return}
+result of the operand of the evaluated \link{\tcode{return} statement}{\ref{stmt.return}}
 in the called function (if any),
 except in a virtual function call if the return type of the
 final overrider is different from the return type of the statically
@@ -2352,10 +2352,10 @@ pointer parameters.
 \pnum
 \indextext{declaration!ellipsis in function}%
 \indextext{parameter list!variable}%
-A function can be declared to accept fewer arguments (by declaring default
-arguments\iref{dcl.fct.default}) or more arguments (by using the ellipsis,
+A function can be declared to accept fewer arguments (by declaring \link{default
+arguments}{\ref{dcl.fct.default}}) or more arguments (by using the ellipsis,
 \tcode{...}, or a function parameter pack\iref{dcl.fct}) than the number of
-parameters in the function definition\iref{dcl.fct.def}.
+parameters in the \link{function definition}{\ref{dcl.fct.def}}.
 \begin{note}
 This implies that, except where the ellipsis (\tcode{...}) or a function
 parameter pack is used, a parameter is available for each argument.
@@ -2365,35 +2365,35 @@ parameter pack is used, a parameter is available for each argument.
 \indextext{ellipsis!conversion sequence}%
 When there is no parameter for a given argument, the argument is passed
 in such a way that the receiving function can obtain the value of the
-argument by invoking \tcode{va_arg}\iref{support.runtime}.
+argument by invoking \liblinkx{\tcode{va_arg}}{va_arg}{\ref{support.runtime}}.
 \begin{note} This paragraph does not apply to arguments passed to a function parameter pack.
 Function parameter packs are expanded during template instantiation\iref{temp.variadic},
 thus each such argument has a corresponding parameter when a function template
 specialization is actually called. \end{note}
 The
-lvalue-to-rvalue\iref{conv.lval}, array-to-pointer\iref{conv.array},
-and function-to-pointer\iref{conv.func} standard conversions are
+\link{lvalue-to-rvalue}{\ref{conv.lval}}, \link{array-to-pointer}{\ref{conv.array}},
+and \link{function-to-pointer}{\ref{conv.func}} standard conversions are
 performed on the argument expression.
-An argument that has type \cv{}~\tcode{std::nullptr_t} is converted
-to type \tcode{void*}\iref{conv.ptr}.
+An argument that has type \cv{}~\tcode{std::nullptr_t} is \link{converted}{\ref{conv.ptr}}
+to type \tcode{void*}.
 After these conversions, if the
 argument does not have arithmetic, enumeration, pointer, pointer-to-member,
 or class type, the program is ill-formed. Passing a potentially-evaluated
-argument of class type\iref{class} having a non-trivial
+argument of \link{class type}{\ref{class}} having a non-trivial
 copy constructor, a non-trivial move constructor,
 or a
 non-trivial destructor, with no corresponding parameter, is conditionally-supported with
 \impldef{passing argument of class type through ellipsis} semantics. If the argument has
-integral or enumeration type that is subject to the integral
-promotions\iref{conv.prom}, or a floating-point type that is subject to the
-floating-point promotion\iref{conv.fpprom}, the value of the argument is converted to the
+integral or enumeration type that is subject to the \link{integral
+promotions}{\ref{conv.prom}}, or a floating-point type that is subject to the
+\link{floating-point promotion}{\ref{conv.fpprom}}, the value of the argument is converted to the
 promoted type before the call. These promotions are referred to as
 the \defnx{default argument promotions}{promotion!default argument promotion}.
 
 \pnum
 \indextext{function call!recursive}%
-Recursive calls are permitted, except to the \tcode{main}
-function\iref{basic.start.main}.
+Recursive calls are permitted, except to the \link{\tcode{main}
+function}{\ref{basic.start.main}}.
 
 \pnum
 A function call is an lvalue
@@ -2409,8 +2409,8 @@ otherwise.
 \indextext{type conversion, explicit|see{casting}}%
 \indextext{conversion explicit type|see{casting}}%
 \indextext{casting}%
-A \grammarterm{simple-type-specifier}\iref{dcl.type.simple} or
-\grammarterm{typename-specifier}\iref{temp.res} followed
+A \link{\grammarterm{simple-type-specifier}}{\ref{dcl.type.simple}} or
+\link{\grammarterm{typename-specifier}}{\ref{temp.res}} followed
 by a parenthesized optional \grammarterm{expression-list} or
 by a \grammarterm{braced-init-list}
 (the initializer)
@@ -2421,14 +2421,13 @@ If the type is a placeholder
 for a deduced class type,
 it is replaced by the return type
 of the function selected by overload resolution
-for class template deduction\iref{over.match.class.deduct}
+for \link{class template deduction}{\ref{over.match.class.deduct}}
 for the remainder of this subclause.
 
 \pnum
 If the initializer is a parenthesized single expression,
 the type conversion expression is equivalent
-to the corresponding cast
-expression\iref{expr.cast}.
+to the corresponding \link{cast expression}{\ref{expr.cast}}.
 \indextext{type!incomplete}%
 Otherwise, if the type is \cv{}~\tcode{void}
 and the initializer is \tcode{()}
@@ -2437,7 +2436,7 @@ the expression is a prvalue of the specified type
 that performs no initialization.
 Otherwise,
 the expression is a prvalue of the specified type
-whose result object is direct-initialized\iref{dcl.init}
+whose result object is \deflinkx{direct-initialized}{direct-initialization}{\ref{dcl.init}}
 with the initializer.
 If the initializer is a parenthesized optional \grammarterm{expression-list},
 the specified type shall not be an array type.
@@ -2566,7 +2565,7 @@ is ``\cvqual{vq12} \tcode{T}''. If \tcode{E2} is not declared to be a
 ``\cvqual{cq12} \cvqual{vq12} \tcode{T}''.
 
 \item If \tcode{E2} is a (possibly overloaded) member function, function
-overload resolution\iref{over.match} is used to determine whether
+\link{overload resolution}{\ref{over.match}} is used to determine whether
 \tcode{E1.E2} refers to a static or a non-static member function.
 
 \begin{itemize}
@@ -2691,8 +2690,8 @@ subobject of the \tcode{D} object pointed to by \tcode{v}. Similarly, if
 \tcode{T} is ``reference to \cvqual{cv1} \tcode{B}'' and \tcode{v} has
 type \cvqual{cv2} \tcode{D} such that \tcode{B} is a base class of
 \tcode{D}, the result is the unique \tcode{B} subobject of the \tcode{D}
-object referred to by \tcode{v}.\footnote{The most derived
-object\iref{intro.object} pointed or referred to by
+object referred to by \tcode{v}.\footnote{The \deflink{most derived
+object}{\ref{intro.object}} pointed or referred to by
 \tcode{v} can contain other \tcode{B} objects as base classes, but these
 are ignored.}
 In both the pointer and
@@ -2710,8 +2709,8 @@ void foo(D* dp) {
 \end{example}
 
 \pnum
-Otherwise, \tcode{v} shall be a pointer to or a glvalue of a polymorphic
-type\iref{class.virtual}.
+Otherwise, \tcode{v} shall be a pointer to or a glvalue of a
+\deflinkx{polymorphic type}{polymorphic class}{\ref{class.virtual}}.
 
 \pnum
 If \tcode{T} is ``pointer to \cv{} \tcode{void}'', then the result
@@ -2742,9 +2741,9 @@ runtime check \term{fails}.
 
 \pnum
 The value of a failed cast to pointer type is the null pointer value of
-the required result type. A failed cast to reference type throws
-an exception\iref{except.throw} of a type that would match a
-handler\iref{except.handle} of type \tcode{std::bad_cast}\iref{bad.cast}.
+the required result type. A failed cast to reference type \link{throws
+an exception}{\ref{except.throw}} of a type that would match a
+\link{handler}{\ref{except.handle}} of type \link{\tcode{std::bad_cast}}{\ref{bad.cast}}.
 
 \indextext{\idxcode{bad_cast}}%
 \indexlibrary{\idxcode{bad_cast}}%
@@ -2789,8 +2788,8 @@ applied to an object under construction or destruction.
 The result of a \tcode{typeid} expression is an lvalue of static type
 \indextext{\idxcode{type_info}}%
 \indexlibrary{\idxcode{type_info}}%
-\tcode{const} \tcode{std::type_info}\iref{type.info} and dynamic type \tcode{const}
-\tcode{std::type_info} or \tcode{const} \placeholder{name} where \term{name} is an
+\tcode{const} \link{\tcode{std::type_info}}{\ref{type.info}} and dynamic type \tcode{const}
+\tcode{std::type_info} or \tcode{const} \placeholder{name} where \placeholder{name} is an
 \impldef{derived type for \tcode{typeid}} class publicly derived from
 \tcode{std::type_info} which preserves the behavior described
 in~\ref{type.info}.\footnote{The recommended name for such a class is
@@ -2801,33 +2800,33 @@ of the program. Whether or not the destructor is called for the
 
 \pnum
 When \tcode{typeid} is applied to a glvalue expression whose type is a
-polymorphic class type\iref{class.virtual}, the result refers to a
-\tcode{std::type_info} object representing the type of the most derived
-object\iref{intro.object} (that is, the dynamic type) to which the
+\deflink{polymorphic class}{\ref{class.virtual}} type, the result refers to a
+\tcode{std::type_info} object representing the type of the \deflink{most derived
+object}{\ref{intro.object}} (that is, the dynamic type) to which the
 glvalue refers. If the glvalue expression is obtained by applying the
 unary \tcode{*} operator to a pointer\footnote{If \tcode{p} is an expression of
 pointer type, then \tcode{*p},
 \tcode{(*p)}, \tcode{*(p)}, \tcode{((*p))}, \tcode{*((p))}, and so on
 all meet this requirement.}
-and the pointer is a null pointer value\iref{conv.ptr}, the
-\tcode{typeid} expression throws an exception\iref{except.throw} of
+and the pointer is a \link{null pointer value}{\ref{conv.ptr}}, the
+\tcode{typeid} expression \link{throws an exception}{\ref{except.throw}} of
 a type that would match a handler of type
 \indextext{\idxcode{bad_typeid}}%
 \indexlibrary{\idxcode{bad_typeid}}%
-\tcode{std::bad_typeid}
-exception\iref{bad.typeid}.
+\link{\tcode{std::bad_typeid}}{\ref{bad.typeid}}
+exception.
 
 \pnum
 When \tcode{typeid} is applied to an expression other than a glvalue of
 a polymorphic class type, the result refers to a \tcode{std::type_info}
 object representing the static type of the expression.
-Lvalue-to-rvalue\iref{conv.lval}, array-to-pointer\iref{conv.array},
-and function-to-pointer\iref{conv.func} conversions are not applied to
+\link{Lvalue-to-rvalue}{\ref{conv.lval}}, \link{array-to-pointer}{\ref{conv.array}},
+and \link{function-to-pointer}{\ref{conv.func}} conversions are not applied to
 the expression.
 If the expression is a prvalue,
-the temporary materialization conversion\iref{conv.rval}
+the \link{temporary materialization conversion}{\ref{conv.rval}}
 is applied.
-The expression is an unevaluated operand\iref{expr.prop}.
+The expression is an \deflink{unevaluated operand}{\ref{expr.prop}}.
 
 \pnum
 When \tcode{typeid} is applied to a \grammarterm{type-id}, the result
@@ -2859,7 +2858,7 @@ typeid(D)  == typeid(const D&); // yields \tcode{true}
 \end{example}
 
 \pnum
-If the header \tcode{<typeinfo>}\iref{type.info} is not included prior
+If the header \link{\tcode{<typeinfo>}}{\ref{type.info}} is not included prior
 to a use of \tcode{typeid}, the program is ill-formed.
 
 \pnum
@@ -2880,15 +2879,15 @@ converting the expression \tcode{v} to type \tcode{T}.
 If \tcode{T} is an lvalue reference type
 or an rvalue reference to function type, the result is an lvalue;
 if \tcode{T} is an rvalue reference to object type, the result is an xvalue;
-otherwise, the result is a prvalue. The \tcode{static_cast} operator shall not cast
-away constness\iref{expr.const.cast}.
+otherwise, the result is a prvalue. The \tcode{static_cast} operator shall not
+\deflinkx{cast away constness}{casting away constness}{\ref{expr.const.cast}}.
 
 \pnum
 \indextext{cast!static!reference}%
 \indextext{cast!reference}%
 An lvalue of type ``\cvqual{cv1} \tcode{B}'', where \tcode{B} is a class
 type, can be cast to type ``reference to \cvqual{cv2} \tcode{D}'', where
-\tcode{D} is a class derived\iref{class.derived} from \tcode{B},
+\tcode{D} is a class \link{derived}{\ref{class.derived}} from \tcode{B},
 if \cvqual{cv2} is the
 same cv-qualification as, or greater cv-qualification than,
 \cvqual{cv1}. If \tcode{B} is a virtual base class of \tcode{D}
@@ -2918,21 +2917,21 @@ static_cast<D&>(br);            // produces lvalue to the original \tcode{d} obj
 An lvalue
 of type ``\cvqual{cv1} \tcode{T1}'' can be cast to type ``rvalue
 reference to \cvqual{cv2} \tcode{T2}'' if ``\cvqual{cv2} \tcode{T2}'' is
-reference-compatible with ``\cvqual{cv1}
-\tcode{T1}''\iref{dcl.init.ref}. If the value is not a bit-field,
+\deflink{reference-compatible}{\ref{dcl.init.ref}} with ``\cvqual{cv1}
+\tcode{T1}''. If the value is not a bit-field,
 the result refers to the object or the specified base class subobject
-thereof; otherwise, the lvalue-to-rvalue conversion\iref{conv.lval}
+thereof; otherwise, the \link{lvalue-to-rvalue conversion}{\ref{conv.lval}}
 is applied to the bit-field and the resulting prvalue is used as the
 \grammarterm{expression} of the \tcode{static_cast} for the remainder of this subclause.
-If \tcode{T2} is an inaccessible\iref{class.access} or
-ambiguous\iref{class.member.lookup} base class of \tcode{T1},
+If \tcode{T2} is an \link{inaccessible}{\ref{class.access}} or
+\link{ambiguous}{\ref{class.member.lookup}} base class of \tcode{T1},
 a program that necessitates such a cast is ill-formed.
 
 \pnum
 An expression \tcode{e} can be explicitly converted to a type \tcode{T}
-if there is an implicit conversion sequence\iref{over.best.ics}
+if there is an \link{implicit conversion sequence}{\ref{over.best.ics}}
 from \tcode{e} to \tcode{T}, or
-if overload resolution for a direct-initialization\iref{dcl.init}
+if overload resolution for a \deflink{direct-initialization}{\ref{dcl.init}}
 of an object or reference of type \tcode{T} from \tcode{e}
 would find at least one viable function\iref{over.match.viable}.
 If \tcode{T} is a reference type, the effect is
@@ -2955,11 +2954,10 @@ listed below. No other conversion shall be performed explicitly using a
 
 \pnum
 Any expression can be explicitly converted to type \cv{}~\tcode{void},
-in which case it becomes a discarded-value
-expression\iref{expr.prop}.
+in which case it becomes a \deflink{discarded-value expression}{\ref{expr.prop}}.
 \begin{note}
-However, if the value is in a temporary
-object\iref{class.temporary}, the destructor for that
+However, if the value is in a \link{temporary
+object}{\ref{class.temporary}}, the destructor for that
 object is
 not executed until the usual time, and the value of the object is
 preserved for the purpose of executing the destructor.
@@ -2967,13 +2965,13 @@ preserved for the purpose of executing the destructor.
 
 
 \pnum
-The inverse of any standard conversion sequence\iref{conv} not containing an
-lvalue-to-rvalue\iref{conv.lval},
-array-to-pointer\iref{conv.array},
-function-to-pointer\iref{conv.func},
-null pointer\iref{conv.ptr}, null member pointer\iref{conv.mem},
-boolean\iref{conv.bool}, or
-function pointer\iref{conv.fctptr}
+The inverse of any \link{standard conversion sequence}{\ref{conv}} not containing an
+\link{lvalue-to-rvalue}{\ref{conv.lval}},
+\link{array-to-pointer}{\ref{conv.array}},
+\link{function-to-pointer}{\ref{conv.func}},
+\link{null pointer}{\ref{conv.ptr}}, \link{null member pointer}{\ref{conv.mem}},
+\link{boolean}{\ref{conv.bool}}, or
+\link{function pointer}{\ref{conv.fctptr}}
 conversion, can be performed explicitly using \tcode{static_cast}. A
 program is ill-formed if it uses \tcode{static_cast} to perform the
 inverse of an ill-formed standard conversion sequence.
@@ -2989,16 +2987,16 @@ void f() {
 \end{example}
 
 \pnum
-The lvalue-to-rvalue\iref{conv.lval},
-array-to-pointer\iref{conv.array}, and
-function-to-pointer\iref{conv.func} conversions are applied to the
+The \link{lvalue-to-rvalue}{\ref{conv.lval}},
+\link{array-to-pointer}{\ref{conv.array}}, and
+\link{function-to-pointer}{\ref{conv.func}} conversions are applied to the
 operand. Such a \tcode{static_cast} is subject to the restriction that
-the explicit conversion does not cast away
-constness\iref{expr.const.cast}, and the following additional rules
+the explicit conversion does not \deflinkx{cast away
+constness}{casting away constness}{\ref{expr.const.cast}}, and the following additional rules
 for specific cases:
 
 \pnum
-A value of a scoped enumeration type\iref{dcl.enum} can be explicitly converted to an
+A value of a \link{scoped enumeration type}{\ref{dcl.enum}} can be explicitly converted to an
 integral type. When that type is \cv{}~\tcode{bool}, the resulting value is
 \tcode{false} if the original value is zero and \tcode{true} for all other
 values. For the remaining integral types, the value is unchanged if the
@@ -3032,15 +3030,15 @@ the enumeration type.
 \indextext{cast!derived class}%
 A prvalue of type ``pointer to \cvqual{cv1} \tcode{B}'', where \tcode{B}
 is a class type, can be converted to a prvalue of type ``pointer to
-\cvqual{cv2} \tcode{D}'', where \tcode{D} is a class derived\iref{class.derived}
-from \tcode{B},
+\cvqual{cv2} \tcode{D}'', where \tcode{D} is a class
+\link{derived}{\ref{class.derived}} from \tcode{B},
 if \cvqual{cv2} is the same cv-qualification as,
 or greater cv-qualification than, \cvqual{cv1}.
 If \tcode{B} is a virtual base class of \tcode{D} or
 a base class of a virtual base class of \tcode{D}, or
 if no valid standard conversion from ``pointer to \tcode{D}''
 to ``pointer to \tcode{B}'' exists\iref{conv.ptr}, the program is ill-formed.
-The null pointer value\iref{conv.ptr} is converted
+The \link{null pointer value}{\ref{conv.ptr}} is converted % todo: deflink?
 to the null pointer value of the destination type. If the prvalue of type
 ``pointer to \cvqual{cv1} \tcode{B}'' points to a \tcode{B} that is
 actually a subobject of an object of type \tcode{D}, the resulting
@@ -3051,8 +3049,8 @@ behavior is undefined.
 \indextext{cast!pointer-to-member}%
 A prvalue of type ``pointer to member of \tcode{D} of type \cvqual{cv1}
 \tcode{T}'' can be converted to a prvalue of type ``pointer to member of
-\tcode{B} of type \cvqual{cv2} \tcode{T}'', where \tcode{B} is a base
-class\iref{class.derived} of \tcode{D},
+\tcode{B} of type \cvqual{cv2} \tcode{T}'', where \tcode{B} is a \link{base
+class}{\ref{class.derived}} of \tcode{D},
 if \cvqual{cv2} is the same cv-qualification
 as, or greater cv-qualification than, \cvqual{cv1}.\footnote{Function types
 (including those used in pointer-to-member-function
@@ -3061,7 +3059,7 @@ If no valid standard conversion
 from ``pointer to member of \tcode{B} of type \tcode{T}''
 to ``pointer to member of \tcode{D} of type \tcode{T}''
 exists\iref{conv.mem}, the program is ill-formed.
-The null member pointer value\iref{conv.mem} is converted to the null
+The \deflink{null member pointer value}{\ref{conv.mem}} is converted to the null
 member pointer value of the destination type. If class \tcode{B}
 contains the original member, or is a base or derived class of the class
 containing the original member, the resulting pointer to member points
@@ -3084,7 +3082,7 @@ If the original pointer value represents the address
 then the resulting pointer value is unspecified.
 Otherwise, if the original pointer value points to an object \placeholder{a},
 and there is an object \placeholder{b} of type \tcode{T} (ignoring cv-qualification)
-that is pointer-interconvertible\iref{basic.compound} with \placeholder{a},
+that is \deflink{pointer-interconvertible}{\ref{basic.compound}} with \placeholder{a},
 the result is a pointer to \placeholder{b}.
 Otherwise, the pointer value is unchanged by the conversion.
 \begin{example}
@@ -3108,14 +3106,14 @@ result of converting the expression \tcode{v} to type \tcode{T}.
 If \tcode{T} is an lvalue reference type or an rvalue reference to function type, the result is an lvalue;
 if \tcode{T} is an rvalue reference to object type, the result is an xvalue;
 otherwise, the result is a prvalue and the
-lvalue-to-rvalue\iref{conv.lval}, array-to-pointer\iref{conv.array},
-and function-to-pointer\iref{conv.func} standard conversions are
+\link{lvalue-to-rvalue}{\ref{conv.lval}}, \link{array-to-pointer}{\ref{conv.array}},
+and \link{function-to-pointer}{\ref{conv.func}} standard conversions are
 performed on the expression \tcode{v}. Conversions that can be performed explicitly
 using \tcode{reinterpret_cast} are listed below. No other conversion can
 be performed explicitly using \tcode{reinterpret_cast}.
 
 \pnum
-The \tcode{reinterpret_cast} operator shall not cast away constness\iref{expr.const.cast}.
+The \tcode{reinterpret_cast} operator shall not \deflinkx{cast away constness}{casting away constness}{\ref{expr.const.cast}}.
 An expression of integral, enumeration, pointer, or pointer-to-member type
 can be explicitly converted to its own type; such a cast yields the value of
 its operand.
@@ -3203,7 +3201,7 @@ type and back, possibly with different cv-qualification, shall yield the origina
 pointer value.
 
 \pnum
-The null pointer value\iref{conv.ptr} is converted to the null pointer value
+The \link{null pointer value}{\ref{conv.ptr}} is converted to the null pointer value
 of the destination type.
 \begin{note}
 A null pointer constant of type \tcode{std::nullptr_t} cannot be converted to a
@@ -3220,7 +3218,7 @@ can be explicitly converted to a prvalue of a different type ``pointer to member
 function types or both object types.\footnote{\tcode{T1} and \tcode{T2} may have
 different \cv-qualifiers, subject to
 the overall restriction that a \tcode{reinterpret_cast} cannot cast away
-constness.} The null member pointer value\iref{conv.mem} is converted to the
+constness.} The \deflink{null member pointer value}{\ref{conv.mem}} is converted to the
 null member pointer value of the destination type. The result of this
 conversion is unspecified, except in the following cases:
 
@@ -3264,8 +3262,8 @@ The result of the expression \tcode{const_cast<T>(v)} is of type
 lvalue;
 if \tcode{T} is an rvalue reference to object type, the result is an xvalue;
 otherwise, the result is a prvalue and the
-lvalue-to-rvalue\iref{conv.lval}, array-to-pointer\iref{conv.array},
-and function-to-pointer\iref{conv.func} standard conversions are
+\link{lvalue-to-rvalue}{\ref{conv.lval}}, \link{array-to-pointer}{\ref{conv.array}},
+and \link{function-to-pointer}{\ref{conv.func}} standard conversions are
 performed on the expression \tcode{v}. Conversions that can be performed explicitly using
 \tcode{const_cast} are listed below. No other conversion shall be
 performed explicitly using \tcode{const_cast}.
@@ -3277,7 +3275,7 @@ to its own type using a \tcode{const_cast} operator.
 \end{note}
 
 \pnum
-For two similar types \tcode{T1} and \tcode{T2}\iref{conv.qual},
+For two \deflink{similar types}{\ref{conv.qual}} \tcode{T1} and \tcode{T2},
 a prvalue of type \tcode{T1} may be explicitly
 converted to the type \tcode{T2} using a \tcode{const_cast}. The result
 of a \tcode{const_cast} refers to the original entity.
@@ -3311,12 +3309,12 @@ explicitly converted to an xvalue of type \tcode{T2} using the cast
 
 The result of a reference \tcode{const_cast} refers
 to the original object if the operand is a glvalue and
-to the result of applying the temporary materialization conversion\iref{conv.rval} otherwise.
+to the result of applying the \link{temporary materialization conversion}{\ref{conv.rval}} otherwise.
 
 \pnum
-A null pointer value\iref{conv.ptr} is converted to the null pointer
-value of the destination type. The null member pointer
-value\iref{conv.mem} is converted to the null member pointer value of
+A \deflink{null pointer value}{\ref{conv.ptr}} is converted to the null pointer
+value of the destination type. The
+\deflink{null member pointer value}{\ref{conv.mem}} is converted to the null member pointer value of
 the destination type.
 
 \pnum
@@ -3334,7 +3332,7 @@ may produce undefined behavior\iref{dcl.type.cv}.
 A conversion from a type \tcode{T1} to a type \tcode{T2}
 \defnx{casts away constness}{casting away constness}
 if \tcode{T1} and \tcode{T2} are different,
-there is a cv-decomposition\iref{conv.qual} of \tcode{T1}
+there is a \deflink{cv-decomposition}{\ref{conv.qual}} of \tcode{T1}
 yielding \placeholder{n} such that
 \tcode{T2} has a cv-decomposition of the form
 
@@ -3497,7 +3495,7 @@ called. The operand of \tcode{\&} shall not be a bit-field.
 
 \pnum
 \indextext{overloaded function!address of}%
-The address of an overloaded function\iref{over} can be taken
+The address of an \link{overloaded function}{\ref{over}} can be taken
 only in a context that uniquely determines which version of the
 overloaded function is referred to (see~\ref{over.over}).
 \begin{note}
@@ -3525,8 +3523,9 @@ result is the type of the promoted operand.
 
 \pnum
 \indextext{operator!logical negation}%
-The operand of the logical negation operator \tcode{!} is contextually
-converted to \tcode{bool}\iref{conv};
+The operand of the logical negation operator \tcode{!} is
+\deflinkx{contextually converted to \tcode{bool}}
+{conversion!contextual to \tcode{bool}}{\ref{conv}};
 its value is \tcode{true}
 if the converted operand is \tcode{false} and \tcode{false} otherwise.
 The type of the result is \tcode{bool}.
@@ -3569,8 +3568,8 @@ bit-field if the operand is a bit-field.
 The expression \tcode{++x} is equivalent to \tcode{x+=1}.
 \indextext{operator!\idxcode{+=}}%
 \begin{note}
-See the discussions of addition\iref{expr.add} and assignment
-operators\iref{expr.ass} for information on conversions.
+See the discussions of \link{addition}{\ref{expr.add}} and \link{assignment
+operators}{\ref{expr.ass}} for information on conversions.
 \end{note}
 
 \pnum
@@ -3602,8 +3601,8 @@ to the parenthesized name of such
 types, or to a glvalue that designates a bit-field.
 \tcode{sizeof(char)}, \tcode{sizeof(signed char)} and
 \tcode{sizeof(unsigned char)} are \tcode{1}. The result of
-\tcode{sizeof} applied to any other fundamental
-type\iref{basic.fundamental} is \impldef{\tcode{sizeof} applied to
+\tcode{sizeof} applied to any other \link{fundamental
+type}{\ref{basic.fundamental}} is \impldef{\tcode{sizeof} applied to
 fundamental types
 other than \tcode{char}, \tcode{signed char}, and \tcode{unsigned char}}.
 \begin{note}
@@ -3641,12 +3640,12 @@ The \tcode{sizeof} operator can be applied to a pointer to a function,
 but shall not be applied directly to a function.
 
 \pnum
-The lvalue-to-rvalue\iref{conv.lval},
-array-to-pointer\iref{conv.array}, and
-function-to-pointer\iref{conv.func} standard conversions are not
+The \link{lvalue-to-rvalue}{\ref{conv.lval}},
+\link{array-to-pointer}{\ref{conv.array}}, and
+\link{function-to-pointer}{\ref{conv.func}} standard conversions are not
 applied to the operand of \tcode{sizeof}.
 If the operand is a prvalue,
-the temporary materialization conversion\iref{conv.rval}
+the \link{temporary materialization conversion}{\ref{conv.rval}}
 is applied.
 
 \pnum
@@ -3736,8 +3735,8 @@ object created by the \grammarterm{new-expression} has a cv-qualified type.
 \end{bnf}
 
 \indextext{storage duration!dynamic}%
-Entities created by a \grammarterm{new-expression} have dynamic storage
-duration\iref{basic.stc.dynamic}.
+Entities created by a \grammarterm{new-expression} have
+\link{dynamic storage duration}{\ref{basic.stc.dynamic}}.
 \begin{note}
 \indextext{\idxcode{new}!scoping and}%
 The lifetime of such an entity is not necessarily restricted to the
@@ -3749,7 +3748,7 @@ is a pointer to the object created. If it is an array, the result of the
 the array.
 
 \pnum
-If a placeholder type\iref{dcl.spec.auto} appears in the
+If a \link{placeholder type}{\ref{dcl.spec.auto}} appears in the
 \grammarterm{type-specifier-seq} of a \grammarterm{new-type-id} or
 \grammarterm{type-id} of a \grammarterm{new-expression},
 the allocated type is deduced as follows:
@@ -3809,8 +3808,8 @@ is ill-formed because the binding is
 \end{codeblock}
 
 Instead, the explicitly parenthesized version of the \tcode{new}
-operator can be used to create objects of compound
-types\iref{basic.compound}:
+operator can be used to create objects of \link{compound
+types}{\ref{basic.compound}}:
 
 \begin{codeblock}
 new (int (*[10])());
@@ -3837,8 +3836,9 @@ to the associated array type.
 
 \pnum
 Every \grammarterm{constant-expression} in a
-\grammarterm{noptr-new-declarator} shall be a converted constant
-expression\iref{expr.const} of type \tcode{std::size_t} and
+\grammarterm{noptr-new-declarator} shall be a
+\deflinkx{converted constant expression}{expression!converted constant}{\ref{expr.const}}
+of type \tcode{std::size_t} and
 shall evaluate to a strictly positive value.
 \indextext{\idxcode{new}}%
 The \grammarterm{expression} in a \grammarterm{noptr-new-declarator} is
@@ -3870,12 +3870,12 @@ negative value afterwards.} is less than zero;
 
 \item
 its value is such that the size of the allocated object would exceed the
-\impldef{maximum size of an allocated object} limit\iref{implimits}; or
+\impldef{maximum size of an allocated object} \link{limit}{\ref{implimits}}; or
 
 \item
 the \grammarterm{new-initializer} is a \grammarterm{braced-init-list} and the
 number of array elements for which initializers are provided (including the
-terminating \tcode{'\textbackslash 0'} in a string literal\iref{lex.string}) exceeds the
+terminating \tcode{'\textbackslash 0'} in a \link{string literal}{\ref{lex.string}}) exceeds the
 number of elements to initialize.
 \end{itemize}
 
@@ -3895,7 +3895,7 @@ is the null pointer value of the required result type;
 \item
 otherwise, the \grammarterm{new-expression} terminates by throwing an
 exception of a type that would match a handler\iref{except.handle} of type
-\tcode{std::bad_array_new_length}\iref{new.badlength}.
+\link{\tcode{std::bad_array_new_length}}{\ref{new.badlength}}.
 \end{itemize}
 \end{itemize}
 When the value of the \grammarterm{expression} is zero, the allocation
@@ -3905,8 +3905,8 @@ function is called to allocate an array with no elements.
 A \grammarterm{new-expression} may obtain storage for the object by calling an
 allocation function\iref{basic.stc.dynamic.allocation}. If
 the \grammarterm{new-expression} terminates by throwing an exception, it
-may release storage by calling a deallocation
-function\iref{basic.stc.dynamic.deallocation}. If the allocated type
+may release storage by calling a \link{deallocation
+function}{\ref{basic.stc.dynamic.deallocation}}. If the allocated type
 is a non-array type, the allocation function's name is
 \indextext{\idxcode{operator new}}%
 \indextext{\idxcode{operator delete}}%
@@ -4008,7 +4008,7 @@ the difference between the
 result of the \grammarterm{new-expression} and the address returned by the
 allocation function shall be an integral multiple of the
 strictest fundamental
-alignment requirement\iref{basic.align} of any object type whose size
+\link{alignment requirement}{\ref{basic.align}} of any object type whose size
 is no greater than the size of the array being created.
 \begin{note}
 \indextext{allocation!alignment storage}%
@@ -4089,7 +4089,7 @@ invocation of \tcode{new} to another.
 \pnum
 \begin{note}
 Unless an allocation function has a non-throwing
-exception specification\iref{except.spec},
+\link{exception specification}{\ref{except.spec}},
 it indicates failure to allocate storage by throwing a
 \indextext{\idxcode{bad_alloc}}%
 \indexlibrary{\idxcode{bad_alloc}}%
@@ -4150,10 +4150,10 @@ value computation of the
 \pnum
 If the \grammarterm{new-expression} creates an object or an array of
 objects of class type, access and ambiguity control are done for the
-allocation function, the deallocation function\iref{class.free}, and
-the constructor\iref{class.ctor}. If the \grammarterm{new-expression}
-creates an array of objects of class type, the destructor is potentially
-invoked\iref{class.dtor}.
+allocation function, the \link{deallocation function}{\ref{class.free}}, and
+the \link{constructor}{\ref{class.ctor}}. If the \grammarterm{new-expression}
+creates an array of objects of class type, the \link{destructor}{\ref{class.dtor}}
+is potentially invoked.
 
 \pnum
 \indextext{\idxcode{new}!exception and}%
@@ -4188,9 +4188,8 @@ of parameters and, after parameter transformations\iref{dcl.fct}, all
 parameter types except the first are identical. If
 the lookup finds a single matching deallocation function, that function
 will be called; otherwise, no deallocation function will be called. If
-the lookup finds a usual deallocation
-function
-with a parameter of type \tcode{std::size_t}\iref{basic.stc.dynamic.deallocation}
+the lookup finds a \deflink{usual deallocation function}{\ref{basic.stc.dynamic.deallocation}}
+with a parameter of type \tcode{std::size_t}
 and that function,
 considered as a placement deallocation function, would have been
 selected as a match for the allocation function, the program is
@@ -4232,8 +4231,8 @@ to both the allocation and deallocation functions.
 \pnum
 \indextext{expression!\idxcode{delete}}%
 \indextext{\idxcode{delete}}%
-The \grammarterm{delete-expression} operator destroys a most derived
-object\iref{intro.object} or array created by a
+The \grammarterm{delete-expression} operator destroys a
+\deflink{most derived object}{\ref{intro.object}} or array created by a
 \grammarterm{new-expression}.
 
 \begin{bnf}
@@ -4251,7 +4250,7 @@ expression with a \grammarterm{lambda-introducer} that consists of empty square
 brackets can follow the \tcode{delete} keyword if the lambda expression is
 enclosed in parentheses.}
 The operand shall be of pointer to object type or of class type. If of
-class type, the operand is contextually implicitly converted\iref{conv}
+class type, the operand is \deflink{contextually implicitly converted}{\ref{conv}}
 to a pointer to object
 type.\footnote{This implies that an object
 cannot be deleted using a pointer of type
@@ -4269,8 +4268,9 @@ In a single-object delete expression, the value of the operand of
 \tcode{delete} may be a null pointer value, a pointer to a non-array object
 created by a previous \grammarterm{new-expression},
 or a pointer to a
-subobject\iref{intro.object} representing a base class of such an
-object\iref{class.derived}. If not, the behavior is undefined.
+\deflink{subobject}{\ref{intro.object}} representing a
+\link{base class}{\ref{class.derived}} of such an
+object. If not, the behavior is undefined.
 \indextext{array!\idxcode{delete}}%
 In an array delete expression, the value of the operand of \tcode{delete}
 may be a null pointer value or a pointer value that resulted from
@@ -4286,8 +4286,9 @@ match the type of the object allocated by \tcode{new}, not the syntax of the
 \end{note}
 \begin{note}
 A pointer to a \tcode{const} type can be the operand of a
-\grammarterm{delete-expression}; it is not necessary to cast away the
-constness\iref{expr.const.cast} of the pointer expression before it is
+\grammarterm{delete-expression}; it is not necessary to
+\deflinkx{cast away the constness}{casting away constness}{\ref{expr.const.cast}}
+of the pointer expression before it is
 used as the operand of the \grammarterm{delete-expression}.
 \end{note}
 
@@ -4327,8 +4328,8 @@ null pointer value, then:
 \item
 If the allocation call for the \grammarterm{new-expression} for the object to
 be deleted was not omitted and the allocation was not extended\iref{expr.new}, the
-\grammarterm{delete-expression} shall call a deallocation
-function\iref{basic.stc.dynamic.deallocation}. The value returned from the
+\grammarterm{delete-expression} shall call a \link{deallocation
+function}{\ref{basic.stc.dynamic.deallocation}}. The value returned from the
 allocation call of the \grammarterm{new-expression} shall be passed as the
 first argument to the deallocation function.
 
@@ -4459,8 +4460,8 @@ element type.
 \indextext{\idxcode{noexcept}}%
 \indextext{expression!\idxcode{noexcept}}%
 The \tcode{noexcept} operator determines whether the evaluation of its operand,
-which is an unevaluated operand\iref{expr.prop}, can throw an
-exception\iref{except.throw}.
+which is an \deflink{unevaluated operand}{\ref{expr.prop}}, can \link{throw an
+exception}{\ref{except.throw}}.
 
 \begin{bnf}
 \nontermdef{noexcept-expression}\br
@@ -4473,7 +4474,8 @@ and is a prvalue.
 
 \pnum
 The result of the \tcode{noexcept} operator is \tcode{true}
-unless the \grammarterm{expression} is potentially-throwing\iref{except.spec}.
+unless the \grammarterm{expression} is
+\deflinkx{potentially-throwing}{potentially-throwing!expression}{\ref{except.spec}}.
 \indextext{expression!unary|)}
 
 \rSec2[expr.cast]{Explicit type conversion (cast notation)}%
@@ -4491,8 +4493,8 @@ resulting prvalue; see \ref{expr.prop}.
 \end{note}
 
 \pnum
-An explicit type conversion can be expressed using functional
-notation\iref{expr.type.conv}, a type conversion operator
+An explicit type conversion can be expressed using \link{functional
+notation}{\ref{expr.type.conv}}, a type conversion operator
 (\tcode{dynamic_cast}, \tcode{static_cast}, \tcode{reinterpret_cast},
 \tcode{const_cast}), or the \term{cast} notation.
 
@@ -4513,10 +4515,10 @@ The conversions performed by
 \indextext{cast!const}%
 \indextext{cast!static}%
 \indextext{cast!reinterpret}%
-\item a \tcode{const_cast}\iref{expr.const.cast},
-\item a \tcode{static_cast}\iref{expr.static.cast},
+\item a \link{\tcode{const_cast}}{\ref{expr.const.cast}},
+\item a \link{\tcode{static_cast}}{\ref{expr.static.cast}},
 \item a \tcode{static_cast} followed by a \tcode{const_cast},
-\item a \tcode{reinterpret_cast}\iref{expr.reinterpret.cast}, or
+\item a \link{\tcode{reinterpret_cast}}{\ref{expr.reinterpret.cast}}, or
 \item a \tcode{reinterpret_cast} followed by a \tcode{const_cast},
 \end{itemize}
 
@@ -4674,8 +4676,8 @@ The result of a \tcode{.*} expression
 whose second operand is a pointer to a data member is an lvalue if the first
 operand is an lvalue and an xvalue otherwise. The result of a \tcode{.*} expression whose
 second operand is a pointer to a member function is a prvalue.
-If the second operand is the null
-member pointer value\iref{conv.mem}, the behavior is undefined.
+If the second operand is the \deflink{null member pointer value}{\ref{conv.mem}},
+the behavior is undefined.
 
 \rSec2[expr.mul]{Multiplicative operators}%
 \indextext{expression!multiplicative operators}%
@@ -4821,7 +4823,7 @@ the behavior is undefined.
 \pnum
 For addition or subtraction, if the expressions \tcode{P} or \tcode{Q} have
 type ``pointer to \cv{}~\tcode{T}'', where \tcode{T} and the array element type
-are not similar\iref{conv.qual}, the behavior is undefined.
+are not \deflinkx{similar}{similar types}{\ref{conv.qual}}, the behavior is undefined.
 \begin{note} In particular, a pointer to a base class cannot be used for
 pointer arithmetic when the array contains objects of a derived class type.
 \end{note}
@@ -5067,11 +5069,11 @@ yield \tcode{false} or \tcode{true}. The type of the result is
 \tcode{bool}.
 
 \pnum
-The usual arithmetic conversions\iref{expr.arith.conv} are performed on operands of arithmetic
-or enumeration type. If both operands are pointers, pointer
-conversions\iref{conv.ptr} and qualification conversions\iref{conv.qual}
+The \link{usual arithmetic conversions}{\ref{expr.arith.conv}} are performed on operands of arithmetic
+or enumeration type. If both operands are pointers, \link{pointer
+conversions}{\ref{conv.ptr}} and \link{qualification conversions}{\ref{conv.qual}}
 are performed to bring
-them to their composite pointer type\iref{expr.prop}.
+them to their \deflink{composite pointer type}{\ref{expr.prop}}.
 After conversions, the operands shall have the same type.
 
 \pnum
@@ -5100,7 +5102,7 @@ and their class is not a union.
 \end{itemize}
 
 \pnum
-If two operands \tcode{p} and \tcode{q} compare equal\iref{expr.eq},
+If two operands \tcode{p} and \tcode{q} \link{compare equal}{\ref{expr.eq}},
 \tcode{p<=q} and \tcode{p>=q} both yield \tcode{true} and \tcode{p<q} and
 \tcode{p>q} both yield \tcode{false}. Otherwise, if a pointer \tcode{p}
 compares greater than a pointer \tcode{q}, \tcode{p>=q}, \tcode{p>q},
@@ -5137,10 +5139,11 @@ same type after the specified conversions have been applied.
 \indextext{comparison!pointer}%
 \indextext{comparison!pointer to function}%
 If at least one of the operands is a pointer,
-pointer conversions\iref{conv.ptr},
-function pointer conversions\iref{conv.fctptr}, and
-qualification conversions\iref{conv.qual}
-are performed on both operands to bring them to their composite pointer type\iref{expr.prop}.
+\link{pointer conversions}{\ref{conv.ptr}},
+\link{function pointer conversions}{\ref{conv.fctptr}}, and
+\link{qualification conversions}{\ref{conv.qual}}
+are performed on both operands to bring them to their
+\deflink{composite pointer type}{\ref{expr.prop}}.
 Comparing pointers is defined as follows:
 
 \begin{itemize}
@@ -5153,17 +5156,18 @@ see~\ref{expr.unary.op}.} the result of the comparison is unspecified.
 \item
 Otherwise, if the pointers are both null, both point to the same
 \indextext{address}%
-function, or both represent the same address\iref{basic.compound},
+function, or both
+\deflinkx{represent the same address}{represents the address}{\ref{basic.compound}},
 they compare equal.
 \item
 Otherwise, the pointers compare unequal.
 \end{itemize}
 
 \pnum
-If at least one of the operands is a pointer to member, pointer-to-member
-conversions\iref{conv.mem} and qualification
-conversions\iref{conv.qual} are performed on both operands to bring them to
-their composite pointer type\iref{expr.prop}.
+If at least one of the operands is a pointer to member, \link{pointer-to-member
+conversions}{\ref{conv.mem}} and \link{qualification
+conversions}{\ref{conv.qual}} are performed on both operands to bring them to
+their \deflink{composite pointer type}{\ref{expr.prop}}.
 Comparing pointers to members is defined as follows:
 
 \begin{itemize}
@@ -5196,12 +5200,12 @@ bool b1 = (bx == cx);   // unspecified
 \end{example}
 
 \item
-If both refer to (possibly different) members of the same union\iref{class.union},
+If both refer to (possibly different) members of the same \link{union}{\ref{class.union}},
 they compare equal.
 
 \item
 Otherwise, two pointers to members compare equal if they would refer to the same member of
-the same most derived object\iref{intro.object} or the same subobject if
+the same \deflink{most derived object}{\ref{intro.object}} or the same subobject if
 indirection with a hypothetical object of the associated
 class type were performed, otherwise they compare unequal.
 \begin{example}
@@ -5304,9 +5308,9 @@ operator applies only to integral or unscoped enumeration operands.
 
 \pnum
 The \tcode{\&\&} operator groups left-to-right. The operands are both
-contextually converted to \tcode{bool}\iref{conv}.
-The
-result is \tcode{true} if both operands are \tcode{true} and
+\deflinkx{contextually converted to \tcode{bool}}
+{conversion!contextual to \tcode{bool}}{\ref{conv}}.
+The result is \tcode{true} if both operands are \tcode{true} and
 \tcode{false} otherwise. Unlike \tcode{\&}, \tcode{\&\&} guarantees
 left-to-right evaluation: the second operand is not evaluated if the
 first operand is \tcode{false}.
@@ -5335,7 +5339,8 @@ value computation and side effect associated with the second expression.
 
 \pnum
 The \tcode{||} operator groups left-to-right. The operands are both
-contextually converted to \tcode{bool}\iref{conv}.
+\deflinkx{contextually converted to \tcode{bool}}
+{conversion!contextual to \tcode{bool}}{\ref{conv}}.
 The result is
 \tcode{true} if either of its operands is \tcode{true}, and
 \tcode{false} otherwise. Unlike \tcode{|}, \tcode{||} guarantees
@@ -5366,8 +5371,8 @@ and side effect associated with the second expression.
 
 \pnum
 Conditional expressions group right-to-left. The first expression is
-contextually converted to \tcode{bool}\iref{conv}.
-It is
+\deflinkx{contextually converted to \tcode{bool}}
+{conversion!contextual to \tcode{bool}}{\ref{conv}}. It is
 evaluated and if it is \tcode{true}, the result of the conditional
 expression is the value of the second expression, otherwise that of the
 third expression. Only one of the second and third expressions is
@@ -5408,7 +5413,7 @@ Otherwise, if the second and third operand have different types and
 either has (possibly cv-qualified) class type, or if both
 are glvalues of the same value category and the same type except for
 cv-qualification, an attempt is made to
-form an implicit conversion sequence\iref{over.best.ics} from
+form an \link{implicit conversion sequence}{\ref{over.best.ics}} from
 each of those operands to the type of the other.
 \begin{note}
 Properties such as access, whether an operand is a bit-field, or whether
@@ -5440,9 +5445,9 @@ the target type is \tcode{T2},
 
 \item otherwise, the target type is the type that \tcode{E2} would have
 after applying the
-lvalue-to-rvalue\iref{conv.lval},
-array-to-pointer\iref{conv.array}, and
-function-to-pointer\iref{conv.func}
+\link{lvalue-to-rvalue}{\ref{conv.lval}},
+\link{array-to-pointer}{\ref{conv.array}}, and
+\link{function-to-pointer}{\ref{conv.func}}
 standard conversions.
 \end{itemize}
 \end{itemize}
@@ -5480,8 +5485,8 @@ are used in place of the original operands for the remainder of this
 subclause.
 
 \pnum
-Lvalue-to-rvalue\iref{conv.lval}, array-to-pointer\iref{conv.array},
-and function-to-pointer\iref{conv.func} standard conversions are
+\link{Lvalue-to-rvalue}{\ref{conv.lval}}, \link{array-to-pointer}{\ref{conv.array}},
+and \link{function-to-pointer}{\ref{conv.func}} standard conversions are
 performed on the second and third operands. After those conversions, one
 of the following shall hold:
 
@@ -5494,17 +5499,17 @@ the usual arithmetic conversions\iref{expr.arith.conv} are performed to bring th
 type, and the result is of that type.
 
 \item One or both of the second and third operands have pointer type;
-pointer conversions\iref{conv.ptr},
-function pointer conversions\iref{conv.fctptr}, and
-qualification conversions\iref{conv.qual}
+\link{pointer conversions}{\ref{conv.ptr}},
+\link{function pointer conversions}{\ref{conv.fctptr}}, and
+\link{qualification conversions}{\ref{conv.qual}}
 are performed to bring them to their
 composite pointer type\iref{expr.prop}. The result is of the composite
 pointer type.
 
 \item One or both of the second and third operands have pointer-to-member type;
-pointer to member conversions\iref{conv.mem} and qualification
-conversions\iref{conv.qual} are performed to bring them to their composite
-pointer type\iref{expr.prop}. The result is of the composite pointer type.
+\link{pointer to member conversions}{\ref{conv.mem}} and \link{qualification
+conversions}{\ref{conv.qual}} are performed to bring them to their
+\deflink{composite pointer type}{\ref{expr.prop}}. The result is of the composite pointer type.
 
 \item
 Both the second and third operands have type \tcode{std::nullptr_t} or one has
@@ -5527,8 +5532,8 @@ that type and the other is a null pointer constant. The result is of type
 A \grammarterm{throw-expression} is of type \tcode{void}.
 
 \pnum
-Evaluating a \grammarterm{throw-expression} with an operand throws an
-exception\iref{except.throw}; the type of the exception object is determined by removing
+Evaluating a \grammarterm{throw-expression} with an operand \link{throws an
+exception}{\ref{except.throw}}; the type of the exception object is determined by removing
 any top-level \grammarterm{cv-qualifier}{s} from the static type of the
 operand and adjusting the type
 from ``array of \tcode{T}'' or function type \tcode{T}
@@ -5538,7 +5543,8 @@ to ``pointer to \tcode{T}''.
 \indextext{exception handling!rethrow}%
 A
 \grammarterm{throw-expression}
-with no operand rethrows the currently handled exception\iref{except.handle}.
+with no operand rethrows the
+\deflinkx{currently handled exception}{exception handling!currently handled exception}{\ref{except.handle}}.
 The exception is reactivated with the existing exception object;
 no new exception object is created.
 The exception is no longer considered to be caught.
@@ -5563,7 +5569,7 @@ If no exception is presently being handled,
 evaluating a
 \grammarterm{throw-expression}
 with no operand calls
-\tcode{std::\brk{}terminate()}\iref{except.terminate}.
+\link{\tcode{std::\brk{}terminate()}}{\ref{except.terminate}}.
 
 \rSec2[expr.ass]{Assignment and compound assignment operators}%
 \indextext{expression!assignment and compound assignment}
@@ -5703,7 +5709,7 @@ The comma operator groups left-to-right.
 
 A pair of expressions separated by a comma is evaluated left-to-right;
 the left expression is
-a discarded-value expression\iref{expr.prop}.
+a \deflink{discarded-value expression}{\ref{expr.prop}}.
 Every
 \indextext{value computation}%
 value computation and side effect
@@ -5754,12 +5760,12 @@ during translation.\end{note}
 \pnum
 An expression \tcode{e} is a
 \defnx{core constant expression}{expression!core constant}
-unless the evaluation of \tcode{e}, following the rules of the abstract
-machine\iref{intro.execution}, would evaluate one of the following expressions:
+unless the evaluation of \tcode{e}, following the rules of the \link{abstract
+machine}{\ref{intro.execution}}, would evaluate one of the following expressions:
 
 \begin{itemize}
 \item
-\tcode{this}\iref{expr.prim.this}, except in a constexpr
+\link{\tcode{this}}{\ref{expr.prim.this}}, except in a constexpr
 function or a constexpr constructor that is being evaluated as part
 of \tcode{e};
 
@@ -5768,7 +5774,7 @@ an invocation of a function other than
 a constexpr constructor for a literal class,
 a constexpr function,
 or an implicit invocation of a trivial destructor\iref{class.dtor}
-\begin{note} Overload resolution\iref{over.match}
+\begin{note} \link{Overload resolution}{\ref{over.match}}
 is applied as usual \end{note};
 
 \item
@@ -5779,23 +5785,23 @@ undefined constexpr constructor;
 an invocation of an instantiated constexpr function or
 constexpr constructor that fails to satisfy the requirements
 for a constexpr function or
-constexpr constructor\iref{dcl.constexpr};
+\link{constexpr}{\ref{dcl.constexpr}} constructor;
 
 \item
-an expression that would exceed the implementation-defined
-limits (see \ref{implimits});
+an expression that would exceed the \link{implementation-defined
+limits}{\ref{implimits}};
 
 \item
 an operation that would have undefined behavior
 as specified in \ref{intro} through \ref{cpp}
 of this document \begin{note} including,
 for example, signed integer overflow\iref{expr.prop}, certain
-pointer arithmetic\iref{expr.add}, division by
-zero\iref{expr.mul}, or certain shift operations\iref{expr.shift}
+pointer arithmetic\iref{expr.add}, \link{division by
+zero}{\ref{expr.mul}}, or certain \link{shift operations}{\ref{expr.shift}}
 \end{note};
 
 \item
-an lvalue-to-rvalue conversion\iref{conv.lval} unless
+an \link{lvalue-to-rvalue conversion}{\ref{conv.lval}} unless
 it is applied to
 
 \begin{itemize}
@@ -5805,8 +5811,8 @@ it is applied to
   initialized with a constant expression, or
 
   \item
-  a non-volatile glvalue that refers to a subobject of a string
-  literal\iref{lex.string}, or
+  a non-volatile glvalue that refers to a subobject of a \link{string
+  literal}{\ref{lex.string}}, or
 
   \item
   a non-volatile glvalue that refers to a non-volatile object
@@ -5819,7 +5825,7 @@ it is applied to
 \end{itemize}
 
 \item
-an lvalue-to-rvalue conversion\iref{conv.lval}
+an \link{lvalue-to-rvalue conversion}{\ref{conv.lval}}
 that is applied to a glvalue
 that refers to a non-active member of a union or a subobject thereof;
 
@@ -5830,7 +5836,7 @@ for a union whose active member (if any) is mutable,
 unless the lifetime of the union object began within the evaluation of \tcode{e};
 
 \item
-an assignment expression\iref{expr.ass}
+an \link{assignment expression}{\ref{expr.ass}}
 or invocation of an assignment operator\iref{class.copy}
 that would change the active member of a union;
 
@@ -5852,7 +5858,7 @@ in a \grammarterm{lambda-expression},
 a reference to \tcode{this} or to a variable with
 automatic storage duration defined outside that
 \grammarterm{lambda-expression}, where
-the reference would be an odr-use~(\ref{basic.def.odr}, \ref{expr.prim.lambda});
+the reference would be an \link{odr-use}{\ref{basic.def.odr}};
 \begin{example}
 \begin{codeblock}
 void g() {
@@ -5888,13 +5894,13 @@ static_assert(bind(monad(2))(monad)() == monad(2)());
 a conversion from type \cv{}~\tcode{void*} to a pointer-to-object type;
 
 \item
-a dynamic cast\iref{expr.dynamic.cast};
+a \link{dynamic cast}{\ref{expr.dynamic.cast}};
 
 \item
-a \tcode{reinterpret_cast}\iref{expr.reinterpret.cast};
+a \link{\tcode{reinterpret_cast}}{\ref{expr.reinterpret.cast}};
 
 \item
-a pseudo-destructor call\iref{expr.pseudo};
+a \link{pseudo-destructor call}{\ref{expr.pseudo}};
 
 \item
 modification of an object~(\ref{expr.ass}, \ref{expr.post.incr},
@@ -5904,7 +5910,7 @@ that refers to a non-volatile object
 whose lifetime began within the evaluation of \tcode{e};
 
 \item
-a typeid expression\iref{expr.typeid} whose operand is a glvalue of a
+a \link{typeid expression}{\ref{expr.typeid}} whose operand is a glvalue of a
 polymorphic class type;
 
 \item
@@ -5981,9 +5987,9 @@ is an expression of integral or
 unscoped enumeration type, implicitly converted to a prvalue, where the converted expression is a core constant expression.
 \begin{note}
 Such expressions may be
-used as bit-field lengths\iref{class.bit}, as enumerator
+used as \link{bit-field}{\ref{class.bit}} lengths, as enumerator
 initializers if the underlying type is not fixed\iref{dcl.enum},
-and as alignments\iref{dcl.align}.
+and as \link{alignments}{\ref{dcl.align}}.
 \end{note}
 
 \pnum
@@ -6016,30 +6022,31 @@ implicit conversion sequence contains only
 
 \begin{itemize}
 \item user-defined conversions,
-\item lvalue-to-rvalue conversions\iref{conv.lval},
-\item array-to-pointer conversions\iref{conv.array},
-\item function-to-pointer conversions\iref{conv.func},
-\item qualification conversions\iref{conv.qual},
-\item integral promotions\iref{conv.prom},
-\item integral conversions\iref{conv.integral} other than narrowing conversions\iref{dcl.init.list},
-\item null pointer conversions\iref{conv.ptr} from \tcode{std::nullptr_t},
-\item null member pointer conversions\iref{conv.mem} from \tcode{std::nullptr_t}, and
-\item function pointer conversions\iref{conv.fctptr},
+\item \link{lvalue-to-rvalue conversions}{\ref{conv.lval}},
+\item \link{array-to-pointer conversions}{\ref{conv.array}},
+\item \link{function-to-pointer conversions}{\ref{conv.func}},
+\item \link{qualification conversions}{\ref{conv.qual}},
+\item \link{integral promotions}{\ref{conv.prom}},
+\item \link{integral conversions}{\ref{conv.integral}} other than
+\deflinkx{narrowing conversions}{narrowing conversion}{\ref{dcl.init.list}},
+\item \deflinkx{null pointer conversions}{null pointer conversion}{\ref{conv.ptr}} from \tcode{std::nullptr_t},
+\item \deflinkx{null member pointer conversions}{null member pointer conversion}{\ref{conv.mem}} from \tcode{std::nullptr_t}, and
+\item \link{function pointer conversions}{\ref{conv.fctptr}},
 \end{itemize}
 
 and where the reference binding (if any) binds directly.
 \begin{note}
-Such expressions may be used in \tcode{new}
-expressions\iref{expr.new}, as case expressions\iref{stmt.switch},
+Such expressions may be used in \link{\tcode{new}
+expressions}{\ref{expr.new}}, as \link{case expressions}{\ref{stmt.switch}},
 as enumerator initializers if the underlying type is
-fixed\iref{dcl.enum}, as array bounds\iref{dcl.array}, and
-as non-type template
-arguments\iref{temp.arg}.
+\deflinkx{fixed}{type!underlying!fixed}{\ref{dcl.enum}}, as \link{array}{\ref{dcl.array}} bounds, and
+as non-type \link{template arguments}{\ref{temp.arg}}.
 \end{note}
 \indextext{contextually converted constant expression of type \tcode{bool}|see{conversion, contextual}}%
 \indextext{conversion!contextual to constant expression of type \tcode{bool}}%
 A \term{contextually converted constant expression of type \tcode{bool}} is
-an expression, contextually converted to \tcode{bool}\iref{conv},
+an expression, \deflinkx{contextually converted to \tcode{bool}}
+{conversion!contextual to \tcode{bool}}{\ref{conv}},
 where the converted expression is a constant expression and
 the conversion sequence contains only the conversions above.
 
diff --git a/source/future.tex b/source/future.tex
index 751897a..886de9c 100644
--- a/source/future.tex
+++ b/source/future.tex
@@ -12,7 +12,7 @@ is defined as:
 Normative for the current edition of this International Standard,
 but having been identified as a candidate for removal from future revisions.
 An implementation may declare library names and entities described in this Clause with the
-\tcode{deprecated} attribute\iref{dcl.attr.deprecated}.
+\link{\tcode{deprecated} attribute}{\ref{dcl.attr.deprecated}}.
 
 \rSec1[depr.static_constexpr]{Redeclaration of \tcode{static constexpr} data members}
 
@@ -526,12 +526,12 @@ If
 \tcode{strlen(const char*)}
 is declared in
 \indexhdr{cstring}%
-\tcode{<cstring>}\iref{cstring.syn}.
+\link{\tcode{<cstring>}}{\ref{cstring.syn}}.
 The macro
 \tcode{INT_MAX}
 is defined in
 \indexhdr{climits}%
-\tcode{<climits>}\iref{climits.syn}.}
+\link{\tcode{<climits>}}{\ref{climits.syn}}.}
 \end{itemize}
 
 \pnum
@@ -1133,7 +1133,7 @@ The constructor is
 \tcode{strlen(const char*)}
 is declared in
 \indexhdr{cstring}%
-\tcode{<cstring>}\iref{cstring.syn}.}
+\link{\tcode{<cstring>}}{\ref{cstring.syn}}.}
 \end{itemize}
 \end{itemdescr}
 
@@ -1370,7 +1370,7 @@ bool uncaught_exception() noexcept;
 \rSec2[depr.weak.result_type]{Weak result types}
 
 \pnum
-A call wrapper\iref{func.def} may have a \defn{weak result type}.
+A \deflink{call wrapper}{\ref{func.def}} may have a \defn{weak result type}.
 If it does, the type of its member type \tcode{result_type}
 is based on the type \tcode{T} of the wrapper's target object:
 \begin{itemize}
@@ -1611,7 +1611,7 @@ namespace std {
 
 \indexlibrary{\idxcode{reference_wrapper}!weak result type}%
 \pnum
-\tcode{reference_wrapper<T>} has a weak result type\iref{depr.weak.result_type}.
+\tcode{reference_wrapper<T>} has a \deflink{weak result type}{\ref{depr.weak.result_type}}.
 If \tcode{T} is a function type,
 \tcode{result_type} shall be a synonym for the return type of \tcode{T}.
 
@@ -1658,7 +1658,7 @@ which shall be synonyms for \tcode{size_t} and \tcode{Key}, respectively.
 \pnum
 The forwarding call wrapper \tcode{g}
 returned by a call to \tcode{bind(f, bound_args...)}\iref{func.bind.bind}
-shall have a weak result type\iref{depr.weak.result_type}.
+shall have a \deflink{weak result type}{\ref{depr.weak.result_type}}.
 
 \pnum
 The forwarding call wrapper \tcode{g}
@@ -1979,8 +1979,8 @@ namespace std {
 results into uninitialized memory. The template parameter
 \tcode{OutputIterator} is required to have its \tcode{operator*} return an
 object for which \tcode{operator\&} is defined and returns a pointer to
-\tcode{T}, and is also required to satisfy the requirements of an output
-iterator\iref{output.iterators}.
+\tcode{T}, and is also required to satisfy the requirements of an \link{output
+iterator}{\ref{output.iterators}}.
 
 \indexlibrary{\idxcode{raw_storage_iterator}!constructor}%
 \begin{itemdecl}
@@ -2187,7 +2187,7 @@ template<class T> struct is_literal_type;
 \pnum
 \tcode{is_literal_type<T>} is a \tcode{UnaryTypeTrait}\iref{meta.rqmts}
 with a base characteristic of \tcode{true_type}
-if \tcode{T} is a literal type\iref{basic.types}, and
+if \tcode{T} is a \deflink{literal type}{\ref{basic.types}}, and
 \tcode{false_type} otherwise.
 \end{itemdescr}
 
diff --git a/source/grammar.tex b/source/grammar.tex
index 02135b5..6dc1b54 100644
--- a/source/grammar.tex
+++ b/source/grammar.tex
@@ -17,10 +17,10 @@ to weed out syntactically valid but meaningless constructs.
 \pnum
 \indextext{keyword}%
 New context-dependent keywords are introduced into a program by
-\tcode{typedef}\iref{dcl.typedef},
-\tcode{namespace}\iref{namespace.def},
-class\iref{class}, enumeration\iref{dcl.enum}, and
-\tcode{template}\iref{temp}
+\link{\tcode{typedef}}{\ref{dcl.typedef}},
+\link{\tcode{namespace}}{\ref{namespace.def}},
+\link{class}{\ref{class}}, \link{enumeration}{\ref{dcl.enum}}, and
+\link{\tcode{template}}{\ref{temp}}
 declarations.
 
 \begin{ncbnf}
diff --git a/source/intro.tex b/source/intro.tex
index d8d103f..5eb8c65 100644
--- a/source/intro.tex
+++ b/source/intro.tex
@@ -126,7 +126,7 @@ comma-separated list bounded by the parentheses\iref{cpp.replace}
 \indexdefn{argument}%
 \indexdefn{argument!throw expression}%
 \definition{argument}{defns.argument.throw}
-\defncontext{throw expression} operand of \tcode{throw}\iref{expr.throw}
+\defncontext{throw expression} operand of \link{\tcode{throw}}{\ref{expr.throw}}
 
 \indexdefn{argument}%
 \indexdefn{argument!template instantiation}%
@@ -163,10 +163,11 @@ implementation's output messages
 glvalue refers
 
 \begin{example}
-If a pointer\iref{dcl.ptr} \tcode{p} whose static type is ``pointer to
-class \tcode{B}'' is pointing to an object of class \tcode{D}, derived
-from \tcode{B}\iref{class.derived}, the dynamic type of the
-expression \tcode{*p} is ``\tcode{D}''. References\iref{dcl.ref} are
+If a \link{pointer}{\ref{dcl.ptr}} \tcode{p} whose static type is ``pointer to
+class \tcode{B}'' is pointing to an object of class \tcode{D},
+\link{derived}{\ref{class.derived}}
+from \tcode{B}, the dynamic type of the
+expression \tcode{*p} is ``\tcode{D}''. \link{References}{\ref{dcl.ref}} are
 treated similarly.
 \end{example}
 
@@ -176,7 +177,7 @@ treated similarly.
 
 \indexdefn{program!ill-formed}%
 \definition{ill-formed program}{defns.ill.formed}
-program that is not well-formed\iref{defns.well.formed}
+program that is not \link{well-formed}{\ref{defns.well.formed}}
 
 \indexdefn{behavior!implementation-defined}%
 \definition{implementation-defined behavior}{defns.impl.defined}
@@ -330,7 +331,7 @@ possible behaviors is usually delineated by this document.
 \indexdefn{program!well-formed}%
 \definition{well-formed program}{defns.well.formed}
 \Cpp{}  program constructed according to the syntax rules, diagnosable
-semantic rules, and the one-definition rule\iref{basic.def.odr}%
+semantic rules, and the \link{one-definition rule}{\ref{basic.def.odr}}%
 \indextext{definitions|)}
 
 \rSec0[intro]{General principles}
@@ -406,7 +407,7 @@ see~\ref{temp.deduct}.
 \indextext{conformance requirements!classes}%
 \indextext{conformance requirements!class templates}%
 For classes and class templates, the library Clauses specify partial
-definitions. Private members\iref{class.access} are not
+definitions. \link{Private members}{\ref{class.access}} are not
 specified, but each implementation shall supply them to complete the
 definitions according to the description in the library Clauses.
 
@@ -417,13 +418,13 @@ consistent with the descriptions in the library Clauses.
 
 \pnum
 The names defined in the library have namespace
-scope\iref{basic.namespace}. A \Cpp{}  translation
-unit\iref{lex.phases} obtains access to these names by including the
-appropriate standard library header\iref{cpp.include}.
+scope\iref{basic.namespace}. A \Cpp{}  \link{translation
+unit}{\ref{lex.phases}} obtains access to these names by \link{including}{\ref{cpp.include}} the
+appropriate standard library header.
 
 \pnum
 The templates, classes, functions, and objects in the library have
-external linkage\iref{basic.link}. The implementation provides
+external \link{linkage}{\ref{basic.link}}. The implementation provides
 definitions for standard library entities, as necessary, while combining
 translation units to form a complete \Cpp{}  program\iref{lex.phases}.%
 \indextext{conformance requirements!library|)}
diff --git a/source/iostreams.tex b/source/iostreams.tex
index bde3cbb..9ab1fee 100644
--- a/source/iostreams.tex
+++ b/source/iostreams.tex
@@ -411,7 +411,7 @@ the type
 \tcode{FILE}
 declared in
 \indexhdr{cstdio}%
-\tcode{<cstdio>}\iref{cstdio.syn}.
+\link{\tcode{<cstdio>}}{\ref{cstdio.syn}}.
 
 \pnum
 The header
@@ -426,7 +426,7 @@ these objects.
 The objects are constructed and the associations are established at some
 time prior to or during the first time an object of class
 \tcode{ios_base::Init} is constructed, and in any case before the body
-of \tcode{main}\iref{basic.start.main} begins execution.\footnote{If it is possible for them to do so, implementations should
+of \link{\tcode{main}}{\ref{basic.start.main}} begins execution.\footnote{If it is possible for them to do so, implementations should
 initialize the objects earlier than required.}
 The objects are not destroyed during program execution.\footnote{Constructors and destructors for static objects can
 access these objects to read input from
@@ -447,7 +447,7 @@ follows the same semantics as mixing such operations on
 as specified in the C standard library.
 
 \pnum
-Concurrent access to a synchronized\iref{ios.members.static} standard iostream object's formatted and unformatted input\iref{istream} and output\iref{ostream} functions or a standard C stream by multiple threads shall not result in a data race\iref{intro.multithread}. \begin{note} Users must still synchronize concurrent use of these objects and streams by multiple threads if they wish to avoid interleaved characters. \end{note}
+Concurrent access to a synchronized\iref{ios.members.static} standard iostream object's formatted and unformatted \link{input}{\ref{istream}} and \link{output}{\ref{ostream}} functions or a standard C stream by multiple threads shall not result in a \deflink{data race}{\ref{intro.multithread}}. \begin{note} Users must still synchronize concurrent use of these objects and streams by multiple threads if they wish to avoid interleaved characters. \end{note}
 
 \xrefc{7.21.2}
 
@@ -467,7 +467,7 @@ associated with the object
 \tcode{stdin},
 declared in
 \indexhdr{cstdio}%
-\tcode{<cstdio>}\iref{cstdio.syn}.
+\link{\tcode{<cstdio>}}{\ref{cstdio.syn}}.
 
 \pnum
 After the object
@@ -477,7 +477,7 @@ is initialized,
 returns
 \tcode{\&cout}.
 Its state is otherwise the same as required for
-\tcode{basic_ios<char>::init}\iref{basic.ios.cons}.
+\linkx{\tcode{basic_ios<char>::init}}{basic_ios!init}{\ref{basic.ios.cons}}.
 \end{itemdescr}
 
 \indexlibrary{\idxcode{cout}}%
@@ -494,7 +494,7 @@ associated with the object
 \tcode{stdout},
 declared in
 \indexhdr{cstdio}%
-\tcode{<cstdio>}\iref{cstdio.syn}.
+\link{\tcode{<cstdio>}}{\ref{cstdio.syn}}.
 \end{itemdescr}
 
 \indexlibrary{\idxcode{cerr}}%
@@ -511,7 +511,7 @@ associated with the object
 \tcode{stderr},
 declared in
 \indexhdr{cstdio}%
-\tcode{<cstdio>}\iref{cstdio.syn}.
+\link{\tcode{<cstdio>}}{\ref{cstdio.syn}}.
 
 \pnum
 After the object
@@ -520,7 +520,7 @@ is initialized,
 \tcode{cerr.flags() \& unitbuf}
 is nonzero and \tcode{cerr.tie()} returns \tcode{\&cout}.
 Its state is otherwise the same as required for
-\tcode{basic_ios<char>::init}\iref{basic.ios.cons}.
+\linkx{\tcode{basic_ios<char>::init}}{basic_ios!init}{\ref{basic.ios.cons}}.
 \end{itemdescr}
 
 \indexlibrary{\idxcode{clog}}%
@@ -537,7 +537,7 @@ associated with the object
 \tcode{stderr},
 declared in
 \indexhdr{cstdio}%
-\tcode{<cstdio>}\iref{cstdio.syn}.
+\link{\tcode{<cstdio>}}{\ref{cstdio.syn}}.
 \end{itemdescr}
 
 \rSec2[wide.stream.objects]{Wide stream objects}
@@ -556,7 +556,7 @@ associated with the object
 \tcode{stdin},
 declared in
 \indexhdr{cstdio}%
-\tcode{<cstdio>}\iref{cstdio.syn}.
+\link{\tcode{<cstdio>}}{\ref{cstdio.syn}}.
 
 \pnum
 After the object
@@ -566,7 +566,7 @@ is initialized,
 returns
 \tcode{\&wcout}.
 Its state is otherwise the same as required for
-\tcode{basic_ios<wchar_t>::init}\iref{basic.ios.cons}.
+\linkx{\tcode{basic_ios<wchar_t>::init}}{basic_ios!init}{\ref{basic.ios.cons}}.
 \end{itemdescr}
 
 \indexlibrary{\idxcode{wcout}}%
@@ -583,7 +583,7 @@ associated with the object
 \tcode{stdout},
 declared in
 \indexhdr{cstdio}%
-\tcode{<cstdio>}\iref{cstdio.syn}.
+\link{\tcode{<cstdio>}}{\ref{cstdio.syn}}.
 \end{itemdescr}
 
 \indexlibrary{\idxcode{wcerr}}%
@@ -600,7 +600,7 @@ associated with the object
 \tcode{stderr},
 declared in
 \indexhdr{cstdio}%
-\tcode{<cstdio>}\iref{cstdio.syn}.
+\link{\tcode{<cstdio>}}{\ref{cstdio.syn}}.
 
 \pnum
 After the object
@@ -609,7 +609,7 @@ is initialized,
 \tcode{wcerr.flags() \& unitbuf}
 is nonzero and \tcode{wcerr.tie()} returns \tcode{\&wcout}.
 Its state is otherwise the same as required for
-\tcode{basic_ios<wchar_t>::init}\iref{basic.ios.cons}.
+\linkx{\tcode{basic_ios<wchar_t>::init}}{basic_ios!init}{\ref{basic.ios.cons}}.
 \end{itemdescr}
 
 \indexlibrary{\idxcode{wclog}}%
@@ -626,7 +626,7 @@ associated with the object
 \tcode{stderr},
 declared in
 \indexhdr{cstdio}%
-\tcode{<cstdio>}\iref{cstdio.syn}.
+\link{\tcode{<cstdio>}}{\ref{cstdio.syn}}.
 \end{itemdescr}
 
 \rSec1[iostreams.base]{Iostreams base classes}
@@ -1120,7 +1120,7 @@ ensures the construction of the eight objects declared in
 \tcode{<io\-stream>}\iref{iostream.objects} that associate file
 stream buffers with the standard C streams
 provided for by the functions declared in
-\tcode{<cstdio>}\iref{cstdio.syn}.
+\link{\tcode{<cstdio>}}{\ref{cstdio.syn}}.
 
 \pnum
 For the sake of exposition, the maintained data is presented here as:
@@ -1361,7 +1361,7 @@ bool sync_with_stdio(bool sync = true);
 \pnum
 \returns
 \tcode{true}
-if the previous state of the standard iostream objects\iref{iostream.objects}
+if the previous state of the \link{standard iostream objects}{\ref{iostream.objects}}
 was synchronized and otherwise returns
 \tcode{false}.
 The first time it is called,
@@ -1426,8 +1426,8 @@ static int xalloc();
 
 \pnum
 \remarks
-Concurrent access to this function by multiple threads shall not result in a data
-race\iref{intro.multithread}.
+Concurrent access to this function by multiple threads shall not result in a
+\deflink{data race}{\ref{intro.multithread}}.
 \end{itemdescr}
 
 \indexlibrarymember{iword}{ios_base}%
@@ -1856,10 +1856,11 @@ The destructor does not destroy
 \tcode{rdbuf()}.
 \end{itemdescr}
 
-\indexlibrarymember{init}{basic_ios}%
+\begin{indexed}{\indexlibrarymember{init}{basic_ios}}
 \begin{itemdecl}
 void init(basic_streambuf<charT, traits>* sb);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2221,7 +2222,7 @@ otherwise
 If \tcode{((state | (rdbuf() ? goodbit : badbit)) \& exceptions()) == 0},
 returns.
 Otherwise, the function throws an object of class
-\tcode{basic_ios::failure}\iref{ios::failure},
+\link{\tcode{basic_ios::failure}}{\ref{ios::failure}},
 constructed with
 \impldef{argument values to construct \tcode{basic_ios::failure}}
 argument values.%
@@ -2238,7 +2239,7 @@ void setstate(iostate state);
 Calls
 \tcode{clear(rdstate() | state)}
 (which may throw
-\tcode{basic_ios::failure}\iref{ios::failure}).
+\link{\tcode{basic_ios::failure}}{\ref{ios::failure}}).
 \end{itemdescr}
 
 \indexlibrarymember{good}{basic_ios}%
@@ -2340,10 +2341,11 @@ Calls
 Each function specified in this subclause
 is a designated addressable function\iref{namespace.std}.
 
-\indexlibrary{\idxcode{boolalpha}}%
+\begin{indexed}{\indexlibrary{\idxcode{boolalpha}}}
 \begin{itemdecl}
 ios_base& boolalpha(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2356,10 +2358,11 @@ Calls
 \tcode{str}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{noboolalpha}}%
+\begin{indexed}{\indexlibrary{\idxcode{noboolalpha}}}
 \begin{itemdecl}
 ios_base& noboolalpha(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2372,10 +2375,11 @@ Calls
 \tcode{str}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{showbase}}%
+\begin{indexed}{\indexlibrary{\idxcode{showbase}}}
 \begin{itemdecl}
 ios_base& showbase(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2388,10 +2392,11 @@ Calls
 \tcode{str}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{noshowbase}}%
+\begin{indexed}{\indexlibrary{\idxcode{noshowbase}}}
 \begin{itemdecl}
 ios_base& noshowbase(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2404,10 +2409,11 @@ Calls
 \tcode{str}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{showpoint}}%
+\begin{indexed}{\indexlibrary{\idxcode{showpoint}}}
 \begin{itemdecl}
 ios_base& showpoint(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2586,10 +2592,11 @@ Calls
 \tcode{str}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{left}}%
+\begin{indexed}{\indexlibrary{\idxcode{left}}}
 \begin{itemdecl}
 ios_base& left(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2602,10 +2609,11 @@ Calls
 \tcode{str}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{right}}%
+\begin{indexed}{\indexlibrary{\idxcode{right}}}
 \begin{itemdecl}
 ios_base& right(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2624,10 +2632,11 @@ Calls
 Each function specified in this subclause
 is a designated addressable function\iref{namespace.std}.
 
-\indexlibrary{\idxcode{dec}}%
+\begin{indexed}{\indexlibrary{\idxcode{dec}}}
 \begin{itemdecl}
 ios_base& dec(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2648,10 +2657,11 @@ to change the format flags stored in
 \tcode{cout}.}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{hex}}%
+\begin{indexed}{\indexlibrary{\idxcode{hex}}}
 \begin{itemdecl}
 ios_base& hex(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2664,10 +2674,11 @@ Calls
 \tcode{str}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{oct}}%
+\begin{indexed}{\indexlibrary{\idxcode{oct}}}
 \begin{itemdecl}
 ios_base& oct(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2690,6 +2701,7 @@ is a designated addressable function\iref{namespace.std}.
 \begin{itemdecl}
 ios_base& fixed(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2702,10 +2714,11 @@ Calls
 \tcode{str}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{scientific}}%
+\begin{indexed}{\indexlibrary{\idxcode{scientific}}}
 \begin{itemdecl}
 ios_base& scientific(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2718,10 +2731,11 @@ Calls
 \tcode{str}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{hexfloat}}%
+\begin{indexed}{\indexlibrary{\idxcode{hexfloat}}}
 \begin{itemdecl}
 ios_base& hexfloat(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\effects Calls \tcode{str.setf(ios_base::fixed | ios_base::scientific,
@@ -2753,30 +2767,33 @@ Calls \tcode{str.unsetf(ios_base::floatfield)}.
 
 \rSec2[error.reporting]{Error reporting}
 
-\indexlibrarymember{make_error_code}{io_errc}%
+\begin{indexed}{\indexlibrarymember{make_error_code}{io_errc}}
 \begin{itemdecl}
 error_code make_error_code(io_errc e) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
 \returns \tcode{error_code(static_cast<int>(e), iostream_category())}.
 \end{itemdescr}
 
-\indexlibrarymember{make_error_condition}{io_errc}%
+\begin{indexed}{\indexlibrarymember{make_error_condition}{io_errc}}
 \begin{itemdecl}
 error_condition make_error_condition(io_errc e) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
 \returns \tcode{error_condition(static_cast<int>(e), iostream_category())}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{iostream_category}}%
+\begin{indexed}{\indexlibrary{\idxcode{iostream_category}}}
 \begin{itemdecl}
 const error_category& iostream_category() noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -3209,7 +3226,7 @@ streamsize in_avail();
 If a read position is available, returns
 \tcode{egptr() - gptr()}.
 Otherwise returns
-\tcode{showmanyc()}\iref{streambuf.virt.get}.
+\linkx{\tcode{showmanyc()}}{basic_streambuf!showmanyc}{\ref{streambuf.virt.get}}.
 \end{itemdescr}
 
 \indexlibrarymember{snextc}{basic_streambuf}%
@@ -3629,11 +3646,12 @@ Returns zero.
 
 \rSec4[streambuf.virt.get]{Get area}
 
-\indexlibrarymember{showmanyc}{basic_streambuf}%
+\begin{indexed}{\indexlibrarymember{showmanyc}{basic_streambuf}}
 \begin{itemdecl}
 streamsize showmanyc();@\footnote{\textrm{The morphemes of \tcode{showmanyc}\
 are ``es-how-many-see'', not ``show-manic''.}}@
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -4160,7 +4178,7 @@ namespace std {
   template<class charT, class traits = char_traits<charT>>
   class basic_istream : virtual public basic_ios<charT, traits> {
   public:
-    // types (inherited from \tcode{basic_ios}\iref{ios})
+    // types (inherited from \link{\tcode{basic_ios}}{\ref{ios}})
     using char_type   = charT;
     using int_type    = typename traits::int_type;
     using pos_type    = typename traits::pos_type;
@@ -4584,7 +4602,7 @@ operator>>(void*& val);
 \pnum
 As in the case of the inserters, these extractors depend on the
 locale's
-\tcode{num_get<>}\iref{locale.num.get} object to perform parsing the input
+\link{\tcode{num_get<>}}{\ref{locale.num.get}} object to perform parsing the input
 stream data.
 These extractors behave as formatted input functions (as described in~\ref{istream.formatted.reqmts}).  After a sentry object is constructed, the
 conversion occurs as if performed by the following code fragment:
@@ -4684,7 +4702,7 @@ This extractor does not behave as a formatted input function
 \pnum
 \returns
 \tcode{pf(*this)}.\footnote{See, for example, the function signature
-\tcode{ws(basic_istream\&)}\iref{istream.manip}.%
+\liblinkx{\tcode{ws(basic_istream\&)}}{ws}{\ref{istream.manip}}.%
 \indexlibrary{\idxcode{ws}}}%
 \end{itemdescr}
 
@@ -4717,7 +4735,7 @@ basic_istream<charT, traits>& operator>>(ios_base& (*pf)(ios_base&));
 \effects
 Calls
 \tcode{pf(*this)}.\footnote{See, for example, the function signature
-\tcode{dec(ios_base\&)}\iref{basefield.manip}.}
+\liblinkx{\tcode{dec(ios_base\&)}}{dec}{\ref{basefield.manip}}.}
 This extractor does not behave as a formatted input function
 (as described in~\ref{istream.formatted.reqmts}).
 
@@ -4824,7 +4842,7 @@ basic_istream<charT, traits>& operator>>(basic_streambuf<charT, traits>* sb);
 \begin{itemdescr}
 \pnum
 \effects
-Behaves as an unformatted input function\iref{istream.unformatted}.
+Behaves as an \link{unformatted input function}{\ref{istream.unformatted}}.
 If \tcode{sb} is null, calls
 \tcode{setstate(fail\-bit)},
 which may throw
@@ -5218,7 +5236,7 @@ characters and discards them.
 Characters are extracted until any of the following occurs:
 \begin{itemize}
 \item
-\tcode{n != numeric_limits<streamsize>::max()}\iref{numeric.limits}
+\tcode{n != \deflinkx{numeric_limits<streamsize>::max()}{numeric_limits!max}{\ref{numeric.limits}}}
 and
 \tcode{n} characters have been extracted so far
 \item
@@ -5548,16 +5566,17 @@ is a designated addressable function\iref{namespace.std}.
 template<class charT, class traits>
   basic_istream<charT, traits>& ws(basic_istream<charT, traits>& is);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
 \effects
-Behaves as an unformatted input function\iref{istream.unformatted}, except that it does not count the number of characters extracted and
+Behaves as an \link{unformatted input function}{\ref{istream.unformatted}}, except that it does not count the number of characters extracted and
 does not affect the value returned by subsequent calls to \tcode{is.gcount()}. After
 constructing a sentry object extracts characters as long as the next available
 character \tcode{c} is whitespace or until there are no more characters in the sequence.
 Whitespace characters are distinguished with the same criterion as used by
-\tcode{sentry::sentry}\iref{istream::sentry}.
+\link{\tcode{sentry::sentry}}{\ref{istream::sentry}}.
 If
 \tcode{ws}
 stops extracting characters because there are no more available it sets
@@ -5644,9 +5663,9 @@ explicit basic_iostream(basic_streambuf<charT, traits>* sb);
 \effects
 Constructs an object of class \tcode{basic_iostream},
 initializing the base class subobjects with
-\tcode{basic_istream<charT, traits>(sb)}\iref{istream}
+\link{\tcode{basic_istream<charT, traits>(sb)}}{\ref{istream}}
 and
-\tcode{basic_ostream<charT, traits>(sb)}\iref{ostream}.
+\link{\tcode{basic_ostream<charT, traits>(sb)}}{\ref{ostream}}.
 
 \pnum
 \postconditions
@@ -5726,7 +5745,7 @@ namespace std {
   template<class charT, class traits = char_traits<charT>>
   class basic_ostream : virtual public basic_ios<charT, traits> {
   public:
-    // types (inherited from \tcode{basic_ios}\iref{ios})
+    // types (inherited from \link{\tcode{basic_ios}}{\ref{ios}})
     using char_type   = charT;
     using int_type    = typename traits::int_type;
     using pos_type    = typename traits::pos_type;
@@ -5871,7 +5890,7 @@ explicit basic_ostream(basic_streambuf<charT, traits>* sb);
 \effects
 Constructs an object of class
 \tcode{basic_ostream}, initializing the base class subobject with
-\tcode{basic_ios<charT, traits>::init(sb)}\iref{basic.ios.cons}.
+\tcode{basic_ios<charT, traits>::init(sb)}\iref{basic.ios.cons}. % todo
 
 \pnum
 \postconditions
@@ -6292,7 +6311,7 @@ in~\ref{ostream.formatted.reqmts}).
 \returns
 \tcode{pf(*this)}.\footnote{See, for example, the function signature
 \indexlibrary{\idxcode{endl}}%
-\tcode{endl(basic_ostream\&)}\iref{ostream.manip}.}
+\liblinkx{\tcode{endl(basic_ostream\&)}}{endl}{\ref{ostream.manip}}.}
 \end{itemdescr}
 
 \indexlibrarymember{operator<<}{basic_ostream}%
@@ -6313,7 +6332,7 @@ behave as a formatted output function (as described in~\ref{ostream.formatted.re
 \returns
 \tcode{*this}.\footnote{See, for example, the function signature
 \indexlibrary{\idxcode{dec}}%
-\tcode{dec(ios_base\&)}\iref{basefield.manip}.}
+\liblinkx{\tcode{dec(ios_base\&)}}{dec}{\ref{basefield.manip}}.}
 \end{itemdescr}
 
 \indexlibrarymember{operator<<}{basic_ostream}%
@@ -6342,7 +6361,7 @@ basic_ostream<charT, traits>& operator<<(basic_streambuf<charT, traits>* sb);
 \begin{itemdescr}
 \pnum
 \effects
-Behaves as an unformatted output function\iref{ostream.unformatted}.
+Behaves as an \link{unformatted output function}{\ref{ostream.unformatted}}.
 After the sentry object is
 constructed, if
 \tcode{sb} is null calls
@@ -6399,7 +6418,7 @@ return *this << s;
 \end{codeblock}
 where \tcode{s} is an
 \impldef{NTCTS in \tcode{basic_ostream<charT, traits>\& op\-er\-ator<<(nullptr_t)}}
-NTCTS\iref{defns.ntcts}.
+\link{NTCTS}{\ref{defns.ntcts}}.
 \end{itemdescr}
 
 \rSec4[ostream.inserters.character]{Character inserter function templates}
@@ -6423,7 +6442,7 @@ template<class traits>
 \begin{itemdescr}
 \pnum
 \effects
-Behaves as a formatted output function\iref{ostream.formatted.reqmts}
+Behaves as a \link{formatted output function}{\ref{ostream.formatted.reqmts}}
 of \tcode{out}. Constructs a character sequence \tcode{seq}.
 If \tcode{c} has type
 \tcode{char}
@@ -6625,6 +6644,7 @@ is a designated addressable function\iref{namespace.std}.
 template<class charT, class traits>
   basic_ostream<charT, traits>& endl(basic_ostream<charT, traits>& os);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -7043,7 +7063,7 @@ specialization of the \tcode{basic_string} template\iref{strings}.
 
 \pnum
 \effects The expression \tcode{in >> get_money(mon, intl)} described below
-behaves as a formatted input function\iref{istream.formatted.reqmts}.
+behaves as a \link{formatted input function}{\ref{istream.formatted.reqmts}}.
 
 \pnum
 \returns An object of unspecified type such that if
@@ -7085,7 +7105,7 @@ specialization of the \tcode{basic_string} template\iref{strings}.
 \returns An object of unspecified type such that if
 \tcode{out} is an object of type \tcode{basic_ostream<charT, traits>}
 then the expression \tcode{out << put_money(mon, intl)} behaves as a
-formatted output function\iref{ostream.formatted.reqmts} that calls
+\link{formatted output function}{\ref{ostream.formatted.reqmts}} that calls
 \tcode{f(out, mon, intl)}, where the function \tcode{f} is defined as:
 
 \begin{codeblock}
@@ -7205,7 +7225,7 @@ of \tcode{basic_ostream} with member type \tcode{char_type} the same as
 \tcode{charT} and with member type \tcode{traits_type}, which in the second and third
 forms is the same as \tcode{traits}, then the expression
 \tcode{out << quoted(s, delim, escape)}
-behaves as a formatted output function\iref{ostream.formatted.reqmts}
+behaves as a \link{formatted output function}{\ref{ostream.formatted.reqmts}}
 of \tcode{out}. This forms a character sequence \tcode{seq}, initially
 consisting of the following elements:
 \begin{itemize}
@@ -8793,7 +8813,7 @@ and
 \indexlibrary{\idxcode{fseek}}%
 are declared, in
 \indexhdr{cstdio}%
-\tcode{<cstdio>}\iref{cstdio.syn}.}
+\link{\tcode{<cstdio>}}{\ref{cstdio.syn}}.}
 
 \pnum
 If the repositioning operation fails, calls
@@ -10987,7 +11007,7 @@ namespace std::filesystem {
 
 \pnum
 \tcode{\textit{trivial-clock}} is an \impldef{type of filesystem trivial clock} type
-that satisfies the \tcode{TrivialClock} requirements\iref{time.clock.req}
+that satisfies the \link{\tcode{TrivialClock} requirements}{\ref{time.clock.req}}
 and that is capable of representing and measuring file time values.
 Implementations should ensure that the resolution and range of
 \tcode{file_time_type} reflect the operating system dependent resolution and range
@@ -11578,7 +11598,7 @@ denotes a possibly \tcode{const} encoded character type\iref{temp.deduct}.
 
 \pnum
 \begin{note}
-See path conversions\iref{fs.path.cvt}
+See \link{path conversions}{\ref{fs.path.cvt}}
 for how the value types above and their encodings convert to
 \tcode{path::value_type} and its encoding.
 \end{note}
@@ -12138,7 +12158,7 @@ The encoding of the string returned by \tcode{u8string()} is always UTF-8.
 
 \pnum
 Generic format observer functions return strings formatted according to the
-generic pathname format\iref{fs.path.generic}.
+\link{generic pathname format}{\ref{fs.path.generic}}.
 A single slash (\tcode{'/'}) character is used as
 the \grammarterm{directory-separator}.
 
@@ -12618,11 +12638,11 @@ path lexically_proximate(const path& base) const;
 \indexlibrary{\idxcode{path}!\idxcode{iterator}}%
 \pnum
 Path iterators iterate over the elements of the pathname
-in the generic format\iref{fs.path.generic}.
+in the \link{generic format}{\ref{fs.path.generic}}.
 
 \pnum
 A \tcode{path::iterator} is a constant iterator satisfying all the
-requirements of a bidirectional iterator\iref{bidirectional.iterators}
+requirements of a \link{bidirectional iterator}{\ref{bidirectional.iterators}}
 except that,
 for dereferenceable iterators \tcode{a} and \tcode{b}
 of type \tcode{path::iterator}
@@ -12858,7 +12878,7 @@ template<class InputIterator>
 \end{itemize}
 
 \pnum
-\remarks Argument format conversion\iref{fs.path.fmt.cvt} applies to the
+\remarks \link{Argument format conversion}{\ref{fs.path.fmt.cvt}} applies to the
   arguments for these functions. How Unicode encoding conversions are performed is
   unspecified.
 
@@ -13865,8 +13885,8 @@ namespace std::filesystem {
 \end{codeblock}
 
 \pnum
- \tcode{directory_iterator} satisfies the requirements of an input
-iterator\iref{input.iterators}.
+ \tcode{directory_iterator} satisfies the requirements of an \link{input
+iterator}{\ref{input.iterators}}.
 
 \pnum
 If an iterator of type \tcode{directory_iterator} reports an error or
@@ -14008,7 +14028,7 @@ directory_iterator& increment(error_code& ec);
 
 \pnum
 \effects As specified for the prefix increment operation of
-Input iterators\iref{input.iterators}.
+\link{Input iterators}{\ref{input.iterators}}.
 
 \pnum
 \returns \tcode{*this}.
@@ -14295,7 +14315,7 @@ recursive_directory_iterator& increment(error_code& ec);
 \begin{itemdescr}
 \pnum
 \effects As specified for the prefix increment operation of
-Input iterators\iref{input.iterators},
+\link{Input iterators}{\ref{input.iterators}},
 except that:
 
 \begin{itemize}
@@ -16208,8 +16228,8 @@ with the following changes:
 The header \tcode{<cinttypes>} includes the header \tcode{<cstdint>} instead
 of \tcode{<stdint.h>}, and
 \item
-if and only if the type \tcode{intmax_t} designates an extended integer
-type\iref{basic.fundamental}, the following function signatures are added:
+if and only if the type \tcode{intmax_t} designates an
+\deflink{extended integer type}{\ref{basic.fundamental}}, the following function signatures are added:
 \begin{codeblock}
 intmax_t abs(intmax_t);
 imaxdiv_t div(intmax_t, intmax_t);
diff --git a/source/iterators.tex b/source/iterators.tex
index 02d8434..d60dd50 100644
--- a/source/iterators.tex
+++ b/source/iterators.tex
@@ -5,9 +5,9 @@
 
 \pnum
 This Clause describes components that \Cpp{} programs may use to perform
-iterations over containers\iref{containers},
-streams\iref{iostream.format},
-and stream buffers\iref{stream.buffers}.
+iterations over \link{containers}{\ref{containers}},
+\link{streams}{\ref{iostream.format}},
+and \link{stream buffers}{\ref{stream.buffers}}.
 
 \pnum
 The following subclauses describe
@@ -264,7 +264,7 @@ denotes a value of value type
 \tcode{o}
 denotes a value of some type that is writable to the output iterator.
 \begin{note} For an iterator type \tcode{X} there must be an instantiation
-of \tcode{iterator_traits<X>}\iref{iterator.traits}. \end{note}
+of \link{\tcode{iterator_traits<X>}}{\ref{iterator.traits}}. \end{note}
 
 \rSec2[iterator.iterators]{Iterator}
 
@@ -273,7 +273,7 @@ The \tcode{Iterator} requirements form the basis of the iterator
 taxonomy; every iterator satisfies the \tcode{Iterator} requirements. This
 set of requirements specifies operations for dereferencing and incrementing
 an iterator. Most algorithms will require additional operations to
-read\iref{input.iterators} or write\iref{output.iterators} values, or
+\link{read}{\ref{input.iterators}} or \link{write}{\ref{output.iterators}} values, or
 to provide a richer set of iterator movements~(\ref{forward.iterators},
 \ref{bidirectional.iterators}, \ref{random.access.iterators}).
 
@@ -283,7 +283,7 @@ A type \tcode{X} satisfies the \tcode{Iterator} requirements if:
 \begin{itemize}
 \item \tcode{X} satisfies the \tcode{CopyConstructible}, \tcode{CopyAssignable}, and
 \tcode{Destructible} requirements\iref{utility.arg.requirements} and lvalues
-of type \tcode{X} are swappable\iref{swappable.requirements}, and
+of type \tcode{X} are \deflink{swappable}{\ref{swappable.requirements}}, and
 
 \item the expressions in \tref{iterator.requirements} are valid and have
 the indicated semantics.
@@ -495,10 +495,10 @@ A class or pointer type
 satisfies the requirements of a forward iterator if
 
 \begin{itemize}
-\item \tcode{X} satisfies the requirements of an input iterator\iref{input.iterators},
+\item \tcode{X} satisfies the requirements of an \link{input iterator}{\ref{input.iterators}},
 
-\item \tcode{X} satisfies the \tcode{DefaultConstructible}
-requirements\iref{utility.arg.requirements},
+\item \tcode{X} satisfies the \link{\tcode{DefaultConstructible}
+requirements}{\ref{utility.arg.requirements}},
 
 \item if \tcode{X} is a mutable iterator, \tcode{reference} is a reference to \tcode{T};
 if \tcode{X} is a constant iterator, \tcode{reference} is a reference to \tcode{const T},
@@ -2514,7 +2514,7 @@ and prints the partial sums onto
 \indexlibrary{\idxcode{istream_iterator}}%
 The class template
 \tcode{istream_iterator}
-is an input iterator\iref{input.iterators} that
+is an \link{input iterator}{\ref{input.iterators}} that
 reads (using
 \tcode{operator>>})
 successive elements from the input stream for which it was constructed.
@@ -2861,10 +2861,11 @@ The iterator is destroyed.
 
 \rSec3[ostream.iterator.ops]{\tcode{ostream_iterator} operations}
 
-\indexlibrarymember{operator=}{ostream_iterator}%
+\begin{indexed}{\indexlibrarymember{operator=}{ostream_iterator}}
 \begin{itemdecl}
 ostream_iterator& operator=(const T& value);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2907,7 +2908,7 @@ ostream_iterator& operator++(int);
 The
 class template
 \tcode{istreambuf_iterator}
-defines an input iterator\iref{input.iterators} that
+defines an \link{input iterator}{\ref{input.iterators}} that
 reads successive
 \textit{characters}
 from the streambuf for which it was constructed.
diff --git a/source/lex.tex b/source/lex.tex
index edca808..1e725fb 100644
--- a/source/lex.tex
+++ b/source/lex.tex
@@ -30,10 +30,10 @@
 \indextext{compilation!separate|(}%
 The text of the program is kept in units called
 \defnx{source files}{source file} in this document.
-A source file together with all the headers\iref{headers}
-and source files included\iref{cpp.include} via the preprocessing
+A source file together with all the \link{headers}{\ref{headers}}
+and source files \link{included}{\ref{cpp.include}} via the preprocessing
 directive \tcode{\#include}, less any source lines skipped by any of the
-conditional inclusion\iref{cpp.cond} preprocessing directives, is
+\link{conditional inclusion}{\ref{cpp.cond}} preprocessing directives, is
 called a \defn{translation unit}.
 \begin{note} A \Cpp{} program need not all be translated at the same time.
 \end{note}
@@ -45,8 +45,8 @@ translation units of a program communicate\iref{basic.link} by (for
 example) calls to functions whose identifiers have external linkage,
 manipulation of objects whose identifiers have external linkage, or
 manipulation of data files. Translation units can be separately
-translated and then later linked to produce an executable
-program\iref{basic.link}. \end{note}%
+translated and then later \link{linked}{\ref{basic.link}} to produce an executable
+program. \end{note}%
 \indextext{compilation!separate|)}
 
 \rSec1[lex.phases]{Phases of translation}%
@@ -68,8 +68,8 @@ indicators) if necessary.
 The set of physical source file characters accepted is \impldef{physical source file
 characters}.
 Any
-source file character not in the basic source character
-set\iref{lex.charset} is replaced by the
+source file character not in the
+\deflink{basic source character set}{\ref{lex.charset}} is replaced by the
 \indextext{universal character name}\grammarterm{universal-character-name} that
 designates that character. An implementation may use any internal
 encoding, so long as an actual extended character encountered in the
@@ -93,8 +93,8 @@ backslash character before any such splicing takes place,
 shall be processed as if an additional new-line character were appended
 to the file.
 
-\item The source file is decomposed into preprocessing
-tokens\iref{lex.pptoken} and sequences of white-space characters
+\item The source file is decomposed into \link{preprocessing
+tokens}{\ref{lex.pptoken}} and sequences of white-space characters
 (including comments). A source file shall not end in a partial
 preprocessing token or in a partial comment.\footnote{A partial preprocessing
 token would arise from a source file
@@ -117,8 +117,8 @@ directive.
 \item Preprocessing directives are executed, macro invocations are
 expanded, and \tcode{_Pragma} unary operator expressions are executed.
 If a character sequence that matches the syntax of a
-\grammarterm{universal-character-name} is produced by token
-concatenation\iref{cpp.concat}, the behavior is undefined. A
+\grammarterm{universal-character-name} is produced by \link{token
+concatenation}{\ref{cpp.concat}}, the behavior is undefined. A
 \tcode{\#include} preprocessing directive causes the named header or
 source file to be processed from phase 1 through phase 4, recursively.
 All preprocessing directives are then deleted.
@@ -136,7 +136,7 @@ non-corresponding source characters to the same execution character.}
 
 \item White-space characters separating tokens are no longer
 significant. Each preprocessing token is converted into a
-token\iref{lex.token}. The resulting tokens are syntactically and
+\link{token}{\ref{lex.token}}. The resulting tokens are syntactically and
 semantically analyzed and translated as a translation unit. \begin{note}
 The process of analyzing and translating the tokens may occasionally
 result in one token being replaced by a sequence of other
@@ -150,8 +150,8 @@ only, and does not specify any particular implementation. \end{note}
 as follows: \begin{note} Some or all of these may be supplied from a
 library. \end{note} Each translated translation unit is examined to
 produce a list of required instantiations. \begin{note} This may include
-instantiations which have been explicitly
-requested\iref{temp.explicit}. \end{note} The definitions of the
+instantiations which have been \link{explicitly
+requested}{\ref{temp.explicit}}. \end{note} The definitions of the
 required templates are located. It is \impldef{whether source of translation units must
 be available to locate template definitions} whether the
 source of the translation units containing these definitions is required
@@ -263,7 +263,7 @@ are locale-specific.%
 \end{bnf}
 
 \pnum
-Each preprocessing token that is converted to a token\iref{lex.token}
+Each preprocessing token that is converted to a \link{token}{\ref{lex.token}}
 shall have the lexical form of a keyword, an identifier, a literal, an
 operator, or a punctuator.
 
@@ -279,7 +279,7 @@ separated by
 \indextext{space!white}%
 white space;
 \indextext{comment}%
-this consists of comments\iref{lex.comment}, or white-space
+this consists of \link{comments}{\ref{lex.comment}}, or white-space
 characters (space, horizontal tab, new-line, vertical tab, and
 form-feed), or both. As described in \ref{cpp}, in certain
 circumstances during translation phase 4, white space (or the absence
@@ -315,7 +315,7 @@ the next preprocessing token is the longest sequence of
 characters that could constitute a preprocessing token, even if that
 would cause further lexical analysis to fail,
 except that a \grammarterm{header-name}\iref{lex.header} is only formed
-within a \tcode{\#include} directive\iref{cpp.include}.
+within a \link{\tcode{\#include} directive}{\ref{cpp.include}}.
 \end{itemize}
 
 \begin{example}
@@ -357,7 +357,7 @@ keywords are colloquially known as ``digraphs''. }
 
 \pnum
 In all respects of the language, each alternative token behaves the
-same, respectively, as its primary token, except for its spelling.\footnote{Thus the ``stringized'' values\iref{cpp.stringize} of
+same, respectively, as its primary token, except for its spelling.\footnote{Thus the \link{``stringized''}{\ref{cpp.stringize}} values of
 \tcode{[} and \tcode{<:} will be different, maintaining the source
 spelling, but the tokens can otherwise be freely interchanged. }
 The set of alternative tokens is defined in
@@ -501,9 +501,9 @@ depending on the implementation.}%
 \end{bnf}
 
 \pnum
-Preprocessing number tokens lexically include all integer literal
-tokens\iref{lex.icon} and all floating literal
-tokens\iref{lex.fcon}.
+Preprocessing number tokens lexically include all \link{integer literal}{\ref{lex.icon}}
+tokens and all \link{floating literal}{\ref{lex.fcon}}
+tokens.
 
 \pnum
 A preprocessing number does not have a type or a value; it acquires both
@@ -809,7 +809,7 @@ are converted into tokens for operators and punctuators:
 \end{bnf}
 
 Each \grammarterm{preprocessing-op-or-punc} is converted to a single token
-in translation phase 7\iref{lex.phases}.%
+in \link{translation phase 7}{\ref{lex.phases}}.%
 \indextext{punctuator|)}%
 \indextext{operator|)}
 
@@ -1039,7 +1039,7 @@ and \tcode{ll} or \tcode{LL}  &
 
 \pnum
 If an integer literal cannot be represented by any type in its list and
-an extended integer type\iref{basic.fundamental} can represent its value, it may have that
+an \deflink{extended integer type}{\ref{basic.fundamental}} can represent its value, it may have that
 extended integer type. If all of the types in the list for the integer literal
 are signed, the extended integer type shall be signed. If all of the
 types in the list for the integer literal are unsigned, the extended integer
@@ -1542,12 +1542,11 @@ also referred to as narrow
 string literals. A narrow string literal has type
 \indextext{literal!string!type of}%
 ``array of \placeholder{n} \tcode{const char}'', where \placeholder{n} is the size of
-the string as defined below, and has static storage
-duration\iref{basic.stc}.
+the string as defined below, and has \deflink{static storage duration}{\ref{basic.stc}}.
 
 \pnum
-For a UTF-8 string literal, each successive element of the object
-representation\iref{basic.types} has the value of the corresponding
+For a UTF-8 string literal, each successive element of the
+\deflink{object representation}{\ref{basic.types}} has the value of the corresponding
 code unit of the UTF-8 encoding of the string.
 
 \pnum
@@ -1589,7 +1588,7 @@ is initialized with the given characters.
 
 \pnum
 \indextext{concatenation!string}%
-In translation phase 6\iref{lex.phases}, adjacent \grammarterm{string-literal}{s} are concatenated. If
+In \link{translation phase 6}{\ref{lex.phases}}, adjacent \grammarterm{string-literal}{s} are concatenated. If
 both \grammarterm{string-literal}{s} have the same \grammarterm{encoding-prefix}, the resulting concatenated string literal has
 that \grammarterm{encoding-prefix}. If one \grammarterm{string-literal} has no \grammarterm{encoding-prefix}, it is treated as a \grammarterm{string-literal} of
 the same \grammarterm{encoding-prefix} as the other operand. If a UTF-8 string literal token is adjacent to a
@@ -1640,13 +1639,13 @@ after concatenation (and not the single hexadecimal character
 \indextext{\idxcode{0}|seealso{zero, null}}%
 \indextext{\idxcode{0}!string terminator}%
 \indextext{\idxcode{0}!null character|see {character, null}}%
-After any necessary concatenation, in translation phase
-7\iref{lex.phases}, \tcode{'\textbackslash 0'} is appended to every
+After any necessary concatenation, in \link{translation phase
+7}{\ref{lex.phases}}, \tcode{'\textbackslash 0'} is appended to every
 string literal so that programs that scan a string can find its end.
 
 \pnum
 Escape sequences and \grammarterm{universal-character-name}{s} in non-raw string literals
-have the same meaning as in character literals\iref{lex.ccon}, except that
+have the same meaning as in \link{character literals}{\ref{lex.ccon}}, except that
 the single quote \tcode{'} is representable either by itself or by the escape sequence
 \tcode{\textbackslash'}, and the double quote \tcode{"} shall be preceded by a
 \tcode{\textbackslash},
@@ -1768,12 +1767,12 @@ The syntactic non-terminal preceding the \grammarterm{ud-suffix} in a
 characters that could match that non-terminal.
 
 \pnum
-A \grammarterm{user-defined-literal} is treated as a call to a literal operator or
-literal operator template\iref{over.literal}. To determine the form of this call for a
+A \grammarterm{user-defined-literal} is treated as a call to a \deflink{literal operator}{\ref{over.literal}} or
+\deflink{literal operator template}{\ref{over.literal}}. To determine the form of this call for a
 given \grammarterm{user-defined-literal} \placeholder{L} with \grammarterm{ud-suffix} \placeholder{X},
 the \grammarterm{literal-operator-id} whose literal suffix identifier is \placeholder{X} is
-looked up in the context of \placeholder{L} using the rules for unqualified name
-lookup\iref{basic.lookup.unqual}. Let \placeholder{S} be the set of declarations found by
+looked up in the context of \placeholder{L} using the rules for \link{unqualified name
+lookup}{\ref{basic.lookup.unqual}}. Let \placeholder{S} be the set of declarations found by
 this lookup. \placeholder{S} shall not be empty.
 
 \pnum
@@ -1786,8 +1785,9 @@ the form
 operator "" @\placeholder{X}@(@\placeholder{n}@ULL)
 \end{codeblock}
 
-Otherwise, \placeholder{S} shall contain a raw literal operator or a literal operator
-template\iref{over.literal} but not both. If \placeholder{S} contains a raw literal operator,
+Otherwise, \placeholder{S} shall contain a \deflink{raw literal operator}{\ref{over.literal}} or a
+\deflink{literal operator template}{\ref{over.literal}} but not both.
+If \placeholder{S} contains a raw literal operator,
 the literal \placeholder{L} is treated as a call of the form
 
 \begin{codeblock}
@@ -1816,8 +1816,9 @@ the form
 operator "" @\placeholder{X}@(@\placeholder{f}@L)
 \end{codeblock}
 
-Otherwise, \placeholder{S} shall contain a raw literal operator or a literal operator
-template\iref{over.literal} but not both. If \placeholder{S} contains a raw literal operator,
+Otherwise, \placeholder{S} shall contain a \deflink{raw literal operator}{\ref{over.literal}} or a
+\deflink{literal operator template}{\ref{over.literal}} but not both.
+If \placeholder{S} contains a raw literal operator,
 the \grammarterm{literal} \placeholder{L} is treated as a call of the form
 
 \begin{codeblock}
@@ -1850,7 +1851,7 @@ operator "" @\placeholder{X}@(@\placeholder{str}{}@, @\placeholder{len}{}@)
 \pnum
 If \placeholder{L} is a \grammarterm{user-defined-character-literal}, let \placeholder{ch} be the
 literal without its \grammarterm{ud-suffix}.
-\placeholder{S} shall contain a literal operator\iref{over.literal} whose only parameter has
+\placeholder{S} shall contain a \deflink{literal operator}{\ref{over.literal}} whose only parameter has
 the type of \placeholder{ch} and the
 literal \placeholder{L} is treated as a call
 of the form
@@ -1877,7 +1878,7 @@ int main() {
 \end{example}
 
 \pnum
-In translation phase 6\iref{lex.phases}, adjacent string literals are concatenated and
+In \link{translation phase 6}{\ref{lex.phases}}, adjacent string literals are concatenated and
 \grammarterm{user-defined-string-literal}{s} are considered string literals for that
 purpose. During concatenation, \grammarterm{ud-suffix}{es} are removed and ignored and
 the concatenation process occurs as described in~\ref{lex.string}. At the end of phase
diff --git a/source/lib-intro.tex b/source/lib-intro.tex
index e32456d..5bc129e 100644
--- a/source/lib-intro.tex
+++ b/source/lib-intro.tex
@@ -10,8 +10,8 @@ how a well-formed \Cpp{} program makes use of the library, and
 how a conforming implementation may provide the entities in the library.
 
 \pnum
-The following subclauses describe the definitions\iref{definitions}, method of
-description\iref{description}, and organization\iref{organization} of the
+The following subclauses describe the \link{definitions}{\ref{definitions}}, method of
+\link{description}{\ref{description}}, and \link{organization}{\ref{organization}} of the
 library. \ref{requirements}, \ref{\firstlibchapter}
 through \ref{\lastlibchapter}, and \ref{depr} specify the contents of the
 library, as well as library requirements and constraints on both well-formed
@@ -39,24 +39,24 @@ Detailed specifications for each of the components in the library are in
 \end{libsumtabbase}
 
 \pnum
-The language support library\iref{language.support} provides components that are
+The \link{language support library}{\ref{language.support}} provides components that are
 required by certain parts of the \Cpp{} language, such as memory allocation~(\ref{expr.new},
-\ref{expr.delete}) and exception processing\iref{except}.
+\ref{expr.delete}) and \link{exception processing}{\ref{except}}.
 
 \pnum
-The diagnostics library\iref{diagnostics} provides a consistent framework for
+The \link{diagnostics library}{\ref{diagnostics}} provides a consistent framework for
 reporting errors in a \Cpp{} program, including predefined exception classes.
 
 \pnum
-The general utilities library\iref{utilities} includes components used
-by other library elements, such as a predefined storage allocator for dynamic
-storage management\iref{basic.stc.dynamic}, and components used
+The \link{general utilities library}{\ref{utilities}} includes components used
+by other library elements, such as a predefined storage allocator for \link{dynamic
+storage management}{\ref{basic.stc.dynamic}}, and components used
 as infrastructure
 in \Cpp{} programs,
 such as tuples, function wrappers, and time facilities.
 
 \pnum
-The strings library\iref{strings} provides support for manipulating text represented
+The \link{strings library}{\ref{strings}} provides support for manipulating text represented
 as sequences of type
 \tcode{char},
 sequences of type
@@ -68,16 +68,16 @@ sequences of type
 and sequences of any other character-like type.
 
 \pnum
-The localization library\iref{localization} provides extended internationalization
+The \link{localization library}{\ref{localization}} provides extended internationalization
 support for text processing.
 
 \pnum
-The containers\iref{containers}, iterators\iref{iterators},
-and algorithms\iref{algorithms} libraries provide a \Cpp{} program with access
+The \link{containers}{\ref{containers}}, \link{iterators}{\ref{iterators}},
+and \link{algorithms}{\ref{algorithms}} libraries provide a \Cpp{} program with access
 to a subset of the most widely used algorithms and data structures.
 
 \pnum
-The numerics library\iref{numerics} provides
+The \link{numerics library}{\ref{numerics}} provides
 numeric algorithms and complex number components that extend support for numeric processing.
 The
 \tcode{valarray}
@@ -88,21 +88,21 @@ potentially implemented as parallel operations on platforms that support such pr
 The random number component provides facilities for generating pseudo-random numbers.
 
 \pnum
-The input/output library\iref{input.output} provides the
+The \link{input/output library}{\ref{input.output}} provides the
 \tcode{iostream}
 components that are the primary mechanism for \Cpp{} program input and output.
 They can be used with other elements of the library, particularly
 strings, locales, and iterators.
 
 \pnum
-The regular expressions library\iref{re} provides regular expression matching and searching.
+The \link{regular expressions library}{\ref{re}} provides regular expression matching and searching.
 
 \pnum
-The atomic operations library\iref{atomics} allows more fine-grained
+The \link{atomic operations library}{\ref{atomics}} allows more fine-grained
 concurrent access to shared data than is possible with locks.
 
 \pnum
-The thread support library\iref{thread} provides components to create
+The \link{thread support library}{\ref{thread}} provides components to create
 and manage threads, including mutual exclusion and interthread communication.
 
 \rSec1[library.c]{The C standard library}
@@ -194,7 +194,7 @@ strings are referred to as the
 expression whose evaluation as subexpression of a
 \grammarterm{conditional-expression}
 \tcode{CE}\iref{expr.cond} would not prevent \tcode{CE}
-from being a core constant expression\iref{expr.const}
+from being a \deflinkx{core constant expression}{expression!core constant}{\ref{expr.const}}
 
 \definition{deadlock}{defns.deadlock}
 \indexdefn{deadlock}%
@@ -251,7 +251,7 @@ necessary to implement the iostream class templates.
 
 \definition{modifier function}{defns.modifier}
 \indexdefn{function!modifier}%
-class member function\iref{class.mfct} other than a constructor,
+\link{class member function}{\ref{class.mfct}} other than a constructor,
 assignment operator, or destructor
 that alters the state of an object of the class
 
@@ -549,8 +549,8 @@ of other standards\iref{intro.refs}.
 This subclause describes several editorial conventions used to describe the contents
 of the \Cpp{} standard library.
 These conventions are for describing
-implementation-defined types\iref{type.descriptions},
-and member functions\iref{functions.within.classes}.
+\link{implementation-defined types}{\ref{type.descriptions}},
+and \link{member functions}{\ref{functions.within.classes}}.
 
 \rSec3[type.descriptions]{Type descriptions}
 
@@ -632,7 +632,7 @@ and \ref{depr} are
 Each bitmask type can be implemented as an
 enumerated type that overloads certain operators, as an integer type,
 or as a
-\tcode{bitset}\iref{template.bitset}.
+\link{\tcode{bitset}}{\ref{template.bitset}}.
 \indextext{type!enumerated}%
 
 \pnum
@@ -737,7 +737,7 @@ also its value in the \tcode{"C"}
 locale, but may change during program
 execution by a call to
 \tcode{setlocale(int, const char*)},\footnote{declared in
-\tcode{<clocale>}\iref{c.locales}.
+\link{\tcode{<clocale>}}{\ref{c.locales}}.
 \indextext{\idxcode{setlocale}}%
 \indexlibrary{\idxcode{setlocale}}%
 \indexhdr{clocale}%
@@ -748,7 +748,7 @@ object, as described in \ref{locales} and \ref{input.output}.
 \item
 A
 \defn{character sequence}
-is an array object\iref{dcl.array} \tcode{\placeholdernc{A}} that
+is an \link{array object}{\ref{dcl.array}} \tcode{\placeholdernc{A}} that
 can be declared as
 \tcode{\placeholdernc{T\;A}[\placeholder{N}]},
 where \tcode{\placeholder{T}} is any of the types
@@ -779,7 +779,7 @@ no other element in the sequence has the value zero.%
 \indexhdr{cstring}%
 \footnote{Many of the objects manipulated by
 function signatures declared in
-\tcode{<cstring>}\iref{c.strings} are character sequences or \ntbs{}s.
+\link{\tcode{<cstring>}}{\ref{c.strings}} are character sequences or \ntbs{}s.
 \indexhdr{cstring}%
 The size of some of these character sequences is limited by
 a length value, maintained separately from the character sequence.}
@@ -915,7 +915,7 @@ Type \tcode{T} is \tcode{LessThanComparable} (\tref{lessthancomparable}).
 \pnum
 \ref{\firstlibchapter} through \ref{\lastlibchapter} and
 \ref{depr} do not specify the representation of classes, and intentionally
-omit specification of class members\iref{class.mem}. An implementation may
+omit specification of \link{class members}{\ref{class.mem}}. An implementation may
 define static or non-static class members, or both, as needed to implement the
 semantics of the member functions specified in \ref{\firstlibchapter}
 through \ref{\lastlibchapter} and \ref{depr}.
@@ -1152,10 +1152,10 @@ for any of these C headers:
 Except as noted in \ref{library} through \ref{\lastlibchapter}
 and \ref{depr}, the contents of each header \tcode{c\placeholder{name}} is
 the same as that of the corresponding header \tcode{\placeholder{name}.h} as
-specified in the C standard library\iref{intro.refs}.
+specified in the \deflinkx{C standard library}{C!standard library}{\ref{intro.refs}}.
 In the \Cpp{} standard library, however, the
 declarations (except for names which are defined as macros in C) are within
-namespace scope\iref{basic.scope.namespace} of the namespace \tcode{std}.
+\link{namespace scope}{\ref{basic.scope.namespace}} of the namespace \tcode{std}.
 It is unspecified whether these names (including any overloads added in
 \ref{\firstlibchapter} through \ref{\lastlibchapter} and \ref{depr})
 are first declared within the global namespace scope
@@ -1364,8 +1364,8 @@ The other headers listed in this table shall meet the same requirements as for a
 \pnum
 Subclause \ref{using} describes how a \Cpp{} program gains access to the facilities of the
 \Cpp{} standard library. \ref{using.headers} describes effects during translation
-phase 4, while~\ref{using.linkage} describes effects during phase
-8\iref{lex.phases}.
+phase 4, while~\ref{using.linkage} describes effects during \link{phase
+8}{\ref{lex.phases}}.
 
 \rSec3[using.headers]{Headers}
 
@@ -1373,8 +1373,8 @@ phase 4, while~\ref{using.linkage} describes effects during phase
 The entities in the \Cpp{} standard library are defined in headers,
 whose contents are made available to a translation unit when it contains the appropriate
 \indextext{unit!translation}%
-\tcode{\#include}
-preprocessing directive\iref{cpp.include}.%
+\link{\tcode{\#include}
+preprocessing directive}{\ref{cpp.include}}.%
 \indextext{\idxcode{\#include}}%
 \indextext{source file}
 
@@ -1404,7 +1404,7 @@ declared in that header. No diagnostic is required.
 \rSec3[using.linkage]{Linkage}
 
 \pnum
-Entities in the \Cpp{} standard library have external linkage\iref{basic.link}.
+Entities in the \Cpp{} standard library have \link{external linkage}{\ref{basic.link}}.
 Unless otherwise specified, objects and functions have the default
 \tcode{extern "C++"}
 linkage\iref{dcl.link}.
@@ -1436,8 +1436,8 @@ the program prior to program startup.
 \indextext{startup!program}%
 \pnum
 See also
-replacement functions\iref{replacement.functions},
-runtime changes\iref{handler.functions}.
+\link{replacement functions}{\ref{replacement.functions}},
+\link{runtime changes}{\ref{handler.functions}}.
 
 \rSec2[utility.requirements]{Requirements on types and expressions}
 
@@ -1474,7 +1474,7 @@ type \tcode{const T}.
 In general, a default constructor is not required. Certain container class
 member function signatures specify \tcode{T()} as a default argument.
 \tcode{T()} shall be a well-defined expression\iref{dcl.init} if one of those
-signatures is called using the default argument\iref{dcl.fct.default}.
+signatures is called using the \link{default argument}{\ref{dcl.fct.default}}.
 
 \indextext{requirements!\idxcode{EqualityComparable}}%
 \begin{concepttable}{\tcode{EqualityComparable} requirements}{equalitycomparable}
@@ -1502,7 +1502,7 @@ If \tcode{a == b} and \tcode{b == c}, then \tcode{a == c}.
 \hdstyle{Expression}  &   \hdstyle{Return type} &   \hdstyle{Requirement} \\ \capsep
 \tcode{a < b}   &
 convertible to \tcode{bool} &
-\tcode{<} is a strict weak ordering relation\iref{alg.sorting}    \\
+\tcode{<} is a \link{strict weak ordering relation}{\ref{alg.sorting}}    \\
 \end{concepttable}
 
 \enlargethispage{-3\baselineskip}
@@ -1598,14 +1598,14 @@ evaluated in the context described below, and
 
 \pnum
 The context in which \tcode{swap(t, u)} and \tcode{swap(u, t)} are evaluated shall
-ensure that a binary non-member function named ``swap'' is selected via overload
-resolution\iref{over.match} on a candidate set that includes:
+ensure that a binary non-member function named ``swap'' is selected via \link{overload
+resolution}{\ref{over.match}} on a candidate set that includes:
 
 \begin{itemize}
 \item the two \tcode{swap} function templates defined in
-\tcode{<utility>}\iref{utility} and
+\link{\tcode{<utility>}}{\ref{utility}} and
 
-\item the lookup set produced by argument-dependent lookup\iref{basic.lookup.argdep}.
+\item the lookup set produced by \link{argument-dependent lookup}{\ref{basic.lookup.argdep}}.
 \end{itemize}
 
 \begin{note} If \tcode{T} and \tcode{U} are both fundamental types or arrays of
@@ -1684,7 +1684,7 @@ A type \tcode{P} satisfies the \tcode{Nullable\-Pointer} requirements if:
 \tcode{DefaultConstructible}, \tcode{CopyConstructible}, \tcode{CopyAssignable},
 and \tcode{Destructible} requirements,
 
-\item lvalues of type \tcode{P} are swappable\iref{swappable.requirements},
+\item lvalues of type \tcode{P} are \link{swappable}{\ref{swappable.requirements}},
 
 \item the expressions shown in \tref{nullablepointer} are
 valid and have the indicated semantics, and
@@ -1699,8 +1699,9 @@ of type \tcode{P} may have an indeterminate value. \begin{note} Operations invol
 indeterminate values may cause undefined behavior. \end{note}
 
 \pnum
-An object \tcode{p} of type \tcode{P} can be contextually converted to
-\tcode{bool}\iref{conv}. The effect shall be as if \tcode{p != nullptr}
+An object \tcode{p} of type \tcode{P} can be
+\deflinkx{contextually converted to \tcode{bool}}{conversion!contextual to bool}{\ref{conv}}.
+The effect shall be as if \tcode{p != nullptr}
 had been evaluated in place of \tcode{p}.
 
 \pnum
@@ -1798,14 +1799,14 @@ which are class-type objects that encapsulate the information about an allocatio
 This information includes the knowledge of pointer types, the type of their
 difference, the type of the size of objects in this allocation model, as well
 as the memory allocation and deallocation primitives for it. All of the
-string types\iref{strings},
-containers\iref{containers} (except array),
+\link{string types}{\ref{strings}},
+\link{containers}{\ref{containers}} (except array),
 string buffers and string streams\iref{input.output}, and
-\tcode{match_results}\iref{re} are parameterized in terms of
+\link{\tcode{match_results}}{\ref{re}} are parameterized in terms of
 allocators.
 
 \pnum
-The class template \tcode{allocator_traits}\iref{allocator.traits} supplies
+The class template \link{\tcode{allocator_traits}}{\ref{allocator.traits}} supplies
 a uniform interface to all allocator types.
 \tref{desc.var.def} describes the types manipulated
 through allocators. \tref{utilities.allocator.requirements}
@@ -2080,7 +2081,7 @@ If \tcode{X::propagate_on_container_move_assignment::value} is \tcode{true},
 \tcode{MoveAssignable} requirements (\tref{moveassignable})
 and the move operation shall not throw exceptions.
 If \tcode{X::propagate_on_container_swap::value} is \tcode{true},
-lvalues of type \tcode{X} shall be swappable\iref{swappable.requirements}
+lvalues of type \tcode{X} shall be \link{swappable}{\ref{swappable.requirements}}
 and the \tcode{swap} operation shall not throw exceptions.
 
 \pnum
@@ -2093,8 +2094,8 @@ No constructor,
 comparison function, copy operation, move operation, or swap operation on
 these pointer types shall exit via an exception. \tcode{X::pointer} and \tcode{X::const_pointer} shall also
 satisfy the requirements for
-a random access iterator\iref{random.access.iterators} and of
-a contiguous iterator\iref{iterator.requirements.general}.
+a \link{random access iterator}{\ref{random.access.iterators}} and of
+a \link{contiguous iterator}{\ref{iterator.requirements.general}}.
 
 \pnum
 Let \tcode{x1} and \tcode{x2} denote objects of (possibly different) types
@@ -2177,7 +2178,7 @@ whether or not \tcode{T} is a complete type:
 
 \begin{itemize}
 \item \tcode{X} is a complete type, and
-\item all the member types of \tcode{allocator_traits<X>}\iref{allocator.traits}
+\item all the member types of \link{\tcode{allocator_traits<X>}}{\ref{allocator.traits}}
   other than \tcode{value_type} are complete types.
 \end{itemize}
 
@@ -2188,11 +2189,11 @@ whether or not \tcode{T} is a complete type:
 \pnum
 Subclause \ref{constraints} describes restrictions on \Cpp{} programs that use the facilities of
 the \Cpp{} standard library. The following subclauses specify constraints on the
-program's use of namespaces\iref{namespace.std}, its use of various reserved
-names\iref{reserved.names}, its use of headers\iref{alt.headers}, its use of
+program's use of \link{namespaces}{\ref{namespace.std}}, its use of various \link{reserved
+names}{\ref{reserved.names}}, its use of \link{headers}{\ref{alt.headers}}, its use of
 standard library classes as base classes\iref{derived.classes}, its
-definitions of replacement functions\iref{replacement.functions}, and its
-installation of handler functions during execution\iref{handler.functions}.
+definitions of \link{replacement functions}{\ref{replacement.functions}}, and its
+installation of \link{handler functions}{\ref{handler.functions}} during execution.
 
 \rSec3[namespace.constraints]{Namespace use}
 
@@ -2523,7 +2524,7 @@ shall be identical to
 \rSec4[usrlit.suffix]{User-defined literal suffixes}
 
 \pnum
-Literal suffix identifiers\iref{over.literal} that do not start with an underscore are reserved for future standardization.
+\link{Literal suffix identifiers}{\ref{over.literal}} that do not start with an underscore are reserved for future standardization.
 
 \rSec3[alt.headers]{Headers}
 
@@ -2531,7 +2532,7 @@ Literal suffix identifiers\iref{over.literal} that do not start with an undersco
 If a file with a name
 equivalent to the derived file name for one of the \Cpp{} standard library headers
 is not provided as part of the implementation, and a file with that name
-is placed in any of the standard places for a source file to be included\iref{cpp.include},
+is placed in any of the standard places for a source file to be \link{included}{\ref{cpp.include}},
 the behavior is undefined.%
 \indextext{source file}%
 \indextext{undefined}
@@ -2664,7 +2665,7 @@ In particular, the effects are undefined in the following cases:
 
 \begin{itemize}
 \item
-for replacement functions\iref{new.delete}, if the installed replacement function does not
+for \link{replacement functions}{\ref{new.delete}}, if the installed replacement function does not
 implement the semantics of the applicable
 \required
 paragraph.
@@ -2688,7 +2689,7 @@ in the applicable
 \required
 paragraph.
 \item
-if an incomplete type\iref{basic.types} is used as a template
+if an \deflinkx{incomplete type}{type!incomplete}{\ref{basic.types}} is used as a template
 argument when instantiating a template component, unless specifically
 allowed for that component.
 \end{itemize}
@@ -2749,7 +2750,7 @@ specified as being shareable without data races or the user supplies a locking m
 
 \pnum
 If an object of a standard library type is accessed, and
-the beginning of the object's lifetime\iref{basic.life}
+the beginning of the object's \link{lifetime}{\ref{basic.life}}
 does not happen before the access, or
 the access does not happen before the end of the object's lifetime,
 the behavior is undefined unless otherwise specified.
@@ -2797,7 +2798,7 @@ Every such entity shall be defined such that any header that defines it may be
 included after any other header that also defines it\iref{basic.def.odr}.
 
 \pnum
-The C standard library headers\iref{depr.c.headers}
+The \link{C standard library headers}{\ref{depr.c.headers}}
 shall include only their corresponding \Cpp{} standard library header,
 as described in~\ref{headers}.
 
@@ -2825,7 +2826,7 @@ explicitly stated otherwise.
 It is unspecified whether any
 non-member
 functions in the \Cpp{} standard library are defined as
-inline\iref{dcl.inline}.
+\link{inline}{\ref{dcl.inline}}.
 
 \pnum
 A call to a non-member function signature
@@ -2850,7 +2851,7 @@ The phrase ``unless otherwise specified'' applies to cases such as
 the swappable with requirements\iref{swappable.requirements}.
 The exception for overloaded operators allows argument-dependent lookup
 in cases like that of
-\tcode{ostream_iterator::operator=}\iref{ostream.iterator.ops}:
+\liblinkx{\tcode{ostream_iterator::operator=}}{ostream_iterator!operator=}{\ref{ostream.iterator.ops}}:
 
 \effects
 \begin{codeblock}
@@ -2865,7 +2866,7 @@ return *this;
 
 \pnum
 It is unspecified whether any member functions in the \Cpp{} standard library are defined as
-inline\iref{dcl.inline}.
+\link{inline}{\ref{dcl.inline}}.
 
 \pnum
 For a non-virtual member function described in the \Cpp{} standard library,
@@ -2921,8 +2922,8 @@ library may be recursively reentered.
 \rSec3[res.on.data.races]{Data race avoidance}
 
 \pnum
-This subclause specifies requirements that implementations shall meet to prevent data
-races\iref{intro.multithread}.
+This subclause specifies requirements that implementations shall meet to prevent
+\deflinkx{data races}{data race}{\ref{intro.multithread}}.
 Every standard library function shall meet each requirement unless otherwise specified.
 Implementations may prevent data races in cases other than those specified below.
 
@@ -2961,7 +2962,7 @@ not visible to users and are protected against data races.
 \pnum
 Unless otherwise specified, \Cpp{} standard library functions shall perform all operations
 solely within the current thread if those operations have effects that are
-visible\iref{intro.multithread} to users.
+\deflinkx{visible}{side effects!visible}{\ref{intro.multithread}} to users.
 
 \pnum
 \begin{note} This allows implementations to parallelize operations if there are no visible
@@ -3009,8 +3010,8 @@ Every base class not specified as
 Unless explicitly stated otherwise, types with distinct names shall be distinct
 types.\footnote{There is an implicit exception to this rule for types that are
 described as synonyms for basic integral types, such as
-\tcode{size_t}\iref{support.types} and
-\tcode{streamoff}\iref{stream.types}.}
+\link{\tcode{size_t}}{\ref{support.types}} and
+\link{\tcode{streamoff}}{\ref{stream.types}}.}
 \end{itemize}
 
 \pnum
@@ -3066,9 +3067,9 @@ may throw \impldef{exceptions thrown by standard library functions that have a
 potentially-throwing exception specification} exceptions.%
 \footnote{In particular, they
 can report a failure to allocate storage by throwing an exception of type
-\tcode{bad_alloc},
+\link{\tcode{bad_alloc}}{\ref{bad.alloc}},
 or a class derived from
-\tcode{bad_alloc}\iref{bad.alloc}.}
+\tcode{bad_alloc}.}
 Implementations should
 report errors by throwing exceptions of or derived
 from the standard exception classes~(\ref{bad.alloc},
@@ -3086,8 +3087,8 @@ by adding a non-throwing exception specification.
 \indextext{traceable pointer object}%
 \indextext{pointer!to traceable object}%
 Objects constructed by the standard library that may hold a user-supplied pointer value
-or an integer of type \tcode{std::intptr_t} shall store such values in a traceable
-pointer location\iref{basic.stc.dynamic.safety}. \begin{note} Other libraries are
+or an integer of type \tcode{std::intptr_t} shall store such values in a \link{traceable
+pointer location}{\ref{basic.stc.dynamic.safety}}. \begin{note} Other libraries are
 strongly encouraged to do the same, since not doing so may result in accidental use of
 pointers that are not safely derived. Libraries that store pointers outside the user's
 address space should make it appear that they are stored and retrieved from a traceable
@@ -3097,7 +3098,7 @@ pointer location. \end{note}
 
 \pnum
 Certain functions in the \Cpp{} standard library report errors via a
-\tcode{std::error_code}\iref{syserr.errcode.overview} object. That object's
+\link{\tcode{std::error_code}}{\ref{syserr.errcode.overview}} object. That object's
 \tcode{category()} member shall return \tcode{std::system_category()} for
 errors originating from the operating system, or a reference to an
 \impldef{\tcode{error_category} for errors originating outside the
diff --git a/source/locales.tex b/source/locales.tex
index 00f0818..c63ea0f 100644
--- a/source/locales.tex
+++ b/source/locales.tex
@@ -277,7 +277,7 @@ Whether there is one global locale object for the entire program or one global l
 object per thread is \impldef{whether locale object is global or per-thread}.
 Implementations should provide one global locale object per
 thread. If there is a single global locale object for the entire program,
-implementations are not required to avoid data races on it\iref{res.on.data.races}.
+implementations are not required to \link{avoid data races}{\ref{res.on.data.races}} on it.
 
 \rSec3[locale.types]{Types}
 
@@ -1112,7 +1112,7 @@ namespace std {
 \pnum
 The type
 \tcode{mask}
-is a bitmask type\iref{bitmask.types}.
+is a \link{bitmask type}{\ref{bitmask.types}}.
 
 \rSec3[locale.ctype]{Class template \tcode{ctype}}
 
@@ -1421,7 +1421,7 @@ value or values.\footnote{The char argument of
 is intended to accept values derived from character literals for conversion
 to the locale's encoding.}
 The only characters for which unique transformations are required
-are those in the basic source character set\iref{lex.charset}.
+are those in the \deflinkx{basic source character set}{character set!basic source}{\ref{lex.charset}}.
 
 For any named
 \tcode{ctype}
@@ -1465,7 +1465,8 @@ values to the corresponding
 \tcode{char}
 value or values.
 
-For any character \tcode{c} in the basic source character set\iref{lex.charset}
+For any character \tcode{c} in the
+\deflinkx{basic source character set}{character set!basic source}{\ref{lex.charset}}
 the transformation is such that
 
 \begin{codeblock}
@@ -1815,8 +1816,8 @@ virtual const char* do_narrow(const char* low, const char* high,
 \pnum
 These functions are described identically as those members of the
 same name in the
-\tcode{ctype}
-class template\iref{locale.ctype.members}.
+\link{\tcode{ctype}
+class template}{\ref{locale.ctype.members}}.
 
 \rSec3[locale.codecvt]{Class template \tcode{codecvt}}
 
@@ -3371,7 +3372,7 @@ The specializations required in \tref{localization.category.facets}\iref{locale.
 \tcode{collate<char>}
 and
 \tcode{collate<wchar_t>},
-apply lexicographic ordering\iref{alg.lex.comparison}.
+apply \link{lexicographic ordering}{\ref{alg.lex.comparison}}.
 
 \pnum
 Each function compares a string of characters
@@ -3435,7 +3436,7 @@ The specializations required in \tref{localization.category.facets}\iref{locale.
 and
 \tcode{collate<wchar_t>},
 implement
-a lexicographical comparison\iref{alg.lex.comparison}.
+a \link{lexicographical comparison}{\ref{alg.lex.comparison}}.
 \end{itemdescr}
 
 \indexlibrarymember{collate}{do_transform}%
@@ -5042,7 +5043,6 @@ namespace std {
 
 \indexhdr{cassert}%
 \indexlibrary{\idxcode{lconv}}%
-\indexlibrary{\idxcode{setlocale}}%
 \indexlibrary{\idxcode{localeconv}}%
 \indexlibrary{\idxcode{NULL}}%
 \indexlibrary{\idxcode{LC_ALL}}%
@@ -5055,7 +5055,7 @@ namespace std {
 namespace std {
   struct lconv;
 
-  char* setlocale(int category, const char* locale);
+  char* @\libentity{setlocale}@(int category, const char* locale);
   lconv* localeconv();
 }
 
diff --git a/source/macros.tex b/source/macros.tex
index 952301f..2e48012 100644
--- a/source/macros.tex
+++ b/source/macros.tex
@@ -541,3 +541,47 @@
 }
 \newcommand{\defncontext}[1]{\textlangle#1\textrangle}
 \newenvironment{defnote}{\addtocounter{termnote}{1}\noteintro{Note \thetermnote{} to entry}}{\noteoutro{note}\space}
+
+
+%%-------------------------------------------------
+%% cxxdraft-htmlgen macros
+
+\newcommand{\link}[2]{#1~(#2)}
+	% Link to section.
+	%   arg 0: link text
+	%   arg 1: section abbreviation
+
+\newcommand{\linkx}[3]{#1~(#3)}
+	% Link to indexed position.
+	%   arg 0: link text
+	%   arg 1: generalindex key
+	%   arg 2: section abbreviation
+
+\newcommand{\liblinkx}[3]{#1~(#3)}
+	% Link to indexed position.
+	%   arg 0: link text
+	%   arg 1: libraryindex key
+	%   arg 2: section abbreviation
+
+\newcommand{\deflinkx}[3]{#1~(#3)}
+	% Link to definition.
+	%   arg 0: link text
+	%   arg 1: definition key
+	%   arg 2: section abbreviation
+
+\newcommand{\deflink}[2]{\deflinkx{#1}{#1}{#2}}
+	% Convenience macro for when the link
+	% text is also the definition key.
+
+\newcommand{\indexedspan}[2]{#1#2}
+	%   arg 0: text
+	%   arg 1: indices (zero or more \index commands)
+
+\newcommand{\libentity}[1]{\indexedspan{\tcode{#1}}{\indexlibrary{\idxcode{#1}}}}
+	%   arg 0: entity name
+
+\newcommand{\libmember}[2]{\indexedspan{\tcode{#1}}{\indexlibrarymember{#1}{#2}}}
+	%   arg 0: member name
+	%   arg 1: parent name
+
+\newenvironment{indexed}[1]{}{}
diff --git a/source/numerics.tex b/source/numerics.tex
index ac34a14..b5c26f3 100644
--- a/source/numerics.tex
+++ b/source/numerics.tex
@@ -116,7 +116,7 @@ storage and use the copy constructor to initialize each element.
 If the distinction between initialization and assignment is important
 for a class, or if it fails to satisfy any of
 the other conditions listed above, the programmer should use
-\tcode{vector}\iref{vector} instead of
+\link{\tcode{vector}}{\ref{vector}} instead of
 \tcode{valarray}
 for that class.
 \end{note}
@@ -231,10 +231,10 @@ floating-point evaluation in constant expressions.
 \end{note}
 
 \pnum
-The floating-point environment has thread storage
-duration\iref{basic.stc.thread}. The initial state for a thread's floating-point
+The floating-point environment has \deflink{thread storage duration}{\ref{basic.stc.thread}}.
+The initial state for a thread's floating-point
 environment is the state of the floating-point environment of the thread that constructs
-the corresponding \tcode{thread} object\iref{thread.thread.class} at the time it
+the corresponding \link{\tcode{thread} object}{\ref{thread.thread.class}} at the time it
 constructed the object. \begin{note} That is, the child thread gets the floating-point
 state of the parent thread at the time of the child's creation. \end{note}
 
@@ -261,7 +261,7 @@ for any type other than \tcode{float}, \tcode{double}, or \tcode{long double} is
 The specializations
 \tcode{complex<float>},
 \tcode{complex<double>}, and
-\tcode{complex<long double>} are literal types\iref{basic.types}.
+\tcode{complex<long double>} are \deflinkx{literal types}{literal type}{\ref{basic.types}}.
 
 \pnum
 If the result of a function is not mathematically defined or not in
@@ -1412,7 +1412,7 @@ and to templates producing such types when instantiated.
 \pnum
 \indextext{\idxcode{result_type}!entity characterization based on}%
 Each of the entities specified via this subclause
-has an associated arithmetic type\iref{basic.fundamental}
+has an associated \deflinkx{arithmetic type}{type!arithmetic}{\ref{basic.fundamental}}
 identified as \tcode{result_type}.
 With \tcode{T} as the \tcode{result_type}
 thus associated with such an entity,
@@ -1488,21 +1488,21 @@ the effect of instantiating a template:
     is undefined unless the corresponding template argument
     is cv-unqualified and
     satisfies the requirements
-    of seed sequence\iref{rand.req.seedseq}.
+    of \link{seed sequence}{\ref{rand.req.seedseq}}.
   \item
     that has a template type parameter
     named \tcode{URBG}
     is undefined unless the corresponding template argument
     is cv-unqualified and
     satisfies the requirements
-    of uniform random bit generator\iref{rand.req.urng}.
+    of \link{uniform random bit generator}{\ref{rand.req.urng}}.
   \item
     that has a template type parameter
     named \tcode{Engine}
     is undefined unless the corresponding template argument
     is cv-unqualified and
     satisfies the requirements
-    of random number engine\iref{rand.req.eng}.
+    of \link{random number engine}{\ref{rand.req.eng}}.
   \item
     that has a template type parameter
     named \tcode{RealType}
@@ -1627,7 +1627,7 @@ In that Table and throughout this subclause:
 \indextext{\idxcode{result_type}!seed sequence requirement}%
 \tcode{S::result_type}
   & \tcode{T}
-  & \tcode{T} is an unsigned integer type\iref{basic.fundamental}
+  & \tcode{T} is an \deflink{unsigned integer type}{\ref{basic.fundamental}}
     of at least 32 bits.
   & compile-time
   \\ \rowsep
@@ -1754,7 +1754,7 @@ In that Table and throughout this subclause:
 \indextext{\idxcode{result_type}!uniform random bit generator requirement}%
 \tcode{G::result_type}
   & \tcode{T}
-  & \tcode{T} is an unsigned integer type\iref{basic.fundamental}.
+  & \tcode{T} is an \deflink{unsigned integer type}{\ref{basic.fundamental}}.
   & compile-time
   \\ \rowsep
 \tcode{g()}%
@@ -1840,7 +1840,7 @@ An engine's state may be established via
 \pnum
 A class \tcode{E}
 that satisfies the requirements
-of a uniform random bit generator\iref{rand.req.urng}
+of a \link{uniform random bit generator}{\ref{rand.req.urng}}
 also satisfies the requirements
 of a \techterm{random number engine}
 if the expressions shown
@@ -1861,7 +1861,7 @@ In that Table and throughout this subclause:
     \tcode{s} is a value of \tcode{T};
   \item
     \tcode{q} is an lvalue
-    satisfying the requirements of a seed sequence\iref{rand.req.seedseq};
+    satisfying the requirements of a \link{seed sequence}{\ref{rand.req.seedseq}};
   \item
     \tcode{z} is a value
     of type \tcode{unsigned long long};
@@ -2257,7 +2257,7 @@ In that Table and throughout this subclause,
   \item
     \tcode{g}, \tcode{g1}, and \tcode{g2} are lvalues of a type
     satisfying the requirements
-    of a uniform random bit generator\iref{rand.req.urng};
+    of a \link{uniform random bit generator}{\ref{rand.req.urng}};
   \item
     \tcode{os} is an lvalue of the type of some class template specialization
     \tcode{basic_ostream<charT,} \tcode{traits>};
@@ -2289,7 +2289,7 @@ according to \ref{strings} and \ref{input.output}.
 \indextext{\idxcode{result_type}!random number distribution requirement}%
 \tcode{D::result_type}
   & \tcode{T}
-  & \tcode{T} is an arithmetic type\iref{basic.fundamental}.
+  & \tcode{T} is an \deflinkx{arithmetic type}{type!arithmetic}{\ref{basic.fundamental}}.
   & compile-time
   \\ \rowsep
 \tcode{D::param_type}
@@ -2657,7 +2657,7 @@ namespace std {
 Each type instantiated
 from a class template specified in this subclause~\ref{rand.eng}
 satisfies the requirements
-of a random number engine\iref{rand.req.eng} type.
+of a \link{random number engine}{\ref{rand.req.eng}} type.
 
 \pnum
 Except where specified otherwise,
@@ -3191,7 +3191,7 @@ template<class Sseq> explicit subtract_with_carry_engine(Sseq& q);
 Each type instantiated
 from a class template specified in this subclause~\ref{rand.adapt}
 satisfies the requirements
-of a random number engine adaptor\iref{rand.req.adapt} type.
+of a \link{random number engine adaptor}{\ref{rand.req.adapt}} type.
 
 \pnum
 Except where specified otherwise,
@@ -4097,7 +4097,7 @@ template<class OutputIterator>
 \begin{itemdescr}
 \pnum\requires
   \tcode{OutputIterator} shall satisfy the requirements
-  of an output iterator\iref{output.iterators}.
+  of an \link{output iterator}{\ref{output.iterators}}.
   Moreover,
   the expression
   \tcode{*dest = rt}
@@ -4204,7 +4204,7 @@ template<class RealType, size_t bits, class URBG>
 Each type instantiated
 from a class template specified in this subclause~\ref{rand.dist}
 satisfies the requirements
-of a random number distribution\iref{rand.req.dist} type.
+of a \link{random number distribution}{\ref{rand.req.dist}} type.
 
 \pnum
 Descriptions are provided in this subclause~\ref{rand.dist}
@@ -5764,7 +5764,7 @@ template<class InputIterator>
 \pnum
 \requires
   \tcode{InputIterator} shall satisfy the requirements
-  of an input iterator\iref{input.iterators}.
+  of an \link{input iterator}{\ref{input.iterators}}.
   Moreover,
   \tcode{iterator_traits<InputIterator>::value_type}
   shall denote a type that is convertible to \tcode{double}.
@@ -5799,7 +5799,7 @@ template<class UnaryOperation>
 \begin{itemdescr}
 \pnum\requires
  Each instance of type \tcode{UnaryOperation}
- shall be a function object\iref{function.objects}
+ shall be a \deflink{function object}{\ref{function.objects}}
  whose return type shall be convertible to \tcode{double}.
  Moreover,
  \tcode{double} shall be convertible
@@ -5969,7 +5969,7 @@ template<class UnaryOperation>
 \begin{itemdescr}
 \pnum\requires
  Each instance of type \tcode{UnaryOperation}
- shall be a function object\iref{function.objects}
+ shall be a \link{function object}{\ref{function.objects}}
  whose return type shall be convertible to \tcode{double}.
  Moreover,
  \tcode{double} shall be convertible
@@ -6004,7 +6004,7 @@ template<class UnaryOperation>
 \begin{itemdescr}
 \pnum\requires
  Each instance of type \tcode{UnaryOperation}
- shall be a function object\iref{function.objects}
+ shall be a \deflink{function object}{\ref{function.objects}}
  whose return type shall be convertible to \tcode{double}.
  Moreover,
  \tcode{double} shall be convertible
@@ -6179,7 +6179,7 @@ template<class UnaryOperation>
 \begin{itemdescr}
 \pnum\requires
  Each instance of type \tcode{UnaryOperation}
- shall be a function object\iref{function.objects}
+ shall be a \link{function object}{\ref{function.objects}}
  whose return type shall be convertible to \tcode{double}.
  Moreover,
  \tcode{double} shall be convertible
@@ -6214,7 +6214,7 @@ template<class UnaryOperation>
 \begin{itemdescr}
 \pnum\requires
  Each instance of type \tcode{UnaryOperation}
- shall be a function object\iref{function.objects}
+ shall be a \link{function object}{\ref{function.objects}}
  whose return type shall be convertible to \tcode{double}.
  Moreover,
  \tcode{double} shall be convertible
@@ -6266,7 +6266,7 @@ vector<result_type> densities() const;
 \pnum
 \indexhdr{cstdlib}%
 \begin{note}
-The header \tcode{<cstdlib>}\iref{cstdlib.syn}
+The header \link{\tcode{<cstdlib>}}{\ref{cstdlib.syn}}
 declares the functions described in this subclause.
 \end{note}
 
@@ -6473,8 +6473,9 @@ additional functions and operators as follows:
 \begin{itemize}
 \item
 for every function taking a
-\tcode{const valarray<T>\&} other than \tcode{begin} and
-\tcode{end}\iref{valarray.range},
+\tcode{const valarray<T>\&} other than
+\liblinkx{\tcode{begin}}{begin!valarray}{\ref{valarray.range}} and
+\liblinkx{\tcode{end}}{end!valarray}{\ref{valarray.range}},
 identical functions taking the replacement types shall be added;
 \item
 for every function taking two
@@ -6499,7 +6500,7 @@ objects.
 
 \pnum
 These library functions are permitted to throw a
-\tcode{bad_alloc}\iref{bad.alloc} exception if there are not sufficient resources available
+\link{\tcode{bad_alloc}}{\ref{bad.alloc}} exception if there are not sufficient resources available
 to carry out the operation.
 Note that the exception is not mandated.
 
@@ -6653,7 +6654,7 @@ explicit valarray(size_t n);
 \pnum
 \effects
 Constructs a \tcode{valarray} that has length \tcode{n}.
-Each element of the array is value-initialized\iref{dcl.init}.
+Each element of the array is \deflinkx{value-initialized}{value-initialize}{\ref{dcl.init}}.
 \end{itemdescr}
 
 \indexlibrary{\idxcode{valarray}!constructor}%
@@ -6895,7 +6896,7 @@ and other techniques to generate efficient
 \pnum
 The reference returned by the subscript operator for an array shall
 be valid until the member function
-\tcode{resize(size_t, T)}\iref{valarray.members} is called for that array or until the lifetime of
+\liblinkx{\tcode{resize(size_t, T)}}{valarray!resize}{\ref{valarray.members}} is called for that array or until the lifetime of
 that array ends, whichever happens first.
 \end{itemdescr}
 
@@ -7302,7 +7303,8 @@ places, with zero fill.
 \pnum
 \begin{example}
 If the argument has the value -2,
-the first two elements of the result will be value-initialized\iref{dcl.init}; the third element of the result will be assigned the value
+the first two elements of the result will be
+\deflinkx{value-initialized}{value-initialize}{\ref{dcl.init}}; the third element of the result will be assigned the value
 of the first element of the argument; etc.
 \end{example}
 \end{itemdescr}
@@ -7337,10 +7339,11 @@ the value returned by applying the argument function to the
 corresponding element of \tcode{*this}.
 \end{itemdescr}
 
-\indexlibrarymember{resize}{valarray}%
+\begin{indexed}{\indexlibrarymember{resize}{valarray}}
 \begin{itemdecl}
 void resize(size_t sz, T c = T());
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -8356,40 +8359,42 @@ object refers.
 
 \pnum
 In the \tcode{begin} and \tcode{end} function templates that follow, \unspec{1}
-is a type that meets the requirements of a mutable random access
-iterator\iref{random.access.iterators}
-and of a contiguous iterator\iref{iterator.requirements.general}
+is a type that meets the requirements of a mutable \link{random access
+iterator}{\ref{random.access.iterators}}
+and of a \deflinkx{contiguous iterator}{contiguous iterators}{\ref{iterator.requirements.general}}
 whose \tcode{value_type} is the template
 parameter \tcode{T} and whose \tcode{reference} type is \tcode{T\&}. \unspec{2} is a
-type that meets the requirements of a constant random access
-iterator\iref{random.access.iterators}
-and of a contiguous iterator\iref{iterator.requirements.general}
+type that meets the requirements of a constant \link{random access
+iterator}{\ref{random.access.iterators}}
+and of a \deflinkx{contiguous iterator}{contiguous iterators}{\ref{iterator.requirements.general}}
 whose \tcode{value_type} is the template
 parameter \tcode{T} and whose \tcode{reference} type is \tcode{const T\&}.
 
 \pnum
 The iterators returned by \tcode{begin} and \tcode{end} for an array
 are guaranteed to be valid until the member function
-\tcode{resize(size_t, T)}\iref{valarray.members} is called for that
+\liblinkx{\tcode{resize(size_t, T)}}{valarray!resize}{\ref{valarray.members}} is called for that
 array or until the lifetime of that array ends, whichever happens
 first.
 
-\indexlibrary{\idxcode{begin}!\idxcode{valarray}}%
+\begin{indexed}{\indexlibrary{\idxcode{begin}!\idxcode{valarray}}}
 \begin{itemdecl}
 template<class T> @\unspec{1}@ begin(valarray<T>& v);
 template<class T> @\unspec{2}@ begin(const valarray<T>& v);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
 \returns An iterator referencing the first value in the array.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{end}!\idxcode{valarray}}%
+\begin{indexed}{\indexlibrary{\idxcode{end}!\idxcode{valarray}}}
 \begin{itemdecl}
 template<class T> @\unspec{1}@ end(valarray<T>& v);
 template<class T> @\unspec{2}@ end(const valarray<T>& v);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -8998,7 +9003,7 @@ template<class InputIterator, class OutputIterator, class BinaryOperation>
 \tcode{InputIterator}'s value type shall be constructible from the type of \tcode{*first}.
 The result of the expression \tcode{std::move(acc) + *i} or \tcode{binary_op(std::move(acc), *i)} shall be
 implicitly convertible to \tcode{InputIterator}'s value type. \tcode{acc}
-shall be writable\iref{iterator.requirements.general} to the \tcode{result} output iterator.
+shall be \deflink{writable}{\ref{iterator.requirements.general}} to the \tcode{result} output iterator.
 In the ranges
 \crange{first}{last}
 and
@@ -10320,11 +10325,11 @@ namespace std {
 The contents and meaning of the header \tcode{<cmath>}
 are the same as the C standard library header \tcode{<math.h>},
 with the addition of
-a three-dimensional hypotenuse function~(\ref{c.math.hypot3}) and
+a \link{three-dimensional hypotenuse}{\ref{c.math.hypot3}} function and
 the mathematical special functions described in \ref{sf.cmath}.
 \begin{note}
 Several functions have additional overloads in this document,
-but they have the same behavior as in the C standard library\iref{library.c}.
+but they have the same behavior as in the \link{C standard library}{\ref{library.c}}.
 \end{note}
 
 \pnum
@@ -10335,7 +10340,7 @@ there shall be additional overloads sufficient to ensure:
   \item If any argument of arithmetic type
     corresponding to a \tcode{double} parameter
     has type \tcode{long double},
-    then all arguments of arithmetic type\iref{basic.fundamental}
+    then all arguments of \deflinkx{arithmetic type}{type!arithmetic}{\ref{basic.fundamental}}
     corresponding to \tcode{double} parameters
     are effectively cast to \tcode{long double}.
   \item Otherwise, if any argument of arithmetic type
@@ -10362,8 +10367,8 @@ ISO C 7.12
 \indexhdr{cstdlib}%
 \indexhdr{cmath}%
 \begin{note}
-The headers \tcode{<cstdlib>}\iref{cstdlib.syn} and
-\tcode{<cmath>}\iref{cmath.syn}
+The headers \link{\tcode{<cstdlib>}}{\ref{cstdlib.syn}} and
+\link{\tcode{<cmath>}}{\ref{cmath.syn}}
 declare the functions described in this subclause.
 \end{note}
 
@@ -10390,7 +10395,7 @@ for the functions \tcode{abs}, \tcode{labs}, \tcode{llabs},
 If \tcode{abs()} is called with an argument of type \tcode{X}
 for which \tcode{is_unsigned_v<X>} is \tcode{true} and
 if \tcode{X} cannot be converted to \tcode{int}
-by integral promotion\iref{conv.prom}, the program is ill-formed.
+by \link{integral promotion}{\ref{conv.prom}}, the program is ill-formed.
 \begin{note}
 Arguments that can be promoted to \tcode{int} are permitted for compatibility with C.
 \end{note}
diff --git a/source/overloading.tex b/source/overloading.tex
index c097777..8e6bc3f 100644
--- a/source/overloading.tex
+++ b/source/overloading.tex
@@ -66,12 +66,12 @@ Certain function declarations cannot be overloaded:
 \item
 \indextext{return type!overloading and}%
 Function declarations that differ only in the return type,
-the exception specification\iref{except.spec}, or both
+the \link{exception specification}{\ref{except.spec}}, or both
 cannot be overloaded.
 \item
 \indextext{\idxcode{static}!overloading and}%
 Member function declarations with the same name and the same
-parameter-type-list\iref{dcl.fct} cannot be overloaded if any of them is a
+\deflink{parameter-type-list}{\ref{dcl.fct}} cannot be overloaded if any of them is a
 \tcode{static}
 member function declaration\iref{class.static}.
 Likewise, member function template declarations with the same name,
@@ -106,7 +106,7 @@ class X {
 \end{example}
 
 \item Member function declarations with the same name and the same
-parameter-type-list\iref{dcl.fct} as well as member function template
+\deflink{parameter-type-list}{\ref{dcl.fct}} as well as member function template
 declarations with the same name, the same parameter-type-list, and
 the same template parameter lists cannot be overloaded if any of them, but not
 all, have a \grammarterm{ref-qualifier}\iref{dcl.fct}. \begin{example}
@@ -420,7 +420,7 @@ contexts within the language:
 
 \begin{itemize}
 \item
-invocation of a function named in the function call syntax\iref{over.call.func};
+invocation of a function named in the \link{function call syntax}{\ref{over.call.func}};
 \item
 invocation of a function call operator, a pointer-to-function
 conversion function, a reference-to-pointer-to-function conversion
@@ -434,14 +434,14 @@ invocation of a constructor for default- or direct-initialization\iref{dcl.init}
 of a class object\iref{over.match.ctor};
 \item
 invocation of a user-defined conversion for
-copy-initialization\iref{dcl.init} of a class object\iref{over.match.copy};
+\deflink{copy-initialization}{\ref{dcl.init}} of a class object\iref{over.match.copy};
 \item
 invocation of a conversion function for initialization of an object of a
 non-class type from an expression of class type\iref{over.match.conv}; and
 \item
 invocation of a conversion function for conversion
 in which a reference\iref{dcl.init.ref}
-will be directly bound\iref{over.match.ref}.
+will be \link{directly bound}{\ref{over.match.ref}}.
 \end{itemize}
 
 Each of these contexts defines the set of candidate functions and
@@ -459,7 +459,7 @@ conditions) is selected to form a set of
 viable functions\iref{over.match.viable}.
 \item
 Then the best viable function is selected based on the
-implicit conversion sequences\iref{over.best.ics} needed to
+\link{implicit conversion sequences}{\ref{over.best.ics}} needed to
 match each argument to the corresponding parameter of each
 viable function.
 \end{itemize}
@@ -470,7 +470,7 @@ resolution succeeds and produces it as the result.
 Otherwise
 overload resolution fails and the invocation is ill-formed.
 When overload resolution succeeds,
-and the best viable function is not accessible\iref{class.access} in the context
+and the best viable function is not \link{accessible}{\ref{class.access}} in the context
 in which it is used,
 the program is ill-formed.
 
@@ -577,7 +577,7 @@ an rvalue can be bound to the parameter
 as long as in all other respects the argument can be
 converted to the type of the implicit object parameter.
 \begin{note} The fact that such an argument is an rvalue does not
-affect the ranking of implicit conversion sequences\iref{over.ics.rank}.
+affect the \link{ranking}{\ref{over.ics.rank}} of implicit conversion sequences.
 \end{note}
 \end{itemize}
 
@@ -637,7 +637,7 @@ contexts.
 \indextext{overloading!resolution!function call syntax|(}
 
 \pnum
-In a function call\iref{expr.call}
+In a \link{function call}{\ref{expr.call}}
 
 \begin{ncsimplebnf}
 postfix-expression \terminal{(} \opt{expression-list} \terminal{)}
@@ -736,8 +736,8 @@ or
 operator and has the more general form of a
 \grammarterm{primary-expression}.
 The name is looked up in the context of the function
-call following the normal rules for name lookup in function
-calls\iref{basic.lookup}.
+call following the normal rules for \link{name lookup}{\ref{basic.lookup}} in function
+calls.
 The function declarations found by that lookup constitute the
 set of candidate functions.
 Because of the rules for name lookup, the set of candidate functions
@@ -754,7 +754,7 @@ In case (2), the argument list is the
 in the call augmented by the addition of an implied object
 argument as in a qualified function call.
 If the keyword
-\tcode{this}\iref{class.this} is in scope and refers to
+\link{\tcode{this}}{\ref{class.this}} is in scope and refers to
 class
 \tcode{T},
 or a derived class of
@@ -1129,7 +1129,7 @@ using the selected rewritten \tcode{operator<=>} candidate.
 If a built-in candidate is selected by overload resolution, the
 operands of class type are converted to the types of the corresponding parameters
 of the selected operation function, except that the second standard conversion
-sequence of a user-defined conversion sequence\iref{over.ics.user} is not applied.
+sequence of a \link{user-defined conversion sequence}{\ref{over.ics.user}} is not applied.
 Then the operator is treated as the corresponding
 built-in operator and interpreted according to \ref{expr.compound}.
 \begin{example}
@@ -1209,10 +1209,10 @@ void B::f() {
 \indextext{overloading!resolution!initialization}
 
 \pnum
-When objects of class type are direct-initialized\iref{dcl.init},
+When objects of class type are \deflinkx{direct-initialized}{direct-initialization}{\ref{dcl.init}},
 copy-initialized from an expression of the same or a
 derived class type\iref{dcl.init},
-or default-initialized\iref{dcl.init},
+or \deflinkx{default-initialized}{default-initialization}{\ref{dcl.init}},
 overload resolution selects the constructor.
 For direct-initialization or default-initialization
 that is not in the context of copy-initialization, the
@@ -1220,7 +1220,7 @@ candidate functions are
 all the constructors of the class of the object being
 initialized.
 For copy-initialization, the candidate functions are all
-the converting constructors\iref{class.conv.ctor} of that
+the \deflinkx{converting constructors}{converting constructor}{\ref{class.conv.ctor}} of that
 class.
 The argument list is the
 \grammarterm{expression-list} or \grammarterm{assignment-expression}
@@ -1247,7 +1247,7 @@ the candidate functions are selected as follows:
 
 \begin{itemize}
 \item
-The converting constructors\iref{class.conv.ctor} of
+The \deflinkx{converting constructors}{converting constructor}{\ref{class.conv.ctor}} of
 \tcode{T}
 are candidate functions.
 \item
@@ -1315,11 +1315,11 @@ and yield type
 \tcode{T}
 or a type that can be converted to type
 \tcode{T}
-via a standard conversion sequence\iref{over.ics.scs}
+via a \link{standard conversion sequence}{\ref{over.ics.scs}}
 are candidate functions.
 For direct-initialization, those explicit conversion functions that are not
 hidden within \tcode{S} and yield type \tcode{T} or a type that can be converted
-to type \tcode{T} with a qualification conversion\iref{conv.qual} are also
+to type \tcode{T} with a \link{qualification conversion}{\ref{conv.qual}} are also
 candidate functions.
 Conversion functions that return a cv-qualified type
 are considered to yield the cv-unqualified version of that type
@@ -1365,15 +1365,15 @@ and yield type ``lvalue reference to \cvqual{cv2} \tcode{T2}''
 ``\cvqual{cv2} \tcode{T2}''
 or ``rvalue reference to \cvqual{cv2} \tcode{T2}'' (when initializing an
 rvalue reference or an lvalue reference to function),
-where ``\cvqual{cv1} \tcode{T}'' is reference-compatible\iref{dcl.init.ref}
+where ``\cvqual{cv1} \tcode{T}'' is \deflink{reference-compatible}{\ref{dcl.init.ref}}
 with ``\cvqual{cv2} \tcode{T2}'',
 are candidate functions. For direct-initialization, those explicit
 conversion functions that are not hidden within \tcode{S} and yield
 type ``lvalue reference to \cvqual{cv2} \tcode{T2}'' or ``\cvqual{cv2}
 \tcode{T2}'' or ``rvalue reference to \cvqual{cv2} \tcode{T2}'',
 respectively, where \tcode{T2} is the same type as \tcode{T} or can be
-converted to type \tcode{T} with a qualification
-conversion\iref{conv.qual}, are also candidate functions.
+converted to type \tcode{T} with a \link{qualification
+conversion}{\ref{conv.qual}}, are also candidate functions.
 
 \end{itemize}
 
@@ -1572,8 +1572,8 @@ A candidate function having more than
 parameters is viable
 only if the
 \textit{(m+1)}-st
-parameter has a default
-argument\iref{dcl.fct.default}.\footnote{According to~\ref{dcl.fct.default},
+parameter has a \link{default
+argument}{\ref{dcl.fct.default}}.\footnote{According to~\ref{dcl.fct.default},
 parameters following the
 \textit{(m+1)}-st
 parameter must also have default arguments.}
@@ -1593,7 +1593,7 @@ Third, for
 \tcode{F}
 to be a viable function, there shall exist for each
 argument an
-implicit conversion sequence\iref{over.best.ics} that
+\deflink{implicit conversion sequence}{\ref{over.best.ics}} that
 converts that argument to the corresponding parameter of
 \tcode{F}.
 If the parameter has reference type, the implicit conversion sequence
@@ -1681,8 +1681,8 @@ float x = a;        // ambiguous: both possibilities require conversions,
 \end{example}
 or, if not that,
 
-\item the context is an initialization by conversion function for direct
-reference binding\iref{over.match.ref} of a reference to function type, the
+\item the context is an initialization by conversion function for \link{direct
+reference binding}{\ref{over.match.ref}} of a reference to function type, the
 return type of \tcode{F1} is the same kind of reference (lvalue or rvalue)
 as the reference being initialized, and the return type of \tcode{F2} is not
 \begin{example}
@@ -1786,7 +1786,7 @@ or, if not that
 and \tcode{F2} is not, or, if not that,
 
 \item
-\tcode{F1} is the copy deduction candidate\iref{over.match.class.deduct}
+\tcode{F1} is the \deflink{copy deduction candidate}{\ref{over.match.class.deduct}}
 and \tcode{F2} is not, or, if not that,
 
 \item
@@ -1928,7 +1928,7 @@ are converted to match the corresponding properties of the
 parameter.
 Other properties, such as the lifetime, storage class,
 alignment, accessibility of the argument, whether the argument is a bit-field,
-and whether a function is deleted\iref{dcl.fct.def.delete}, are ignored.
+and whether a function is \link{deleted}{\ref{dcl.fct.def.delete}}, are ignored.
 So, although an implicit
 conversion sequence can be defined for a given argument-parameter
 pair, the conversion from the argument to the parameter might still
@@ -1941,11 +1941,11 @@ sequence is one of the following forms:
 
 \begin{itemize}
 \item
-a standard conversion sequence\iref{over.ics.scs},
+a \link{standard conversion sequence}{\ref{over.ics.scs}},
 \item
-a user-defined conversion sequence\iref{over.ics.user}, or
+a \link{user-defined conversion sequence}{\ref{over.ics.user}}, or
 \item
-an ellipsis conversion sequence\iref{over.ics.ellipsis}.
+an \link{ellipsis conversion sequence}{\ref{over.ics.ellipsis}}.
 \end{itemize}
 
 \pnum
@@ -2115,10 +2115,10 @@ Each conversion in \tref{over.conversions}
 also has an associated rank (Exact
 Match, Promotion, or Conversion).
 These are used
-to rank standard conversion sequences\iref{over.ics.rank}.
+to \link{rank standard conversion sequences}{\ref{over.ics.rank}}.
 The rank of a conversion sequence is determined by considering the
-rank of each conversion in the sequence and the rank of any reference
-binding\iref{over.ics.ref}.
+rank of each conversion in the sequence and the rank of any \link{reference
+binding}{\ref{over.ics.ref}}.
 If any of those has Conversion rank, the
 sequence has Conversion rank; otherwise, if any of those has Promotion rank,
 the sequence has Promotion rank; otherwise, the sequence has Exact
@@ -2150,12 +2150,12 @@ A user-defined conversion sequence consists of an initial
 standard conversion sequence followed by a user-defined
 conversion\iref{class.conv} followed by a second standard
 conversion sequence.
-If the user-defined conversion is specified
-by a constructor\iref{class.conv.ctor}, the initial standard
+If the user-defined conversion is \link{specified
+by a constructor}{\ref{class.conv.ctor}}, the initial standard
 conversion sequence converts the source type to the type required
 by the argument of the constructor.
 If the user-defined
-conversion is specified by a conversion function\iref{class.conv.fct}, the
+conversion is specified by a \link{conversion function}{\ref{class.conv.fct}}, the
 initial standard conversion sequence
 converts the source type to the implicit object parameter of the
 conversion function.
@@ -2193,7 +2193,7 @@ specification of the function called (see~\ref{expr.call}).
 \rSec4[over.ics.ref]{Reference binding}
 
 \pnum
-When a parameter of reference type binds directly\iref{dcl.init.ref} to an
+When a parameter of reference type \link{binds directly}{\ref{dcl.init.ref}} to an
 argument expression, the implicit conversion sequence is the identity conversion,
 unless the argument expression has a type that is a derived class of the parameter
 type, in which case the implicit conversion sequence is a derived-to-base
@@ -2210,7 +2210,7 @@ int i = f(b);       // calls \tcode{f(B\&)}, an exact match, rather than \tcode{
 \end{example}
 If the parameter binds directly to the result of
 applying a conversion function to the argument expression, the implicit
-conversion sequence is a user-defined conversion sequence\iref{over.ics.user},
+conversion sequence is a \link{user-defined conversion sequence}{\ref{over.ics.user}},
 with the second standard conversion sequence either an identity conversion or,
 if the conversion function returns an entity of a type that is a derived class
 of the parameter type, a derived-to-base conversion.
@@ -2265,7 +2265,7 @@ the prohibition on binding a non-\tcode{const} lvalue reference to a bit-field\i
 \rSec4[over.ics.list]{List-initialization sequence}
 
 \pnum
-When an argument is an initializer list\iref{dcl.init.list}, it is not an
+When an argument is an initializer list\iref{dcl.init.list}, it is not an % todo
 expression and special rules apply for converting it to a parameter type.
 
 \pnum
@@ -2411,8 +2411,8 @@ i({ {1,2}, {"bar"} });  // OK: \tcode{i(D(A(std::initializer_list<int>\{1,2\}),
 
 \pnum
 Otherwise, if the parameter has an aggregate type which can be initialized from
-the initializer list according to the rules for aggregate
-initialization\iref{dcl.init.aggr}, the implicit conversion sequence is a
+the initializer list according to the rules for \link{aggregate
+initialization}{\ref{dcl.init.aggr}}, the implicit conversion sequence is a
 user-defined conversion sequence with the second standard conversion
 sequence an identity conversion. \begin{example}
 \begin{codeblock}
@@ -2496,13 +2496,13 @@ When comparing the basic forms of implicit conversion sequences
 
 \begin{itemize}
 \item
-a standard conversion sequence\iref{over.ics.scs} is a better
+a \link{standard conversion sequence}{\ref{over.ics.scs}} is a better
 conversion sequence than a user-defined conversion sequence
 or an ellipsis conversion sequence, and
 \item
-a user-defined conversion sequence\iref{over.ics.user} is a
-better conversion sequence than an ellipsis conversion
-sequence\iref{over.ics.ellipsis}.
+a \link{user-defined conversion sequence}{\ref{over.ics.user}} is a
+better conversion sequence than an \link{ellipsis conversion
+sequence}{\ref{over.ics.ellipsis}}.
 \end{itemize}
 
 \pnum
@@ -2569,7 +2569,7 @@ have the same rank and are distinguishable by the rules
 in the paragraph below,
 or, if not that,
 
-\item \tcode{S1} and \tcode{S2} are reference bindings\iref{dcl.init.ref} and
+\item \tcode{S1} and \tcode{S2} are \link{reference}{\ref{dcl.init.ref}} bindings and
 neither refers to an implicit object parameter of a non-static member function
 declared without a \grammarterm{ref-qualifier},
 and \tcode{S1} binds an rvalue reference to an
@@ -2603,7 +2603,7 @@ a.p();                          // calls \tcode{A::p()\&}
 or, if not that,
 
 \item
-\tcode{S1} and \tcode{S2} are reference bindings\iref{dcl.init.ref} and
+\tcode{S1} and \tcode{S2} are \link{reference}{\ref{dcl.init.ref}} bindings and
 \tcode{S1} binds an lvalue reference to a function lvalue and \tcode{S2} binds
 an rvalue reference to a function lvalue
 \begin{example}
@@ -2620,10 +2620,10 @@ or, if not that,
 \tcode{S1}
 and
 \tcode{S2}
-differ only in their qualification conversion and yield similar types
+differ only in their qualification conversion and yield \deflink{similar types}{\ref{conv.qual}}
 \tcode{T1}
 and
-\tcode{T2}\iref{conv.qual}, respectively, and the cv-qualification signature of type
+\tcode{T2}, respectively, and the cv-qualification signature of type
 \tcode{T1}
 is a proper subset of the cv-qualification signature of type
 \tcode{T2}
@@ -2641,7 +2641,7 @@ or, if not that,
 \tcode{S1}
 and
 \tcode{S2}
-are reference bindings\iref{dcl.init.ref}, and the types to which the references
+are \link{reference}{\ref{dcl.init.ref}} bindings, and the types to which the references
 refer are the same type except for top-level cv-qualifiers, and the type to
 which the reference initialized by
 \tcode{S2}
@@ -2866,7 +2866,7 @@ A function template name is considered to name a set of overloaded functions
 in such contexts.
 A function with type \tcode{F} is selected for the function type \tcode{FT}
 of the target type required in the context if \tcode{F}
-(after possibly applying the function pointer conversion\iref{conv.fctptr})
+(after possibly applying the \link{function pointer conversion}{\ref{conv.fctptr}})
 is identical to \tcode{FT}.
 \begin{note}
 That is, the class of which the function is a member is ignored when matching a
@@ -2879,11 +2879,11 @@ The target can be
 an object or reference being initialized~(\ref{dcl.init}, \ref{dcl.init.ref},
 \ref{dcl.init.list}),
 \item
-the left side of an assignment\iref{expr.ass},
+the left side of an \link{assignment}{\ref{expr.ass}},
 \item
 a parameter of a function\iref{expr.call},
 \item
-a parameter of a user-defined operator\iref{over.oper},
+a parameter of a \link{user-defined operator}{\ref{over.oper}},
 \item
 the return value of a function, operator function, or conversion\iref{stmt.return},
 \item
@@ -3078,8 +3078,8 @@ The operators
 and
 \tcode{[]}
 are formed from more than one token.
-The latter two operators are function call\iref{expr.call}
-and subscripting\iref{expr.sub}.
+The latter two operators are \link{function call}{\ref{expr.call}}
+and \link{subscripting}{\ref{expr.sub}}.
 \end{note}
 \indextext{operator!subscripting}%
 \indextext{operator!function call}%
@@ -3168,7 +3168,7 @@ this is not required by operator functions.
 
 \pnum
 \indextext{argument!overloaded operator and default}%
-An operator function cannot have default arguments\iref{dcl.fct.default},
+An operator function cannot have \link{default arguments}{\ref{dcl.fct.default}},
 except where explicitly stated below.
 Operator
 functions cannot have more or fewer parameters than the
@@ -3482,8 +3482,8 @@ such a literal suffix identifier is ill-formed, no diagnostic required.
 \pnum
 A declaration whose \grammarterm{declarator-id} is a
 \grammarterm{literal-operator-id} shall be a declaration of a namespace-scope
-function or function template (it could be a friend
-function\iref{class.friend}), an explicit instantiation or specialization of a
+function or function template (it could be a \link{friend
+function}{\ref{class.friend}}), an explicit instantiation or specialization of a
 function template, or a \grammarterm{using-declaration}\iref{namespace.udecl}.
 A function declared with a \grammarterm{literal-operator-id} is a \defnx{literal
 operator}{literal!operator}. A function template declared with a \grammarterm{literal-operator-id}
@@ -3507,7 +3507,7 @@ const char16_t*, std::size_t
 const char32_t*, std::size_t
 \end{codeblock}
 
-If a parameter has a default argument\iref{dcl.fct.default}, the program is
+If a parameter has a \link{default argument}{\ref{dcl.fct.default}}, the program is
 ill-formed.
 
 \pnum
@@ -3518,15 +3518,15 @@ whose type is \tcode{const char*}.
 The declaration of a literal operator template shall have an empty
 \grammarterm{parameter-declaration-clause} and its
 \grammarterm{template-parameter-list} shall have a single
-\grammarterm{template-parameter} that is a non-type template parameter
-pack\iref{temp.variadic} with element type \tcode{char}.
+\grammarterm{template-parameter} that is a non-type template
+\deflink{parameter pack}{\ref{temp.variadic}} with element type \tcode{char}.
 
 \pnum
 Literal operators and literal operator templates shall not have C language linkage.
 
 \pnum
 \begin{note} Literal operators and literal operator templates are usually invoked
-implicitly through user-defined literals\iref{lex.ext}. However, except for
+implicitly through \link{user-defined literals}{\ref{lex.ext}}. However, except for
 the constraints described above, they are ordinary namespace-scope functions and
 function templates. In particular, they are looked up like ordinary functions
 and function templates and they follow the same overload resolution rules. Also,
@@ -3590,7 +3590,7 @@ is hidden and is not included in the set of candidate functions.
 In this subclause, the term
 \defn{promoted integral type}
 is used to refer to those integral types which are preserved by
-integral promotion\iref{conv.prom} (including e.g.
+\link{integral promotion}{\ref{conv.prom}} (including e.g.
 \tcode{int}
 and
 \tcode{long}
diff --git a/source/preprocessor.tex b/source/preprocessor.tex
index 2edf938..c4868c6 100644
--- a/source/preprocessor.tex
+++ b/source/preprocessor.tex
@@ -267,7 +267,7 @@ in any context not mentioned in this subclause.
 Each preprocessing token that remains (in the list of preprocessing tokens that
 will become the controlling expression)
 after all macro replacements have occurred
-shall be in the lexical form of a token\iref{lex.token}.
+shall be in the lexical form of a \link{token}{\ref{lex.token}}.
 
 \pnum
 Preprocessing directives of the forms
@@ -311,8 +311,8 @@ are replaced with the \grammarterm{pp-number}
 \tcode{0},
 and then each preprocessing token is converted into a token.
 \begin{note}
-An alternative
-token\iref{lex.digraph} is not an identifier,
+An \link{alternative
+token}{\ref{lex.digraph}} is not an identifier,
 even when its spelling consists entirely of letters and underscores.
 Therefore it is not subject to this replacement.
 \end{note}
@@ -330,8 +330,8 @@ Thus on an
 implementation where \tcode{std::numeric_limits<int>::max()} is \tcode{0x7FFF}
 and \tcode{std::numeric_limits<unsigned int>::max()} is \tcode{0xFFFF},
 the integer literal \tcode{0x8000} is signed and positive within a \tcode{\#if}
-expression even though it is unsigned in translation phase
-7\iref{lex.phases}.
+expression even though it is unsigned in \link{translation phase
+7}{\ref{lex.phases}}.
 \end{note}
 This includes interpreting character literals, which may involve
 converting escape sequences into execution character set members.
@@ -673,7 +673,7 @@ not sequences possibly containing identifier-like subsequences
 (see \ref{lex.phases}, translation phases),
 they are never scanned for macro names or parameters.}
 to be replaced by the replacement list of preprocessing tokens
-that constitute the remainder of the directive.\footnote{An alternative token\iref{lex.digraph} is not an identifier,
+that constitute the remainder of the directive.\footnote{An \link{alternative token}{\ref{lex.digraph}} is not an identifier,
 even when its spelling consists entirely of letters and underscores.
 Therefore it is not possible to define a macro
 whose name is the same as that of an alternative token.}
@@ -1186,7 +1186,7 @@ The
 \defn{line number}
 of the current source line is one greater than
 the number of new-line characters read or introduced
-in translation phase 1\iref{lex.phases}
+in \link{translation phase 1}{\ref{lex.phases}}
 while processing the source file to the current token.
 
 \pnum
@@ -1328,8 +1328,8 @@ The presumed line number (within the current source file) of the current source
 The integer literal \tcode{1} if the implementation is a hosted
 implementation or the integer literal \tcode{0} if it is not.
 
-\indextext{__STDCPP_DEFAULT_NEW_ALIGNMENT__@\mname{STDCPP_DEFAULT_NEW_ALIGNMENT}}%
-\item \mname{STDCPP_DEFAULT_NEW_ALIGNMENT}\\
+\item \indexedspan{\mname{STDCPP_DEFAULT_NEW_ALIGNMENT}}{
+ \indextext{__STDCPP_DEFAULT_NEW_ALIGNMENT__@\mname{STDCPP_DEFAULT_NEW_ALIGNMENT}}}\\
 An integer literal of type \tcode{std::size_t}
 whose value is the alignment guaranteed
 by a call to \tcode{operator new(std::size_t)}
@@ -1384,12 +1384,12 @@ all amendments and technical corrigenda as of the specified year and month.
 \indextext{__STDCPP_STRICT_POINTER_SAFETY__@\mname{STDCPP_STRICT_POINTER_SAFETY}}%
 \item \mname{STDCPP_STRICT_POINTER_SAFETY}\\
 Defined, and has the value integer literal 1, if and only if the implementation
-has strict pointer safety\iref{basic.stc.dynamic.safety}.
+has \deflink{strict pointer safety}{\ref{basic.stc.dynamic.safety}}.
 
 \indextext{__STDCPP_THREADS__@\mname{STDCPP_THREADS}}%
 \item \mname{STDCPP_THREADS}\\
 Defined, and has the value integer literal 1, if and only if a program
-can have more than one thread of execution\iref{intro.multithread}.
+can have more than one \link{thread of execution}{\ref{intro.multithread}}.
 
 \end{description}
 
diff --git a/source/regex.tex b/source/regex.tex
index 148733d..7b69009 100644
--- a/source/regex.tex
+++ b/source/regex.tex
@@ -12,7 +12,7 @@ searching.
 
 \pnum
 The following subclauses describe a basic regular expression class template and its
-traits that can handle char-like\iref{strings.general} template arguments,
+traits that can handle \deflinkx{char-like}{char-like types}{\ref{strings.general}} template arguments,
 two specializations of this class template that handle sequences of \tcode{char} and \tcode{wchar_t},
 a class template that holds the
 result of a regular expression match, a series of algorithms that allow a character
@@ -113,8 +113,8 @@ defining types and functions for the character container
 type \tcode{charT}; \tcode{u} is an object of
 type \tcode{X}; \tcode{v} is an object of type \tcode{const
 X}; \tcode{p} is a value of type \tcode{const charT*}; \tcode{I1}
-and \tcode{I2} are input iterators\iref{input.iterators};
-\tcode{F1} and \tcode{F2} are forward iterators\iref{forward.iterators};
+and \tcode{I2} are \link{input iterators}{\ref{input.iterators}};
+\tcode{F1} and \tcode{F2} are \link{forward iterators}{\ref{forward.iterators}};
 \tcode{c} is a value of type \tcode{const charT};
 \tcode{s} is an object of type \tcode{X::string_type};
 \tcode{cs} is an object of type \tcode{const X::string_type};
@@ -148,7 +148,7 @@ and \tcode{loc} is an object of type \tcode{X::locale_type}.
   & A type that represents the locale used by the traits class. \indextext{locale}
  \\ \rowsep
 \tcode{X::char_class_type}
- & A bitmask type\iref{bitmask.types}.
+ & A \link{bitmask type}{\ref{bitmask.types}}.
  & A bitmask type representing a particular character classification.
    \indextext{regular expression traits!\idxcode{char_class_type}}%
    \indextext{\idxcode{char_class_type}!regular expression traits}%
@@ -788,7 +788,7 @@ namespace std::regex_constants {
 \pnum
 \indexlibrary{\idxcode{match_flag_type}}%
 The type \tcode{match_flag_type} is an
-\impldef{type of \tcode{regex_constants::match_flag_type}} bitmask type\iref{bitmask.types}.
+\impldef{type of \tcode{regex_constants::match_flag_type}} \link{bitmask type}{\ref{bitmask.types}}.
 The constants of that type, except for \tcode{match_default} and
 \tcode{format_default}, are bitmask elements. The \tcode{match_default} and
 \tcode{format_default} constants are empty bitmasks.
@@ -850,7 +850,7 @@ The expression shall only match a sub-sequence that begins at
 \tcode{match_prev_avail} &
 \verb!--first! is a valid iterator position. When this flag is
 set the flags \tcode{match_not_bol} and \tcode{match_not_bow} shall be ignored by the
-regular expression algorithms\iref{re.alg} and iterators\iref{re.iter}.
+\link{regular expression algorithms}{\ref{re.alg}} and \link{iterators}{\ref{re.iter}}.
 \\ \rowsep
 %
 \indexlibrary{\idxcode{format_default}}%
@@ -911,7 +911,7 @@ namespace std::regex_constants {
 \indexlibrary{\idxcode{error_type}}%
 \indexlibrary{\idxcode{regex_constants}!\idxcode{error_type}}%
 The type \tcode{error_type} is an \impldef{type of
-\tcode{regex_constants::error_type}} enumerated type\iref{enumerated.types}.
+\tcode{regex_constants::error_type}} \link{enumerated type}{\ref{enumerated.types}}.
 Values of type \tcode{error_type} represent the error
 conditions described in \tref{re:errortype}:
 
@@ -1695,8 +1695,8 @@ template<class InputIterator>
 
 \begin{itemdescr}
 \pnum
-\requires  The type \tcode{InputIterator} shall satisfy the requirements for an Input
-Iterator\iref{input.iterators}.
+\requires  The type \tcode{InputIterator} shall satisfy the requirements for an
+\link{Input Iterator}{\ref{input.iterators}}.
 
 \pnum
 \returns \tcode{assign(string_type(first, last), f)}.
@@ -2792,7 +2792,7 @@ template<class OutputIter>
 \begin{itemdescr}
 \pnum
 \requires \tcode{ready() == true} and \tcode{OutputIter} shall satisfy the requirements for an
-Output Iterator\iref{output.iterators}.
+\link{Output Iterator}{\ref{output.iterators}}.
 
 \pnum
 \effects Copies the character sequence \range{fmt_first}{fmt_last} to
diff --git a/source/special.tex b/source/special.tex
index 5e34def..fd79438 100644
--- a/source/special.tex
+++ b/source/special.tex
@@ -15,10 +15,12 @@
 \indextext{constructor!move}%
 \indextext{assignment operator!copy}%
 \indextext{assignment operator!move}%
-The default constructor\iref{class.ctor},
-copy constructor and copy assignment operator\iref{class.copy},
-move constructor and move assignment operator\iref{class.copy},
-and destructor\iref{class.dtor} are
+The \deflinkx{default constructor}{constructor!default}{\ref{class.ctor}},
+\deflinkx{copy constructor}{constructor!copy}{\ref{class.copy}} and
+\deflinkx{copy assignment operator}{assignment operator!copy}{\ref{class.copy}},
+\deflinkx{move constructor}{constructor!move}{\ref{class.copy}} and
+\deflinkx{move assignment operator}{assignment operator!move}{\ref{class.copy}},
+and \link{destructor}{\ref{class.dtor}} are
 \term{special member functions}.
 \begin{note} The implementation will implicitly declare these member functions for some class
 types when the program does not explicitly declare them.
@@ -57,7 +59,7 @@ Often such special member functions are called implicitly.
 
 \pnum
 \indextext{access control!member function and}%
-Special member functions obey the usual access rules\iref{class.access}.
+Special member functions obey the usual \link{access rules}{\ref{class.access}}.
 \begin{example}
 Declaring a constructor protected
 ensures that only derived classes and friends can create objects using it.
@@ -65,7 +67,7 @@ ensures that only derived classes and friends can create objects using it.
 
 \pnum
 For a class, its non-static data members, its non-virtual direct base classes,
-and, if the class is not abstract\iref{class.abstract}, its virtual base
+and, if the class is not \deflinkx{abstract}{class!abstract}{\ref{class.abstract}}, its virtual base
 classes are called its \term{potentially constructed subobjects}.
 
 \rSec1[class.ctor]{Constructors}%
@@ -75,7 +77,7 @@ classes are called its \term{potentially constructed subobjects}.
 \pnum
 Constructors do not have names.
 In a declaration of a constructor, the \grammarterm{declarator} is a
-function declarator\iref{dcl.fct} of the form
+\link{function declarator}{\ref{dcl.fct}} of the form
 
 \begin{ncbnf}
 ptr-declarator \terminal{(} parameter-declaration-clause \terminal{)} \opt{noexcept-specifier} \opt{attribute-specifier-seq}
@@ -118,8 +120,8 @@ S::S() { }          // defines the constructor
 \pnum
 A constructor is used to initialize objects of its class type.
 Because constructors do not have names, they are never found during
-name lookup; however an explicit type conversion using the functional
-notation\iref{expr.type.conv} will cause a constructor to be called to
+name lookup; however an \link{explicit type conversion using the functional
+notation}{\ref{expr.type.conv}} will cause a constructor to be called to
 initialize an object.
 \begin{note}
 For initialization of objects of class type see~\ref{class.init}.
@@ -141,7 +143,7 @@ and
 \tcode{volatile}
 semantics\iref{dcl.type.cv} are not applied on an object under construction.
 They come into effect when the constructor for the
-most derived object\iref{intro.object} ends.
+\deflink{most derived object}{\ref{intro.object}} ends.
 
 \pnum
 \indextext{constructor!inheritance of}%
@@ -178,7 +180,7 @@ with a non-trivial default constructor and
 no variant member of the anonymous union containing \tcode{M}
 has a default member initializer,
 
-\item any non-static data member with no default member initializer\iref{class.mem} is
+\item any non-static data member with no \deflink{default member initializer}{\ref{class.mem}} is
 of reference type,
 
 \item any non-variant non-static data member of const-qualified type (or array
@@ -193,7 +195,7 @@ of const-qualified type (or array thereof),
 \item any potentially constructed subobject, except for a non-static data member
 with a \grammarterm{brace-or-equal-initializer}, has
 class type \tcode{M} (or array thereof) and either \tcode{M}
-has no default constructor or overload resolution\iref{over.match}
+has no default constructor or \link{overload resolution}{\ref{over.match}}
 as applied to find \tcode{M}'s corresponding
 constructor results in an ambiguity or in a function that is deleted or
 inaccessible from the defaulted default constructor, or
@@ -210,11 +212,11 @@ if it is not user-provided and if:
 
 \begin{itemize}
 \item
-its class has no virtual functions\iref{class.virtual} and no virtual base
-classes\iref{class.mi}, and
+its class has no \link{virtual functions}{\ref{class.virtual}} and no \deflinkx{virtual base
+classes}{base class!virtual}{\ref{class.mi}}, and
 
 \item no non-static data member of its class has
-a default member initializer\iref{class.mem}, and
+a \deflink{default member initializer}{\ref{class.mem}}, and
 
 \item
 all the direct base classes of its class have trivial default constructors, and
@@ -244,7 +246,7 @@ constructor for that class with no
 If that user-written default constructor would be ill-formed,
 the program is ill-formed.
 If that user-written default constructor would satisfy the requirements
-of a constexpr constructor\iref{dcl.constexpr}, the implicitly-defined
+of a \deflinkx{constexpr constructor}{specifier!constexpr!constructor}{\ref{dcl.constexpr}}, the implicitly-defined
 default constructor is \tcode{constexpr}.
 Before the defaulted default constructor for a class is
 implicitly defined,
@@ -261,16 +263,16 @@ implicit exception specification, see~\ref{dcl.fct.def}.
 \indextext{constructor!implicitly called}%
 Default constructors are called implicitly to create class objects of static, thread,
 or automatic storage duration~(\ref{basic.stc.static}, \ref{basic.stc.thread}, \ref{basic.stc.auto}) defined
-without an initializer\iref{dcl.init},
-are called to create class objects of dynamic storage duration\iref{basic.stc.dynamic} created by a
+without an \link{initializer}{\ref{dcl.init}},
+are called to create class objects of \link{dynamic storage duration}{\ref{basic.stc.dynamic}} created by a
 \grammarterm{new-expression}
 in which the
 \grammarterm{new-initializer}
 is omitted\iref{expr.new}, or
-are called when the explicit type conversion syntax\iref{expr.type.conv} is
+are called when the \link{explicit type conversion}{\ref{expr.type.conv}} syntax is
 used.
 A program is ill-formed if the default constructor for an object
-is implicitly used and the constructor is not accessible\iref{class.access}.
+is implicitly used and the constructor is not \link{accessible}{\ref{class.access}}.
 
 \pnum
 \begin{note}
@@ -292,7 +294,7 @@ The address of a constructor shall not be taken.
 \pnum
 \indextext{object!unnamed}%
 \indextext{constructor!explicit call}%
-A functional notation type conversion\iref{expr.type.conv} can be used
+A \link{functional notation type conversion}{\ref{expr.type.conv}} can be used
 to create new objects of its type.
 \begin{note}
 The syntax looks like an explicit call of the constructor.
@@ -367,12 +369,12 @@ D d = D(1);                     // value of \tcode{d.b} is unspecified
 Temporary objects are created
 \begin{itemize}
 \item
-when a prvalue is materialized so that it can be used as a glvalue\iref{conv.rval},
+when a prvalue is materialized so that it can be used as a \deflink{glvalue}{\ref{conv.rval}},
 \item
 when needed by the implementation to pass or return an object of trivially-copyable type (see below),
 and
 \item
-when throwing an exception\iref{except.throw}.
+when \link{throwing an exception}{\ref{except.throw}}.
 \begin{note}
 The lifetime of exception objects is described in~\ref{except.throw}.
 \end{note}
@@ -382,7 +384,7 @@ unevaluated\iref{expr.prop},
 all the semantic restrictions shall be respected as if the temporary object
 had been created and later destroyed.
 \begin{note}
-This includes accessibility\iref{class.access} and whether it is deleted,
+This includes \link{accessibility}{\ref{class.access}} and whether it is deleted,
 for the constructor selected and for the destructor. However, in the special
 case of the operand of a
 \grammarterm{decltype-specifier}\iref{expr.call}, no temporary is introduced,
@@ -402,13 +404,13 @@ when binding a reference to a prvalue~(\ref{dcl.init.ref}, \ref{expr.type.conv},
 \item
 when performing member access on a class prvalue~(\ref{expr.ref}, \ref{expr.mptr.oper}),
 \item
-when performing an array-to-pointer conversion or subscripting on an array prvalue~(\ref{conv.array}, \ref{expr.sub}),
+when performing an \link{array-to-pointer conversion}{\ref{conv.array}} or \link{subscripting}{\ref{expr.sub}} on an array prvalue,
 \item
 when initializing an object of type \tcode{std::initializer_list<T>} from a \grammarterm{braced-init-list}\iref{dcl.init.list},
 \item
 for certain unevaluated operands~(\ref{expr.typeid}, \ref{expr.sizeof}), and
 \item
-when a prvalue appears as a discarded-value expression\iref{expr.prop}.
+when a prvalue appears as a \deflink{discarded-value expression}{\ref{expr.prop}}.
 \end{itemize}
 \end{note}
 \begin{example} Consider the following code:
@@ -487,7 +489,7 @@ Similarly, the destructor shall be called for a temporary with a non-trivial
 destructor\iref{class.dtor}.
 Temporary objects are destroyed as the last step
 in evaluating
-the full-expression\iref{intro.execution}
+the \deflink{full-expression}{\ref{intro.execution}}
 that (lexically) contains the point where
 they were created.
 This is true even if that evaluation ends in throwing an exception.
@@ -596,10 +598,10 @@ const S& s = S{1};             // both \tcode{S} and \tcode{int} temporaries hav
 
 The exceptions to this lifetime rule are:
 \begin{itemize}
-\item A temporary object bound to a reference parameter in a function call\iref{expr.call}
+\item A temporary object bound to a reference parameter in a \link{function call}{\ref{expr.call}}
 persists until the completion of the full-expression containing the call.
 
-\item The lifetime of a temporary bound to the returned value in a function \tcode{return} statement\iref{stmt.return} is not extended; the temporary is destroyed at the end of the full-expression in the \tcode{return} statement.
+\item The lifetime of a temporary bound to the returned value in a function \link{\tcode{return} statement}{\ref{stmt.return}} is not extended; the temporary is destroyed at the end of the full-expression in the \tcode{return} statement.
 
 \item A temporary bound to a reference in a \grammarterm{new-initializer}\iref{expr.new} persists until the completion of the full-expression containing the \grammarterm{new-initializer}.
 \begin{note} This may introduce a dangling reference. \end{note}
@@ -621,8 +623,10 @@ at the same point,
 these temporaries are destroyed at that point in the reverse order of the
 completion of their construction.
 In addition, the destruction of temporaries bound to references shall
-take into account the ordering of destruction of objects with static, thread, or
-automatic storage duration~(\ref{basic.stc.static}, \ref{basic.stc.thread}, \ref{basic.stc.auto});
+take into account the ordering of destruction of objects with
+\deflinkx{static}{static storage duration}{\ref{basic.stc.static}},
+\deflinkx{thread}{thread storage duration}{\ref{basic.stc.thread}}, or
+\deflink{automatic storage duration}{\ref{basic.stc.auto}};
 that is, if
 \tcode{obj1}
 is an object with the same storage duration as the temporary and
@@ -731,12 +735,12 @@ by conversion functions.
 These conversions are called
 \defnx{user-defined conversions}{conversion!user-defined}
 and are used for implicit type conversions\iref{conv},
-for initialization\iref{dcl.init},
+for \link{initialization}{\ref{dcl.init}},
 and for explicit type conversions~(\ref{expr.cast}, \ref{expr.static.cast}).
 
 \pnum
 User-defined conversions are applied only where they are unambiguous~(\ref{class.member.lookup}, \ref{class.conv.fct}).
-Conversions obey the access control rules\iref{class.access}.
+Conversions obey the \link{access control rules}{\ref{class.access}}.
 Access control is applied after ambiguity resolution\iref{basic.lookup}.
 
 \pnum
@@ -770,7 +774,7 @@ User-defined conversions are used implicitly only if they are unambiguous.
 \indextext{name hiding!user-defined conversion and}%
 A conversion function in a derived class does not hide a conversion function
 in a base class unless the two functions convert to the same type.
-Function overload resolution\iref{over.match.best} selects the best
+Function \link{overload resolution}{\ref{over.match.best}} selects the best
 conversion function to perform the conversion.
 \begin{example}
 \begin{codeblock}
@@ -824,12 +828,12 @@ void f(X arg) {
 \pnum
 \begin{note}
 An explicit constructor constructs objects just like non-explicit
-constructors, but does so only where the direct-initialization syntax\iref{dcl.init}
+constructors, but does so only where the \deflink{direct-initialization}{\ref{dcl.init}} syntax
 or where casts~(\ref{expr.static.cast}, \ref{expr.cast}) are explicitly
 used; see also~\ref{over.match.copy}.
 A default constructor may be an explicit constructor; such a constructor
 will be used to perform default-initialization
-or value-initialization\iref{dcl.init}.
+or \deflinkx{value-initialization}{value-initialize}{\ref{dcl.init}}.
 \begin{example}
 \begin{codeblock}
 struct Z {
@@ -900,7 +904,7 @@ A conversion function is never used to convert a (possibly cv-qualified) object
 to the (possibly cv-qualified) same object type (or a reference to it),
 to a (possibly cv-qualified) base class of that type (or a reference to it),
 or to (possibly cv-qualified) void.\footnote{These conversions are considered
-as standard conversions for the purposes of overload resolution~(\ref{over.best.ics}, \ref{over.ics.ref}) and therefore initialization\iref{dcl.init} and explicit casts\iref{expr.static.cast}. A conversion to \tcode{void} does not invoke any conversion function\iref{expr.static.cast}.
+as standard conversions for the purposes of overload resolution~(\ref{over.best.ics}, \ref{over.ics.ref}) and therefore initialization\iref{dcl.init} and \link{explicit casts}{\ref{expr.static.cast}}. A conversion to \tcode{void} does not invoke any conversion function\iref{expr.static.cast}.
 Even though never directly called to perform a conversion,
 such conversion functions can be declared and can potentially
 be reached through a call to a virtual conversion function in a base class.}
@@ -922,7 +926,7 @@ In all three cases the value assigned will be converted by
 \end{example}
 
 \pnum
-A conversion function may be explicit\iref{dcl.fct.spec}, in which case it is only considered as a user-defined conversion for direct-initialization\iref{dcl.init}. Otherwise, user-defined conversions are not restricted to use in assignments and initializations.
+A conversion function may be \linkx{explicit}{specifier!explicit}{\ref{dcl.fct.spec}}, in which case it is only considered as a user-defined conversion for \deflink{direct-initialization}{\ref{dcl.init}}. Otherwise, user-defined conversions are not restricted to use in assignments and initializations.
 \begin{example}
 \begin{codeblock}
 class Y { };
@@ -985,7 +989,7 @@ Conversion functions can be virtual.
 \pnum
 \indextext{conversion!deduced return type of user-defined}%
 A conversion function template shall not have a
-deduced return type\iref{dcl.spec.auto}.
+\link{deduced return type}{\ref{dcl.spec.auto}}.
 \begin{example}
 \begin{codeblock}
 struct S {
@@ -1002,7 +1006,7 @@ struct S {
 
 \pnum
 In a declaration of a destructor, the \grammarterm{declarator} is a
-function declarator\iref{dcl.fct} of the form
+\link{function declarator}{\ref{dcl.fct}} of the form
 
 \begin{ncbnf}
 ptr-declarator \terminal{(} parameter-declaration-clause \terminal{)} \opt{noexcept-specifier} \opt{attribute-specifier-seq}
@@ -1053,7 +1057,7 @@ and
 \tcode{volatile}
 semantics\iref{dcl.type.cv} are not applied on an object under destruction.
 They stop being in effect when the destructor for the
-most derived object\iref{intro.object} starts.
+\deflink{most derived object}{\ref{intro.object}} starts.
 
 \pnum
 \begin{note}
@@ -1066,7 +1070,7 @@ has the same exception specification as if it had been implicitly declared\iref{
 \indextext{destructor!default}%
 If a class has no user-declared
 destructor, a destructor is implicitly
-declared as defaulted\iref{dcl.fct.def}.
+declared as \link{defaulted}{\ref{dcl.fct.def}}.
 An implicitly-declared destructor is an
 inline public member of its class.
 
@@ -1107,7 +1111,7 @@ A destructor
 that is defaulted and not defined as deleted
 is
 \defnx{implicitly defined}{destructor!implicitly defined}
-when it is odr-used\iref{basic.def.odr}
+when it is \link{odr-used}{\ref{basic.def.odr}}
 or when it is explicitly defaulted after its first declaration.
 
 \pnum
@@ -1140,8 +1144,8 @@ derived classes.
 Bases and members are destroyed in the reverse order of the completion of
 their constructor (see~\ref{class.base.init}).
 A
-\tcode{return}
-statement\iref{stmt.return} in a destructor might not directly return to the
+\link{\tcode{return}
+statement}{\ref{stmt.return}} in a destructor might not directly return to the
 caller; before transferring control to the caller, the destructors for the
 members and bases are called.
 \indextext{order of execution!destructor and array}%
@@ -1152,9 +1156,8 @@ construction (see~\ref{class.init}).
 \indextext{destructor!virtual}%
 \indextext{destructor!pure virtual}%
 A destructor can be declared
-\tcode{virtual}\iref{class.virtual}
-or pure
-\tcode{virtual}\iref{class.abstract};
+\link{\tcode{virtual}}{\ref{class.virtual}}
+or \link{pure \tcode{virtual}}{\ref{class.abstract}};
 if any objects of that class or any derived class are created in the program,
 the destructor shall be defined.
 If a class has a base class with a virtual destructor, its  destructor
@@ -1174,11 +1177,11 @@ A destructor is invoked implicitly
 
 \begin{itemize}
 
-\item for a constructed object with static storage duration\iref{basic.stc.static} at program termination\iref{basic.start.term},
+\item for a constructed object with \link{static storage duration}{\ref{basic.stc.static}} at program \link{termination}{\ref{basic.start.term}},
 
-\item for a constructed object with thread storage duration\iref{basic.stc.thread} at thread exit,
+\item for a constructed object with \link{thread storage duration}{\ref{basic.stc.thread}} at thread exit,
 
-\item for a constructed object with automatic storage duration\iref{basic.stc.auto} when the block in which an object is created exits\iref{stmt.dcl},
+\item for a constructed object with \link{automatic storage duration}{\ref{basic.stc.auto}} when the block in which an object is created exits\iref{stmt.dcl},
 
 \item for a constructed temporary object when its lifetime ends~(\ref{conv.rval}, \ref{class.temporary}).
 \end{itemize}
@@ -1199,12 +1202,13 @@ A program is ill-formed if a destructor that is potentially invoked is deleted
 or not accessible from the context of the invocation.
 
 \pnum
-At the point of definition of a virtual destructor (including an implicit
-definition\iref{class.copy}), the non-array deallocation function is
+At the point of definition of a virtual destructor (including an
+\deflinkx{implicit definition}{destructor!implicitly defined}{\ref{class.dtor}}),
+the non-array deallocation function is
 determined as if for the expression \tcode{delete this} appearing in a
 non-virtual destructor of the destructor's class (see~\ref{expr.delete}).
 If the lookup fails or if the deallocation function has
-a deleted definition\iref{dcl.fct.def}, the program is ill-formed.
+a \deflink{deleted definition}{\ref{dcl.fct.def}}, the program is ill-formed.
 \begin{note}
 This assures that a deallocation function corresponding to the dynamic type of an
 object is available for the
@@ -1218,8 +1222,8 @@ In an explicit destructor call, the destructor is specified by a
 followed by a
 \grammarterm{type-name} or \grammarterm{decltype-specifier}
 that denotes the destructor's class type.
-The invocation of a destructor is subject to the usual rules for member
-functions\iref{class.mfct};
+The invocation of a destructor is subject to the usual rules for \link{member
+functions}{\ref{class.mfct}};
 that is, if the object is not of the destructor's class type and
 not of a class derived from the destructor's class type (including when
 the destructor is invoked via a null pointer value), the program has
@@ -1251,7 +1255,7 @@ void f() {
 \end{example}
 \begin{note}
 An explicit destructor call must always be written using
-a member access operator\iref{expr.ref} or a \grammarterm{qualified-id}\iref{expr.prim.id.qual};
+a \link{member access}{\ref{expr.ref}} operator or a \grammarterm{qualified-id}\iref{expr.prim.id.qual};
 in particular, the
 \grammarterm{unary-expression}
 \tcode{\~{}X()}
@@ -1289,7 +1293,7 @@ void g() {                      // rare, specialized use:
 \pnum
 Once a destructor is invoked for an object, the object no longer exists;
 the behavior is undefined if the destructor is invoked
-for an object whose lifetime has ended\iref{basic.life}.
+for an object whose \deflink{lifetime}{\ref{basic.life}} has ended.
 \begin{example}
 If the destructor for an automatic object is explicitly invoked,
 and the block is subsequently left in a manner that would ordinarily
@@ -1474,7 +1478,7 @@ had been private, the delete expression would have been ill-formed.
 \pnum
 \begin{note}
 If a deallocation function has no explicit \grammarterm{noexcept-specifier}, it
-has a non-throwing exception specification\iref{except.spec}.
+has a non-throwing \link{exception specification}{\ref{except.spec}}.
 \end{note}
 
 \rSec1[class.init]{Initialization}%
@@ -1545,7 +1549,7 @@ complex g = { 1, 2 };           // initialized by calling \tcode{complex(double,
 \end{example}
 \begin{note}
 \indextext{initialization!overloaded assignment and}%
-Overloading of the assignment operator\iref{over.ass}
+\link{Overloading of the assignment operator}{\ref{over.ass}}
 has no effect on initialization.
 \end{note}
 
@@ -1775,7 +1779,7 @@ D d(10);
 \begin{note}
 The initialization
 performed by each \grammarterm{mem-initializer}
-constitutes a full-expres\-sion\iref{intro.execution}.
+constitutes a \deflink{full-expression}{\ref{intro.execution}}.
 Any expression in
 a
 \grammarterm{mem-initializer}
@@ -1809,10 +1813,10 @@ then
 
 \begin{itemize}
 \item if the entity is a non-static data member that has
-a default member initializer\iref{class.mem} and either
+a \deflink{default member initializer}{\ref{class.mem}} and either
 
 \begin{itemize}
-\item the constructor's class is a union\iref{class.union}, and no other variant
+\item the constructor's class is a \link{union}{\ref{class.union}}, and no other variant
 member of that union is designated by a \grammarterm{mem-initializer-id} or
 
 \item the constructor's class is not a union, and, if the entity is a member of an
@@ -1825,10 +1829,10 @@ as specified in~\ref{dcl.init};
 
 \item otherwise, if the entity is an anonymous union or a variant member\iref{class.union.anon}, no initialization is performed;
 
-\item otherwise, the entity is default-initialized\iref{dcl.init}.
+\item otherwise, the entity is \deflinkx{default-initialized}{default-initialization}{\ref{dcl.init}}.
 \end{itemize}
 
-\begin{note} An abstract class\iref{class.abstract} is never a most derived
+\begin{note} An \link{abstract class}{\ref{class.abstract}} is never a most derived % todo: deflink
 class, thus its constructors never initialize virtual base classes, therefore the
 corresponding \grammarterm{mem-initializer}{s} may be omitted. \end{note}
 An attempt to initialize more than one non-static data member of a union renders the
@@ -1909,7 +1913,7 @@ A a2(1);                // OK, unfortunately
 
 \pnum
 In a non-delegating constructor, the destructor for each potentially constructed
-subobject of class type is potentially invoked\iref{class.dtor}.
+subobject of class type is \deflink{potentially invoked}{\ref{class.dtor}}.
 \begin{note} This provision ensures that destructors can be called for fully-constructed
 subobjects in case an exception is thrown\iref{except.ctor}. \end{note}
 
@@ -1919,7 +1923,7 @@ proceeds in the following order:
 \begin{itemize}
 \item
 \indextext{initialization!order of virtual base class}%
-First, and only for the constructor of the most derived class\iref{intro.object},
+First, and only for the constructor of the \deflink{most derived class}{\ref{intro.object}},
 virtual base classes are initialized in the order they appear on a
 depth-first left-to-right traversal of the directed acyclic graph of
 base classes,
@@ -2041,12 +2045,11 @@ to refer to the object being initialized.
 
 \pnum
 \indextext{initialization!member function call during}%
-Member functions (including virtual member functions, \ref{class.virtual}) can be
+Member functions (including \link{virtual member functions}{\ref{class.virtual}}) can be
 called for an object under construction.
 Similarly, an object under construction can be the operand of the
-\tcode{typeid}
-operator\iref{expr.typeid} or of a
-\tcode{dynamic_cast}\iref{expr.dynamic.cast}.
+\link{\tcode{typeid} operator}{\ref{expr.typeid}} or of a
+\link{\tcode{dynamic_cast}}{\ref{expr.dynamic.cast}}.
 However, if these operations are performed in a
 \grammarterm{ctor-initializer}
 (or in a function called directly or indirectly from a
@@ -2098,7 +2101,7 @@ of an object under construction.
 \pnum
 \indextext{initializer!pack expansion}%
 A \grammarterm{mem-initializer} followed by an ellipsis is
-a pack expansion\iref{temp.variadic} that initializes the base
+a \deflink{pack expansion}{\ref{temp.variadic}} that initializes the base
 classes specified by a pack expansion in the \grammarterm{base-specifier-list}
 for the class. \begin{example}
 
@@ -2118,7 +2121,7 @@ public:
 \pnum
 When a constructor for type \tcode{B} is invoked
 to initialize an object of a different type \tcode{D}
-(that is, when the constructor was inherited\iref{namespace.udecl}),
+(that is, when the constructor was \deflinkx{inherited}{inherits}{\ref{namespace.udecl}}),
 initialization proceeds as if a defaulted default constructor
 were used to initialize the \tcode{D} object and
 each base class subobject from which the constructor was inherited,
@@ -2312,7 +2315,7 @@ struct E : C, D, X {
 \indextext{virtual function call!destructor and}%
 \indextext{construction!virtual function call}%
 \indextext{destruction!virtual function call}%
-Member functions, including virtual functions\iref{class.virtual}, can be called
+Member functions, including \link{virtual functions}{\ref{class.virtual}}, can be called
 during construction or destruction\iref{class.base.init}.
 When a virtual function is called directly or indirectly from a constructor
 or from a destructor,
@@ -2323,7 +2326,7 @@ destruction,
 the function called is the
 final overrider in the constructor's or destructor's class and not one
 overriding it in a more-derived class.
-If the virtual function call uses an explicit class member access\iref{expr.ref}
+If the virtual function call uses an explicit \link{class member access}{\ref{expr.ref}}
 and the object expression refers to
 the complete object of \tcode{x} or one of that object's base class subobjects
 but not \tcode{x} or one of its base class subobjects, the behavior
@@ -2366,12 +2369,12 @@ B::B(V* v, A* a) {
 \indextext{\idxcode{typeid}!construction and}%
 \indextext{\idxcode{typeid}!destruction and}%
 The
-\tcode{typeid}
-operator\iref{expr.typeid} can be used during construction or destruction\iref{class.base.init}.
+\link{\tcode{typeid}
+operator}{\ref{expr.typeid}} can be used during construction or destruction\iref{class.base.init}.
 When
 \tcode{typeid}
 is used in a constructor (including the
-\grammarterm{mem-initializer} or default member initializer\iref{class.mem}
+\grammarterm{mem-initializer} or \deflink{default member initializer}{\ref{class.mem}}
 for a non-static data member)
 or in a destructor, or used in a function called (directly or indirectly) from
 a constructor or destructor, if the operand of
@@ -2392,7 +2395,7 @@ bases, the behavior is undefined.
 \indextext{destruction!dynamic cast and}%
 \indextext{cast!dynamic!construction and}%
 \indextext{cast!dynamic!destruction and}%
-\tcode{dynamic_cast}s\iref{expr.dynamic.cast} can be used during construction
+\link{\tcode{dynamic_cast}s}{\ref{expr.dynamic.cast}} can be used during construction
 or destruction\iref{class.base.init}. When a
 \tcode{dynamic_cast}
 is used in a constructor (including the
@@ -2443,8 +2446,8 @@ B::B(V* v, A* a) {
 
 \pnum
 A class object can be copied or moved in two ways:
-by initialization~(\ref{class.ctor}, \ref{dcl.init}), including for function argument passing\iref{expr.call} and for function value return\iref{stmt.return};
-and by assignment\iref{expr.ass}.
+by initialization~(\ref{class.ctor}, \ref{dcl.init}), including for function argument passing\iref{expr.call} and for \link{function value return}{\ref{stmt.return}};
+and by \link{assignment}{\ref{expr.ass}}.
 Conceptually, these two operations are implemented by a
 copy/move constructor\iref{class.ctor}
 and copy/move assignment operator\iref{over.ass}.
@@ -2456,7 +2459,7 @@ and copy/move assignment operator\iref{over.ass}.
 \indextext{assignment operator!move!inaccessible}%
 A program is ill-formed if the copy/move constructor or the copy/move assignment
 operator for an object is implicitly odr-used and the special member function
-is not accessible\iref{class.access}.
+is not \link{accessible}{\ref{class.access}}.
 \begin{note}
 Copying/moving one object into another using the copy/move constructor or
 the copy/move assignment operator does not change the layout or size of either
@@ -2481,7 +2484,7 @@ a
 or
 \tcode{const volatile X\&},
 and either there are no other parameters
-or else all other parameters have default arguments\iref{dcl.fct.default}.
+or else all other parameters have \link{default arguments}{\ref{dcl.fct.default}}.
 \begin{example}
 \tcode{X::X(const X\&)}
 and
@@ -2503,8 +2506,8 @@ X c = b;            // calls \tcode{X(const X\&, int);}
 A non-template constructor for class \tcode{X} is a \defnx{move constructor}{constructor!move} if its
 first parameter is of type \tcode{X\&\&}, \tcode{const X\&\&},
 \tcode{volatile X\&\&}, or \tcode{const volatile X\&\&}, and either there are
-no other parameters or else all other parameters have default
-arguments\iref{dcl.fct.default}.
+no other parameters or else all other parameters have \link{default
+arguments}{\ref{dcl.fct.default}}.
 \begin{example} \tcode{Y::Y(Y\&\&)} is a move constructor.
 \begin{codeblock}
 struct Y {
@@ -2593,7 +2596,7 @@ a non-explicit one is declared \defnx{implicitly}{constructor!copy!implicitly de
 If the class definition declares a move
 constructor or move assignment operator, the implicitly declared copy
 constructor is defined as deleted; otherwise, it is defined as
-defaulted\iref{dcl.fct.def}.
+\link{defaulted}{\ref{dcl.fct.def}}.
 The latter case is deprecated if the class has a user-declared copy assignment
 operator or a user-declared destructor.
 
@@ -2660,11 +2663,11 @@ X::X(X&&)
 An implicitly-declared copy/move constructor is an
 inline public member of its class.
 A defaulted copy/\brk{}move constructor for a class
-  \tcode{X} is defined as deleted\iref{dcl.fct.def.delete} if \tcode{X} has:
+  \tcode{X} is defined as \link{deleted}{\ref{dcl.fct.def.delete}} if \tcode{X} has:
 \begin{itemize}
 \item a potentially constructed subobject type
   \tcode{M} (or array thereof) that cannot be copied/moved because
-  overload resolution\iref{over.match}, as applied to find
+  \link{overload resolution}{\ref{over.match}}, as applied to find
   \tcode{M}'s
   corresponding constructor, results in an ambiguity or
   a function that is deleted or inaccessible from the
@@ -2700,8 +2703,8 @@ if it is not user-provided and if:
 \item
 class
 \tcode{X}
-has no virtual functions\iref{class.virtual}
-and no virtual base classes\iref{class.mi}, and
+has no \link{virtual functions}{\ref{class.virtual}}
+and no \deflinkx{virtual base classes}{base class!virtual}{\ref{class.mi}}, and
 
 \item
 the constructor selected to copy/move each direct base class subobject is trivial, and
@@ -2729,10 +2732,10 @@ when it is needed for constant evaluation\iref{expr.const}, or
 when it is explicitly defaulted after its first declaration.
 \begin{note}
 The copy/move constructor is implicitly defined even if the implementation elided
-its odr-use~(\ref{basic.def.odr}, \ref{class.temporary}).
+its \link{odr-use}{\ref{basic.def.odr}} (\ref{class.temporary}).
 \end{note}
 If the implicitly-defined constructor would satisfy the requirements of a
-constexpr constructor\iref{dcl.constexpr}, the implicitly-defined
+\deflinkx{constexpr constructor}{specifier!constexpr!constructor}{\ref{dcl.constexpr}}, the implicitly-defined
 constructor is \tcode{constexpr}.
 
 \pnum
@@ -2743,7 +2746,7 @@ potentially constructed subobjects
 shall have been implicitly defined.
 \begin{note}
 An implicitly-declared copy/move constructor has an
-implied exception specification\iref{except.spec}.
+implied \link{exception specification}{\ref{except.spec}}.
 \end{note}
 
 \pnum
@@ -2777,7 +2780,7 @@ the implicitly-defined copy/move constructor (see~\ref{class.base.init}).
 
 \pnum
 The implicitly-defined copy/move constructor for a union
-\tcode{X} copies the object representation\iref{basic.types} of \tcode{X}.%
+\tcode{X} copies the \deflink{object representation}{\ref{basic.types}} of \tcode{X}.%
 \indextext{constructor!move|)}%
 \indextext{constructor!copy|)}
 
@@ -2840,7 +2843,7 @@ one is declared \defnx{implicitly}{assignment operator!copy!implicitly declared}
 If the class definition declares a move
 constructor or move assignment operator, the implicitly declared copy
 assignment operator is defined as deleted; otherwise, it is defined as
-defaulted\iref{dcl.fct.def}.
+\link{defaulted}{\ref{dcl.fct.def}}.
 The latter case is deprecated if the class has a user-declared copy constructor
 or a user-declared destructor.
 The implicitly-declared copy assignment operator for a class
@@ -2896,7 +2899,7 @@ X& X::operator=(X&)
 \end{codeblock}
 
 \pnum
-A user-declared move assignment operator \tcode{X::operator=} is
+A user-declared \defnx{move}{assignment operator!move} assignment operator \tcode{X::operator=} is
 a non-static non-template member function of class \tcode{X} with exactly
 one parameter of type \tcode{X\&\&}, \tcode{const X\&\&}, \tcode{volatile X\&\&}, or
 \tcode{const volatile X\&\&}. \begin{note} An overloaded assignment operator must be
@@ -2975,8 +2978,8 @@ class \tcode{X} is defined as deleted if \tcode{X} has:
 
 \item a direct non-static data member of class type \tcode{M}
   (or array thereof) or a direct base class \tcode{M}
-  that cannot be copied/moved because overload resolution
- \iref{over.match}, as applied to find \tcode{M}'s corresponding
+  that cannot be copied/moved because \link{overload resolution}{\ref{over.match}},
+  as applied to find \tcode{M}'s corresponding
   assignment operator, results in an ambiguity or
   a function that is deleted or inaccessible from the
   defaulted assignment operator.
@@ -3017,8 +3020,8 @@ if it is not user-provided and if:
 \item
 class
 \tcode{X}
-has no virtual functions\iref{class.virtual}
-and no virtual base classes\iref{class.mi}, and
+has no \link{virtual functions}{\ref{class.virtual}}
+and no \link{virtual base classes}{\ref{class.mi}}, and
 
 \item the assignment operator selected to copy/move each direct
 base class subobject is trivial, and
@@ -3069,7 +3072,7 @@ its direct base classes and
 its non-static data members shall have been implicitly defined.
 \begin{note}
 An implicitly-declared copy/move assignment operator has an
-implied exception specification\iref{except.spec}.
+implied \link{exception specification}{\ref{except.spec}}.
 \end{note}
 
 \pnum
@@ -3119,7 +3122,7 @@ is assigned twice by the implicitly-defined copy/move assignment operator for
 
 \pnum
 The implicitly-defined copy assignment operator for a
-union \tcode{X} copies the object representation\iref{basic.types} of \tcode{X}.%
+union \tcode{X} copies the \deflink{object representation}{\ref{basic.types}} of \tcode{X}.%
 \indextext{assignment operator!move|)}%
 \indextext{assignment operator!copy|)}
 
@@ -3171,13 +3174,14 @@ is the name of a non-volatile automatic object
 (other than a function or catch-clause parameter)
 whose scope does not extend beyond the end of the innermost enclosing
 \grammarterm{try-block} (if there is one), the copy/move operation from the
-operand to the exception object\iref{except.throw} can be omitted by
+operand to the \deflinkx{exception object}{exception handling!exception object}{\ref{except.throw}} can be omitted by
 constructing the automatic object directly into the exception object
 
 \item when the \grammarterm{exception-declaration} of an
 exception handler\iref{except} declares an object of the same
-type (except for cv-qualification) as the exception
-object\iref{except.throw}, the copy operation can be omitted by treating
+type (except for cv-qualification) as the
+\deflinkx{exception object}{exception handling!exception object}{\ref{except.throw}},
+the copy operation can be omitted by treating
 the \grammarterm{exception-declaration} as an alias for the exception
 object if the meaning of the program will be unchanged except for the execution
 of constructors and destructors for the object declared by the
@@ -3187,8 +3191,8 @@ always an lvalue.  \end{note}
 \end{itemize}
 Copy elision is required
 where an expression is evaluated in a context
-requiring a constant expression\iref{expr.const}
-and in constant initialization\iref{basic.start.static}.
+requiring a \link{constant expression}{\ref{expr.const}}
+and in \deflink{constant initialization}{\ref{basic.start.static}}.
 \begin{note}
 Copy elision might not be performed
 if the same expression
@@ -3251,7 +3255,7 @@ move construction from the local automatic object to \tcode{t2} that is elided.
 \pnum
 In the following copy-initialization contexts, a move operation might be used instead of a copy operation:
 \begin{itemize}
-\item If the \grammarterm{expression} in a \tcode{return} statement\iref{stmt.return}
+\item If the \grammarterm{expression} in a \link{\tcode{return} statement}{\ref{stmt.return}}
 is a (possibly parenthesized) \grammarterm{id-expression}
 that names an object with automatic storage duration declared in the body
 or \grammarterm{parameter-declaration-clause} of the innermost enclosing
diff --git a/source/statements.tex b/source/statements.tex
index c52687e..98b63d5 100644
--- a/source/statements.tex
+++ b/source/statements.tex
@@ -70,7 +70,7 @@ else {
 The value of a \grammarterm{condition} that is an initialized declaration
 in a statement other than a \tcode{switch} statement is the value of the
 declared variable
-contextually converted to \tcode{bool}\iref{conv}.
+\deflinkx{contextually converted to \tcode{bool}}{conversion!contextual to bool}{\ref{conv}}.
 If that
 conversion is ill-formed, the program is ill-formed. The value of a
 \grammarterm{condition} that is an initialized declaration in a
@@ -124,8 +124,8 @@ Labels have their own name space and do not interfere with other
 identifiers.
 \begin{note}
 A label may have the same name as another declaration in the same scope or a
-\grammarterm{template-parameter} from an enclosing scope. Unqualified name
-lookup\iref{basic.lookup.unqual} ignores labels.
+\grammarterm{template-parameter} from an enclosing scope. \link{Unqualified name
+lookup}{\ref{basic.lookup.unqual}} ignores labels.
 \end{note}
 
 \pnum
@@ -146,7 +146,7 @@ Expression statements have the form
 \end{bnf}
 
 The expression is
-a discarded-value expression\iref{expr.prop}.
+a \deflink{discarded-value expression}{\ref{expr.prop}}.
 All
 \indextext{side effects}%
 side effects from an expression statement
@@ -159,8 +159,8 @@ a \defn{null statement}.
 Most statements are expression statements --- usually assignments or
 function calls. A null statement is useful to carry a label just before
 the \tcode{\}} of a compound statement and to supply a null body to an
-iteration statement such as a \tcode{while}
-statement\iref{stmt.while}.
+iteration statement such as a \link{\tcode{while}
+statement}{\ref{stmt.while}}.
 \end{note}
 
 \rSec1[stmt.block]{Compound statement or block}%
@@ -183,7 +183,7 @@ provided.
     statement-seq statement
 \end{bnf}
 
-A compound statement defines a block scope\iref{basic.scope}.
+A compound statement defines a \deflink{block scope}{\ref{basic.scope}}.
 \begin{note}
 A declaration is a \grammarterm{statement}\iref{stmt.dcl}.
 \end{note}
@@ -214,7 +214,7 @@ in the syntax notation.
 \indextext{scope!\idxgram{selection-statement}}%
 The substatement in a \grammarterm{selection-statement} (each substatement,
 in the \tcode{else} form of the \tcode{if} statement) implicitly defines
-a block scope\iref{basic.scope}. If the substatement in a
+a \deflink{block scope}{\ref{basic.scope}}. If the substatement in a
 selection-statement is a single statement and not a
 \grammarterm{compound-statement}, it is as if it was rewritten to be a
 compound-statement containing the original substatement.
@@ -253,24 +253,24 @@ an \tcode{else} part.\footnote{In other words, the \tcode{else} is associated wi
 
 \pnum
 If the \tcode{if} statement is of the form \tcode{if constexpr}, the value
-of the condition shall be a contextually
-converted constant expression of type \tcode{bool}\iref{expr.const}; this
-form is called a \defn{constexpr if} statement. If the value of the
+of the condition shall be a
+\deflink{contextually converted constant expression of type \tcode{bool}}{\ref{expr.const}};
+this form is called a \defn{constexpr if} statement. If the value of the
 converted condition is \tcode{false}, the first substatement is a
 \defn{discarded statement}, otherwise the second substatement, if
 present, is a discarded statement. During the instantiation of an
-enclosing templated entity\iref{temp}, if the condition is
+enclosing \link{templated}{\ref{temp}} entity, if the condition is
 not value-dependent after its instantiation, the discarded substatement
 (if any) is not instantiated.
 \begin{note}
-Odr-uses\iref{basic.def.odr} in a discarded statement do not require
+\link{Odr-uses}{\ref{basic.def.odr}} in a discarded statement do not require
 an entity to be defined.
 \end{note}
 A \tcode{case} or \tcode{default} label appearing within such an
-\tcode{if} statement shall be associated with a \tcode{switch}
-statement\iref{stmt.switch} within the same \tcode{if} statement.
-A label\iref{stmt.label} declared in a substatement of a constexpr if
-statement shall only be referred to by a statement\iref{stmt.goto} in
+\tcode{if} statement shall be associated with a \link{\tcode{switch}
+statement}{\ref{stmt.switch}} within the same \tcode{if} statement.
+A \link{label}{\ref{stmt.label}} declared in a substatement of a constexpr if
+statement shall only be referred to by a \link{statement}{\ref{stmt.goto}} in
 the same substatement.
 \begin{example}
 \begin{codeblock}
@@ -331,10 +331,10 @@ several statements depending on the value of a condition.
 \pnum
 The condition shall be of integral type, enumeration type, or class
 type. If of class type, the
-condition is contextually implicitly converted\iref{conv} to
+condition is \deflink{contextually implicitly converted}{\ref{conv}} to
 an integral or enumeration type.
-If the (possibly converted) type is subject to integral
-promotions\iref{conv.prom}, the condition is converted
+If the (possibly converted) type is subject to \link{integral
+promotions}{\ref{conv.prom}}, the condition is converted
 to the promoted type.
 Any
 statement within the \tcode{switch} statement can be labeled with one or
@@ -346,7 +346,7 @@ more case labels as follows:
 \end{ncbnf}
 
 where the \grammarterm{constant-expression} shall be
-a converted constant expression\iref{expr.const} of the
+a converted \link{constant expression}{\ref{expr.const}} of the
 adjusted type of the switch condition. No two of the case constants in
 the same switch shall have the same value after conversion.
 
@@ -379,7 +379,7 @@ then none of the statements in the switch is executed.
 \pnum
 \tcode{case} and \tcode{default} labels in themselves do not alter the
 flow of control, which continues unimpeded across such labels. To exit
-from a switch, see \tcode{break}, \ref{stmt.break}.
+from a switch, see \link{\tcode{break}}{\ref{stmt.break}}.
 \begin{note}
 Usually, the substatement that is the subject of a switch is compound
 and \tcode{case} and \tcode{default} labels appear on the top-level
@@ -444,7 +444,7 @@ An \grammarterm{init-statement} ends with a semicolon.
 
 \pnum
 The substatement in an \grammarterm{iteration-statement} implicitly defines
-a block scope\iref{basic.scope} which is entered and exited each time
+a block \link{scope}{\ref{basic.scope}} which is entered and exited each time
 through the loop.
 
 \indextext{scope!\idxgram{iteration-statement}}%
@@ -538,7 +538,7 @@ fails.
 \indextext{statement!\idxcode{do}}
 
 \pnum
-The expression is contextually converted to \tcode{bool}\iref{conv};
+The expression is \deflinkx{contextually converted to \tcode{bool}}{conversion!contextual to bool}{\ref{conv}};
 if that conversion is ill-formed, the program is ill-formed.
 
 \pnum
@@ -655,8 +655,8 @@ respectively;
 
 \item otherwise, \placeholder{begin-expr} and \placeholder{end-expr} are \tcode{begin(__range)}
 and \tcode{end(__range)}, respectively, where \tcode{begin} and \tcode{end} are looked
-up in the associated namespaces\iref{basic.lookup.argdep}.
-\begin{note} Ordinary unqualified lookup\iref{basic.lookup.unqual} is not
+up in the \deflinkx{associated namespaces}{namespace!associated}{\ref{basic.lookup.argdep}}.
+\begin{note} Ordinary \link{unqualified lookup}{\ref{basic.lookup.unqual}} is not
 performed. \end{note}
 \end{itemize}
 \end{itemize}
@@ -700,8 +700,8 @@ Jump statements unconditionally transfer control.
 \pnum
 \indextext{local variable!destruction of}%
 \indextext{scope!destructor and exit from}%
-On exit from a scope (however accomplished), objects with automatic storage
-duration\iref{basic.stc.auto} that have been constructed in that scope are destroyed
+On exit from a scope (however accomplished), objects with \link{automatic storage
+duration}{\ref{basic.stc.auto}} that have been constructed in that scope are destroyed
 in the reverse order of their construction. \begin{note} For temporaries,
 see~\ref{class.temporary}. \end{note} Transfer out of a loop, out of a block, or back
 past
@@ -790,8 +790,8 @@ A function returns to its caller by the \tcode{return} statement.
 The \grammarterm{expr-or-braced-init-list}
 of a \tcode{return} statement is called its operand. A \tcode{return} statement with
 no operand shall be used only in a function whose return type is
-\cv{}~\tcode{void}, a constructor\iref{class.ctor}, or a
-destructor\iref{class.dtor}.
+\cv{}~\tcode{void}, a \link{constructor}{\ref{class.ctor}}, or a
+\link{destructor}{\ref{class.dtor}}.
 \indextext{\idxcode{return}!constructor and}%
 \indextext{\idxcode{return}!constructor and}%
 A \tcode{return} statement with an operand of type \tcode{void} shall be used only
@@ -801,7 +801,7 @@ in a function whose return type is not \cv{}~\tcode{void};
 \indextext{conversion!return type}%
 the \tcode{return} statement initializes the
 glvalue result or prvalue result object of the (explicit or implicit) function call
-by copy-initialization\iref{dcl.init} from the operand.
+by \deflink{copy-initialization}{\ref{dcl.init}} from the operand.
 \begin{note}
 A \tcode{return} statement can involve
 an invocation of a constructor to perform a copy or move of the operand
@@ -822,7 +822,7 @@ a destructor, or
 a function with a \cv{}~\tcode{void} return type is
 equivalent to a \tcode{return} with no operand.
 Otherwise, flowing off the end of a function
-other than \tcode{main}\iref{basic.start.main}
+other than \link{\tcode{main}}{\ref{basic.start.main}}
 results in undefined behavior.
 
 \pnum
@@ -839,7 +839,7 @@ enclosing the \tcode{return} statement.
 The \tcode{goto} statement unconditionally transfers control to the
 statement labeled by the identifier. The identifier shall be a
 \indextext{label}%
-label\iref{stmt.label} located in the current function.
+\link{label}{\ref{stmt.label}} located in the current function.
 
 \rSec1[stmt.dcl]{Declaration statement}%
 \indextext{statement!declaration}
@@ -864,7 +864,7 @@ which it resumes its force.
 \pnum
 \indextext{block!initialization in}%
 \indextext{initialization!automatic}%
-Variables with automatic storage duration\iref{basic.stc.auto} are
+Variables with \link{automatic storage duration}{\ref{basic.stc.auto}} are
 initialized each time their \grammarterm{declaration-statement} is executed.
 \indextext{local variable!destruction of}%
 Variables with automatic storage duration declared in the block are
@@ -905,8 +905,8 @@ lx:
 \indextext{initialization!local \tcode{static}}%
 \indextext{initialization!local \tcode{thread_local}}%
 Dynamic initialization of a block-scope variable with
-static storage duration\iref{basic.stc.static} or
-thread storage duration\iref{basic.stc.thread} is performed
+\link{static storage duration}{\ref{basic.stc.static}} or
+\link{thread storage duration}{\ref{basic.stc.thread}} is performed
 the first time control passes through its declaration; such a variable is
 considered initialized upon the completion of its initialization. If the
 initialization exits by throwing an exception, the initialization is not
@@ -945,8 +945,8 @@ static and thread storage duration are destroyed.
 \pnum
 There is an ambiguity in the grammar involving
 \grammarterm{expression-statement}{s} and \grammarterm{declaration}{s}: An
-\grammarterm{expression-statement} with a function-style explicit type
-conversion\iref{expr.type.conv} as its leftmost subexpression can be
+\grammarterm{expression-statement} with a \link{function-style explicit type
+conversion}{\ref{expr.type.conv}} as its leftmost subexpression can be
 indistinguishable from a \grammarterm{declaration} where the first
 \grammarterm{declarator} starts with a \tcode{(}. In those cases the
 \grammarterm{statement} is a \grammarterm{declaration}.
diff --git a/source/strings.tex b/source/strings.tex
index 1824141..3bffa08 100644
--- a/source/strings.tex
+++ b/source/strings.tex
@@ -849,7 +849,7 @@ contained char-like objects.\footnote{\tcode{Allocator::value_type} must name th
 as \tcode{charT}\iref{string.require}.}
 
 \pnum
-A \tcode{basic_string} is a contiguous container\iref{container.requirements.general}.
+A \tcode{basic_string} is a \deflink{contiguous container}{\ref{container.requirements.general}}.
 
 \pnum
 In all cases,
@@ -867,13 +867,13 @@ kinds of errors, each associated with an exception type:
 a
 \term{length}
 error is associated with exceptions of type
-\tcode{length_error}\iref{length.error};
+\link{\tcode{length_error}}{\ref{length.error}};
 \indexlibrary{\idxcode{length_error}}%
 \item
 an
 \term{out-of-range}
 error is associated with exceptions of type
-\tcode{out_of_range}\iref{out.of.range}.
+\link{\tcode{out_of_range}}{\ref{out.of.range}}.
 \indexlibrary{\idxcode{out_of_range}}%
 \end{itemize}
 
@@ -1205,8 +1205,9 @@ invalidated by the following uses of that \tcode{basic_string} object:
 \begin{itemize}
 \item as an argument to any standard library function taking a reference to non-const
 \tcode{basic_string} as an argument.\footnote{For example, as an argument to non-member
-functions \tcode{swap()}\iref{string.special},
-\tcode{operator>{}>()}\iref{string.io}, and \tcode{getline()}\iref{string.io}, or as
+functions \liblinkx{\tcode{swap()}}{basic_string!swap}{\ref{string.special}},
+\liblinkx{\tcode{operator>{}>()}}{basic_string!operator>>}{\ref{string.io}},
+and \link{\tcode{getline()}}{\ref{string.io}}, or as
 an argument to \tcode{basic_string::swap()}.}
 
 \item Calling non-const member functions, except
@@ -1531,7 +1532,7 @@ basic_string& operator=(basic_string&& str)
 \begin{itemdescr}
 \pnum
 \effects
-Move assigns as a sequence container\iref{sequence.reqmts},
+Move assigns as a \link{sequence container}{\ref{sequence.reqmts}},
 except that iterators, pointers and references may be invalidated.
 
 \pnum
@@ -1851,11 +1852,12 @@ erase(begin(), end());
 
 \rSec3[string.access]{Element access}
 
-\indexlibrarymember{operator[]}{basic_string}%
+\begin{indexed}{\indexlibrarymember{operator[]}{basic_string}}
 \begin{itemdecl}
 const_reference operator[](size_type pos) const;
 reference       operator[](size_type pos);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1874,11 +1876,12 @@ returns a reference to an object of type \tcode{charT} with value
 \complexity Constant time.
 \end{itemdescr}
 
-\indexlibrarymember{at}{basic_string}%
+\begin{indexed}{\indexlibrarymember{at}{basic_string}}
 \begin{itemdecl}
 const_reference at(size_type pos) const;
 reference       at(size_type pos);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1892,11 +1895,12 @@ if
 \tcode{operator[](pos)}.
 \end{itemdescr}
 
-\indexlibrarymember{front}{basic_string}%
+\begin{indexed}{\indexlibrarymember{front}{basic_string}}
 \begin{itemdecl}
 const charT& front() const;
 charT& front();
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1908,11 +1912,12 @@ charT& front();
 Equivalent to: \tcode{return operator[](0);}
 \end{itemdescr}
 
-\indexlibrarymember{back}{basic_string}%
+\begin{indexed}{\indexlibrarymember{back}{basic_string}}
 \begin{itemdecl}
 const charT& back() const;
 charT& back();
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -4322,10 +4327,9 @@ template<class charT, class traits, class Allocator>
 
 \rSec3[string.special]{\tcode{swap}}
 
-\indexlibrarymember{swap}{basic_string}%
 \begin{itemdecl}
 template<class charT, class traits, class Allocator>
-  void swap(basic_string<charT, traits, Allocator>& lhs,
+  void @\libmember{swap}{basic_string}@(basic_string<charT, traits, Allocator>& lhs,
             basic_string<charT, traits, Allocator>& rhs)
     noexcept(noexcept(lhs.swap(rhs)));
 \end{itemdecl}
@@ -4338,17 +4342,16 @@ Equivalent to \tcode{lhs.swap(rhs)}.
 
 \rSec3[string.io]{Inserters and extractors}
 
-\indexlibrarymember{operator>>}{basic_string}%
 \begin{itemdecl}
 template<class charT, class traits, class Allocator>
   basic_istream<charT, traits>&
-    operator>>(basic_istream<charT, traits>& is, basic_string<charT, traits, Allocator>& str);
+    @\libmember{operator>>}{basic_string}@(basic_istream<charT, traits>& is, basic_string<charT, traits, Allocator>& str);
 \end{itemdecl}
 
 \begin{itemdescr}
 \pnum
 \effects
-Behaves as a formatted input function\iref{istream.formatted.reqmts}.
+Behaves as a \link{formatted input function}{\ref{istream.formatted}}.
 After constructing a
 \tcode{sentry}
 object, if the sentry converts to \tcode{true}, calls
@@ -4427,7 +4430,7 @@ template<class charT, class traits, class Allocator>
 \begin{itemdescr}
 \pnum
 \effects
-Behaves as an unformatted input function\iref{istream.unformatted},
+Behaves as an \link{unformatted input function}{\ref{istream.unformatted}},
 except that it does not affect the value returned by subsequent calls to
 \tcode{basic_istream<>::gcount()}.
 After constructing a
@@ -4767,7 +4770,7 @@ The same suffix \tcode{s} is used for \tcode{chrono::duration} literals denoting
 \rSec1[string.view]{String view classes}
 
 \pnum
-The class template \tcode{basic_string_view} describes an object that can refer to a constant contiguous sequence of char-like\iref{strings.general} objects with the first element of the sequence at position zero.
+The class template \tcode{basic_string_view} describes an object that can refer to a constant contiguous sequence of \deflinkx{char-like objects}{char-like object}{\ref{strings.general}} with the first element of the sequence at position zero.
 In the rest of this subclause, the type of the char-like objects held in a \tcode{basic_string_view} object is designated by \tcode{charT}.
 
 \pnum
@@ -5833,8 +5836,8 @@ template<class charT, class traits>
 \begin{itemdescr}
 \pnum
 \effects
-Behaves as a formatted output
-function\iref{ostream.formatted.reqmts} of \tcode{os}. Forms a character sequence
+Behaves as a \link{formatted output
+function}{\ref{ostream.formatted.reqmts}} of \tcode{os}. Forms a character sequence
 \tcode{seq}, initially consisting of the elements defined by the range
 \range{str.begin()}{str.end()}. Determines padding for \tcode{seq}
 as described in~\ref{ostream.formatted.reqmts}.
@@ -6088,20 +6091,20 @@ The contents and meaning of the header \tcode{<cstring>}
 are the same as the C standard library header \tcode{<string.h>}.
 
 \pnum
-The functions \tcode{strerror} and \tcode{strtok} are not required to avoid data
-races\iref{res.on.data.races}.
+The functions \tcode{strerror} and \tcode{strtok} are not required to
+\link{avoid data races}{\ref{res.on.data.races}}.
 
 \pnum
 \indextext{signal-safe!\idxcode{memcpy}}%
 \indextext{signal-safe!\idxcode{memmove}}%
-The functions \tcode{memcpy} and \tcode{memmove} are signal-safe\iref{support.signal}.
+The functions \tcode{memcpy} and \tcode{memmove} are \deflinkx{signal-safe}{evaluation!signal-safe}{\ref{support.signal}}.
 
 \pnum
 \begin{note}
 The functions
 \tcode{strchr}, \tcode{strpbrk}, \tcode{strrchr}, \tcode{strstr}, and \tcode{memchr},
 have different signatures in this document,
-but they have the same behavior as in the C standard library\iref{library.c}.
+but they have the same behavior as in the \link{C standard library}{\ref{library.c}}.
 \end{note}
 
 \xrefc{7.24}
@@ -6269,7 +6272,7 @@ are the same as the C standard library header
 The functions
 \tcode{wcschr}, \tcode{wcspbrk}, \tcode{wcsrchr}, \tcode{wcsstr}, and \tcode{wmemchr}
 have different signatures in this document,
-but they have the same behavior as in the C standard library\iref{library.c}.
+but they have the same behavior as in the \link{C standard library}{\ref{library.c}}.
 \end{note}
 
 \xrefc{7.29}
@@ -6310,8 +6313,8 @@ are the same as the C standard library header
 \indexhdr{cstdlib}%
 \indexhdr{cwchar}%
 \begin{note}
-The headers \tcode{<cstdlib>}\iref{cstdlib.syn}
-and \tcode{<cwchar>}\iref{cwchar.syn}
+The headers \link{\tcode{<cstdlib>}}{\ref{cstdlib.syn}}
+and \link{\tcode{<cwchar>}}{\ref{cwchar.syn}}
 declare the functions described in this subclause.
 \end{note}
 
diff --git a/source/support.tex b/source/support.tex
index dc5ddd9..19c595b 100644
--- a/source/support.tex
+++ b/source/support.tex
@@ -45,21 +45,14 @@ as summarized in \tref{lang.sup.lib.summary}.
 
 \rSec2[cstddef.syn]{Header \tcode{<cstddef>} synopsis}
 
-\indexlibrary{\idxcode{NULL}}%
-\indexlibrary{\idxcode{offsetof}}%
-\indexlibrary{\idxcode{ptrdiff_t}}%
-\indexlibrary{\idxcode{size_t}}%
-\indexlibrary{\idxcode{max_align_t}}%
-\indexlibrary{\idxcode{nullptr_t}}%
-\indexlibrary{\idxcode{byte}}%
 \begin{codeblock}
 namespace std {
-  using ptrdiff_t = @\seebelow@;
-  using size_t = @\seebelow@;
-  using max_align_t = @\seebelow@;
-  using nullptr_t = decltype(nullptr);
+  using @\libentity{ptrdiff_t}@ = @\seebelow@;
+  using @\libentity{size_t}@ = @\seebelow@;
+  using @\libentity{max_align_t}@ = @\seebelow@;
+  using @\libentity{nullptr_t}@ = decltype(nullptr);
 
-  enum class byte : unsigned char {};
+  enum class @\libentity{byte}@ : unsigned char {};
 
   // \ref{support.types.byteops}, \tcode{byte} type operations
   template<class IntType>
@@ -81,8 +74,8 @@ namespace std {
     constexpr IntType to_integer(byte b) noexcept;
 }
 
-#define NULL @\seebelow@
-#define offsetof(P, D) @\seebelow@
+#define @\libentity{NULL}@ @\seebelow@
+#define @\libentity{offsetof}@(P, D) @\seebelow@
 \end{codeblock}
 
 \pnum
@@ -121,7 +114,6 @@ and as noted in
 \indexlibrary{\idxcode{div_t}}%
 \indexlibrary{\idxcode{exit}}%
 \indexlibrary{\idxcode{free}}%
-\indexlibrary{\idxcode{getenv}}%
 \indexlibrary{\idxcode{labs}}%
 \indexlibrary{\idxcode{ldiv}}%
 \indexlibrary{\idxcode{ldiv_t}}%
@@ -179,7 +171,7 @@ namespace std {
   [[noreturn]] void _Exit(int status) noexcept;
   [[noreturn]] void quick_exit(int status) noexcept;
 
-  char* getenv(const char* name);
+  char* @\libentity{getenv}@(const char* name);
   int system(const char* string);
 
   // \ref{c.malloc}, C library memory allocation
@@ -254,7 +246,7 @@ and except as noted in
 \ref{c.math.abs}.
 \begin{note}
 Several functions have additional overloads in this document,
-but they have the same behavior as in the C standard library\iref{library.c}.
+but they have the same behavior as in the \link{C standard library}{\ref{library.c}}.
 \end{note}
 
 \xrefc{7.22}
@@ -262,8 +254,7 @@ but they have the same behavior as in the C standard library\iref{library.c}.
 \rSec2[support.types.nullptr]{Null pointers}
 
 \pnum
-\indexlibrary{\idxcode{nullptr_t}}%
-The type \tcode{nullptr_t} is a synonym
+The type \libentity{nullptr_t} is a synonym
 for the type of a \tcode{nullptr} expression, and it
 has the characteristics
 described in~\ref{basic.fundamental} and~\ref{conv.ptr}.
@@ -273,9 +264,7 @@ Although \tcode{nullptr}'s address cannot be taken, the address of another
 \end{note}
 
 \pnum
-The macro
-\indexlibrary{\idxcode{NULL}}%
-\tcode{NULL}
+The macro \libentity{NULL}
 is an \impldef{definition of \tcode{NULL}} null pointer constant.%
 \footnote{Possible definitions include
 \tcode{0}
@@ -290,21 +279,20 @@ but not
 
 \pnum
 The macro
-\indexlibrary{\idxcode{offsetof}}%
-\tcode{offsetof(\placeholder{type}, \placeholder{member-designator})}
+\libentity{offsetof}\tcode{(\placeholder{type}, \placeholder{member-designator})}
 has the same semantics as the corresponding macro in
 the C standard library header \tcode{<stddef.h>}, but
 accepts a restricted set of \tcode{\placeholder{type}}
 arguments in this document.
 Use of the \tcode{offsetof} macro with a \tcode{\placeholder{type}}
-other than a standard-layout class\iref{class}
+other than a \deflink{standard-layout class}{\ref{class}}
 is conditionally-supported.\footnote{Note that \tcode{offsetof}
 is required to work as specified even if unary
 \tcode{operator\&}
 is overloaded for any of the types involved.}
 The expression \tcode{offsetof(\placeholder{type}, \placeholder{member-designator})}
-is never type-dependent\iref{temp.dep.expr} and it is
-value-dependent\iref{temp.dep.constexpr} if and only if \tcode{\placeholder{type}} is
+is never \link{type-dependent}{\ref{temp.dep.expr}} and it is
+\link{value-dependent}{\ref{temp.dep.constexpr}} if and only if \tcode{\placeholder{type}} is
 dependent. The result of applying the \tcode{offsetof} macro to
 a static data member or a function member is undefined.
 No operation invoked by the \tcode{offsetof} macro shall throw an exception and
@@ -325,7 +313,7 @@ to contain the size in bytes of any object\iref{expr.sizeof}.
 \pnum
 \begin{note}
 It is recommended that implementations choose types for \tcode{ptrdiff_t} and \tcode{size_t}
-whose integer conversion ranks\iref{conv.rank} are no greater than that of
+whose integer \link{conversion ranks}{\ref{conv.rank}} are no greater than that of
 \tcode{signed long int} unless a larger size is necessary to contain all the possible values.
 \end{note}
 
@@ -500,9 +488,9 @@ template<class IntType>
 
 \pnum
 The headers
-\tcode{<limits>}\iref{limits.syn},
-\tcode{<climits>}\iref{climits.syn}, and
-\tcode{<cfloat>}\iref{cfloat.syn}
+\link{\tcode{<limits>}}{\ref{limits.syn}},
+\link{\tcode{<climits>}}{\ref{climits.syn}}, and
+\link{\tcode{<cfloat>}}{\ref{cfloat.syn}}
 supply characteristics of
 \indextext{implementation-dependent}%
 imple\-mentation-dependent
@@ -730,13 +718,13 @@ the specialization on the unqualified type \tcode{T}.
 
 \pnum
 Non-arithmetic standard types, such as
-\tcode{complex<T>}\iref{complex}, shall not have specializations.
+\link{\tcode{complex<T>}}{\ref{complex}}, shall not have specializations.
 
 \rSec3[numeric.limits.members]{\tcode{numeric_limits} members}
 
 \pnum
 \indextext{signal-safe!\idxcode{numeric_limits} members}%
-Each member function defined in this subclause is signal-safe\iref{support.signal}.
+Each member function defined in this subclause is \deflinkx{signal-safe}{evaluation!signal-safe}{\ref{support.signal}}.
 
 \indexlibrarymember{min}{numeric_limits}%
 \begin{itemdecl}
@@ -760,10 +748,11 @@ or
 \tcode{is_bounded == false \&\& is_signed == false}.
 \end{itemdescr}
 
-\indexlibrarymember{max}{numeric_limits}%
+\begin{indexed}{\indexlibrarymember{max}{numeric_limits}}
 \begin{itemdecl}
 static constexpr T max() noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1613,7 +1602,7 @@ the C standard library header \tcode{<stdint.h>}.
 \pnum
 \indexhdr{cstdlib}%
 \begin{note}
-The header \tcode{<cstdlib>}\iref{cstdlib.syn}
+The header \link{\tcode{<cstdlib>}}{\ref{cstdlib.syn}}
 declares the functions described in this subclause.
 \end{note}
 
@@ -1633,7 +1622,7 @@ The program is terminated without executing destructors for objects of automatic
 thread, or static storage duration and without calling functions passed to
 \tcode{atexit()}\iref{basic.start.term}.
 \indextext{signal-safe!\idxcode{_Exit}}%
-The function \tcode{_Exit} is signal-safe\iref{support.signal}.
+The function \tcode{_Exit} is \deflinkx{signal-safe}{evaluation!signal-safe}{\ref{support.signal}}.
 \end{itemdescr}
 
 \indexlibrary{\idxcode{abort}}%
@@ -1653,7 +1642,7 @@ automatic, thread, or static storage
 duration and without calling functions passed to
 \tcode{atexit()}\iref{basic.start.term}.
 \indextext{signal-safe!\idxcode{abort}}%
-The function \tcode{abort} is signal-safe\iref{support.signal}.
+The function \tcode{abort} is \deflinkx{signal-safe}{evaluation!signal-safe}{\ref{support.signal}}.
 \end{itemdescr}
 
 \indexlibrary{\idxcode{atexit}}%
@@ -1670,7 +1659,8 @@ The
 functions register the function pointed to by \tcode{f}
 to be called without arguments at normal program termination.
 It is unspecified whether a call to \tcode{atexit()} that does not
-happen before\iref{intro.multithread} a call to \tcode{exit()} will succeed.
+\deflinkx{happen before}{happens before}{\ref{intro.multithread}}
+a call to \tcode{exit()} will succeed.
 \begin{note} The \tcode{atexit()} functions do not introduce a data
 race\iref{res.on.data.races}. \end{note}
 
@@ -1686,10 +1676,11 @@ function returns zero if the registration succeeds,
 nonzero if it fails.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{exit}}%
+\begin{indexed}{\indexlibrary{\idxcode{exit}}}
 \begin{itemdecl}
 [[noreturn]] void exit(int status);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1704,7 +1695,7 @@ are called.\footnote{A function is called for every time it is registered.}
 See~\ref{basic.start.term} for the order of destructions and calls.
 (Automatic objects are not destroyed as a result of calling
 \tcode{exit()}.)\footnote{Objects with automatic storage duration are all destroyed in a program whose
-\tcode{main} function\iref{basic.start.main}
+\link{\tcode{main} function}{\ref{basic.start.main}}
 contains no automatic objects and executes the call to
 \tcode{exit()}.
 Control can be transferred directly to such a
@@ -1758,7 +1749,8 @@ int at_quick_exit(@\placeholder{atexit-handler}@* f) noexcept;
 \effects The \tcode{at_quick_exit()} functions register the function pointed to by \tcode{f}
 to be called without arguments when \tcode{quick_exit} is called.
 It is unspecified whether a call to \tcode{at_quick_exit()} that does not
-happen before\iref{intro.multithread} all calls to \tcode{quick_exit} will succeed. \begin{note} The
+\deflinkx{happen before}{happens before}{\ref{intro.multithread}}
+all calls to \tcode{quick_exit} will succeed. \begin{note} The
 \tcode{at_quick_exit()} functions do not introduce a
 data race\iref{res.on.data.races}. \end{note}
 \begin{note}
@@ -1804,7 +1796,7 @@ After calling registered functions, \tcode{quick_exit} shall call \tcode{_Exit(s
 \pnum
 \remarks
 \indextext{signal-safe!\idxcode{quick_exit}}%
-The function \tcode{quick_exit} is signal-safe\iref{support.signal}
+The function \tcode{quick_exit} is \deflinkx{signal-safe}{evaluation!signal-safe}{\ref{support.signal}}
 when the functions registered with \tcode{at_quick_exit} are.
 \end{itemdescr}
 
@@ -1907,7 +1899,7 @@ and thereby displace the default versions defined by the
 \pnum
 \effects
 The
-allocation functions\iref{basic.stc.dynamic.allocation}
+\link{allocation functions}{\ref{basic.stc.dynamic.allocation}}
 called by a
 \grammarterm{new-expression}\iref{expr.new}
 to allocate
@@ -1952,7 +1944,7 @@ a null pointer value, throws
 \tcode{bad_alloc}.
 \item
 Otherwise, the function calls the current
-\tcode{new_handler} function\iref{new.handler}.
+\link{\tcode{new_handler}}{\ref{new.handler}} function.
 If the called function returns, the loop repeats.
 \item
 The loop terminates when an attempt to allocate the requested storage is
@@ -2024,7 +2016,7 @@ void operator delete(void* ptr, std::size_t size, std::align_val_t alignment) no
 \pnum
 \effects
 The
-deallocation functions\iref{basic.stc.dynamic.deallocation}
+\link{deallocation functions}{\ref{basic.stc.dynamic.deallocation}}
 called by a
 \grammarterm{delete-expression}\iref{expr.delete}
 to render the value of \tcode{ptr} invalid.
@@ -2057,7 +2049,7 @@ which has not been invalidated by an intervening call to
 
 \pnum
 \requires
-If an implementation has strict pointer safety\iref{basic.stc.dynamic.safety}
+If an implementation has \deflink{strict pointer safety}{\ref{basic.stc.dynamic.safety}}
 then \tcode{ptr} shall be a safely-derived pointer.
 
 \pnum
@@ -2123,7 +2115,7 @@ void operator delete(void* ptr, std::align_val_t alignment, const std::nothrow_t
 \pnum
 \effects
 The
-deallocation functions\iref{basic.stc.dynamic.deallocation}
+\link{deallocation functions}{\ref{basic.stc.dynamic.deallocation}}
 called by the implementation
 to render the value of \tcode{ptr} invalid
 when the constructor invoked from a nothrow
@@ -2147,7 +2139,7 @@ which has not been invalidated by an intervening call to
 
 \pnum
 \requires
-If an implementation has strict pointer safety\iref{basic.stc.dynamic.safety}
+If an implementation has \deflink{strict pointer safety}{\ref{basic.stc.dynamic.safety}}
 then \tcode{ptr} shall be a safely-derived pointer.
 
 \pnum
@@ -2178,7 +2170,7 @@ respectively.
 \pnum
 \effects
 The
-allocation functions\iref{basic.stc.dynamic.allocation}
+\link{allocation functions}{\ref{basic.stc.dynamic.allocation}}
 called by the array form of a
 \grammarterm{new-expression}\iref{expr.new}
 to allocate
@@ -2279,7 +2271,7 @@ void operator delete[](void* ptr, std::size_t size, std::align_val_t alignment)
 \pnum
 \effects
 The
-deallocation functions\iref{basic.stc.dynamic.deallocation}
+\link{deallocation functions}{\ref{basic.stc.dynamic.deallocation}}
 called by the array form of a
 \grammarterm{delete-expression}
 to render the value of \tcode{ptr} invalid.
@@ -2312,7 +2304,7 @@ which has not been invalidated by an intervening call to
 
 \pnum
 \requires
-If an implementation has strict pointer safety\iref{basic.stc.dynamic.safety}
+If an implementation has \deflink{strict pointer safety}{\ref{basic.stc.dynamic.safety}}
 then \tcode{ptr} shall be a safely-derived pointer.
 
 \pnum
@@ -2359,7 +2351,7 @@ void operator delete[](void* ptr, std::align_val_t alignment, const std::nothrow
 \pnum
 \effects
 The
-deallocation functions\iref{basic.stc.dynamic.deallocation}
+\link{deallocation functions}{\ref{basic.stc.dynamic.deallocation}}
 called by the implementation
 to render the value of \tcode{ptr} invalid
 when the constructor invoked from a nothrow
@@ -2383,7 +2375,7 @@ which has not been invalidated by an intervening call to
 
 \pnum
 \requires
-If an implementation has strict pointer safety\iref{basic.stc.dynamic.safety}
+If an implementation has \deflink{strict pointer safety}{\ref{basic.stc.dynamic.safety}}
 then \tcode{ptr} shall be a safely-derived pointer.
 
 \pnum
@@ -2462,7 +2454,7 @@ Intentionally performs no action.
 
 \pnum
 \requires
-If an implementation has strict pointer safety\iref{basic.stc.dynamic.safety}
+If an implementation has \deflink{strict pointer safety}{\ref{basic.stc.dynamic.safety}}
 then \tcode{ptr} shall be a safely-derived pointer.
 
 \pnum
@@ -2485,7 +2477,7 @@ Intentionally performs no action.
 
 \pnum
 \requires
-If an implementation has strict pointer safety\iref{basic.stc.dynamic.safety}
+If an implementation has \deflink{strict pointer safety}{\ref{basic.stc.dynamic.safety}}
 then \tcode{ptr} shall be a safely-derived pointer.
 
 \pnum
@@ -2510,8 +2502,8 @@ versions of \tcode{operator delete}, the C standard library function
 introduce a data race\iref{res.on.data.races}.
 Calls to these functions that allocate or deallocate a particular unit
 of storage shall occur in a single total order, and each such deallocation call
-shall happen before\iref{intro.multithread} the next allocation (if any) in
-this order.
+shall \deflinkx{happen before}{happens before}{\ref{intro.multithread}}
+the next allocation (if any) in this order.
 
 \rSec2[alloc.errors]{Storage allocation errors}
 
@@ -2574,7 +2566,8 @@ An \impldef{return value of \tcode{bad_alloc::what}} \ntbs{}.
 
 \pnum
 \remarks
-The message may be a null-terminated multibyte string\iref{multibyte.strings},
+The message may be a
+\deflinkx{null-terminated multibyte string}{string!null-terminated multibyte}{\ref{multibyte.strings}},
 suitable for conversion and display as a
 \tcode{wstring}~(\ref{string.classes}, \ref{locale.codecvt}).
 \end{itemdescr}
@@ -2620,17 +2613,19 @@ An \impldef{return value of \tcode{bad_array_new_length::what}} \ntbs{}.
 
 \pnum
 \remarks
-The message may be a null-terminated multibyte string\iref{multibyte.strings},
+The message may be a
+\deflinkx{null-terminated multibyte string}{string!null-terminated multibyte}{\ref{multibyte.strings}},
 suitable for conversion and display as a
 \tcode{wstring}~(\ref{string.classes}, \ref{locale.codecvt}).
 \end{itemdescr}
 
 \rSec3[new.handler]{Type \tcode{new_handler}}
 
-\indexlibrary{\idxcode{new_handler}}%
+\begin{indexed}{\indexlibrary{\idxcode{new_handler}}}
 \begin{itemdecl}
 using new_handler = void (*)();
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2707,8 +2702,8 @@ template<class T> [[nodiscard]] constexpr T* launder(T* p) noexcept;
 \pnum
 \requires
 \tcode{p} represents the address \placeholder{A} of a byte in memory.
-An object \placeholder{X} that is within its lifetime\iref{basic.life}
-and whose type is similar\iref{conv.qual} to \tcode{T}
+An object \placeholder{X} that is within its \deflink{lifetime}{\ref{basic.life}}
+and whose type is \deflinkx{similar}{similar types}{\ref{conv.qual}} to \tcode{T}
 is located at the address \placeholder{A}.
 All bytes of storage that would be reachable through the result
 are reachable through \tcode{p} (see below).
@@ -2935,7 +2930,8 @@ An \impldef{return value of \tcode{type_info::name()}} \ntbs{}.
 
 \pnum
 \remarks
-The message may be a null-terminated multibyte string\iref{multibyte.strings},
+The message may be a
+\deflinkx{null-terminated multibyte string}{string!null-terminated multibyte}{\ref{multibyte.strings}},
 suitable for conversion and display as a
 \tcode{wstring}~(\ref{string.classes}, \ref{locale.codecvt})
 \end{itemdescr}
@@ -3002,7 +2998,8 @@ An \impldef{return value of \tcode{bad_cast::what}} \ntbs{}.
 
 \pnum
 \remarks
-The message may be a null-terminated multibyte string\iref{multibyte.strings},
+The message may be a
+\deflinkx{null-terminated multibyte string}{string!null-terminated multibyte}{\ref{multibyte.strings}},
 suitable for conversion and display as a
 \tcode{wstring}~(\ref{string.classes}, \ref{locale.codecvt})
 \end{itemdescr}
@@ -3069,7 +3066,8 @@ An \impldef{return value of \tcode{bad_typeid::what}} \ntbs{}.
 
 \pnum
 \remarks
-The message may be a null-terminated multibyte string\iref{multibyte.strings},
+The message may be a
+\deflinkx{null-terminated multibyte string}{string!null-terminated multibyte}{\ref{multibyte.strings}},
 suitable for conversion and display as a
 \tcode{wstring}~(\ref{string.classes}, \ref{locale.codecvt})
 \end{itemdescr}
@@ -3195,7 +3193,8 @@ An \impldef{return value of \tcode{exception::what}} \ntbs{}.
 
 \pnum
 \remarks
-The message may be a null-terminated multibyte string\iref{multibyte.strings},
+The message may be a
+\deflinkx{null-terminated multibyte string}{string!null-terminated multibyte}{\ref{multibyte.strings}},
 suitable for conversion and display as a
 \tcode{wstring}~(\ref{string.classes}, \ref{locale.codecvt}).
 The return value remains valid until the exception object from which
@@ -3264,7 +3263,8 @@ An \impldef{return value of \tcode{bad_exception::what}} \ntbs{}.
 
 \pnum
 \remarks
-The message may be a null-terminated multibyte string\iref{multibyte.strings},
+The message may be a
+\deflinkx{null-terminated multibyte string}{string!null-terminated multibyte}{\ref{multibyte.strings}},
 suitable for conversion and display as a
 \tcode{wstring}~(\ref{string.classes}, \ref{locale.codecvt}).
 \end{itemdescr}
@@ -3368,21 +3368,22 @@ int uncaught_exceptions() noexcept;
 \begin{itemdescr}
 \pnum
 \returns
-The number of uncaught exceptions\iref{except.uncaught}.
+The number of \link{uncaught exceptions}{\ref{except.uncaught}}.
 
 \pnum
 \remarks
 When \tcode{uncaught_exceptions() > 0},
-throwing an exception can result in a call of\\
-\tcode{std::terminate()}\iref{except.terminate}.
+throwing an exception can result in a call of
+\link{\tcode{std::terminate()}}{\ref{except.terminate}}.
 \end{itemdescr}
 
 \rSec2[propagation]{Exception propagation}
 
-\indexlibrary{\idxcode{exception_ptr}}%
+\begin{indexed}{\indexlibrary{\idxcode{exception_ptr}}}
 \begin{itemdecl}
 using exception_ptr = @\unspec@;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -3427,8 +3428,9 @@ exception_ptr current_exception() noexcept;
 
 \begin{itemdescr}
 \pnum
-\returns An \tcode{exception_ptr} object that refers to
-the currently handled exception\iref{except.handle} or a copy of the currently
+\returns An \tcode{exception_ptr} object that refers to the
+\deflinkx{currently handled exception}{exception handling!currently handled exception}{\ref{except.handle}}
+or a copy of the currently
 handled exception, or a null \tcode{exception_ptr} object if no exception is being
 handled. The referenced object shall remain valid at least as long as there is an
 \tcode{exception_ptr} object that refers to it.
@@ -3590,7 +3592,7 @@ if (auto p = dynamic_cast<const nested_exception*>(addressof(e)))
 The header \tcode{<initializer_list>} defines a class template and several
 support functions related to list-initialization~(see \ref{dcl.init.list}).
 \indextext{signal-safe!\idxcode{initializer_list} functions}%
-All functions specified in this subclause are signal-safe\iref{support.signal}.
+All functions specified in this subclause are \deflinkx{signal-safe}{evaluation!signal-safe}{\ref{support.signal}}.
 
 \rSec2[initializer_list.syn]{Header \tcode{<initializer_list>} synopsis}
 \indexlibrary{\idxcode{initializer_list}}%
@@ -4682,7 +4684,7 @@ provide further compatibility with C code.
 \pnum
 Calls to the function
 \indexlibrary{\idxcode{getenv}}%
-\tcode{getenv}\iref{cstdlib.syn} shall not introduce a data
+\liblinkx{\tcode{getenv}}{getenv}{\ref{cstdlib.syn}} shall not introduce a data
 race\iref{res.on.data.races} provided that nothing modifies the environment.
 \begin{note} Calls to the POSIX functions
 \indexlibrary{\idxcode{setenv}}%
@@ -4692,7 +4694,7 @@ race\iref{res.on.data.races} provided that nothing modifies the environment.
 environment. \end{note}
 
 \pnum
-A call to the \tcode{setlocale} function\iref{c.locales}
+A call to the \liblinkx{\tcode{setlocale}}{setlocale}{\ref{c.locales}} function
 may introduce a data race with other
 calls to the \tcode{setlocale} function or with calls to functions that are
 affected by the current C locale. The implementation shall behave as if no
@@ -4709,13 +4711,13 @@ function.
 \indexlibrary{\idxcode{va_arg}}%
 \begin{codeblock}
 namespace std {
-  using va_list = @\seebelow@;
+  using @\libentity{va_list}@ = @\seebelow@;
 }
 
-#define va_arg(V, P) @\seebelow@
-#define va_copy(VDST, VSRC) @\seebelow@
-#define va_end(V) @\seebelow@
-#define va_start(V, P) @\seebelow@
+#define @\libentity{va_arg}@(V, P) @\seebelow@
+#define @\libentity{va_copy}@(VDST, VSRC) @\seebelow@
+#define @\libentity{va_end}@(V) @\seebelow@
+#define @\libentity{va_start}@(V, P) @\seebelow@
 \end{codeblock}
 
 \pnum
diff --git a/source/templates.tex b/source/templates.tex
index 11c7f15..0d388ca 100644
--- a/source/templates.tex
+++ b/source/templates.tex
@@ -135,7 +135,7 @@ a class template declaration, if the
 class name
 is a
 \grammarterm{simple-template-id},
-the declaration declares a class template partial specialization\iref{temp.class.spec}.
+the declaration declares a \link{class template partial specialization}{\ref{temp.class.spec}}.
 \end{note}
 
 \pnum
@@ -149,17 +149,17 @@ no declarator is permitted.
 
 \pnum
 \indextext{template name!linkage of}%
-A template name has linkage\iref{basic.link}.
+A template name has \link{linkage}{\ref{basic.link}}.
 Specializations (explicit or implicit) of
 a template that has internal linkage are
 distinct from all specializations in other translation
 units.
-A template, a template explicit specialization\iref{temp.expl.spec}, and a class
+A template, a template \link{explicit specialization}{\ref{temp.expl.spec}}, and a class
 template partial specialization shall not have C linkage. Use of a linkage specification
 other than \tcode{"C"} or \tcode{"C++"} with any of these constructs is
 conditionally-supported, with
 \impldef{semantics of linkage specification on templates} semantics.
-Template definitions shall obey the one-definition rule\iref{basic.def.odr}.
+Template definitions shall obey the \link{one-definition rule}{\ref{basic.def.odr}}.
 \begin{note}
 Default arguments for function templates and for member functions of
 class templates are considered definitions for the purpose of template
@@ -224,8 +224,8 @@ int f();            // error: parentheses required around \tcode{==} expression
 A function template, member function of a class template, variable template,
 or static data
 member of a class template shall be defined in every translation unit in
-which it is implicitly instantiated\iref{temp.inst} unless the
-corresponding specialization is explicitly instantiated\iref{temp.explicit}
+which it is \link{implicitly instantiated}{\ref{temp.inst}} unless the
+corresponding specialization is \link{explicitly instantiated}{\ref{temp.explicit}}
 in some translation unit; no diagnostic is required.
 
 \rSec1[temp.param]{Template parameters}
@@ -382,7 +382,7 @@ types:
 
 \item \tcode{std::nullptr_t}, or
 
-\item a type that contains a placeholder type\iref{dcl.spec.auto}.
+\item a type that contains a \deflink{placeholder type}{\ref{dcl.spec.auto}}.
 \end{itemize}
 
 \pnum
@@ -574,7 +574,7 @@ A default
 may be specified for any kind of
 \grammarterm{template-parameter}
 (type, non-type, template)
-that is not a template parameter pack\iref{temp.variadic}.
+that is not a \deflink{template parameter pack}{\ref{temp.variadic}}.
 A default
 \grammarterm{template-argument}
 may be specified in a template declaration.
@@ -737,7 +737,7 @@ If a \grammarterm{template-parameter} is a
 optional \grammarterm{identifier} or is a
 \grammarterm{parameter-declaration} that declares a
 pack\iref{dcl.fct}, then the \grammarterm{template-parameter}
-is a template parameter pack\iref{temp.variadic}.
+is a \deflink{template parameter pack}{\ref{temp.variadic}}.
 A template parameter pack that is a \grammarterm{parameter-declaration} whose type
 contains one or more unexpanded packs is a pack expansion. Similarly,
 a template parameter pack that is a \grammarterm{type-parameter} with a
@@ -766,7 +766,7 @@ template <class... T, T... Values>              // error: \tcode{Values} expands
 \rSec1[temp.names]{Names of template specializations}
 
 \pnum
-A template specialization\iref{temp.spec} can be referred to by a
+A \link{template specialization}{\ref{temp.spec}} can be referred to by a
 \grammarterm{template-id}:
 
 \begin{bnf}
@@ -800,7 +800,7 @@ A template specialization\iref{temp.spec} can be referred to by a
 \end{bnf}
 
 \begin{note}
-The name lookup rules\iref{basic.lookup} are used to associate the use of
+The \link{name lookup}{\ref{basic.lookup}} rules are used to associate the use of
 a name with a template declaration;
 that is, to identify a name as a
 \grammarterm{template-name}.
@@ -1026,8 +1026,8 @@ specified in a
 shall match the type and form specified for the corresponding
 parameter declared by the template in its
 \grammarterm{template-parameter-list}.
-When the parameter declared by the template is a template
-parameter pack\iref{temp.variadic}, it will correspond to zero or more
+When the parameter declared by the template is a
+\deflink{template parameter pack}{\ref{temp.variadic}}, it will correspond to zero or more
 \grammarterm{template-argument}{s}.
 \begin{example}
 \begin{codeblock}
@@ -1192,7 +1192,7 @@ the program is ill-formed.
 \pnum
 When a \grammarterm{simple-template-id} does not name a function,
 a default \grammarterm{template-argument} is
-implicitly instantiated\iref{temp.inst}
+\link{implicitly instantiated}{\ref{temp.inst}}
 when the value of that default argument is needed.
 \begin{example}
 \begin{codeblock}
@@ -1204,7 +1204,7 @@ The default argument for \tcode{U} is instantiated to form the type \tcode{S<boo
 
 \pnum
 A \grammarterm{template-argument} followed by an ellipsis is
-a pack expansion\iref{temp.variadic}.
+a \deflink{pack expansion}{\ref{temp.variadic}}.
 
 \rSec2[temp.arg.type]{Template type arguments}
 
@@ -1239,17 +1239,17 @@ void f() {
 \end{codeblock}
 \end{example}
 \begin{note}
-A template type argument may be an incomplete type\iref{basic.types}.
+A template type argument may be an \deflinkx{incomplete type}{type!incomplete}{\ref{basic.types}}.
 \end{note}
 
 \rSec2[temp.arg.nontype]{Template non-type arguments}
 
 \pnum
 If the type of a \grammarterm{template-parameter}
-contains a placeholder type~(\ref{dcl.spec.auto}, \ref{temp.param}),
+contains a \deflink{placeholder type}{\ref{dcl.spec.auto}},
 the deduced parameter type is determined
 from the type of the \grammarterm{template-argument}
-by placeholder type deduction\iref{dcl.type.auto.deduct}.
+by \link{placeholder type deduction}{\ref{dcl.type.auto.deduct}}.
 If a deduced parameter type is not permitted
 for a \grammarterm{template-parameter} declaration\iref{temp.param},
 the program is ill-formed.
@@ -1259,20 +1259,19 @@ A
 \grammarterm{template-argument}
 for a non-type
 \grammarterm{template-parameter}
-shall be
-a converted
-constant expression\iref{expr.const}
+shall be a
+\deflinkx{converted constant expression}{expression!converted constant}{\ref{expr.const}}
 of the type of the \grammarterm{template-parameter}.
 For a non-type \grammarterm{template-parameter} of reference or pointer type,
 the value of the constant expression shall not refer to
 (or for a pointer type, shall not be the address of):
 
 \begin{itemize}
-\item a subobject\iref{intro.object},
-\item a temporary object\iref{class.temporary},
-\item a string literal\iref{lex.string},
-\item the result of a \tcode{typeid} expression\iref{expr.typeid}, or
-\item a predefined \tcode{__func__} variable\iref{dcl.fct.def.general}.
+\item a \deflink{subobject}{\ref{intro.object}},
+\item a \link{temporary object}{\ref{class.temporary}},
+\item a \link{string literal}{\ref{lex.string}},
+\item the result of a \link{\tcode{typeid} expression}{\ref{expr.typeid}}, or
+\item a predefined \linkx{\tcode{__func__}}{\idxcode{__func__}}{\ref{dcl.fct.def.general}} variable.
 \end{itemize}
 
 \begin{note}
@@ -1314,7 +1313,7 @@ B<2.5> b3;                      // error: template parameter type cannot be \tco
 
 \pnum
 \begin{note}
-A string literal\iref{lex.string}
+A \link{string literal}{\ref{lex.string}}
 is not an acceptable
 \grammarterm{template-argument}.
 \begin{example}
@@ -1389,7 +1388,7 @@ considered even if their parameter lists match that of the template template
 parameter.
 
 \pnum
-Any partial specializations\iref{temp.class.spec} associated with the
+Any \link{partial specializations}{\ref{temp.class.spec}} associated with the
 primary class template or primary variable template are considered when a
 specialization based on the template
 \grammarterm{template-parameter}
@@ -1495,8 +1494,8 @@ if, given the following rewrite to two function templates,
 the function template corresponding to \tcode{P}
 is at least as specialized as
 the function template corresponding to \tcode{A}
-according to the partial ordering rules
-for function templates\iref{temp.func.order}.
+according to the \link{partial ordering rules
+for function templates}{\ref{temp.func.order}}.
 Given an invented class template \tcode{X}
 with the \grammarterm{template-head} of \tcode{A} (including default arguments
 and \grammarterm{requires-clause}, if any):
@@ -1540,9 +1539,9 @@ operands that specifies requirements on template arguments.
 The operands of a logical operation are constraints.
 There are three different kinds of constraints:
 \begin{itemize}
-\item conjunctions\iref{temp.constr.op},
-\item disjunctions\iref{temp.constr.op}, and
-\item atomic constraints\iref{temp.constr.atomic}
+\item \deflinkx{conjunctions}{conjunction}{\ref{temp.constr.op}},
+\item \deflinkx{disjunctions}{disjunction}{\ref{temp.constr.op}}, and
+\item \deflinkx{atomic constraints}{atomic constraint}{\ref{temp.constr.atomic}}
 \end{itemize}
 
 \pnum
@@ -1555,7 +1554,7 @@ a class template,
 a variable template, or
 an alias template\iref{temp.names}
 requires the satisfaction of its constraints.
-Overload resolution\iref{over.match.viable}
+\link{Overload resolution}{\ref{over.match.viable}}
 requires the satisfaction of constraints
 on functions and function templates.
 \end{note}
@@ -2032,7 +2031,7 @@ declares \tcode{y} and \tcode{z} to be of the same type.
 \end{example}
 
 \pnum
-If an expression $e$ is type-dependent\iref{temp.dep.expr},
+If an expression $e$ is \link{type-dependent}{\ref{temp.dep.expr}},
 \tcode{decltype($e$)}
 denotes a unique dependent type. Two such \grammarterm{decltype-specifier}{s}
 refer to the same type only if their \grammarterm{expression}{s} are
@@ -2058,7 +2057,7 @@ template<class T1, int I> void sort<T1, I>(T1 data[I]);         // error
 \end{codeblock}
 \end{example}
 \begin{note}
-However, this syntax is allowed in class template partial specializations\iref{temp.class.spec}.
+However, this syntax is allowed in \link{class template partial specializations}{\ref{temp.class.spec}}.
 \end{note}
 
 \pnum
@@ -2087,8 +2086,8 @@ default arguments
 \grammarterm{requires-clause}{s},
 or
 \grammarterm{noexcept-specifier}{s}.
-For the purpose of instantiation, the substatements of a constexpr if
-statement\iref{stmt.if} are considered definitions.
+For the purpose of instantiation, the substatements of a
+\deflink{constexpr if}{\ref{stmt.if}} statement are considered definitions.
 
 \pnum
 Because an \grammarterm{alias-declaration} cannot declare a
@@ -2390,7 +2389,7 @@ void S<T>::g(U) { }             // error: no matching function in \tcode{S<T>}
 
 \pnum
 A local class of non-closure type shall not have member templates.
-Access control rules\iref{class.access}
+\link{Access control rules}{\ref{class.access}}
 apply to member template names.
 A destructor shall not be a member
 template.
@@ -2499,8 +2498,8 @@ conversion function template
 in a base class.
 
 \pnum
-Overload resolution\iref{over.ics.rank} and partial
-ordering\iref{temp.func.order} are used to select the best conversion function
+\link{Overload resolution}{\ref{over.ics.rank}} and \link{partial
+ordering}{\ref{temp.func.order}} are used to select the best conversion function
 among multiple
 specializations of conversion function templates
 and/or non-template
@@ -2615,7 +2614,7 @@ the \grammarterm{alignment-specifier} without the ellipsis.
 \item In a \grammarterm{capture-list}\iref{expr.prim.lambda}; the pattern is
 a \grammarterm{capture}.
 
-\item In a \tcode{sizeof...} expression\iref{expr.sizeof}; the pattern is an
+\item In a \link{\tcode{sizeof...} expression}{\ref{expr.sizeof}}; the pattern is an
 \grammarterm{identifier}.
 
 \item In a \grammarterm{fold-expression}\iref{expr.prim.fold};
@@ -2912,8 +2911,8 @@ class A {
 
 \pnum
 A template friend declaration specifies that all specializations of that
-template, whether they are implicitly instantiated\iref{temp.inst}, partially
-specialized\iref{temp.class.spec} or explicitly specialized\iref{temp.expl.spec},
+template, whether they are \link{implicitly instantiated}{\ref{temp.inst}}, \link{partially
+specialized}{\ref{temp.class.spec}} or \link{explicitly specialized}{\ref{temp.expl.spec}},
 are friends of the class containing the template friend declaration.
 \begin{example}
 \begin{codeblock}
@@ -3180,8 +3179,8 @@ template< int X > class A<X,&array> { };        // error
 
 \end{example}
 \item
-The specialization shall be more specialized than the primary
-template\iref{temp.class.order}.
+The specialization shall be \deflink{more specialized}{\ref{temp.class.order}}
+than the primary template.
 
 \item
 The template parameter list of a specialization shall not contain default
@@ -3220,7 +3219,7 @@ If exactly one matching specialization is found, the instantiation is
 generated from that specialization.
 \item
 If more than one matching specialization is found,
-the partial order rules\iref{temp.class.order} are used to determine
+the \link{partial order rules}{\ref{temp.class.order}} are used to determine
 whether one of the specializations is more specialized than the
 others.
 If none of the specializations is more specialized than all of the
@@ -3234,7 +3233,7 @@ primary template.
 \pnum
 A partial specialization matches a given actual template argument
 list if the template arguments of the partial specialization can be
-deduced from the actual template argument list\iref{temp.deduct},
+\link{deduced}{\ref{temp.deduct}} from the actual template argument list,
 and the deduced template arguments satisfy the associated constraints
 of the partial specialization, if any\iref{temp.constr.decl}.
 \begin{example}
@@ -3298,8 +3297,8 @@ of the primary template.
 For two class template partial specializations,
 the first is \defn{more specialized} than the second if, given the following
 rewrite to two function templates, the first function template is more
-specialized than the second according to the ordering rules for function
-templates\iref{temp.func.order}:
+specialized than the second according to the \link{ordering rules for function
+templates}{\ref{temp.func.order}}:
 
 \begin{itemize}
 \item
@@ -3478,7 +3477,7 @@ declarations of non-template functions do not merely guide
 overload resolution of
 function template specializations
 with the same name.
-If such a non-template function is odr-used\iref{basic.def.odr} in a program, it must be defined;
+If such a non-template function is \link{odr-used}{\ref{basic.def.odr}} in a program, it must be defined;
 it will not be implicitly instantiated using the function template definition.}
 
 \rSec3[temp.over.link]{Function template overloading}
@@ -3513,8 +3512,8 @@ void h(int* p) {
 \end{example}
 
 \pnum
-Such specializations are distinct functions and do not violate the one-definition
-rule\iref{basic.def.odr}.
+Such specializations are distinct functions and do not violate the
+\link{one-definition rule}{\ref{basic.def.odr}}.
 
 \pnum
 The signature of a function template
@@ -3566,7 +3565,7 @@ For example, a template type parameter can be used in the
 Two expressions involving template parameters are considered
 \defnx{equivalent}{equivalent!expressions}
 if two function definitions containing the expressions would satisfy
-the one-definition rule\iref{basic.def.odr}, except that the tokens used
+the \link{one-definition rule}{\ref{basic.def.odr}}, except that the tokens used
 to name the template parameters may differ as long as a token used to
 name a template parameter in one expression is replaced by another token
 that names the same template parameter in the other expression.
@@ -3700,7 +3699,7 @@ template <int I> void f(A<I>, A<I+1+2+3+4>);
 \indextext{ordering!function template partial|see{template, function, partial ordering}}%
 If a function template is overloaded,
 the use of a function template specialization might be ambiguous because
-template argument deduction\iref{temp.deduct} may associate the function
+\link{template argument deduction}{\ref{temp.deduct}} may associate the function
 template specialization with more than one function template declaration.
 \defnx{Partial ordering}{template!function!partial ordering}
 of overloaded function template declarations is used in the following contexts
@@ -3718,8 +3717,8 @@ function template
 specialization
 is selected to match a placement operator new~(\ref{basic.stc.dynamic.deallocation}, \ref{expr.new});
 \item
-when a friend function declaration\iref{temp.friend}, an
-explicit instantiation\iref{temp.explicit} or an explicit specialization\iref{temp.expl.spec} refers to
+when a \link{friend function declaration}{\ref{temp.friend}}, an
+\link{explicit instantiation}{\ref{temp.explicit}} or an \link{explicit specialization}{\ref{temp.expl.spec}} refers to
 a function template specialization.
 \end{itemize}
 
@@ -3738,7 +3737,8 @@ the more constrained template as described by the rules in
 
 \pnum
 To produce the transformed template, for each type, non-type, or template
-template parameter (including template parameter packs\iref{temp.variadic}
+template parameter (including
+\deflinkx{template parameter packs}{template parameter pack}{\ref{temp.variadic}}
 thereof) synthesize a unique type, value, or class template
 respectively and substitute it for each occurrence of that parameter
 in the function type of the template.
@@ -4220,7 +4220,7 @@ The program is ill-formed, no diagnostic required, if:
 \begin{itemize}
 \item
 no valid specialization can be generated for a template
-or a substatement of a constexpr if statement\iref{stmt.if} within a template
+or a substatement of a \deflink{constexpr if}{\ref{stmt.if}} statement within a template
 and the template is not instantiated, or
 \item
 no substitution of template arguments
@@ -4255,7 +4255,7 @@ was a pack expansion and the corresponding pack is empty, or
 \item an instantiation uses a default argument or default template argument
 that had not been defined at the point at which the template was defined, or
 
-\item constant expression evaluation\iref{expr.const} within the template
+\item \link{constant expression evaluation}{\ref{expr.const}} within the template
 instantiation uses
   \begin{itemize}
   \item the value of a const object of integral or unscoped enumeration type or
@@ -4407,7 +4407,7 @@ member functions of class templates are considered definitions\iref{temp.decls}.
 
 \pnum
 Like normal (non-template) classes, class templates have an
-injected-class-name\iref{class}.
+\deflink{injected-class-name}{\ref{class}}.
 The
 injected-class-name can be used
 as a \grammarterm{template-name} or a \grammarterm{type-name}.
@@ -4580,9 +4580,9 @@ if the name of the base class
 or the name of a member of the
 base class is the same as the name of a
 \grammarterm{template-parameter},
-the base class name or member name hides the
+the base class name or member name \link{hides}{\ref{basic.scope.hiding}} the
 \grammarterm{template-parameter}
-name\iref{basic.scope.hiding}.
+name.
 \begin{example}
 
 \begin{codeblock}
@@ -4638,15 +4638,15 @@ if
 
 \begin{itemize}
 \item
-any of the expressions in the \grammarterm{expression-list} is a pack
-expansion\iref{temp.variadic},
+any of the expressions in the \grammarterm{expression-list} is a
+\deflink{pack expansion}{\ref{temp.variadic}},
 
 \item
 any of the expressions
 or \grammarterm{braced-init-list}{s}
 in the
 \grammarterm{expression-list}
-is type-dependent\iref{temp.dep.expr}, or
+is \link{type-dependent}{\ref{temp.dep.expr}}, or
 
 \item
 the \grammarterm{unqualified-id}
@@ -4687,7 +4687,7 @@ explicitly depend on the
 
 \pnum
 In the definition of a class or class template,
-the scope of a dependent base class\iref{temp.dep.type}
+the scope of a \deflinkx{dependent base class}{base class!dependent}{\ref{temp.dep.type}}
 is not examined during unqualified
 name lookup either at the point of definition of the
 class template or member or during an instantiation of
@@ -4756,7 +4756,7 @@ if it is
 \item
 in the definition of a class template, a nested class of a class template,
 a member of a class template, or a member of a nested class of a class template,
-the injected-class-name\iref{class} of the class template or nested class,
+the \deflink{injected-class-name}{\ref{class}} of the class template or nested class,
 \item
 in the definition of a primary class template
 or a member of a primary class template, the name of the
@@ -4786,9 +4786,9 @@ $n^\text{th}$
 template argument has the value of the
 $n^\text{th}$
 template parameter of the class template.
-If the $n^\text{th}$ template parameter is a template
-parameter pack\iref{temp.variadic}, the $n^\text{th}$ template argument is a pack
-expansion\iref{temp.variadic} whose pattern is the name of
+If the $n^\text{th}$ template parameter is a
+\deflink{template parameter pack}{\ref{temp.variadic}}, the $n^\text{th}$ template argument is a
+\deflink{pack expansion}{\ref{temp.variadic}} whose pattern is the name of
 the template parameter pack.
 
 \pnum
@@ -4904,10 +4904,10 @@ then the \grammarterm{qualified-id} is a member of an unknown specialization;
 see below. \end{note}
 
 \item
-An \grammarterm{id-expression} denoting the member in a class member access
-expression\iref{expr.ref} for which the type of the object expression is the
-current instantiation, and the \grammarterm{id-expression}, when looked
-up\iref{basic.lookup.classref}, refers to at least one member of a class
+An \grammarterm{id-expression} denoting the member in a \link{class member access}{\ref{expr.ref}}
+expression for which the type of the object expression is the
+current instantiation, and the \grammarterm{id-expression}, when \link{looked
+up}{\ref{basic.lookup.classref}}, refers to at least one member of a class
 that is the current
 instantiation or a non-dependent base class thereof. \begin{note} If no such
 member is found, and the current instantiation has any dependent base classes,
@@ -4955,8 +4955,8 @@ dependent base class, and name lookup of the \grammarterm{qualified-id} does not
 find any member of a class that is the current instantiation or a non-dependent
 base class thereof.
 
-\item An \grammarterm{id-expression} denoting the member in a class member access
-expression\iref{expr.ref} in which either
+\item An \grammarterm{id-expression} denoting the member in a
+\link{class member access}{\ref{expr.ref}} expression in which either
 \begin{itemize}
 \item the type of the object expression is the current instantiation, the
 current instantiation has at least one dependent base class, and name lookup
@@ -5046,11 +5046,11 @@ in which either the template name is a template parameter or any of the
 template arguments is a dependent type or an expression that is type-dependent
 or value-dependent or is a pack expansion
 \begin{note}
-This includes an injected-class-name\iref{class} of a class template
+This includes an \deflink{injected-class-name}{\ref{class}} of a class template
 used without a \grammarterm{template-argument-list}.
 \end{note}, or
 \item denoted by \tcode{decltype(}\grammarterm{expression}{}\tcode{)},
-where \grammarterm{expression} is type-dependent\iref{temp.dep.expr}.
+where \grammarterm{expression} is \link{type-dependent}{\ref{temp.dep.expr}}.
 \end{itemize}
 
 \pnum
@@ -5090,7 +5090,7 @@ an
 associated by name lookup with
 a non-type \grammarterm{template-parameter}
 declared with a type
-that contains a placeholder type\iref{dcl.spec.auto},
+that contains a \deflink{placeholder type}{\ref{dcl.spec.auto}},
 
 \item
 an \grammarterm{identifier} associated by name lookup with one or more
@@ -5099,13 +5099,13 @@ with a return type that contains a placeholder type,
 
 \item
 an \grammarterm{identifier} associated by name lookup with
-a structured binding declaration\iref{dcl.struct.bind} whose
+a \link{structured binding declaration}{\ref{dcl.struct.bind}} whose
 \grammarterm{brace-or-equal-initializer} is type-dependent,
 
 \item
 the
 \grammarterm{identifier}
-\tcode{__func__}\iref{dcl.fct.def.general}, where any enclosing function is a
+\linkx{\tcode{__func__}}{\idxcode{__func__}}{\ref{dcl.fct.def.general}}, where any enclosing function is a
 template, a member of a class template, or a generic lambda,
 
 \item
@@ -5172,7 +5172,7 @@ postfix-expression \terminal{->} pseudo-destructor-name\br
 see~\ref{support.types}.\end{note}
 
 \pnum
-A class member access expression\iref{expr.ref} is
+A \link{class member access expression}{\ref{expr.ref}} is
 type-dependent if
 the expression refers to a member of the current instantiation and
 the type of the referenced member is dependent, or the class member access
@@ -5290,7 +5290,7 @@ An expression of the form \tcode{\&}\grammarterm{qualified-id} where the
 instantiation is value-dependent.
 An expression of the form \tcode{\&}\grammarterm{cast-expression}
 is also value-dependent if evaluating \grammarterm{cast-expression}
-as a core constant expression\iref{expr.const} succeeds and
+as a \deflinkx{core constant expression}{expression!core constant}{\ref{expr.const}} succeeds and
 the result of the evaluation refers to a templated entity
 that is an object with static or thread storage duration or a member function.
 
@@ -5444,7 +5444,7 @@ within a translation unit.
 A specialization for any template may have points of instantiation in multiple
 translation units.
 If two different points of instantiation give a template specialization
-different meanings according to the one-definition rule\iref{basic.def.odr},
+different meanings according to the \link{one-definition rule}{\ref{basic.def.odr}},
 the program is ill-formed, no diagnostic required.
 
 \rSec3[temp.dep.candidate]{Candidate functions}
@@ -5458,7 +5458,7 @@ rules~(\ref{basic.lookup.unqual}, \ref{basic.lookup.argdep}) except that:
 
 \begin{itemize}
 \item
-For the part of the lookup using unqualified name lookup\iref{basic.lookup.unqual},
+For the part of the lookup using \link{unqualified name lookup}{\ref{basic.lookup.unqual}},
 only function declarations
 from the template definition context are found.
 \item
@@ -5567,11 +5567,11 @@ template<> int B<>::x = 1;              // specialize for \tcode{T == int}
 \end{example}
 
 \pnum
-An instantiated template specialization can be either implicitly
-instantiated\iref{temp.inst} for a given argument list or be explicitly
-instantiated\iref{temp.explicit}.
+An instantiated template specialization can be either \link{implicitly
+instantiated}{\ref{temp.inst}} for a given argument list or be \link{explicitly
+instantiated}{\ref{temp.explicit}}.
 A specialization is a class, function, or class member that is either
-instantiated or explicitly specialized\iref{temp.expl.spec}.
+instantiated or \link{explicitly specialized}{\ref{temp.expl.spec}}.
 
 \pnum
 For a given template and a given set of
@@ -5632,7 +5632,7 @@ of type
 
 \pnum
 If a function declaration acquired its function type through
-a dependent type\iref{temp.dep.type} without using the syntactic form of
+a \link{dependent type}{\ref{temp.dep.type}} without using the syntactic form of
 a function declarator, the program is ill-formed.
 \begin{example}
 
@@ -5649,9 +5649,9 @@ A<function> a;      // ill-formed: would declare \tcode{A<function>::t} as a sta
 
 \pnum
 \indextext{instantiation!template implicit}%
-Unless a class template specialization has been explicitly
-instantiated\iref{temp.explicit} or explicitly
-specialized\iref{temp.expl.spec},
+Unless a class template specialization has been \link{explicitly
+instantiated}{\ref{temp.explicit}} or \link{explicitly
+specialized}{\ref{temp.expl.spec}},
 the class template specialization is implicitly instantiated when the
 specialization is referenced in a context that requires a completely-defined
 object type or when the completeness of the class type affects the semantics
@@ -5680,7 +5680,7 @@ void g(D<int>* p, D<char>* pp, D<double>* ppp) {
 \end{codeblock}
 \end{example}
 If a class template has been declared, but not defined,
-at the point of instantiation\iref{temp.point},
+at the \link{point of instantiation}{\ref{temp.point}},
 the instantiation yields an incomplete class type\iref{basic.types}.
 \begin{example}
 \begin{codeblock}
@@ -5690,7 +5690,7 @@ X<char> ch;         // error: incomplete type \tcode{X<char>}
 \end{example}
 \begin{note}
 Within a template declaration,
-a local class\iref{class.local} or enumeration and the members of
+a \link{local class}{\ref{class.local}} or enumeration and the members of
 a local class are never considered to be entities that can be separately
 instantiated (this includes their default arguments,
 \grammarterm{noexcept-specifier}{s}, and non-static data member
@@ -5862,7 +5862,7 @@ void x() {
 \end{example}
 
 \pnum
-If the function selected by overload resolution\iref{over.match}
+If the function selected by \link{overload resolution}{\ref{over.match}}
 can be determined without instantiating a class template definition,
 it is unspecified whether that instantiation actually takes place.
 \begin{example}
@@ -6174,8 +6174,8 @@ of that entity unless the explicit instantiation is preceded by an explicit
 specialization of the entity with the same template arguments.
 If the
 \grammarterm{declaration}
-of the explicit instantiation names an implicitly-declared special member
-function\iref{special}, the program is ill-formed.
+of the explicit instantiation names an implicitly-declared \link{special member
+function}{\ref{special}}, the program is ill-formed.
 
 \pnum
 The \grammarterm{declaration} in an \grammarterm{explicit-instantiation} and the \grammarterm{declaration} produced by the corresponding substitution into the templated function, variable, or class are two declarations of the same entity.
@@ -6295,7 +6295,7 @@ effect of suppressing the implicit instantiation
 of the definition of the entity to which they refer.
 \begin{note} The intent is that an inline function that is the
 subject of an explicit instantiation declaration will still be implicitly
-instantiated when odr-used\iref{basic.def.odr} so that the body can be considered for inlining, but
+instantiated when \link{odr-used}{\ref{basic.def.odr}} so that the body can be considered for inlining, but
 that no out-of-line copy of the inline function would be generated in the
 translation unit.\end{note}
 
@@ -6304,7 +6304,7 @@ If an entity is the subject of both an explicit instantiation declaration
 and an explicit instantiation definition in the same translation unit, the
 definition shall follow the declaration. An entity that is the subject of an
 explicit instantiation declaration and that is also used
-in a way that would otherwise cause an implicit instantiation\iref{temp.inst}
+in a way that would otherwise cause an \link{implicit instantiation}{\ref{temp.inst}}
 in the translation unit
 shall be the subject of an explicit instantiation definition somewhere in the
 program; otherwise the program is ill-formed, no diagnostic required.
@@ -6878,12 +6878,12 @@ in a friend declaration.
 \end{itemize}
 
 \pnum
-Trailing template arguments that can be deduced\iref{temp.deduct} or
+Trailing template arguments that can be \link{deduced}{\ref{temp.deduct}} or
 obtained from default
 \grammarterm{template-argument}{s}
 may be omitted from the list of explicit
 \grammarterm{template-argument}{s}.
-A trailing template parameter pack\iref{temp.variadic} not otherwise deduced will be
+A trailing \deflink{template parameter pack}{\ref{temp.variadic}} not otherwise deduced will be
 deduced to an empty sequence of template arguments.
 If all of the template arguments can be deduced, they may all be omitted;
 in this case, the empty template argument list
@@ -7345,7 +7345,7 @@ or array type.
 
 \item
 Attempting to create a function type in which a parameter type or the return type is an
-abstract class type\iref{class.abstract}.
+\link{abstract class type}{\ref{class.abstract}}.
 \end{itemize}
 \end{note}
 
@@ -7354,7 +7354,7 @@ abstract class type\iref{class.abstract}.
 In the following example,
 assuming a \tcode{signed char}
 cannot represent the value 1000,
-a narrowing conversion\iref{dcl.init.list}
+a \deflink{narrowing conversion}{\ref{dcl.init.list}}
 would be required
 to convert the \grammarterm{template-argument}
 of type \tcode{int} to \tcode{signed char},
@@ -7454,8 +7454,8 @@ is not a reference type:
 \item
 If
 \tcode{A}
-is an array type, the pointer type produced by the array-to-pointer
-standard conversion\iref{conv.array} is used in place of
+is an array type, the pointer type produced by the \link{array-to-pointer
+standard conversion}{\ref{conv.array}} is used in place of
 \tcode{A}
 for type deduction;
 otherwise,
@@ -7463,7 +7463,7 @@ otherwise,
 If
 \tcode{A}
 is a function type, the pointer type produced by the
-function-to-pointer standard conversion\iref{conv.func} is used in place
+\link{function-to-pointer standard conversion}{\ref{conv.func}} is used in place
 of
 \tcode{A}
 for type
@@ -7557,8 +7557,8 @@ The transformed \tcode{A}
 can be another pointer or pointer-to-member type that can be converted
 to the deduced
 \tcode{A}
-via a function pointer conversion\iref{conv.fctptr} and/or
-qualification conversion\iref{conv.qual}.
+via a \link{function pointer conversion}{\ref{conv.fctptr}} and/or
+\link{qualification conversion}{\ref{conv.qual}}.
 
 \item
 If
@@ -7681,7 +7681,7 @@ will be checked during overload resolution.
 
 \pnum
 Template arguments can be deduced from the type specified when taking
-the address of an overloaded function\iref{over.over}.
+the address of an \link{overloaded function}{\ref{over.over}}.
 The function template's function type and the specified type
 are used as the types of
 \tcode{P}
@@ -7691,7 +7691,7 @@ and the deduction is done as
 described in~\ref{temp.deduct.type}.
 
 \pnum
-A placeholder type\iref{dcl.spec.auto} in the return type of a
+A \deflink{placeholder type}{\ref{dcl.spec.auto}} in the return type of a
 function template is a non-deduced context. If template argument
 deduction succeeds for such a function, the return type is determined
 from instantiation of the function body.
@@ -7725,7 +7725,7 @@ is not a reference type:
 If
 \tcode{P}
 is an array type, the pointer type produced by the
-array-to-pointer standard conversion\iref{conv.array} is used in place of
+\link{array-to-pointer standard conversion}{\ref{conv.array}} is used in place of
 \tcode{P}
 for type
 deduction; otherwise,
@@ -7733,7 +7733,7 @@ deduction; otherwise,
 If
 \tcode{P}
 is a function type, the pointer type produced by the
-function-to-pointer standard conversion\iref{conv.func} is used in place of
+\link{function-to-pointer standard conversion}{\ref{conv.func}} is used in place of
 \tcode{P}
 for
 type deduction; otherwise,
@@ -7865,7 +7865,7 @@ after a function has been selected.}
 In the context of a call to a conversion function, the return types of
 the conversion function templates are used.
 \item
-In other contexts\iref{temp.func.order} the function template's function
+In \link{other contexts}{\ref{temp.func.order}} the function template's function
 type is used.
 \end{itemize}
 
@@ -8353,7 +8353,7 @@ of $\texttt{P}_i$ is compared with each remaining argument in the
 template argument list of \tcode{A}. Each comparison deduces
 template arguments for subsequent positions in the template parameter
 packs expanded by $\texttt{P}_i$.
-During partial ordering\iref{temp.deduct.partial}, if $\texttt{A}_i$ was
+During \link{partial ordering}{\ref{temp.deduct.partial}}, if $\texttt{A}_i$ was
 originally a pack expansion:
 
 \begin{itemize}
@@ -8414,7 +8414,7 @@ each remaining parameter type in the parameter-type-list
 of \tcode{A}. Each comparison deduces template arguments for
 subsequent positions in the template parameter packs expanded by the
 function parameter pack.
-During partial ordering\iref{temp.deduct.partial}, if $\texttt{A}_i$ was
+During \link{partial ordering}{\ref{temp.deduct.partial}}, if $\texttt{A}_i$ was
 originally a function parameter pack:
 
 \begin{itemize}
@@ -8700,8 +8700,8 @@ int fv = f(g);                  // OK; \tcode{Types} contains \tcode{int}, \tcod
 In a declaration whose \grammarterm{declarator-id} refers to a specialization
 of a function template, template argument deduction is performed to identify
 the specialization to which the declaration refers. Specifically, this is done
-for explicit instantiations\iref{temp.explicit}, explicit specializations\iref{temp.expl.spec},
-and certain friend declarations\iref{temp.friend}. This is also done to
+for \link{explicit instantiations}{\ref{temp.explicit}}, \link{explicit specializations}{\ref{temp.expl.spec}},
+and certain \link{friend declarations}{\ref{temp.friend}}. This is also done to
 determine whether a deallocation function template specialization matches a placement
 \tcode{operator new}~(\ref{basic.stc.dynamic.deallocation}, \ref{expr.new}).
 In all these cases, \tcode{P} is the type of the function template being considered
@@ -8856,9 +8856,9 @@ is present in some translation unit.
 Deduction guides are used
 when a \grammarterm{template-name} appears
 as a type specifier
-for a deduced class type\iref{dcl.type.class.deduct}.
+for a \link{deduced class type}{\ref{dcl.type.class.deduct}}.
 Deduction guides are not found by name lookup.
-Instead, when performing class template argument deduction\iref{over.match.class.deduct},
+Instead, when performing class template \link{argument deduction}{\ref{over.match.class.deduct}},
 any deduction guides declared for the class template are considered.
 
 \begin{bnf}
diff --git a/source/threads.tex b/source/threads.tex
index 50034e0..1b018fe 100644
--- a/source/threads.tex
+++ b/source/threads.tex
@@ -5,7 +5,7 @@
 
 \pnum
 The following subclauses describe components to create and manage
-threads\iref{intro.multithread}, perform mutual exclusion, and communicate conditions
+\deflinkx{threads}{thread}{\ref{intro.multithread}}, perform mutual exclusion, and communicate conditions
 and values
 between threads, as summarized in \tref{thread.lib.summary}.
 
@@ -36,7 +36,7 @@ otherwise the program is ill-formed.
 
 \pnum
 Some functions described in this Clause are specified to throw exceptions of type
-\tcode{system_error}\iref{syserr.syserr}. Such exceptions shall be thrown if
+\link{\tcode{system_error}}{\ref{syserr.syserr}}. Such exceptions shall be thrown if
 any of the function's error conditions is detected or
 a call to
 an operating system or other underlying API results in an error that prevents the
@@ -231,8 +231,8 @@ exception is thrown then a lock shall not have been acquired for the current exe
 A type \tcode{L} meets the \tcode{TimedLockable} requirements if it meets the \tcode{Lockable}
 requirements and the following expressions are well-formed and have the specified semantics
 (\tcode{m} denotes a value of type \tcode{L}, \tcode{rel_time} denotes a value of an
-instantiation of \tcode{duration}\iref{time.duration}, and \tcode{abs_time} denotes a value
-of an instantiation of \tcode{time_point}\iref{time.point}).
+instantiation of \link{\tcode{duration}}{\ref{time.duration}}, and \tcode{abs_time} denotes a value
+of an instantiation of \link{\tcode{time_point}}{\ref{time.point}}).
 
 \begin{itemdecl}
 m.try_lock_for(rel_time)
@@ -399,7 +399,7 @@ equal to the \tcode{thread::id} object of any \tcode{thread} object that
 does not represent threads of execution.
 
 \pnum
-\tcode{thread::id} is a trivially copyable class\iref{class}.
+\tcode{thread::id} is a \deflink{trivially copyable class}{\ref{class}}.
 The library may reuse the value of a \tcode{thread::id} of a terminated thread that can no longer be joined.
 
 \pnum
@@ -657,7 +657,7 @@ void join();
 \effects\ Blocks until the thread represented by \tcode{*this} has completed.
 
 \pnum
-\sync The completion of the thread represented by \tcode{*this} synchronizes with\iref{intro.multithread}
+\sync The completion of the thread represented by \tcode{*this} \deflinkx{synchronizes with}{synchronize with}{\ref{intro.multithread}}
 the corresponding successful
 \tcode{join()} return. \begin{note} Operations on
 \tcode{*this} are not synchronized. \end{note}
@@ -879,7 +879,7 @@ namespace std {
 
 \pnum
 A mutex object facilitates protection against data races and allows safe synchronization of
-data between execution agents\iref{thread.req.lockable}.
+data between \deflinkx{execution agents}{execution agent}{\ref{thread.req.lockable}}.
 An execution agent \term{owns} a mutex from the time it successfully calls one of the
 lock functions until it calls unlock. Mutexes can be either recursive or non-recursive, and can
 grant simultaneous ownership to one or many execution agents. Both
@@ -918,7 +918,7 @@ The implementation shall provide lock and unlock operations, as described below.
 For purposes of determining the existence of a data race, these behave as
 atomic operations\iref{intro.multithread}. The lock and unlock operations on
 a single mutex shall appear to occur in a single total order. \begin{note} This
-can be viewed as the modification order\iref{intro.multithread} of the
+can be viewed as the \deflink{modification order}{\ref{intro.multithread}} of the
 mutex. \end{note}
 \begin{note} Construction and
 destruction of an object of a mutex type need not be thread-safe; other
@@ -945,7 +945,7 @@ thread does not own the mutex.
 
 \pnum
 \sync Prior \tcode{unlock()} operations on the same object shall
-\term{synchronize with}\iref{intro.multithread} this operation.
+\deflink{synchronize with}{\ref{intro.multithread}} this operation.
 
 \pnum
 \throws \tcode{system_error} when
@@ -990,7 +990,7 @@ thread, otherwise \tcode{false}.
 
 \pnum
 \sync If \tcode{try_lock()} returns \tcode{true}, prior \tcode{unlock()} operations
-on the same object \term{synchronize with}\iref{intro.multithread} this operation.
+on the same object \deflink{synchronize with}{\ref{intro.multithread}} this operation.
 \begin{note} Since \tcode{lock()} does not synchronize with a failed subsequent
 \tcode{try_lock()}, the visibility rules are weak enough that little would be
 known about the state after a failure, even in the absence of spurious failures. \end{note}
@@ -1013,7 +1013,7 @@ The expression \tcode{m.unlock()} shall be well-formed and have the following se
 \returntype \tcode{void}.
 
 \pnum
-\sync This operation synchronizes with\iref{intro.multithread} subsequent
+\sync This operation \deflinkx{synchronizes with}{synchronize with}{\ref{intro.multithread}} subsequent
 lock operations that obtain ownership on the same object.
 
 \pnum
@@ -1061,9 +1061,9 @@ contains a mutex that is used to protect the reference count.
 \end{note}
 
 \pnum
-The class \tcode{mutex} shall satisfy all of the mutex
-requirements\iref{thread.mutex.requirements}. It shall be a standard-layout
-class\iref{class}.
+The class \tcode{mutex} shall satisfy all of the \link{mutex
+requirements}{\ref{thread.mutex.requirements}}. It shall be a
+\deflink{standard-layout class}{\ref{class}}.
 
 \pnum
 \begin{note} A program may deadlock if the thread that owns a \tcode{mutex} object calls
@@ -1105,9 +1105,9 @@ thread to acquire ownership of that object will fail (for \tcode{try_lock()}) or
 (for \tcode{lock()}) until the first thread has completely released ownership.
 
 \pnum
-The class \tcode{recursive_mutex} shall satisfy all of the mutex
-requirements\iref{thread.mutex.requirements}. It shall be a standard-layout
-class\iref{class}.
+The class \tcode{recursive_mutex} shall satisfy all of the \link{mutex
+requirements}{\ref{thread.mutex.requirements}}. It shall be a
+\deflink{standard-layout class}{\ref{class}}.
 
 \pnum
 A thread that owns a \tcode{recursive_mutex} object may acquire additional levels of
@@ -1136,9 +1136,9 @@ The \defn{timed mutex types} are the standard library types \tcode{timed_mutex},
 meet the requirements set out below.
 In this description, \tcode{m} denotes an object of a mutex type,
 \tcode{rel_time} denotes an object of an
-instantiation of \tcode{duration}\iref{time.duration}, and \tcode{abs_time} denotes an
+instantiation of \link{\tcode{duration}}{\ref{time.duration}}, and \tcode{abs_time} denotes an
 object of an
-instantiation of \tcode{time_point}\iref{time.point}.
+instantiation of \link{\tcode{time_point}}{\ref{time.point}}.
 
 \pnum
 The timed mutex types shall satisfy the \tcode{TimedLockable}
@@ -1173,7 +1173,7 @@ lock is available, but implementations are expected to make a strong effort to d
 
 \pnum
 \sync If \tcode{try_lock_for()} returns \tcode{true}, prior \tcode{unlock()} operations
-on the same object \term{synchronize with}\iref{intro.multithread} this operation.
+on the same object \deflink{synchronize with}{\ref{intro.multithread}} this operation.
 
 \pnum\throws Timeout-related exceptions\iref{thread.req.timing}.
 \end{itemdescr}
@@ -1205,7 +1205,7 @@ strong effort to do so. \end{note}
 
 \pnum
 \sync If \tcode{try_lock_until()} returns \tcode{true}, prior \tcode{unlock()}
-operations on the same object \term{synchronize with}\iref{intro.multithread}
+operations on the same object \deflink{synchronize with}{\ref{intro.multithread}}
 this operation.
 
 \pnum\throws Timeout-related exceptions\iref{thread.req.timing}.
@@ -1248,9 +1248,9 @@ call to \tcode{try_lock_for()} or \tcode{try_lock_until()} times out (having
 failed to obtain ownership).
 
 \pnum
-The class \tcode{timed_mutex} shall satisfy all of the timed mutex
-requirements\iref{thread.timedmutex.requirements}. It shall be a standard-layout
-class\iref{class}.
+The class \tcode{timed_mutex} shall satisfy all of the \link{timed mutex
+requirements}{\ref{thread.timedmutex.requirements}}. It shall be a
+\deflink{standard-layout class}{\ref{class}}.
 
 \pnum
 The behavior of a program is undefined if:
@@ -1299,9 +1299,9 @@ ownership or the call to \tcode{try_lock_for()} or \tcode{try_lock_until()}
 times out (having failed to obtain ownership).
 
 \pnum
-The class \tcode{recursive_timed_mutex} shall satisfy all of the timed mutex
-requirements\iref{thread.timedmutex.requirements}. It shall be a standard-layout
-class\iref{class}.
+The class \tcode{recursive_timed_mutex} shall satisfy all of the \link{timed mutex
+requirements}{\ref{thread.timedmutex.requirements}}. It shall be a standard-layout
+class\iref{class}. % todo
 
 \pnum
 A thread that owns a \tcode{recursive_timed_mutex} object may acquire additional
@@ -1368,7 +1368,7 @@ If an exception is thrown then a shared lock shall not have been acquired for th
 \returntype \tcode{void}.
 
 \pnum
-\sync Prior \tcode{unlock()} operations on the same object shall synchronize with\iref{intro.multithread} this operation.
+\sync Prior \tcode{unlock()} operations on the same object shall \deflink{synchronize with}{\ref{intro.multithread}} this operation.
 
 \pnum
 \throws \tcode{system_error} when an exception is required\iref{thread.req.exception}.
@@ -1395,7 +1395,7 @@ The expression \tcode{m.unlock_shared()} shall be well-formed and have the follo
 \returntype \tcode{void}.
 
 \pnum
-\sync This operation synchronizes with\iref{intro.multithread} subsequent
+\sync This operation \deflinkx{synchronizes with}{synchronize with}{\ref{intro.multithread}} subsequent
 \tcode{lock()} operations that obtain ownership on the same object.
 
 \pnum
@@ -1424,7 +1424,7 @@ otherwise.
 
 \pnum
 \sync If \tcode{try_lock_shared()} returns \tcode{true}, prior \tcode{unlock()}
-operations on the same object synchronize with\iref{intro.multithread} this
+operations on the same object \deflink{synchronize with}{\ref{intro.multithread}} this
 operation.
 
 \pnum
@@ -1466,8 +1466,8 @@ with shared ownership semantics.
 
 \pnum
 The class \tcode{shared_mutex} shall satisfy all of the
-shared mutex requirements\iref{thread.sharedmutex.requirements}.
-It shall be a standard-layout class\iref{class}.
+\link{shared mutex requirements}{\ref{thread.sharedmutex.requirements}}.
+It shall be a standard-layout class\iref{class}. % todo
 
 \pnum
 The behavior of a program is undefined if:
@@ -1490,9 +1490,9 @@ shared mutex types\iref{thread.sharedmutex.requirements}, and additionally
 shall satisfy the requirements set out below. In this description,
 \tcode{m} denotes an object of a shared timed mutex type,
 \tcode{rel_type} denotes an object of an instantiation of
-\tcode{duration}\iref{time.duration}, and
+\link{\tcode{duration}}{\ref{time.duration}}, and
 \tcode{abs_time} denotes an object of an instantiation of
-\tcode{time_point}\iref{time.point}.
+\link{\tcode{time_point}}{\ref{time.point}}.
 
 \pnum
 The expression \tcode{m.try_lock_shared_for(rel_time)} shall be well-formed and
@@ -1606,8 +1606,8 @@ ownership semantics.
 
 \pnum
 The class \tcode{shared_timed_mutex} shall satisfy all of the
-shared timed mutex requirements\iref{thread.sharedtimedmutex.requirements}.
-It shall be a standard-layout class\iref{class}.
+\link{shared timed mutex requirements}{\ref{thread.sharedtimedmutex.requirements}}.
+It shall be a standard-layout class\iref{class}. % todo
 
 \pnum
 The behavior of a program is undefined if:
@@ -1678,7 +1678,7 @@ namespace std {
 \pnum
 An object of type \tcode{lock_guard} controls the ownership of a lockable object
 within a scope. A \tcode{lock_guard} object maintains ownership of a lockable
-object throughout the \tcode{lock_guard} object's lifetime\iref{basic.life}.
+object throughout the \tcode{lock_guard} object's \deflink{lifetime}{\ref{basic.life}}.
 The behavior of a program is undefined if the lockable object referenced by
 \tcode{pm} does not exist for the entire lifetime of the \tcode{lock_guard}
 object. The supplied \tcode{Mutex} type shall satisfy the \tcode{BasicLockable}
@@ -1754,7 +1754,7 @@ namespace std {
 \pnum
 An object of type \tcode{scoped_lock} controls the ownership of lockable objects
 within a scope. A \tcode{scoped_lock} object maintains ownership of lockable
-objects throughout the \tcode{scoped_lock} object's lifetime\iref{basic.life}.
+objects throughout the \tcode{scoped_lock} object's \deflink{lifetime}{\ref{basic.life}}.
 The behavior of a program is undefined if the lockable objects referenced by
 \tcode{pm} do not exist for the entire lifetime of the \tcode{scoped_lock}
 object.
@@ -1880,10 +1880,10 @@ requirements\iref{thread.req.lockable.basic}.
 
 \pnum
 \begin{note} \tcode{unique_lock<Mutex>} meets the \tcode{BasicLockable} requirements. If \tcode{Mutex}
-meets the \tcode{Lockable} requirements\iref{thread.req.lockable.req},
+meets the \link{\tcode{Lockable}}{\ref{thread.req.lockable.req}} requirements,
 \tcode{unique_lock<Mutex>} also meets the \tcode{Lockable} requirements;
 if \tcode{Mutex}
-meets the \tcode{TimedLockable} requirements\iref{thread.req.lockable.timed},
+meets the \link{\tcode{TimedLockable}}{\ref{thread.req.lockable.timed}} requirements,
 \tcode{unique_lock<Mutex>} also meets the \tcode{TimedLockable} requirements. \end{note}
 
 \rSec4[thread.lock.unique.cons]{\tcode{unique_lock} constructors, destructor, and assignment}
@@ -2688,10 +2688,11 @@ mutex_type* mutex() const noexcept;
 
 \rSec2[thread.lock.algorithm]{Generic locking algorithms}
 
-\indexlibrary{\idxcode{try_lock}}%
+\begin{indexed}{\indexlibrary{\idxcode{try_lock}}}
 \begin{itemdecl}
 template<class L1, class L2, class... L3> int try_lock(L1&, L2&, L3&...);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2712,10 +2713,11 @@ otherwise a zero-based index value that indicates the argument for which \tcode{
 returned \tcode{false}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{lock}}%
+\begin{indexed}{\indexlibrary{\idxcode{lock}}}
 \begin{itemdecl}
 template<class L1, class L2, class... L3> void lock(L1&, L2&, L3&...);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2804,7 +2806,7 @@ earlier returning execution. \end{note}
 
 \pnum
 \sync For any given \tcode{once_flag}: all active executions occur in a total
-order; completion of an active execution synchronizes with\iref{intro.multithread}
+order; completion of an active execution \deflinkx{synchronizes with}{synchronize with}{\ref{intro.multithread}}
 the start of the next one in this total order; and the returning execution
 synchronizes with the return from all passive executions.
 
@@ -3664,7 +3666,7 @@ namespace std {
 \end{codeblock}
 
 \pnum
-The \tcode{enum} type \tcode{launch} is a bitmask type\iref{bitmask.types} with
+The \tcode{enum} type \tcode{launch} is a \link{bitmask type}{\ref{bitmask.types}} with
 elements \tcode{launch::async} and \tcode{launch::deferred}.
 \begin{note} Implementations can provide bitmasks to specify restrictions on task
 interaction by functions launched by \tcode{async()} applicable to a
@@ -3850,26 +3852,25 @@ the state object.
 
 \pnum
 Calls to functions that successfully set the stored result of a shared
-state synchronize
-with\iref{intro.multithread} calls to functions
+state \deflink{synchronize with}{\ref{intro.multithread}} calls to functions
 successfully detecting the ready state resulting from that setting.
 The storage of the result
 (whether normal or exceptional) into the shared state
-synchronizes with\iref{intro.multithread}
+\deflinkx{synchronizes with}{synchronize with}{\ref{intro.multithread}}
 the successful return from a call to a waiting function on the shared state.
 
 \pnum
 Some functions (e.g., \tcode{promise::set_value_at_thread_exit}) delay making
 the shared state ready until the calling thread exits. The destruction of
-each of that thread's objects with thread storage duration\iref{basic.stc.thread}
+each of that thread's objects with \link{thread storage duration}{\ref{basic.stc.thread}}
 is sequenced before making that shared state ready.
 
 \pnum
-Access to the result of the same shared state may conflict\iref{intro.multithread}.
+Access to the result of the same shared state may \deflink{conflict}{\ref{intro.multithread}}.
 \begin{note} This explicitly specifies that the result of the shared state is
-visible in the objects that reference this state in the sense of data race
-avoidance\iref{res.on.data.races}. For example, concurrent accesses through
-references returned by \tcode{shared_future::get()}\iref{futures.shared_future}
+visible in the objects that reference this state in the sense of \link{data race
+avoidance}{\ref{res.on.data.races}}. For example, concurrent accesses through
+references returned by \tcode{shared_future::get()}\iref{futures.shared_future} % todo
 must either use read-only operations or provide additional synchronization.
 \end{note}
 
@@ -4172,8 +4173,8 @@ The class template \tcode{future} defines a type for asynchronous return objects
 do not share their shared state with other asynchronous return objects.
 A default-constructed \tcode{future} object has no
 shared state. A \tcode{future} object with shared state can be created by
-functions on asynchronous providers\iref{futures.state} or by the move constructor
-and shares its shared state with
+functions on \deflinkx{asynchronous providers}{asynchronous provider}{\ref{futures.state}}
+or by the move constructor and shares its shared state with
 the original asynchronous provider. The result (value or exception) of
 a \tcode{future} object
 can be
@@ -4462,7 +4463,7 @@ object has no shared state. A \tcode{shared_future} object with
 shared state can
 be created
 by conversion from a \tcode{future} object and shares its shared state with the
-original asynchronous provider\iref{futures.state} of the shared state.
+original \deflink{asynchronous provider}{\ref{futures.state}} of the shared state.
 The result (value or exception) of a \tcode{shared_future} object
 can be set by
 calling a respective function on an
@@ -4875,12 +4876,12 @@ Regardless of the provided \tcode{policy} argument,
 \begin{itemize}
 \item
 the invocation of \tcode{async}
-synchronizes with\iref{intro.multithread} the invocation of \tcode{f}. \begin{note}
+\deflinkx{synchronizes with}{synchronize with}{\ref{intro.multithread}} the invocation of \tcode{f}. \begin{note}
 This statement applies even when the corresponding \tcode{future} object is moved to
 another thread. \end{note}; and
 
 \item
-the completion of the function \tcode{f} is sequenced before\iref{intro.multithread} the
+the completion of the function \tcode{f} is sequenced before\iref{intro.multithread} the % todo
 shared state is made ready. \begin{note} \tcode{f} might not be called at all,
 so its completion might never happen. \end{note}
 \end{itemize}
@@ -4896,7 +4897,7 @@ out\iref{thread.thread.member};
 
 \item
 the associated thread completion
-synchronizes with\iref{intro.multithread}
+\deflinkx{synchronizes with}{synchronize with}{\ref{intro.multithread}}
 the return from
 the first function
 that successfully detects the ready status of the shared state or
diff --git a/source/utilities.tex b/source/utilities.tex
index 9edf507..6d064c3 100644
--- a/source/utilities.tex
+++ b/source/utilities.tex
@@ -158,7 +158,7 @@ namespace std {
     explicit piecewise_construct_t() = default;
   };
   inline constexpr piecewise_construct_t piecewise_construct{};
-  template<class... Types> class tuple;        // defined in \tcode{<tuple>}\iref{tuple.syn}
+  template<class... Types> class tuple;        // defined in \link{\tcode{<tuple>}}{\ref{tuple.syn}}
 
   // in-place construction
   struct in_place_t {
@@ -227,7 +227,7 @@ unless \tcode{is_swappable_v<T>} is \tcode{true}.
 
 \pnum
 \requires
-\tcode{a[i]} shall be swappable with\iref{swappable.requirements} \tcode{b[i]}
+\tcode{a[i]} shall be \deflink{swappable with}{\ref{swappable.requirements}} \tcode{b[i]}
 for all \tcode{i} in the range \range{0}{N}.
 
 \pnum
@@ -263,7 +263,7 @@ of forwarding functions.
 \indextext{signal-safe!\idxcode{forward}}%
 \indextext{signal-safe!\idxcode{move}}%
 \indextext{signal-safe!\idxcode{move_if_noexcept}}%
-All functions specified in this subclause are signal-safe\iref{support.signal}.
+All functions specified in this subclause are \deflinkx{signal-safe}{evaluation!signal-safe}{\ref{support.signal}}.
 
 \indexlibrary{\idxcode{forward}}%
 \indextext{\idxcode{forward}}%
@@ -379,7 +379,7 @@ template<class T> constexpr add_const_t<T>& as_const(T& t) noexcept;
 
 \pnum
 The library provides the function template \tcode{declval} to simplify the definition of
-expressions which occur as unevaluated operands\iref{expr.prop}.
+expressions which occur as \deflinkx{unevaluated operands}{unevaluated operand}{\ref{expr.prop}}.
 
 \indexlibrary{\idxcode{declval}}%
 \begin{itemdecl}
@@ -388,7 +388,7 @@ template<class T> add_rvalue_reference_t<T> declval() noexcept;    // as unevalu
 
 \begin{itemdescr}
 \pnum
-\remarks If this function is odr-used\iref{basic.def.odr}, the program is ill-formed.
+\remarks If this function is \link{odr-used}{\ref{basic.def.odr}}, the program is ill-formed.
 
 \pnum
 \remarks The template parameter \tcode{T} of \tcode{declval} may be an incomplete type.
@@ -962,7 +962,7 @@ inline constexpr piecewise_construct_t piecewise_construct{};
 The \tcode{struct} \tcode{piecewise_construct_t} is an empty structure type
 used as a unique type to disambiguate constructor and function overloading. Specifically,
 \tcode{pair} has a constructor with \tcode{piecewise_construct_t} as the
-first argument, immediately followed by two \tcode{tuple}\iref{tuple} arguments used
+first argument, immediately followed by two \link{\tcode{tuple}}{\ref{tuple}} arguments used
 for piecewise construction of the elements of the \tcode{pair} object.
 
 \rSec1[tuple]{Tuples}
@@ -1400,7 +1400,7 @@ template<class Alloc, class U1, class U2>
 
 \pnum
 \effects Equivalent to the preceding constructors except that each element is constructed with
-uses-allocator construction\iref{allocator.uses.construction}.
+\deflink{uses-allocator construction}{\ref{allocator.uses.construction}}.
 \end{itemdescr}
 
 \rSec3[tuple.assign]{Assignment}
@@ -2288,7 +2288,8 @@ constexpr optional(nullopt_t) noexcept;
 \pnum
 \remarks
 No contained value is initialized.
-For every object type \tcode{T} these constructors shall be constexpr constructors\iref{dcl.constexpr}.
+For every object type \tcode{T} these constructors shall be
+\deflinkx{constexpr constructors}{specifier!constexpr!constructor}{\ref{dcl.constexpr}}.
 \end{itemdescr}
 
 \indexlibrary{\idxcode{optional}!constructor}%
@@ -4568,7 +4569,7 @@ template<size_t I, class T> class variant_alternative<I, const volatile T>;
 \pnum
 Let \tcode{VA} denote \tcode{variant_alternative<I, T>} of the
 cv-unqualified type \tcode{T}. Then each of the three templates shall
-meet the \tcode{TransformationTrait} requirements\iref{meta.rqmts} with a
+meet the \deflinkx{\tcode{TransformationTrait}}{TransformationTrait}{\ref{meta.rqmts}} requirements with a
 member typedef \tcode{type} that names the following type:
 \begin{itemize}
 \item for the first specialization, \tcode{add_const_t<VA::type>},
@@ -4869,12 +4870,13 @@ For $n > 1$, the invocation of the callable object has
 no complexity requirements.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{monostate}}%
 \rSec2[variant.monostate]{Class \tcode{monostate}}
 
+\begin{indexed}{\indexlibrary{\idxcode{monostate}}}
 \begin{itemdecl}
 struct monostate{};
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5042,7 +5044,8 @@ public:
 \end{codeblock}
 
 \pnum
-Objects of type \tcode{bad_any_cast} are thrown by a failed \tcode{any_cast}\iref{any.nonmembers}.
+Objects of type \tcode{bad_any_cast} are thrown by a failed
+\linkx{\tcode{any_cast}}{\idxcode{any_cast}}{\ref{any.nonmembers}}.
 
 \indexlibrarymember{what}{bad_any_cast}%
 \begin{itemdecl}
@@ -5519,7 +5522,7 @@ template<class T, class U, class... Args>
 Equivalent to: \tcode{return any(in_place_type<T>, il, std::forward<Args>(args)...);}
 \end{itemdescr}
 
-\indexlibrary{\idxcode{any_cast}}%
+\begin{indexed}{\indexlibrary{\idxcode{any_cast}}}
 \begin{itemdecl}
 template<class T>
   T any_cast(const any& operand);
@@ -5528,6 +5531,7 @@ template<class T>
 template<class T>
   T any_cast(any&& operand);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5579,13 +5583,14 @@ any_cast<string&>(y);                       // error; cannot
 \end{example}
 \end{itemdescr}
 
-\indexlibrary{\idxcode{any_cast}}%
+\begin{indexed}{\indexlibrary{\idxcode{any_cast}}}
 \begin{itemdecl}
 template<class T>
   const T* any_cast(const any* operand) noexcept;
 template<class T>
   T* any_cast(any* operand) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5613,7 +5618,7 @@ bool is_string(const any& operand) {
 
 \begin{codeblock}
 #include <string>
-#include <iosfwd>   // for \tcode{istream}\iref{istream.syn}, \tcode{ostream}\iref{ostream.syn}, see \ref{iosfwd.syn}
+#include <iosfwd>   // for \link{\tcode{istream}}{\ref{istream.syn}}, \link{\tcode{ostream}}{\ref{ostream.syn}}, see \ref{iosfwd.syn}
 
 namespace std {
   template<size_t N> class bitset;
@@ -5756,19 +5761,19 @@ errors, each associated with a distinct exception:
 an
 \term{invalid-argument}
 error is associated with exceptions of type
-\tcode{invalid_argument}\iref{invalid.argument};
+\link{\tcode{invalid_argument}}{\ref{invalid.argument}};
 \indexlibrary{\idxcode{invalid_argument}}%
 \item
 an
 \term{out-of-range}
 error is associated with exceptions of type
-\tcode{out_of_range}\iref{out.of.range};
+\link{\tcode{out_of_range}}{\ref{out.of.range}};
 \indexlibrary{\idxcode{out_of_range}}%
 \item
 an
 \term{overflow}
 error is associated with exceptions of type
-\tcode{overflow_error}\iref{overflow.error}.
+\link{\tcode{overflow_error}}{\ref{overflow.error}}.
 \indexlibrary{\idxcode{overflow_error}}%
 \end{itemize}
 
@@ -5799,8 +5804,8 @@ Constructs an object of class
 \tcode{bitset<N>},
 initializing the first \tcode{M} bit positions to the corresponding bit
 values in \tcode{val}.
-\tcode{M} is the smaller of \tcode{N} and the number of bits in the value
-representation\iref{basic.types} of \tcode{unsigned long long}.
+\tcode{M} is the smaller of \tcode{N} and the number of bits in the
+\deflink{value representation}{\ref{basic.types}} of \tcode{unsigned long long}.
 If \tcode{M < N}, the remaining bit positions are initialized to zero.
 \end{itemdescr}
 
@@ -6354,8 +6359,8 @@ is equivalent to
 \throws Nothing.
 
 \pnum
-\remarks For the purpose of determining the presence of a data
-race\iref{intro.multithread}, any access or update through the resulting
+\remarks For the purpose of determining the presence of a
+\deflink{data race}{\ref{intro.multithread}}, any access or update through the resulting
 reference potentially accesses or modifies, respectively, the entire
 underlying bitset.
 \end{itemdescr}
@@ -6416,7 +6421,7 @@ template<class charT, class traits, size_t N>
 
 \begin{itemdescr}
 \pnum
-A formatted input function\iref{istream.formatted}.
+A \link{formatted input function}{\ref{istream.formatted}}.
 
 \pnum
 \effects
@@ -6476,8 +6481,8 @@ os << x.template to_string<charT, traits, allocator<charT>>(
 
 \pnum
 This subclause describes the contents of the header
-\tcode{<memory>}\iref{memory.syn} and some
-of the contents of the header \tcode{<cstdlib>}\iref{cstdlib.syn}.
+\link{\tcode{<memory>}}{\ref{memory.syn}} and some
+of the contents of the header \link{\tcode{<cstdlib>}}{\ref{cstdlib.syn}}.
 
 \rSec2[memory.syn]{Header \tcode{<memory>} synopsis}
 
@@ -6955,8 +6960,8 @@ void declare_reachable(void* p);
 
 \begin{itemdescr}
 \pnum
-\requires \tcode{p} shall be a safely-derived
-pointer\iref{basic.stc.dynamic.safety} or a null pointer value.
+\requires \tcode{p} shall be a \deflink{safely-derived pointer}{\ref{basic.stc.dynamic.safety}}
+or a null pointer value.
 
 \pnum
 \effects If \tcode{p} is not null, the complete object referenced by \tcode{p}
@@ -7048,8 +7053,8 @@ pointer_safety get_pointer_safety() noexcept;
 
 \begin{itemdescr}
 \pnum
-\returns \tcode{pointer_safety::strict} if the implementation has strict pointer
-safety\iref{basic.stc.dynamic.safety}. It is
+\returns \tcode{pointer_safety::strict} if the implementation has
+\deflink{strict pointer safety}{\ref{basic.stc.dynamic.safety}}. It is
 \impldef{whether \tcode{get_pointer_safety} returns
 \tcode{pointer_safety::relaxed} or
 \tcode{pointer_safety::\brk{}preferred} if the implementation has relaxed pointer safety}
@@ -7130,8 +7135,9 @@ template<class T, class Alloc> struct uses_allocator;
 \begin{itemdescr}
 \pnum
 \remarks Automatically detects whether \tcode{T} has a nested \tcode{allocator_type} that
-is convertible from \tcode{Alloc}. Meets the \tcode{BinaryTypeTrait}
-requirements\iref{meta.rqmts}. The implementation shall provide a definition that is
+is convertible from \tcode{Alloc}. Meets the
+\deflinkx{\tcode{BinaryTypeTrait}}{BinaryTypeTrait}{\ref{meta.rqmts}} requirements.
+The implementation shall provide a definition that is
 derived from \tcode{true_type} if the \grammarterm{qualified-id} \tcode{T::allocator_type}
 is valid and denotes a type\iref{temp.deduct} and
 \tcode{is_convertible_v<Alloc, T::allocator_type> != false}, otherwise it shall be
@@ -7408,11 +7414,12 @@ static void deallocate(Alloc& a, pointer p, size_type n);
 \throws Nothing.
 \end{itemdescr}
 
-\indexlibrarymember{construct}{allocator_traits}%
+\begin{indexed}{\indexlibrarymember{construct}{allocator_traits}}
 \begin{itemdecl}
 template<class T, class... Args>
   static void construct(Alloc& a, T* p, Args&&... args);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -7421,11 +7428,12 @@ if that call is well-formed;
 otherwise, invokes \tcode{::new (static_cast<void*>(p)) T(std::forward<Args>(args)...)}.
 \end{itemdescr}
 
-\indexlibrarymember{destroy}{allocator_traits}%
+\begin{indexed}{\indexlibrarymember{destroy}{allocator_traits}}
 \begin{itemdecl}
 template<class T>
   static void destroy(Alloc& a, T* p);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -7488,7 +7496,7 @@ namespace std {
 
 \pnum
 Except for the destructor, member functions of the default allocator shall not introduce
-data races\iref{intro.multithread} as a result of concurrent calls to those member
+\deflinkx{data races}{data race}{\ref{intro.multithread}} as a result of concurrent calls to those member
 functions from different threads. Calls to these functions that allocate or deallocate a
 particular unit of storage shall occur in a single total order, and each such
 deallocation call shall happen before the next allocation (if any) in this order.
@@ -7506,7 +7514,7 @@ A pointer to the initial element of an array of storage of size \tcode{n}
 
 \pnum
 \remarks
-the storage is obtained by calling \tcode{::operator new}\iref{new.delete},
+the storage is obtained by calling \link{\tcode{::operator new}}{\ref{new.delete}},
 but it is unspecified when or how often this
 function is called.
 
@@ -7534,7 +7542,7 @@ Deallocates the storage referenced by \tcode{p} .
 \pnum
 \remarks
 Uses
-\tcode{::operator delete}\iref{new.delete},
+\link{\tcode{::operator delete}}{\ref{new.delete}},
 but it is unspecified
 when this function is called.
 \end{itemdescr}
@@ -7574,11 +7582,11 @@ the names of template parameters are used to express type requirements.
 \item
 If an algorithm's template parameter is named \tcode{InputIterator},
 the template argument shall satisfy the requirements
-of an input iterator\iref{input.iterators}.
+of an \link{input iterator}{\ref{input.iterators}}.
 \item
 If an algorithm's template parameter is named \tcode{ForwardIterator},
 the template argument shall satisfy the requirements
-of a forward iterator\iref{forward.iterators}, and
+of a \link{forward iterator}{\ref{forward.iterators}}, and
 is required to have the property that no exceptions are thrown
 from increment, assignment, comparison, or indirection through valid iterators.
 \end{itemize}
@@ -7599,7 +7607,7 @@ presence of an overloaded \tcode{operator\&}.
 
 \pnum
 \remarks An expression \tcode{addressof(E)}
-is a constant subexpression\iref{defns.const.subexpr}
+is a \link{constant subexpression}{\ref{defns.const.subexpr}}
 if \tcode{E} is an lvalue constant subexpression.
 \end{itemdescr}
 
@@ -7701,11 +7709,12 @@ for (; first != last; ++result, (void) ++first)
 \tcode{result}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{uninitialized_copy_n}}%
+\begin{indexed}{\indexlibrary{\idxcode{uninitialized_copy_n}}}
 \begin{itemdecl}
 template<class InputIterator, class Size, class ForwardIterator>
   ForwardIterator uninitialized_copy_n(InputIterator first, Size n, ForwardIterator result);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -7842,11 +7851,12 @@ for (; first!=last; ++first)
 \end{codeblock}
 \end{itemdescr}
 
-\indexlibrary{\idxcode{destroy_n}}%
+\begin{indexed}{\indexlibrary{\idxcode{destroy_n}}}
 \begin{itemdecl}
 template<class ForwardIterator, class Size>
   ForwardIterator destroy_n(ForwardIterator first, Size n);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -7864,19 +7874,15 @@ return first;
 \pnum
 \indexhdr{cstdlib}%
 \begin{note}
-The header \tcode{<cstdlib>}\iref{cstdlib.syn}
+The header \link{\tcode{<cstdlib>}}{\ref{cstdlib.syn}}
 declares the functions described in this subclause.
 \end{note}
 
-\indexlibrary{\idxcode{aligned_alloc}}%
-\indexlibrary{\idxcode{calloc}}%
-\indexlibrary{\idxcode{malloc}}%
-\indexlibrary{\idxcode{realloc}}%
 \begin{itemdecl}
-void* aligned_alloc(size_t alignment, size_t size);
-void* calloc(size_t nmemb, size_t size);
-void* malloc(size_t size);
-void* realloc(void* ptr, size_t size);
+void* @\libentity{aligned_alloc}@(size_t alignment, size_t size);
+void* @\libentity{calloc}@(size_t nmemb, size_t size);
+void* @\libentity{malloc}@(size_t size);
+void* @\libentity{realloc}@(void* ptr, size_t size);
 \end{itemdecl}
 
 \begin{itemdescr}
@@ -8114,8 +8120,9 @@ namespace std {
 \pnum
 The default type for the template parameter \tcode{D} is
 \tcode{default_delete}. A client-supplied template argument
-\tcode{D} shall be a function
-object type\iref{function.objects}, lvalue reference to function, or
+\tcode{D} shall be a
+\deflinkx{function object type}{function object!type}{\ref{function.objects}},
+lvalue reference to function, or
 lvalue reference to function object type
 for which, given
 a value \tcode{d} of type \tcode{D} and a value
@@ -8345,10 +8352,11 @@ to the stored deleter that was constructed from
 
 \rSec4[unique.ptr.single.dtor]{\tcode{unique_ptr} destructor}
 
-\indexlibrary{\idxcode{unique_ptr}!destructor}%
+\begin{indexed}{\indexlibrary{\idxcode{unique_ptr}!destructor}}
 \begin{itemdecl}
 ~unique_ptr();
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -8550,7 +8558,7 @@ void swap(unique_ptr& u) noexcept;
 \begin{itemdescr}
 \pnum
 \requires \tcode{get_deleter()} shall be
-swappable\iref{swappable.requirements} and shall
+\link{swappable}{\ref{swappable.requirements}} and shall
 not throw an exception
 under \tcode{swap}.
 
@@ -8879,8 +8887,9 @@ common_type_t<typename unique_ptr<T1, D1>::pointer,
               typename unique_ptr<T2, D2>::pointer>
 \end{codeblock}
 Then the specialization
-\tcode{less<CT>} shall be a function object type\iref{function.objects} that
-induces a strict weak ordering\iref{alg.sorting} on the pointer values.
+\tcode{less<CT>} shall be a
+\deflinkx{function object type}{function object!type}{\ref{function.objects}} that
+induces a \link{strict weak ordering}{\ref{alg.sorting}} on the pointer values.
 
 \pnum
 \returns \tcode{less<CT>()(x.get(), y.get())}.
@@ -8960,9 +8969,9 @@ template<class T, class D>
 
 \begin{itemdescr}
 \pnum
-\requires The specialization \tcode{less<unique_ptr<T, D>::pointer>} shall be
-a function object type\iref{function.objects} that induces a strict weak
-ordering\iref{alg.sorting} on the pointer values.
+\requires The specialization \tcode{less<unique_ptr<T, D>::pointer>} shall be a
+\deflinkx{function object type}{function object!type}{\ref{function.objects}}
+that induces a \link{strict weak ordering}{\ref{alg.sorting}} on the pointer values.
 
 \pnum
 \returns
@@ -9193,7 +9202,7 @@ In the constructor definitions below,
 enables \tcode{shared_from_this} with \tcode{p},
 for a pointer \tcode{p} of type \tcode{Y*},
 means that if \tcode{Y} has an unambiguous and accessible base class
-that is a specialization of \tcode{enable_shared_from_this}\iref{util.smartptr.enab},
+that is a specialization of \link{\tcode{enable_shared_from_this}}{\ref{util.smartptr.enab}},
 then \tcode{remove_cv_t<Y>*} shall be implicitly convertible to \tcode{T*} and
 the constructor evaluates the statement:
 \begin{codeblock}
@@ -10313,10 +10322,11 @@ template<class Y> weak_ptr(weak_ptr<Y>&& r) noexcept;
 
 \rSec3[util.smartptr.weak.dest]{\tcode{weak_ptr} destructor}
 
-\indexlibrary{\idxcode{weak_ptr}!destructor}%
+\begin{indexed}{\indexlibrary{\idxcode{weak_ptr}!destructor}}
 \begin{itemdecl}
 ~weak_ptr();
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\effects  Destroys this \tcode{weak_ptr} object but has no
@@ -10426,11 +10436,12 @@ both empty.
 
 \rSec3[util.smartptr.weak.spec]{\tcode{weak_ptr} specialized algorithms}
 
-\indexlibrarymember{swap}{weak_ptr}%
+\begin{indexed}{\indexlibrarymember{swap}{weak_ptr}}
 \begin{itemdecl}
 template<class T>
   void swap(weak_ptr<T>& a, weak_ptr<T>& b) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\effects Equivalent to \tcode{a.swap(b)}.
@@ -10442,7 +10453,7 @@ template<class T>
 The class template \tcode{owner_less} allows ownership-based mixed comparisons of shared
 and weak pointers.
 
-\indexlibrary{\idxcode{owner_less}}%
+\begin{indexed}{\indexlibrary{\idxcode{owner_less}}}
 \begin{codeblock}
 namespace std {
   template<class T = void> struct owner_less;
@@ -10473,6 +10484,7 @@ namespace std {
   };
 }
 \end{codeblock}
+\end{indexed}
 
 \indexlibrarymember{operator()}{owner_less}%
 \pnum \tcode{operator()(x, y)} shall return \tcode{x.owner_before(y)}. \begin{note}
@@ -10686,10 +10698,11 @@ constexpr atomic() noexcept = default;
 Initializes \tcode{p\{\}}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{atomic<shared_ptr<T>>}!constructor}%
+\begin{indexed}{\indexlibrary{\idxcode{atomic<shared_ptr<T>>}!constructor}}
 \begin{itemdecl}
 atomic(shared_ptr<T> desired) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -10728,10 +10741,11 @@ the value of \tcode{desired} as if by \tcode{p.swap(desired)}.
 Memory is affected according to the value of \tcode{order}.
 \end{itemdescr}
 
-\indexlibrarymember{operator=}{atomic<shared_ptr<T>>}%
+\begin{indexed}{\indexlibrarymember{operator=}{atomic<shared_ptr<T>>}}
 \begin{itemdecl}
 void operator=(shared_ptr<T> desired) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -11159,7 +11173,7 @@ namespace std::pmr {
 \pnum
 The \tcode{memory_resource} class is an abstract interface to an unbounded set of classes encapsulating memory resources.
 
-\indexlibrary{\idxcode{memory_resource}}%
+\begin{indexed}{\indexlibrary{\idxcode{memory_resource}}}
 \begin{codeblock}
 namespace std::pmr {
   class memory_resource {
@@ -11181,14 +11195,16 @@ namespace std::pmr {
   };
 }
 \end{codeblock}
+\end{indexed}
 
 
 \rSec3[mem.res.public]{\tcode{memory_resource} public member functions}
 
-\indexlibrary{\idxcode{memory_resource}!destructor}%
+\begin{indexed}{\indexlibrary{\idxcode{memory_resource}!destructor}}
 \begin{itemdecl}
 ~memory_resource();
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -11196,10 +11212,11 @@ namespace std::pmr {
 Destroys this \tcode{memory_resource}.
 \end{itemdescr}
 
-\indexlibrarymember{allocate}{memory_resource}%
+\begin{indexed}{\indexlibrarymember{allocate}{memory_resource}}
 \begin{itemdecl}
 [[nodiscard]] void* allocate(size_t bytes, size_t alignment = max_align);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -11207,10 +11224,11 @@ Destroys this \tcode{memory_resource}.
 Equivalent to: \tcode{return do_allocate(bytes, alignment);}
 \end{itemdescr}
 
-\indexlibrarymember{deallocate}{memory_resource}%
+\begin{indexed}{\indexlibrarymember{deallocate}{memory_resource}}
 \begin{itemdecl}
 void deallocate(void* p, size_t bytes, size_t alignment = max_align);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -11218,10 +11236,11 @@ void deallocate(void* p, size_t bytes, size_t alignment = max_align);
 Equivalent to \tcode{do_deallocate(p, bytes, alignment)}.
 \end{itemdescr}
 
-\indexlibrarymember{is_equal}{memory_resource}%
+\begin{indexed}{\indexlibrarymember{is_equal}{memory_resource}}
 \begin{itemdecl}
 bool is_equal(const memory_resource& other) const noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -11428,10 +11447,11 @@ Sets \tcode{memory_rsrc} to \tcode{other.resource()}.
 
 \rSec3[mem.poly.allocator.mem]{\tcode{polymorphic_allocator} member functions}
 
-\indexlibrarymember{allocate}{polymorphic_allocator}%
+\begin{indexed}{\indexlibrarymember{allocate}{polymorphic_allocator}}
 \begin{itemdecl}
 [[nodiscard]] Tp* allocate(size_t n);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -11442,10 +11462,11 @@ return static_cast<Tp*>(memory_rsrc->allocate(n * sizeof(Tp), alignof(Tp)));
 \end{codeblock}
 \end{itemdescr}
 
-\indexlibrarymember{deallocate}{polymorphic_allocator}%
+\begin{indexed}{\indexlibrarymember{deallocate}{polymorphic_allocator}}
 \begin{itemdecl}
 void deallocate(Tp* p, size_t n);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -12936,8 +12957,8 @@ template<class OuterA1, class OuterA2, class... InnerAllocs>
 \rSec1[function.objects]{Function objects}
 
 \pnum
-A \defnx{function object type}{function object!type} is an object
-type\iref{basic.types} that can be the type of the
+A \defnx{function object type}{function object!type} is an
+\deflink{object type}{\ref{basic.types}} that can be the type of the
 \grammarterm{postfix-expression} in a function call
 (\ref{expr.call}, \ref{over.match.call}).\footnote{Such a type is a function
 pointer or a class type which has a member \tcode{operator()} or a class type
@@ -13116,7 +13137,8 @@ A \defn{call signature} is the name of a return type followed by a
 parenthesized comma-separated list of zero or more argument types.
 
 \pnum
-A \defn{callable type} is a function object type\iref{function.objects} or a pointer to member.
+A \defn{callable type} is a
+\deflinkx{function object type}{function object!type}{\ref{function.objects}} or a pointer to member.
 
 \pnum
 A \defn{callable object} is an object of a callable type.
@@ -13177,7 +13199,7 @@ to \tcode{R}.
 \indextext{call wrapper}%
 \indextext{call wrapper!simple}%
 \indextext{call wrapper!forwarding}%
-Every call wrapper\iref{func.def} shall be
+Every \deflinkx{call wrapper}{call wrapper type}{\ref{func.def}} shall be
 \tcode{MoveConstructible}.
 A \defn{forwarding call wrapper} is a
 call wrapper that can be called with an arbitrary argument list
@@ -13251,7 +13273,8 @@ namespace std {
 around a reference to an object or function of type \tcode{T}.
 
 \pnum
-\tcode{reference_wrapper<T>} is a trivially copyable type\iref{basic.types}.
+\tcode{reference_wrapper<T>} is a
+\deflinkx{trivially copyable type}{trivially copyable types}{\ref{basic.types}}.
 
 \rSec3[refwrap.const]{\tcode{reference_wrapper} construct/copy/destroy}
 
@@ -13825,12 +13848,13 @@ template<class T, class U> constexpr auto operator()(T&& t, U&& u) const
 
 \rSec3[comparisons.less_equal]{Class template \tcode{less_equal}}
 
-\indexlibrary{\idxcode{less_equal}}%
+\begin{indexed}{\indexlibrary{\idxcode{less_equal}}}
 \begin{itemdecl}
 template<class T = void> struct less_equal {
   constexpr bool operator()(const T& x, const T& y) const;
 };
 \end{itemdecl}
+\end{indexed}
 
 \indexlibrarymember{operator()}{less_equal}%
 \begin{itemdecl}
@@ -13870,12 +13894,13 @@ operators in the language~(\ref{expr.log.and}, \ref{expr.log.or}, \ref{expr.unar
 
 \rSec3[logical.operations.and]{Class template \tcode{logical_and}}
 
-\indexlibrary{\idxcode{logical_and}}%
+\begin{indexed}{\indexlibrary{\idxcode{logical_and}}}
 \begin{itemdecl}
 template<class T = void> struct logical_and {
   constexpr bool operator()(const T& x, const T& y) const;
 };
 \end{itemdecl}
+\end{indexed}
 
 \indexlibrarymember{operator()}{logical_and}%
 \begin{itemdecl}
@@ -13908,12 +13933,13 @@ template<class T, class U> constexpr auto operator()(T&& t, U&& u) const
 
 \rSec3[logical.operations.or]{Class template \tcode{logical_or}}
 
-\indexlibrary{\idxcode{logical_or}}%
+\begin{indexed}{\indexlibrary{\idxcode{logical_or}}}
 \begin{itemdecl}
 template<class T = void> struct logical_or {
   constexpr bool operator()(const T& x, const T& y) const;
 };
 \end{itemdecl}
+\end{indexed}
 
 \indexlibrarymember{operator()}{logical_or}%
 \begin{itemdecl}
@@ -13946,12 +13972,13 @@ template<class T, class U> constexpr auto operator()(T&& t, U&& u) const
 
 \rSec3[logical.operations.not]{Class template \tcode{logical_not}}
 
-\indexlibrary{\idxcode{logical_not}}%
+\begin{indexed}{\indexlibrary{\idxcode{logical_not}}}
 \begin{itemdecl}
 template<class T = void> struct logical_not {
   constexpr bool operator()(const T& x) const;
 };
 \end{itemdecl}
+\end{indexed}
 
 \indexlibrarymember{operator()}{logical_not}%
 \begin{itemdecl}
@@ -13992,12 +14019,13 @@ operators in the language~(\ref{expr.bit.and}, \ref{expr.or},
 
 \rSec3[bitwise.operations.and]{Class template \tcode{bit_and}}
 
-\indexlibrary{\idxcode{bit_and}}%
+\begin{indexed}{\indexlibrary{\idxcode{bit_and}}}
 \begin{itemdecl}
 template<class T = void> struct bit_and {
   constexpr T operator()(const T& x, const T& y) const;
 };
 \end{itemdecl}
+\end{indexed}
 
 \indexlibrarymember{operator()}{bit_and}%
 \begin{itemdecl}
@@ -14030,12 +14058,13 @@ template<class T, class U> constexpr auto operator()(T&& t, U&& u) const
 
 \rSec3[bitwise.operations.or]{Class template \tcode{bit_or}}
 
-\indexlibrary{\idxcode{bit_or}}%
+\begin{indexed}{\indexlibrary{\idxcode{bit_or}}}
 \begin{itemdecl}
 template<class T = void> struct bit_or {
   constexpr T operator()(const T& x, const T& y) const;
 };
 \end{itemdecl}
+\end{indexed}
 
 \indexlibrarymember{operator()}{bit_or}%
 \begin{itemdecl}
@@ -14068,12 +14097,13 @@ template<class T, class U> constexpr auto operator()(T&& t, U&& u) const
 
 \rSec3[bitwise.operations.xor]{Class template \tcode{bit_xor}}
 
-\indexlibrary{\idxcode{bit_xor}}%
+\begin{indexed}{\indexlibrary{\idxcode{bit_xor}}}
 \begin{itemdecl}
 template<class T = void> struct bit_xor {
   constexpr T operator()(const T& x, const T& y) const;
 };
 \end{itemdecl}
+\end{indexed}
 
 \indexlibrarymember{operator()}{bit_xor}%
 \begin{itemdecl}
@@ -14193,7 +14223,7 @@ explicit @\placeholdernc{call_wrapper}@(F&& f);
 \requires
 \tcode{FD} shall satisfy the \tcode{MoveConstructible} requirements.
 \tcode{is_constructible_v<FD, F>} shall be \tcode{true}.
-\tcode{fd} shall be a callable object\iref{func.def}.
+\tcode{fd} shall be a \deflink{callable object}{\ref{func.def}}.
 
 \pnum
 \effects
@@ -14334,7 +14364,7 @@ The cv-qualifiers \cv{} of the call wrapper \tcode{g},
 as specified below, shall be neither \tcode{volatile} nor \tcode{const volatile}.
 
 \pnum\returns
-A forwarding call wrapper \tcode{g}\iref{func.require}.
+A \deflink{forwarding call wrapper}{\ref{func.require}} \tcode{g}.
 The effect of \tcode{g($\tcode{u}_1$, $\tcode{u}_2$, $\dotsc$, $\tcode{u}_M$)} shall
 be
 \begin{codeblock}
@@ -14377,7 +14407,7 @@ as specified below, shall be neither \tcode{volatile} nor \tcode{const volatile}
 
 \pnum
 \returns
-A forwarding call wrapper \tcode{g}\iref{func.require}.
+A \deflink{forwarding call wrapper}{\ref{func.require}} \tcode{g}.
 The effect of
 \tcode{g($\tcode{u}_1$, $\tcode{u}_2$, $\dotsc$, $\tcode{u}_M$)} shall be
 \begin{codeblock}
@@ -14472,7 +14502,7 @@ template<class R, class T> @\unspec@ mem_fn(R T::* pm) noexcept;
 
 \begin{itemdescr}
 \pnum
-\returns A simple call wrapper\iref{func.def} \tcode{fn}
+\returns A simple \deflink{call wrapper}{\ref{func.def}} \tcode{fn}
 such that the expression \tcode{fn(t, a$_2$, $\dotsc$, a$_N$)} is equivalent
 to \tcode{\placeholdernc{INVOKE}(pm, t, a$_2$, $\dotsc$, a$_N$)}\iref{func.require}.
 \end{itemdescr}
@@ -14589,23 +14619,23 @@ namespace std {
 \pnum
 The \tcode{function} class template provides polymorphic wrappers that
 generalize the notion of a function pointer. Wrappers can store, copy,
-and call arbitrary callable objects\iref{func.def}, given a call
-signature\iref{func.def}, allowing functions to be first-class objects.
+and call arbitrary \deflinkx{callable objects}{callable object}{\ref{func.def}}, given a
+\deflink{call signature}{\ref{func.def}}, allowing functions to be first-class objects.
 
 \pnum
 \indextext{callable type}%
-A callable type\iref{func.def} \tcode{F}
+A \deflink{callable type}{\ref{func.def}} \tcode{F}
 is \defn{Lvalue-Callable} for argument
 types \tcode{ArgTypes}
 and return type \tcode{R}
 if the expression
 \tcode{\placeholdernc{INVOKE}<R>(declval<F\&>(), declval<ArgTypes>()...)},
-considered as an unevaluated operand\iref{expr.prop}, is
+considered as an \deflink{unevaluated operand}{\ref{expr.prop}}, is
 well-formed\iref{func.require}.
 
 \pnum
-The \tcode{function} class template is a call
-wrapper\iref{func.def} whose call signature\iref{func.def}
+The \tcode{function} class template is a
+\deflink{call wrapper}{\ref{func.def}} whose \deflink{call signature}{\ref{func.def}}
 is \tcode{R(ArgTypes...)}.
 
 \pnum
@@ -14691,7 +14721,7 @@ template<class F> function(F f);
 
 \pnum
 \remarks This constructor template shall not participate in overload resolution unless
-\tcode{F} is Lvalue-Callable\iref{func.wrap.func} for argument types
+\tcode{F} is \deflink{Lvalue-Callable}{\ref{func.wrap.func}} for argument types
 \tcode{ArgTypes...} and return type \tcode{R}.
 
 \pnum
@@ -14794,7 +14824,7 @@ template<class F> function& operator=(F&& f);
 
 \pnum\remarks This assignment operator shall not participate in overload
 resolution unless \tcode{decay_t<F>} is
-Lvalue-Callable\iref{func.wrap.func} for argument types \tcode{ArgTypes...} and
+\deflink{Lvalue-Callable}{\ref{func.wrap.func}} for argument types \tcode{ArgTypes...} and
 return type \tcode{R}.
 \end{itemdescr}
 
@@ -14853,7 +14883,7 @@ R operator()(ArgTypes... args) const;
 \begin{itemdescr}
 \pnum
 \returns \tcode{\placeholdernc{INVOKE}<R>(f, std::forward<ArgTypes>(args)...)}\iref{func.require},
-where \tcode{f} is the target object\iref{func.def} of \tcode{*this}.
+where \tcode{f} is the \deflink{target object}{\ref{func.def}} of \tcode{*this}.
 
 \pnum\throws
 \tcode{bad_function_call} if \tcode{!*this}; otherwise, any
@@ -14925,7 +14955,8 @@ template<class R, class... ArgTypes>
 \rSec2[func.search]{Searchers}
 
 \pnum
-This subclause provides function object types\iref{function.objects} for
+This subclause provides
+\deflinkx{function object types}{function object!type}{\ref{function.objects}} for
 operations that search for a sequence \range{pat\textunderscore\nobreak first}{pat_last} in another
 sequence \range{first}{last} that is provided to the object's function call
 operator.  The first sequence (the pattern to be searched for) is provided to
@@ -15237,7 +15268,7 @@ these values are \tcode{false}:
 \tcode{is_copy_assignable_v<H>}, and
 \tcode{is_move_assignable_v<H>}.
 Disabled specializations of \tcode{hash}
-are not function object types\iref{function.objects}.
+are not \deflinkx{function object types}{function object!type}{\ref{function.objects}}.
 \begin{note}
 This means that the specialization of \tcode{hash} exists, but
 any attempts to use it as a \tcode{Hash} will be ill-formed.
@@ -15276,7 +15307,7 @@ type transformations allow certain properties of types to be manipulated.
 
 \pnum
 \indextext{signal-safe!type traits}%
-All functions specified in this subclause are signal-safe\iref{support.signal}.
+All functions specified in this subclause are \deflinkx{signal-safe}{evaluation!signal-safe}{\ref{support.signal}}.
 
 \rSec2[meta.rqmts]{Requirements}
 
@@ -15289,7 +15320,7 @@ property being described. It shall be \tcode{DefaultConstructible},
 and publicly and unambiguously derived, directly or indirectly, from
 its \defn{base characteristic}, which is
 a specialization of the template
-\tcode{integral_constant}\iref{meta.help}, with
+\linkx{\tcode{integral_constant}}{\idxcode{integral_constant}}{\ref{meta.help}}, with
 the arguments to the template \tcode{integral_constant} determined by the
 requirements for the particular property being described.
 The member names of the base characteristic shall not be hidden and shall be
@@ -15305,7 +15336,7 @@ and publicly and unambiguously derived, directly or
 indirectly, from
 its \term{base characteristic}, which is a specialization
 of the template
-\tcode{integral_constant}\iref{meta.help}, with
+\linkx{\tcode{integral_constant}}{\idxcode{integral_constant}}{\ref{meta.help}}, with
 the arguments to the template \tcode{integral_constant} determined by the
 requirements for the particular relationship being described.
 The member names of the base characteristic shall not be hidden and shall be
@@ -15724,6 +15755,7 @@ to instantiate a template in this subclause.
 \rSec2[meta.help]{Helper classes}
 
 \indexlibrarymember{value_type}{integral_constant}%
+\begin{indexed}{\indexlibrary{\idxcode{integral_constant}}}
 \begin{codeblock}
 namespace std {
   template<class T, T v> struct integral_constant {
@@ -15737,8 +15769,8 @@ namespace std {
   };
 }
 \end{codeblock}
+\end{indexed}
 
-\indexlibrary{\idxcode{integral_constant}}%
 \indexlibrary{\idxcode{bool_constant}}%
 \indexlibrary{\idxcode{true_type}}%
 \indexlibrary{\idxcode{false_type}}%
@@ -15758,7 +15790,7 @@ properties of a type at compile time.
 
 \pnum
 Each of these templates shall be a
-\tcode{UnaryTypeTrait}\iref{meta.rqmts}
+\deflink{\tcode{UnaryTypeTrait}}{\ref{meta.rqmts}}
 with a base characteristic of
 \tcode{true_type} if the corresponding condition is \tcode{true}, otherwise
 \tcode{false_type}.
@@ -15807,7 +15839,7 @@ has a \tcode{value} member that evaluates to \tcode{true}.
 \tcode{template<class T>}\br
  \tcode{struct is_array;}           &
 \tcode{T} is an array type\iref{basic.compound} of known or unknown extent    &
-Class template \tcode{array}\iref{array}
+Class template \link{\tcode{array}}{\ref{array}}
 is not an array type.                   \\ \rowsep
 \indexlibrary{\idxcode{is_pointer}}%
 \tcode{template<class T>}\br
@@ -15918,7 +15950,7 @@ the argument is a complete type.
 For the purpose of defining the templates in this subclause,
 a function call expression \tcode{declval<T>()} for any type \tcode{T}
 is considered to be a trivial~(\ref{basic.types}, \ref{special}) function call
-that is not an odr-use\iref{basic.def.odr} of \tcode{declval}
+that is not an \link{odr-use}{\ref{basic.def.odr}} of \tcode{declval}
 in the context of the corresponding definition
 notwithstanding the restrictions of~\ref{declval}.
 
@@ -16050,8 +16082,8 @@ notwithstanding the restrictions of~\ref{declval}.
 \tcode{template<class T, class U>}\br
   \tcode{struct is_assignable;} &
   The expression \tcode{declval<T>() =} \tcode{declval<U>()} is well-formed
-  when treated as an unevaluated
-  operand\iref{expr.prop}. Access checking is performed as if in a context
+  when treated as an \deflink{unevaluated
+  operand}{\ref{expr.prop}}. Access checking is performed as if in a context
   unrelated to \tcode{T} and \tcode{U}. Only the validity of the immediate context
   of the assignment expression is considered. \begin{note} The compilation of the
   expression can result in side effects such as the instantiation of class template
@@ -16082,7 +16114,7 @@ notwithstanding the restrictions of~\ref{declval}.
   \tcode{struct is_swappable_with;} &
   The expressions \tcode{swap(declval<T>(), declval<U>())} and
   \tcode{swap(declval<U>(), declval<T>())} are each well-formed
-  when treated as an unevaluated operand\iref{expr.prop}
+  when treated as an \deflink{unevaluated operand}{\ref{expr.prop}}
   in an overload-resolution context
   for swappable values\iref{swappable.requirements}.
   Access checking is performed as if in a context
@@ -16119,7 +16151,7 @@ notwithstanding the restrictions of~\ref{declval}.
   for which the expression
   \tcode{declval<U\&>().\~U()}
   is well-formed
-  when treated as an unevaluated operand\iref{expr.prop},
+  when treated as an \deflink{unevaluated operand}{\ref{expr.prop}},
   where \tcode{U} is
   \tcode{remove_all_extents_t<T>}. &
   \tcode{T} shall be a complete type, \cv{}~\tcode{void},
@@ -16128,7 +16160,7 @@ notwithstanding the restrictions of~\ref{declval}.
 \indexlibrary{\idxcode{is_trivially_constructible}}%
 \tcode{template<class T, class... Args>}\br
   \tcode{struct}\br
-  \tcode{is_trivially_constructible;} &
+  \tcode{\libentity{is_trivially_constructible};} &
   \tcode{is_constructible_v<T,}\br
   \tcode{Args...>} is \tcode{true} and the variable
   definition for \tcode{is_constructible}, as defined below, is known to call
@@ -16218,9 +16250,8 @@ notwithstanding the restrictions of~\ref{declval}.
  \cv{}~\tcode{void}, or an array of unknown
  bound.                \\ \rowsep
 
-\indexlibrary{\idxcode{is_nothrow_copy_constructible}}%
-\tcode{template<class T>}\br
- \tcode{struct is_nothrow_copy_constructible;}      &
+\tcode{template <class T>}\br
+ \tcode{struct \libentity{is_nothrow_copy_constructible};}      &
   For a referenceable type \tcode{T}, the same result as
  \tcode{is_nothrow_constructible_v<T, const T\&>}, otherwise \tcode{false}. &
  \tcode{T} shall be a complete type,
@@ -16423,7 +16454,7 @@ properties of types at compile time.
 \end{libreqtab2a}
 
 \pnum
-Each of these templates shall be a \tcode{UnaryTypeTrait}\iref{meta.rqmts} with a
+Each of these templates shall be a \deflink{\tcode{UnaryTypeTrait}}{\ref{meta.rqmts}} with a
 base characteristic of \tcode{integral_constant<size_t, Value>}.
 
 \pnum
@@ -16459,7 +16490,7 @@ relationships between types at compile time.
 
 \pnum
 Each of these templates shall be a
-\tcode{BinaryTypeTrait}\iref{meta.rqmts}
+\deflinkx{\tcode{BinaryTypeTrait}}{BinaryTypeTrait}{\ref{meta.rqmts}}
 with a base characteristic of
 \tcode{true_type} if the corresponding condition is true, otherwise
 \tcode{false_type}.
@@ -16543,7 +16574,7 @@ not possibly cv-qualified versions of the same type,
 For the purpose of defining the templates in this subclause,
 a function call expression \tcode{declval<T>()} for any type \tcode{T}
 is considered to be a trivial~(\ref{basic.types}, \ref{special}) function call
-that is not an odr-use\iref{basic.def.odr} of \tcode{declval}
+that is not an \link{odr-use}{\ref{basic.def.odr}} of \tcode{declval}
 in the context of the corresponding definition
 notwithstanding the restrictions of~\ref{declval}.
 
@@ -16596,7 +16627,7 @@ type to another following some predefined rule.
 
 \pnum
 Each of the templates in this subclause shall be a
-\tcode{TransformationTrait}\iref{meta.rqmts}.
+\deflinkx{\tcode{TransformationTrait}}{TransformationTrait}{\ref{meta.rqmts}}.
 
 \rSec3[meta.trans.cv]{Const-volatile modifications}
 
@@ -16684,7 +16715,7 @@ Each of the templates in this subclause shall be a
 \indexlibrary{\idxcode{add_lvalue_reference}}%
 \tcode{template<class T>\br
  struct add_lvalue_reference;}                     &
- If \tcode{T} names a referenceable type\iref{defns.referenceable} then
+ If \tcode{T} names a \link{referenceable type}{\ref{defns.referenceable}} then
  the member typedef \tcode{type} names \tcode{T\&};
  otherwise, \tcode{type} names \tcode{T}.
  \begin{note}
@@ -16716,14 +16747,14 @@ Each of the templates in this subclause shall be a
 \indexlibrary{\idxcode{make_signed}}%
 \tcode{template<class T>}\br
  \tcode{struct make_signed;} &
- If \tcode{T} names a (possibly cv-qualified) signed integer
- type\iref{basic.fundamental} then the member typedef
+ If \tcode{T} names a (possibly cv-qualified)
+ \deflink{signed integer type}{\ref{basic.fundamental}} then the member typedef
  \tcode{type} names the type \tcode{T}; otherwise,
  if \tcode{T} names a (possibly cv-qualified) unsigned integer
  type then \tcode{type} names the corresponding
  signed integer type, with the same cv-qualifiers as \tcode{T};
- otherwise, \tcode{type} names the signed integer type with smallest
- rank\iref{conv.rank} for which
+ otherwise, \tcode{type} names the signed integer type with \link{smallest
+ rank}{\ref{conv.rank}} for which
  \tcode{sizeof(T) == sizeof(type)}, with the same
  cv-qualifiers as \tcode{T}.\br
  \requires{} \tcode{T} shall be a (possibly cv-qualified)
@@ -16733,14 +16764,14 @@ Each of the templates in this subclause shall be a
 \indexlibrary{\idxcode{make_unsigned}}%
 \tcode{template<class T>}\br
  \tcode{struct make_unsigned;} &
- If \tcode{T} names a (possibly cv-qualified) unsigned integer
- type\iref{basic.fundamental} then the member typedef
+ If \tcode{T} names a (possibly cv-qualified)
+ \deflink{unsigned integer type}{\ref{basic.fundamental}} then the member typedef
  \tcode{type} names the type \tcode{T}; otherwise,
  if \tcode{T} names a (possibly cv-qualified) signed integer
  type then \tcode{type} names the corresponding
  unsigned integer type, with the same cv-qualifiers as \tcode{T};
- otherwise, \tcode{type} names the unsigned integer type with smallest
- rank\iref{conv.rank} for which
+ otherwise, \tcode{type} names the unsigned integer type with \link{smallest
+ rank}{\ref{conv.rank}} for which
  \tcode{sizeof(T) == sizeof(type)}, with the same
  cv-qualifiers as \tcode{T}.\br
  \requires{} \tcode{T} shall be a (possibly cv-qualified)
@@ -16817,7 +16848,7 @@ assert((is_same_v<remove_all_extents_t<int[][3]>, int>));
 \indexlibrary{\idxcode{add_pointer}}%
 \tcode{template<class T>\br
  struct add_pointer;}                       &
- If \tcode{T} names a referenceable type\iref{defns.referenceable} or a
+ If \tcode{T} names a \link{referenceable type}{\ref{defns.referenceable}} or a
  \cv{}~\tcode{void} type then
  the member typedef \tcode{type} names the same type as
  \tcode{remove_reference_t<T>*};
@@ -16879,8 +16910,8 @@ assert((is_same_v<remove_all_extents_t<int[][3]>, int>));
  \tcode{remove_extent_t<U>*}. If \tcode{is_function_v<U>} is \tcode{true},
  the member typedef \tcode{type} shall equal \tcode{add_pointer_t<U>}. Otherwise
  the member typedef \tcode{type} equals \tcode{remove_cv_t<U>}.
- \begin{note} This behavior is similar to the lvalue-to-rvalue\iref{conv.lval},
- array-to-pointer\iref{conv.array}, and function-to-pointer\iref{conv.func}
+ \begin{note} This behavior is similar to the \link{lvalue-to-rvalue}{\ref{conv.lval}},
+ \link{array-to-pointer}{\ref{conv.array}}, and \link{function-to-pointer}{\ref{conv.func}}
  conversions applied when an lvalue expression is used as an rvalue, but also
  strips \cv-qualifiers from class types in order to more closely model by-value
  argument passing. \end{note}
@@ -16914,14 +16945,14 @@ assert((is_same_v<remove_all_extents_t<int[][3]>, int>));
  &
  The member typedef \tcode{type} names the underlying type
  of \tcode{T}.\br
- \requires{} \tcode{T} shall be a complete enumeration type\iref{dcl.enum} \\ \rowsep
+ \requires{} \tcode{T} shall be a complete \link{enumeration type}{\ref{dcl.enum}} \\ \rowsep
 
 \tcode{template<class Fn,}\br
  \tcode{class... ArgTypes>}\br
  \tcode{struct invoke_result;}
  &
  If the expression \tcode{\placeholdernc{INVOKE}(declval<Fn>(), declval<ArgTypes>()...)}
- is well-formed when treated as an unevaluated operand\iref{expr.prop},
+ is well-formed when treated as an \deflink{unevaluated operand}{\ref{expr.prop}},
  the member typedef \tcode{type} names the type
  \tcode{decltype(\placeholdernc{INVOKE}(declval<Fn>(), declval<ArgTypes>()...))};
  otherwise, there shall be no member \tcode{type}. Access checking is
@@ -16940,9 +16971,8 @@ assert((is_same_v<remove_all_extents_t<int[][3]>, int>));
  unknown bound.\\
 \end{libreqtab2a}
 
-\indexlibrary{\idxcode{aligned_storage}}%
 \pnum
-\begin{note} A typical implementation would define \tcode{aligned_storage} as:
+\begin{note} A typical implementation would define \libentity{aligned_storage} as:
 
 \begin{codeblock}
 template<size_t Len, size_t Alignment>
@@ -16955,10 +16985,9 @@ struct aligned_storage {
 \end{note}
 
 \pnum
-It is \impldef{support for extended alignment} whether any extended alignment is
-supported\iref{basic.align}.
+It is \impldef{support for extended alignment} whether any
+\deflink{extended alignment}{\ref{basic.align}} is supported.
 
-\indexlibrary{\idxcode{common_type}}%
 \pnum
 Note A:
 For the \tcode{common_type} trait applied to a template parameter pack \tcode{T} of types,
@@ -17058,10 +17087,11 @@ static_assert(is_same_v<invoke_result_t<PMD, const S*>, const char&>);
 This subclause describes type traits for applying logical operators
 to other type traits.
 
-\indexlibrary{\idxcode{conjunction}}%
+\begin{indexed}{\indexlibrary{\idxcode{conjunction}}}
 \begin{itemdecl}
 template<class... B> struct conjunction : @\seebelow@ { };
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -17443,8 +17473,8 @@ the typedef shall not be defined.
 
 \pnum
 \indexlibrary{\idxcode{chrono}}%
-This subclause describes the chrono library\iref{time.syn} and various C
-functions\iref{ctime.syn} that provide generally useful time
+This subclause describes the \link{chrono library}{\ref{time.syn}} and various \link{C
+functions}{\ref{ctime.syn}} that provide generally useful time
 utilities.
 
 \rSec2[time.syn]{Header \tcode{<chrono>} synopsis}
@@ -18506,7 +18536,7 @@ SI definition is a measure of the quality of implementation. \end{note}
 A type \tcode{TC} meets the \tcode{TrivialClock} requirements if:
 
 \begin{itemize}
-\item \tcode{TC} satisfies the \tcode{Clock} requirements\iref{time.clock.req},
+\item \tcode{TC} satisfies the \link{\tcode{Clock} requirements}{\ref{time.clock.req}},
 
 \item the types \tcode{TC::rep}, \tcode{TC::duration}, and \tcode{TC::time_point}
 satisfy the \tcode{EqualityComparable} (\tref{equalitycomparable}),
@@ -18519,7 +18549,7 @@ numeric types\iref{numeric.requirements}. \begin{note} This means, in particular
 that operations on these types will not throw exceptions. \end{note}
 
 \item lvalues of the types \tcode{TC::rep}, \tcode{TC::duration}, and
-\tcode{TC::time_point} are swappable\iref{swappable.requirements},
+\tcode{TC::time_point} are \link{swappable}{\ref{swappable.requirements}},
 
 \item the function \tcode{TC::now()} does not throw exceptions, and
 
@@ -28690,8 +28720,7 @@ The contents of the header \tcode{<ctime>} are the same as the C standard librar
 
 \pnum
 The functions \tcode{asctime}, \tcode{ctime}, \tcode{gmtime}, and
-\tcode{localtime} are not required to avoid data
-races\iref{res.on.data.races}.
+\tcode{localtime} are not required to \link{avoid data races}{\ref{res.on.data.races}}.
 
 \xrefc{7.27}
 
@@ -28736,9 +28765,9 @@ namespace std {
 
 \pnum
 The class \tcode{type_index} provides a simple wrapper for
-\tcode{type_info} which can be used as an index type in associative
-containers\iref{associative} and in unordered associative
-containers\iref{unord}.
+\tcode{type_info} which can be used as an index type in
+\link{associative containers}{\ref{associative}} and in
+\link{unordered associative containers}{\ref{unord}}.
 
 \rSec2[type.index.members]{\tcode{type_index} members}
 
-- 
2.7.4


From ff8e9e55b9d360f01ab996b4d99c44861ba71279 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sat, 25 Feb 2017 18:01:58 +0100
Subject: [PATCH 11/18] Add and use \weblink for external references.

---
 source/iostreams.tex | 14 +++++++-------
 source/macros.tex    |  4 ++++
 source/regex.tex     |  8 ++++----
 3 files changed, 15 insertions(+), 11 deletions(-)

diff --git a/source/iostreams.tex b/source/iostreams.tex
index 9ab1fee..9fede90 100644
--- a/source/iostreams.tex
+++ b/source/iostreams.tex
@@ -13942,7 +13942,7 @@ If a file  is removed from or added to a directory after the
 construction of a \tcode{directory_iterator} for the directory, it is
 unspecified whether or not subsequently incrementing the iterator will ever
 result in an iterator referencing the removed or added directory entry. See
-POSIX \tcode{readdir_r}.
+POSIX \weblink{\tcode{readdir_r}}{http://pubs.opengroup.org/onlinepubs/9699919799/functions/readdir.html}.
 \end{note}
 
 \rSec3[fs.dir.itr.members]{\tcode{directory_iterator} members}
@@ -14850,7 +14850,7 @@ void create_directory_symlink(const path& to, const path& new_symlink,
 
 \begin{itemdescr}
 \pnum
-\effects Establishes the postcondition, as if by POSIX \tcode{symlink()}.
+\effects Establishes the postcondition, as if by POSIX \weblink{\tcode{symlink()}}{http://pubs.opengroup.org/onlinepubs/9699919799/functions/symlink.html}.
 
 \pnum
 \postconditions \tcode{new_symlink} resolves to a symbolic link file that
@@ -14913,7 +14913,7 @@ void create_symlink(const path& to, const path& new_symlink,
 
 \begin{itemdescr}
 \pnum
-\effects Establishes the postcondition, as if by POSIX \tcode{symlink()}.
+\effects Establishes the postcondition, as if by POSIX \weblink{\tcode{symlink()}}{http://pubs.opengroup.org/onlinepubs/9699919799/functions/symlink.html}.
 
 \pnum
 \postconditions \tcode{new_symlink} resolves to a symbolic link file that
@@ -14941,7 +14941,7 @@ path current_path(error_code& ec);
 \pnum
 \returns The absolute path of the current working directory,
   whose pathname in the native format is
-  obtained as if by POSIX \tcode{getcwd()}.
+  obtained as if by POSIX \weblink{\tcode{getcwd()}}{http://pubs.opengroup.org/onlinepubs/9699919799/functions/getcwd.html}.
   The signature with argument \tcode{ec} returns \tcode{path()} if an
   error occurs.
 
@@ -14971,7 +14971,7 @@ void current_path(const path& p, error_code& ec) noexcept;
 
 \begin{itemdescr}
 \pnum
-\effects Establishes the postcondition, as if by POSIX \tcode{chdir()}.
+\effects Establishes the postcondition, as if by POSIX \weblink{\tcode{chdir()}}{http://pubs.opengroup.org/onlinepubs/9699919799/functions/chdir.html}.
 
 \pnum
 \postconditions \tcode{equivalent(p, current_path())}.
@@ -15071,7 +15071,7 @@ If \tcode{exists(p)} is \tcode{false}, an error is reported\iref{fs.err.report}.
 \item
   If \tcode{is_regular_file(p)}, the size in bytes of the file
   \tcode{p} resolves to, determined as if by the value of the POSIX \tcode{stat}
-  structure member \tcode{st_size} obtained as if by POSIX \tcode{stat()}.
+  structure member \tcode{st_size} obtained as if by POSIX \weblink{\tcode{stat()}}{http://pubs.opengroup.org/onlinepubs/9699919799/functions/stat.html}.
 \item
   Otherwise, the result is \impldef{result of \tcode{filesystem::file_size}}.
 \end{itemize}
@@ -15418,7 +15418,7 @@ void last_write_time(const path& p, file_time_type new_time,
 \begin{itemdescr}
 \pnum
 \effects Sets the time of last data modification of the file
-  resolved to by \tcode{p} to \tcode{new_time}, as if by POSIX \tcode{futimens()}.
+  resolved to by \tcode{p} to \tcode{new_time}, as if by POSIX \weblink{\tcode{futimens()}}{http://pubs.opengroup.org/onlinepubs/9699919799/functions/futimens.html}.
 
 \pnum
 \throws As specified in~\ref{fs.err.report}.
diff --git a/source/macros.tex b/source/macros.tex
index 2e48012..7b91b8b 100644
--- a/source/macros.tex
+++ b/source/macros.tex
@@ -573,6 +573,10 @@
 	% Convenience macro for when the link
 	% text is also the definition key.
 
+\newcommand{\weblink}[2]{#1}
+	%   arg 0: link text
+	%   arg 1: URL
+
 \newcommand{\indexedspan}[2]{#1#2}
 	%   arg 0: text
 	%   arg 1: indices (zero or more \index commands)
diff --git a/source/regex.tex b/source/regex.tex
index 7b69009..6e2caeb 100644
--- a/source/regex.tex
+++ b/source/regex.tex
@@ -719,14 +719,14 @@ shall be that used by extended regular expressions in POSIX.
 %
 \tcode{awk} &
 Specifies that the grammar recognized by the regular expression engine
-shall be that used by the utility awk in POSIX.
+shall be that used by the utility \weblink{awk}{http://pubs.opengroup.org/onlinepubs/9699919799/utilities/awk.html} in POSIX.
 \indextext{\idxcode{awk}}%
 \indexlibrary{\idxcode{syntax_option_type}!\idxcode{awk}}%
 \\ \rowsep
 %
 \tcode{grep} &
 Specifies that the grammar recognized by the regular expression engine
-shall be that used by the utility grep in POSIX.
+shall be that used by the utility \weblink{grep}{http://pubs.opengroup.org/onlinepubs/9699919799/utilities/grep.html} in POSIX.
 \indextext{\idxcode{grep}}%
 \indexlibrary{\idxcode{syntax_option_type}!\idxcode{grep}}%
 \\ \rowsep
@@ -858,7 +858,7 @@ set the flags \tcode{match_not_bol} and \tcode{match_not_bow} shall be ignored b
 When a regular expression match is to be replaced by a
 new string, the new string shall be constructed using the rules used by
 the ECMAScript replace function in ECMA-262,
-part 15.5.4.11 String.prototype.replace. In
+part 15.5.4.11 \weblink{String.prototype.replace}{https://tc39.github.io/ecma262/#sec-string.prototype.replace}. In
 addition, during search and replace operations all non-overlapping
 occurrences of the regular expression shall be located and replaced, and
 sections of the input that did not match the expression shall be copied
@@ -869,7 +869,7 @@ unchanged to the output string.
 \tcode{format_sed} &
 When a regular expression match is to be replaced by a
 new string, the new string shall be constructed using the rules used by
-the sed utility in POSIX.
+the \weblink{sed}{http://pubs.opengroup.org/onlinepubs/9699919799/utilities/sed.html} utility in POSIX.
 \\ \rowsep
 %
 \indexlibrary{\idxcode{format_no_copy}}%
-- 
2.7.4


From 662c5d0077e08290104e1a18d625f00be7e8df1a Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sun, 26 Feb 2017 13:04:04 +0100
Subject: [PATCH 12/18] Remove some index entries that cause unnecessary
 duplicate ids.

---
 source/classes.tex   | 2 +-
 source/lib-intro.tex | 2 +-
 source/templates.tex | 5 +++--
 3 files changed, 5 insertions(+), 4 deletions(-)

diff --git a/source/classes.tex b/source/classes.tex
index ebfc8d6..572c008 100644
--- a/source/classes.tex
+++ b/source/classes.tex
@@ -118,7 +118,7 @@ as equality comparison, can be defined by the user; see~\ref{over.oper}.
 
 \pnum
 \indextext{\idxcode{struct}!\tcode{class} versus}%
-\indextext{structure}%
+%\indextext{structure}%
 \indextext{\idxcode{union}!\tcode{class} versus}%
 A \defn{union} is a class defined with the \grammarterm{class-key}
 \tcode{union};
diff --git a/source/lib-intro.tex b/source/lib-intro.tex
index 5bc129e..87e2acd 100644
--- a/source/lib-intro.tex
+++ b/source/lib-intro.tex
@@ -543,7 +543,7 @@ Paragraphs labeled ``\textsc{See also}'' contain cross-references to the relevan
 of other standards\iref{intro.refs}.
 
 \rSec2[conventions]{Other conventions}
-\indextext{conventions}%
+%\indextext{conventions}%
 
 \pnum
 This subclause describes several editorial conventions used to describe the contents
diff --git a/source/templates.tex b/source/templates.tex
index 0d388ca..7aa37c6 100644
--- a/source/templates.tex
+++ b/source/templates.tex
@@ -4606,7 +4606,8 @@ template<class B, class a> struct X : A {
 Inside a template, some constructs have semantics which may differ from one
 instantiation to another.
 Such a construct
-\defnx{depends}{name!dependent}
+%\defnx{depends}{name!dependent} <--- same index key as 28 lines down
+depends
 on the template parameters.
 In particular, types and expressions may depend on the type
 and/or
@@ -7976,7 +7977,7 @@ at least as specialized as the argument type.
 \pnum
 \indextext{at least as specialized as|see{more specialized}}%
 Function template \tcode{F}
-is \defnx{at least as specialized as}{more specialized}
+is \textit{at least as specialized as}
 function template \tcode{G} if,
 for each pair of types used to determine the ordering,
 the type from \tcode{F}
-- 
2.7.4


From 02b0e8e89f2c0e3f01f6a65b25875bdaa4ef1c4b Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sun, 26 Feb 2017 13:11:19 +0100
Subject: [PATCH 13/18] [temp.class.order] Merge \defn with index entry.

---
 source/templates.tex | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/source/templates.tex b/source/templates.tex
index 7aa37c6..67d4399 100644
--- a/source/templates.tex
+++ b/source/templates.tex
@@ -3293,9 +3293,8 @@ of the primary template.
 \rSec3[temp.class.order]{Partial ordering of class template specializations}
 
 \pnum
-\indextext{more specialized!class template}%
 For two class template partial specializations,
-the first is \defn{more specialized} than the second if, given the following
+the first is \defnx{more specialized}{more specialized!class template} than the second if, given the following
 rewrite to two function templates, the first function template is more
 specialized than the second according to the \link{ordering rules for function
 templates}{\ref{temp.func.order}}:
-- 
2.7.4


From 3fd8f7b3e39ed78de63f34fe15f8cd7edd132f44 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sun, 26 Feb 2017 13:55:28 +0100
Subject: [PATCH 14/18] Replace \term with \techterm where appropriate.

Or more specifically: where necessary to prevent cxxdraft-htmlgen from generating duplicate IDs
(since it generates anchors for all \term{}s).
---
 source/expressions.tex |  4 ++--
 source/iostreams.tex   | 42 +++++++++++++++++++++---------------------
 source/iterators.tex   |  8 ++++----
 source/special.tex     |  8 ++++----
 source/utilities.tex   |  2 +-
 5 files changed, 32 insertions(+), 32 deletions(-)

diff --git a/source/expressions.tex b/source/expressions.tex
index 1058255..f72163b 100644
--- a/source/expressions.tex
+++ b/source/expressions.tex
@@ -3611,8 +3611,8 @@ In particular, \tcode{sizeof(bool)}, \tcode{sizeof(char16_t)},
 implementation-defined.\footnote{\tcode{sizeof(bool)} is not required to be \tcode{1}.}
 \end{note}
 \begin{note}
-See~\ref{intro.memory} for the definition of \term{byte}
-and~\ref{basic.types} for the definition of \term{object representation}.
+See~\ref{intro.memory} for the definition of \techterm{byte}
+and~\ref{basic.types} for the definition of \techterm{object representation}.
 \end{note}
 
 \pnum
diff --git a/source/iostreams.tex b/source/iostreams.tex
index 9fede90..9d07429 100644
--- a/source/iostreams.tex
+++ b/source/iostreams.tex
@@ -3031,16 +3031,16 @@ namespace std {
 The class template
 \tcode{basic_streambuf}
 serves as an abstract base class for deriving various
-\term{stream buffers}
+\techterm{stream buffers}
 whose objects each control two
-\term{character sequences}:
+\techterm{character sequences}:
 \begin{itemize}
 \item
 a character
-\term{input sequence};
+\techterm{input sequence};
 \item
 a character
-\term{output sequence}.
+\techterm{output sequence}.
 \end{itemize}
 
 \rSec3[streambuf.cons]{\tcode{basic_streambuf} constructors}
@@ -3745,7 +3745,7 @@ is null or
 where \tcode{c} is the first
 \textit{character}
 of the
-\term{pending sequence},
+\techterm{pending sequence},
 without moving the input sequence position past it.
 If the pending sequence is null then the function returns
 \tcode{traits::eof()}
@@ -3753,7 +3753,7 @@ to indicate failure.
 
 \pnum
 The
-\term{pending sequence}
+\techterm{pending sequence}
 of characters is defined as the concatenation of
 \begin{itemize}
 \item the empty sequence if \tcode{gptr()} is null, otherwise the
@@ -3766,7 +3766,7 @@ some (possibly empty) sequence of characters read from the input sequence.
 
 \pnum
 The
-\term{result character}
+\techterm{result character}
 is
 the first character of the pending sequence if it is non-empty,
 otherwise
@@ -3774,7 +3774,7 @@ the next character that would be read from the input sequence.
 
 \pnum
 The
-\term{backup sequence}
+\techterm{backup sequence}
 is the empty sequence if \tcode{eback()} is null, otherwise the
 characters in
 \range{eback()}{gptr()}.
@@ -3879,7 +3879,7 @@ returns
 Other calls shall also satisfy that constraint.
 
 The
-\term{pending sequence}
+\techterm{pending sequence}
 is defined as for
 \tcode{underflow()},
 with the modifications that
@@ -3963,7 +3963,7 @@ int_type overflow(int_type c = traits::eof());
 \pnum
 \effects
 Consumes some initial subsequence of the characters of the
-\term{pending sequence}.
+\techterm{pending sequence}.
 The pending sequence is defined as the concatenation of
 \begin{itemize}
 \item
@@ -4279,15 +4279,15 @@ controlled by a stream buffer.
 \pnum
 Two groups of member function signatures share common properties:
 the
-\term{formatted input functions}
+\techterm{formatted input functions}
 (or
-\term{extractors})
+\techterm{extractors})
 and the
-\term{unformatted input functions.}
+\techterm{unformatted input functions.}
 Both groups of input functions are described as if they obtain (or
-\term{extract})
+\techterm{extract})
 input
-\term{characters}
+\techterm{characters}
 by calling
 \tcode{rdbuf()->sbumpc()}
 or
@@ -5843,15 +5843,15 @@ controlled by a stream buffer.
 \pnum
 Two groups of member function signatures share common properties:
 the
-\term{formatted output functions}
+\techterm{formatted output functions}
 (or
-\term{inserters})
+\techterm{inserters})
 and the
-\term{unformatted output functions.}
+\techterm{unformatted output functions.}
 Both groups of output functions generate (or
-\term{insert})
+\techterm{insert})
 output
-\term{characters}
+\techterm{characters}
 by actions equivalent to calling
 \tcode{rdbuf()->sputc(int_type)}.
 They may use other public members of
@@ -7415,7 +7415,7 @@ is derived from
 \tcode{basic_streambuf}
 to associate possibly the input sequence and possibly
 the output sequence with a sequence of arbitrary
-\term{characters}.
+\techterm{characters}.
 The sequence can be initialized from, or made available as, an object of class
 \tcode{basic_string}.
 
diff --git a/source/iterators.tex b/source/iterators.tex
index d60dd50..1ff50d2 100644
--- a/source/iterators.tex
+++ b/source/iterators.tex
@@ -413,7 +413,7 @@ does not imply
 (Equality does not guarantee the substitution property or referential transparency.)
 Algorithms on input iterators should never attempt to pass through the same iterator twice.
 They should be
-\term{single pass}
+\techterm{single pass}
 algorithms.
 Value type \tcode{T} is not required to be a \tcode{CopyAssignable} type (\tref{copyassignable}).
 These algorithms can be used with istreams as the source of the input data through the
@@ -478,7 +478,7 @@ is on the left side of the assignment statement.
 \textit{Assignment through the same value of the iterator happens only once.}
 Algorithms on output iterators should never attempt to pass through the same iterator twice.
 They should be
-\term{single pass}
+\techterm{single pass}
 algorithms.
 Equality and inequality might not be defined.
 Algorithms that take output iterators can be used with ostreams as the destination
@@ -2527,7 +2527,7 @@ If the iterator fails to read and store a value of \tcode{T}
 on the stream returns
 \tcode{true}),
 the iterator becomes equal to the
-\term{end-of-stream}
+\techterm{end-of-stream}
 iterator value.
 The constructor with no arguments
 \tcode{istream_iterator()}
@@ -2920,7 +2920,7 @@ is evaluated, the iterator advances to the next input character.
 If the end of stream is reached (\tcode{streambuf_type::sgetc()} returns
 \tcode{traits::eof()}),
 the iterator becomes equal to the
-\term{end-of-stream}
+\techterm{end-of-stream}
 iterator value.
 The default constructor
 \tcode{istreambuf_iterator()}
diff --git a/source/special.tex b/source/special.tex
index fd79438..1ab3a31 100644
--- a/source/special.tex
+++ b/source/special.tex
@@ -2726,8 +2726,8 @@ otherwise the copy/move constructor is
 A copy/move constructor
 that is defaulted and not defined as deleted
 is
-\term{implicitly defined}
-when it is odr-used\iref{basic.def.odr},
+\techterm{implicitly defined}
+when it is \link{odr-used}{\ref{basic.def.odr}},
 when it is needed for constant evaluation\iref{expr.const}, or
 when it is explicitly defaulted after its first declaration.
 \begin{note}
@@ -3043,8 +3043,8 @@ otherwise the copy/move assignment operator is
 A copy/move assignment operator for a class \tcode{X}
 that is defaulted and not defined as deleted
 is
-\term{implicitly defined}
-when it is odr-used\iref{basic.def.odr}
+\techterm{implicitly defined}
+when it is \link{odr-used}{\ref{basic.def.odr}}
 (e.g., when it is selected by overload resolution
 to assign to an object of its class type),
 when it is needed for constant evaluation\iref{expr.const}, or
diff --git a/source/utilities.tex b/source/utilities.tex
index 6d064c3..e24d488 100644
--- a/source/utilities.tex
+++ b/source/utilities.tex
@@ -15334,7 +15334,7 @@ arguments that help define the relationship being described. It shall
 be \tcode{DefaultConstructible}, \tcode{CopyConstructible},
 and publicly and unambiguously derived, directly or
 indirectly, from
-its \term{base characteristic}, which is a specialization
+its \techterm{base characteristic}, which is a specialization
 of the template
 \linkx{\tcode{integral_constant}}{\idxcode{integral_constant}}{\ref{meta.help}}, with
 the arguments to the template \tcode{integral_constant} determined by the
-- 
2.7.4


From a65a2173fe93753112f933c23e0a2dce301ea8d9 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Mon, 17 Apr 2017 13:10:27 +0200
Subject: [PATCH 15/18] Remove inappropriate paragraph breaks.

---
 source/basic.tex        | 46 ----------------------------------------
 source/classes.tex      |  6 ------
 source/declarations.tex | 26 -----------------------
 source/declarators.tex  | 56 -------------------------------------------------
 source/expressions.tex  | 21 -------------------
 source/iterators.tex    | 12 -----------
 source/lex.tex          | 17 ---------------
 source/locales.tex      | 17 ---------------
 source/overloading.tex  | 32 ----------------------------
 source/special.tex      | 20 ------------------
 source/statements.tex   | 10 ---------
 source/strings.tex      |  2 --
 source/support.tex      |  3 ---
 source/templates.tex    |  7 -------
 source/utilities.tex    |  2 --
 15 files changed, 277 deletions(-)

diff --git a/source/basic.tex b/source/basic.tex
index 35d764f..f36db26 100644
--- a/source/basic.tex
+++ b/source/basic.tex
@@ -449,7 +449,6 @@ Exactly one definition of a class is required in a translation unit if
 the class is used in a way that requires the class type to be complete.
 \begin{example} The following complete translation unit is well-formed,
 even though it never defines \tcode{X}:
-
 \begin{codeblock}
 struct X;                       // declare \tcode{X} as a struct type
 struct X* x1;                   // use \tcode{X} in pointer formation
@@ -556,7 +555,6 @@ implicitly defined in every translation unit where it is odr-used, and the
 implicit definition in every translation unit shall call the same
 constructor for a subobject of \tcode{D}.
 \begin{example}
-
 \begin{codeblock}
 // translation unit 1:
 struct X {
@@ -629,7 +627,6 @@ declarative region.
 \pnum
 \begin{example}
 In
-
 \begin{codeblock}
 int j = 24;
 int main() {
@@ -637,7 +634,6 @@ int main() {
   j = 42;
 }
 \end{codeblock}
-
 the identifier \tcode{j} is declared twice as a name (and used twice).
 The declarative region of the first \tcode{j} includes the entire
 example. The potential scope of the first \tcode{j} begins immediately
@@ -703,12 +699,10 @@ that are or enclose \placeholder{R} and do not enclose \placeholder{P}.
 The \defn{point of declaration} for a name is immediately after its
 complete \link{declarator}{\ref{dcl.decl}} and before its
 \grammarterm{initializer} (if any), except as noted below. \begin{example}
-
 \begin{codeblock}
 unsigned char x = 12;
 { unsigned char x = x; }
 \end{codeblock}
-
 Here the second \tcode{x} is initialized with its own (indeterminate)
 value. \end{example}
 
@@ -717,12 +711,10 @@ value. \end{example}
 \indextext{name hiding}%
 A name from an outer scope remains visible up
 to the point of declaration of the name that hides it. \begin{example}
-
 \begin{codeblock}
 const int  i = 2;
 { int  i[i]; }
 \end{codeblock}
-
 declares a block-scope array of two integers. \end{example} \end{note}
 
 \pnum
@@ -745,12 +737,10 @@ constructor is immediately after the \grammarterm{using-declarator}\iref{namespa
 \indextext{declaration!enumerator point of}%
 The point of declaration for an enumerator is immediately after its
 \grammarterm{enumerator-definition}. \begin{example}
-
 \begin{codeblock}
 const int x = 12;
 { enum { x = x }; }
 \end{codeblock}
-
 Here, the enumerator \tcode{x} is initialized with the value of the
 constant \tcode{x}, namely 12. \end{example}
 
@@ -759,7 +749,6 @@ After the point of declaration of a class member, the member name can be
 looked up in the scope of its class. \begin{note}
 \indextext{type!incomplete}%
 This is true even if the class is an incomplete class. For example,
-
 \begin{codeblock}
 struct X {
   enum E { z = 16 };
@@ -773,20 +762,16 @@ The point of declaration of a class first declared in an
 \grammarterm{elaborated-type-specifier} is as follows:
 \begin{itemize}
 \item for a declaration of the form
-
 \begin{ncbnf}
 class-key \opt{attribute-specifier-seq} identifier \terminal{;}
 \end{ncbnf}
-
 the \grammarterm{identifier} is declared to be a
 \grammarterm{class-name} in the scope that contains the declaration,
 otherwise
 \item for an \grammarterm{elaborated-type-specifier} of the form
-
 \begin{ncbnf}
 class-key identifier
 \end{ncbnf}
-
 if the
 \grammarterm{elaborated-type-specifier} is used in the
 \grammarterm{decl-specifier-seq} or \grammarterm{parameter-declaration-clause}
@@ -820,7 +805,6 @@ is immediately after the \grammarterm{for-range-initializer}.
 \pnum
 The point of declaration for a template parameter is immediately after its complete
 \grammarterm{template-parameter}. \begin{example}
-
 \begin{codeblock}
 typedef unsigned char T;
 template<class T
@@ -923,7 +907,6 @@ declaration}{\ref{basic.scope.pdecl}} onwards; and for each
 member's namespace, the member's potential scope includes that portion
 of the potential scope of the \grammarterm{using-directive} that follows
 the member's point of declaration. \begin{example}
-
 \begin{codeblock}
 namespace N {
   int i;
@@ -1068,7 +1051,6 @@ parameter names belong to this declarative region; any other kind of name introd
 the \grammarterm{declaration} of a \grammarterm{template-declaration} is instead
 introduced into the same declarative region where it would be introduced as a result of
 a non-template declaration of the same name. \begin{example}
-
 \begin{codeblock}
 namespace N {
   template<class T> struct A { };               // \#1
@@ -1078,7 +1060,6 @@ namespace N {
   };
 }
 \end{codeblock}
-
 The declarative regions of \tcode{T}, \tcode{U} and \tcode{V} are the
 \grammarterm{template-declaration}{s} on lines \#1, \#2, and \#3,
 respectively. But the names \tcode{A}, \tcode{f}, \tcode{g} and \tcode{C} all belong to
@@ -1094,20 +1075,16 @@ declaration}{\ref{basic.scope.pdecl}} and ends at the end of its declarative reg
 declaration of subsequent \grammarterm{template-parameter}{s} and their default
 arguments but cannot be used in preceding \grammarterm{template-parameter}{s} or their
 default arguments. For example,
-
 \begin{codeblock}
 template<class T, T* p, class U = T> class X { @\commentellip@ };
 template<class T> void f(T* p = new T);
 \end{codeblock}
-
 This also implies that a \grammarterm{template-parameter} can be used in the
 specification of base classes. For example,
-
 \begin{codeblock}
 template<class T> class X : public Array<T> { @\commentellip@ };
 template<class T> class Y : public T { @\commentellip@ };
 \end{codeblock}
-
 The use of a template parameter as a base class implies that a class used as a template
 argument must be defined and not just declared when the class template is instantiated.
 \end{note}
@@ -1117,12 +1094,10 @@ The declarative region of the name of a template parameter is nested within the
 immediately-enclosing declarative region. \begin{note} As a result, a
 \grammarterm{template-parameter} \link{hides}{\ref{basic.scope.hiding}} any entity with the same name in an enclosing
 scope. \begin{example}
-
 \begin{codeblock}
 typedef int N;
 template<N X, typename N, template<N Y> class T> struct A;
 \end{codeblock}
-
 Here, \tcode{X} is a non-type template parameter of type \tcode{int} and \tcode{Y} is a
 non-type template parameter of the same type as the second template parameter of
 \tcode{A}. \end{example}\end{note}
@@ -1259,7 +1234,6 @@ int z = h<N::A>(N::A());        // error: \tcode{h<} does not begin a \grammarte
 
 The rules in~\ref{basic.lookup.argdep} have no effect on
 the syntactic interpretation of an expression. For example,
-
 \begin{codeblock}
 typedef int f;
 namespace N {
@@ -1272,7 +1246,6 @@ namespace N {
   };
 }
 \end{codeblock}
-
 Because the expression is not a function call, the \link{argument-dependent
 name lookup}{\ref{basic.lookup.argdep}} does not apply and the friend
 function \tcode{f} is not found. \end{note}
@@ -1300,7 +1273,6 @@ its enclosing blocks\iref{stmt.block} or shall be declared before its
 use in namespace \tcode{N} or, if \tcode{N} is a nested namespace, shall
 be declared before its use in one of \tcode{N}'s enclosing namespaces.
 \begin{example}
-
 \begin{codeblock}
 namespace A {
   namespace N {
@@ -1771,14 +1743,11 @@ If a \grammarterm{pseudo-destructor-name}\iref{expr.pseudo} contains a
 up as types in the scope designated by the
 \grammarterm{nested-name-specifier}. Similarly, in a
 \grammarterm{qualified-id} of the form:
-
 \begin{ncbnf}
 \opt{nested-name-specifier} class-name \terminal{::} \terminal{\~} class-name
 \end{ncbnf}
-
 the second \grammarterm{class-name} is looked up in the same scope as the
 first. \begin{example}
-
 \begin{codeblock}
 struct C {
   typedef int I;
@@ -2011,7 +1980,6 @@ void g()
 \begin{example}
 Because each referenced namespace is searched at most once, the
 following is well-defined:
-
 \begin{codeblock}
 namespace B {
   int b;
@@ -2045,7 +2013,6 @@ functions, the non-type name hides the class or enumeration name if and
 only if the declarations are from the same namespace; otherwise (the
 declarations are from different namespaces), the program is ill-formed.
 \begin{example}
-
 \begin{codeblock}
 namespace A {
   struct x { };
@@ -2070,17 +2037,14 @@ namespace C {
 In a declaration for a namespace member in which the
 \grammarterm{declarator-id} is a \grammarterm{qualified-id}, given that the
 \grammarterm{qualified-id} for the namespace member has the form
-
 \begin{ncbnf}
 nested-name-specifier unqualified-id
 \end{ncbnf}
-
 the
 \grammarterm{unqualified-id} shall name a member of the namespace
 designated by the \grammarterm{nested-name-specifier}
 or of an element of the \deflink{inline namespace set}{\ref{namespace.def}} of that namespace.
 \begin{example}
-
 \begin{codeblock}
 namespace A {
   namespace B {
@@ -2090,12 +2054,10 @@ namespace A {
 }
 void A::f1(int){ }  // ill-formed, \tcode{f1} is not a member of \tcode{A}
 \end{codeblock}
-
 \end{example} However, in such namespace member declarations, the
 \grammarterm{nested-name-specifier} may rely on \grammarterm{using-directive}{s}
 to implicitly provide the initial part of the
 \grammarterm{nested-name-specifier}. \begin{example}
-
 \begin{codeblock}
 namespace A {
   namespace B {
@@ -2132,11 +2094,9 @@ If the \grammarterm{elaborated-type-specifier} has no
 \grammarterm{nested-name-specifier}, and unless the
 \grammarterm{elaborated-type-specifier} appears in a declaration with the
 following form:
-
 \begin{ncbnf}
 class-key \opt{attribute-specifier-seq} identifier \terminal{;}
 \end{ncbnf}
-
 the \grammarterm{identifier} is looked up according
 to~\ref{basic.lookup.unqual} but ignoring any non-type names that have
 been declared. If the \grammarterm{elaborated-type-specifier} is introduced
@@ -2147,11 +2107,9 @@ by the \grammarterm{class-key} and this lookup does not find a previously
 declared \grammarterm{type-name}, or if the
 \grammarterm{elaborated-type-specifier} appears in a declaration with the
 form:
-
 \begin{ncbnf}
 class-key \opt{attribute-specifier-seq} identifier \terminal{;}
 \end{ncbnf}
-
 the \grammarterm{elaborated-type-specifier} is a declaration that
 introduces the \grammarterm{class-name} as described
 in~\ref{basic.scope.pdecl}.
@@ -2163,7 +2121,6 @@ described in~\ref{basic.lookup.qual}, but ignoring any non-type names
 that have been declared. If the name lookup does not find a previously
 declared \grammarterm{type-name}, the \grammarterm{elaborated-type-specifier}
 is ill-formed. \begin{example}
-
 \begin{codeblock}
 struct Node {
   struct Node* Next;            // OK: Refers to \tcode{Node} at global scope
@@ -2224,7 +2181,6 @@ If the \grammarterm{unqualified-id} is \tcode{\~}\grammarterm{type-name}, the
 expression is of a class type \tcode{C}, the \grammarterm{type-name} is
 also looked up in the scope of class \tcode{C}. At least one of the
 lookups shall find a name that refers to \cv{}~\tcode{T}. \begin{example}
-
 \begin{codeblock}
 struct A { };
 
@@ -2412,7 +2368,6 @@ void g() {
   }
 }
 \end{codeblock}
-
 Without the declaration at line \#2,
 the declaration at line \#3 would link with the declaration at line \#1.
 Because the declaration with internal linkage is hidden, however,
@@ -2424,7 +2379,6 @@ When a block scope declaration of an entity with linkage is not found to
 refer to some other declaration, then that entity is a member of the
 innermost enclosing namespace. However such a declaration does not
 introduce the member name in its namespace scope. \begin{example}
-
 \begin{codeblock}
 namespace X {
   void p() {
diff --git a/source/classes.tex b/source/classes.tex
index 572c008..cf873f1 100644
--- a/source/classes.tex
+++ b/source/classes.tex
@@ -674,7 +674,6 @@ There are no special member function types or data member types.
 \pnum
 \begin{example}
 A simple example of a class definition is
-
 \begin{codeblock}
 struct tnode {
   char tword[20];
@@ -683,15 +682,12 @@ struct tnode {
   tnode* right;
 };
 \end{codeblock}
-
 which contains an array of twenty characters, an integer, and two
 pointers to objects of the same type. Once this definition has been
 given, the declaration
-
 \begin{codeblock}
 tnode s, *sp;
 \end{codeblock}
-
 declares \tcode{s} to be a \tcode{tnode} and \tcode{sp} to be a pointer
 to a \tcode{tnode}. With these declarations, \tcode{sp->count} refers to
 the \tcode{count} member of the object to which \tcode{sp} points;
@@ -1669,11 +1665,9 @@ new (&u.n) N;
 
 \pnum
 A union of the form
-
 \begin{ncsimplebnf}
 \terminal{union} \terminal{\{} member-specification \terminal{\}} \terminal{;}
 \end{ncsimplebnf}
-
 is called an \defn{anonymous union}; it defines an unnamed type and
 an unnamed object of that type called an \defn{anonymous union object}.
 Each \grammarterm{member-declaration} in the \grammarterm{member-specification}
diff --git a/source/declarations.tex b/source/declarations.tex
index 7f9e8a5..397ab78 100644
--- a/source/declarations.tex
+++ b/source/declarations.tex
@@ -91,11 +91,9 @@ the form
 A
 \grammarterm{simple-declaration} or
 \grammarterm{nodeclspec-function-declaration} of the form
-
 \begin{ncsimplebnf}
 \opt{attribute-specifier-seq} \opt{decl-specifier-seq} \opt{init-declarator-list} \terminal{;}
 \end{ncsimplebnf}
-
 is divided into three parts.
 Attributes are described in~\ref{dcl.attr}.
 \grammarterm{decl-specifier}{s}, the principal components of
@@ -323,7 +321,6 @@ void k(unsigned int Pc);        // \tcode{void k(unsigned int)}
 
 \pnum
 The storage class specifiers are
-
 \begin{bnf}
 \nontermdef{storage-class-specifier}\br
     \indexedspan{\terminal{static}}{\indextext{\idxcode{static}}}\br
@@ -544,18 +541,14 @@ A \grammarterm{typedef-name} is thus a synonym for another type. A
 declaration\iref{class.name} or enum declaration does.
 \begin{example}
 After
-
 \begin{codeblock}
 typedef int MILES, *KLICKSP;
 \end{codeblock}
-
 the constructions
-
 \begin{codeblock}
 MILES distance;
 extern KLICKSP metricp;
 \end{codeblock}
-
 are all correct declarations; the type of \tcode{distance} is
 \tcode{int} and that of \tcode{metricp} is ``pointer to \tcode{int}''.
 \end{example}
@@ -570,14 +563,12 @@ Such a \grammarterm{typedef-name} has the same
 semantics as if it were introduced by the \tcode{typedef} specifier. In
 particular, it does not define a new type.
 \begin{example}
-
 \begin{codeblock}
 using handler_t = void (*)(int);
 extern handler_t ignore;
 extern void (*ignore)(int);         // redeclare \tcode{ignore}
 using cell = pair<void*, cell*>;    // ill-formed
 \end{codeblock}
-
 \end{example}
 The \grammarterm{defining-type-specifier-seq}
 of the \grammarterm{defining-type-id} shall not define
@@ -590,7 +581,6 @@ In a given non-class scope, a \tcode{typedef} specifier can be used to
 redefine the name of any type declared in that scope to refer to the
 type to which it already refers.
 \begin{example}
-
 \begin{codeblock}
 typedef struct s { @\commentellip@ } s;
 typedef int I;
@@ -605,7 +595,6 @@ redefine any \grammarterm{class-name} declared in that scope that is not
 also a \grammarterm{typedef-name} to refer to the type to which it already
 refers.
 \begin{example}
-
 \begin{codeblock}
 struct S {
   typedef struct A { } A;       // OK
@@ -667,7 +656,6 @@ or a \link{destructor}{\ref{class.dtor}} declaration,
 the program is ill-formed.
 \end{note}
 \begin{example}
-
 \begin{codeblock}
 struct S {
   S();
@@ -764,7 +752,6 @@ a constructor declaration declares that constructor to be a
 \indextext{constexpr function}
 The definition of a constexpr function shall satisfy the following
 requirements:
-
 \begin{itemize}
 \item
 it shall not be \link{virtual}{\ref{class.virtual}};
@@ -780,7 +767,6 @@ its \grammarterm{function-body} shall be
 \tcode{= delete}, \tcode{= default}, or
 a \grammarterm{compound-statement}
 that does not contain
-
 \begin{itemize}
 \item an \grammarterm{asm-definition},
 \item a \tcode{goto} statement,
@@ -791,7 +777,6 @@ of non-literal type or
 of static or thread storage duration or
 for which no initialization is performed.
 \end{itemize}
-
 \end{itemize}
 
 \begin{example}
@@ -1071,7 +1056,6 @@ and at most one
 is allowed in a
 \grammarterm{type-specifier-seq}.
 The only exceptions to this rule are the following:
-
 \begin{itemize}
 \item \tcode{const} can be combined with any type specifier except itself.
 
@@ -1224,7 +1208,6 @@ they are in C.
 
 \pnum
 The simple type specifiers are
-
 \begin{bnf}
 \nontermdef{simple-type-specifier}\br
     \opt{nested-name-specifier} type-name\br
@@ -1505,11 +1488,9 @@ the
 \begin{note}
 This implies that, within a class template with a template
 \grammarterm{type-parameter} \tcode{T}, the declaration
-
 \begin{codeblock}
 friend class T;
 \end{codeblock}
-
 is ill-formed. However, the similar declaration \tcode{friend T;} is allowed\iref{class.friend}.
 \end{note}
 
@@ -1530,7 +1511,6 @@ and either the \tcode{class} or \tcode{struct}
 \grammarterm{class-key} shall be used to refer to a \link{class}{\ref{class}}
 declared using the \tcode{class} or \tcode{struct}
 \grammarterm{class-key}. \begin{example}
-
 \begin{codeblock}
 enum class E { a, b };
 enum E x = E::a;                // OK
@@ -1579,11 +1559,9 @@ each of which shall
 be followed by a non-empty
 \grammarterm{initializer}.
 In an \grammarterm{initializer} of the form
-
 \begin{codeblock}
 ( @\textrm{\grammarterm{expression-list}}@ )
 \end{codeblock}
-
 the \grammarterm{expression-list} shall be a single
 \grammarterm{assignment-expression}.
 \begin{example}
@@ -2422,13 +2400,11 @@ namespace A {
 \pnum
 An \grammarterm{unnamed-namespace-definition} behaves as if it were
 replaced by
-
 \begin{ncsimplebnf}
 \opt{\terminal{inline}} \terminal{namespace} \terminal{\uniquens} \terminal{\{ /* empty body */ \}}\br
 \terminal{using namespace} \terminal{\uniquens} \terminal{;}\br
 \terminal{namespace} \terminal{\uniquens} \terminal{\{} namespace-body \terminal{\}}
 \end{ncsimplebnf}
-
 where
 \tcode{inline} appears if and only if it appears in the
 \grammarterm{unnamed-namespace-definition}
@@ -3772,7 +3748,6 @@ An \grammarterm{alignment-specifier} with an ellipsis is a \deflink{pack expansi
 \pnum
 When the \grammarterm{alignment-specifier} is of the form
 \tcode{alignas(} \grammarterm{constant-expression} \tcode{)}:
-
 \begin{itemize}
 \item the \grammarterm{constant-expression} shall be an integral constant expression
 
@@ -3941,7 +3916,6 @@ whose use is still allowed, but is discouraged for some reason. \begin{note} In
 \tcode{deprecated} is appropriate for names and entities that are deemed obsolescent or
 unsafe. \end{note} It shall appear at most once in each \grammarterm{attribute-list}. An
 \grammarterm{attribute-argument-clause} may be present and, if present, it shall have the form:
-
 \begin{codeblock}
 ( @\grammarterm{string-literal}@ )
 \end{codeblock}
diff --git a/source/declarators.tex b/source/declarators.tex
index 71cc82c..3c5f1dc 100644
--- a/source/declarators.tex
+++ b/source/declarators.tex
@@ -450,11 +450,9 @@ both the \grammarterm{decl-specifier-seq} and its \grammarterm{declarator}.
 
 \pnum
 Thus, a declaration of a particular identifier has the form
-
 \begin{codeblock}
 T D
 \end{codeblock}
-
 where
 \tcode{T}
 is of the form \opt{\grammarterm{attribute-specifier-seq}}
@@ -472,11 +470,9 @@ First, the
 \grammarterm{decl-specifier-seq}
 determines a type.
 In a declaration
-
 \begin{codeblock}
 T D
 \end{codeblock}
-
 the
 \grammarterm{decl-specifier-seq}
 \tcode{T}
@@ -484,11 +480,9 @@ determines the type
 \tcode{T}.
 \begin{example}
 In the declaration
-
 \begin{codeblock}
 int unsigned i;
 \end{codeblock}
-
 the type specifiers
 \tcode{int}
 \tcode{unsigned}
@@ -513,11 +507,9 @@ In a declaration
 where
 \tcode{D}
 has the form
-
 \begin{ncsimplebnf}
 \terminal{(} \terminal{D1} \terminal{)}
 \end{ncsimplebnf}
-
 the type of the contained
 \grammarterm{declarator-id}
 is the same as that of the contained
@@ -540,11 +532,9 @@ In a declaration
 where
 \tcode{D}
 has the form
-
 \begin{ncsimplebnf}
 \terminal{*} \opt{attribute-specifier-seq} \opt{cv-qualifier-seq} \terminal{D1}
 \end{ncsimplebnf}
-
 and the type of the identifier in the declaration
 \tcode{T}
 \tcode{D1}
@@ -568,7 +558,6 @@ The declarations
 const int ci = 10, *pc = &ci, *const cpc = pc, **ppc;
 int i, *p, *const cp = &i;
 \end{codeblock}
-
 declare
 \tcode{ci},
 a constant integer;
@@ -596,7 +585,6 @@ can be changed, and so can the object pointed to by
 \tcode{cp}.
 Examples of
 some correct operations are
-
 \begin{codeblock}
 i = ci;
 *cp = ci;
@@ -607,7 +595,6 @@ ppc = &pc;
 \end{codeblock}
 
 Examples of ill-formed operations are
-
 \begin{codeblock}
 ci = 1;             // error
 ci++;               // error
@@ -621,7 +608,6 @@ ppc = &p;           // error
 Each is unacceptable because it would either change the value of an object declared
 \tcode{const}
 or allow it to be changed through a cv-unqualified pointer later, for example:
-
 \begin{codeblock}
 *ppc = &ci;         // OK, but would make \tcode{p} point to \tcode{ci} because of previous error
 *p = 5;             // clobber \tcode{ci}
@@ -651,12 +637,10 @@ In a declaration
 where
 \tcode{D}
 has either of the forms
-
 \begin{ncsimplebnf}
 \terminal{\&} \opt{attribute-specifier-seq} \terminal{D1}\br
 \terminal{\&\&} \opt{attribute-specifier-seq} \terminal{D1}
 \end{ncsimplebnf}
-
 and the type of the identifier in the declaration
 \tcode{T}
 \tcode{D1}
@@ -712,7 +696,6 @@ void f(double& a) { a += 3.14; }
 double d = 0;
 f(d);
 \end{codeblock}
-
 declares
 \tcode{a}
 to be a reference parameter of
@@ -731,7 +714,6 @@ int& g(int i) { return v[i]; }
 // ...
 g(3) = 7;
 \end{codeblock}
-
 declares the function
 \tcode{g()}
 to return a reference to an integer so
@@ -741,7 +723,6 @@ will assign
 to the fourth element of the array
 \tcode{v}.
 For another example,
-
 \begin{codeblock}
 struct link {
   link* next;
@@ -760,7 +741,6 @@ void k() {
    h(q);
 }
 \end{codeblock}
-
 declares
 \tcode{p}
 to be a reference to a pointer to
@@ -843,11 +823,9 @@ In a declaration
 where
 \tcode{D}
 has the form
-
 \begin{ncsimplebnf}
 nested-name-specifier \terminal{*} \opt{attribute-specifier-seq} \opt{cv-qualifier-seq} \terminal{D1}
 \end{ncsimplebnf}
-
 and the
 \grammarterm{nested-name-specifier}
 denotes a class,
@@ -878,7 +856,6 @@ void (X::* pmf)(int) = &X::f;
 double X::* pmd;
 char Y::* pmc;
 \end{codeblock}
-
 declares
 \tcode{pmi},
 \tcode{pmf},
@@ -950,11 +927,9 @@ In a declaration
 where
 \tcode{D}
 has the form
-
 \begin{ncsimplebnf}
 \terminal{D1 [} \opt{constant-expression} \terminal{]} \opt{attribute-specifier-seq}
 \end{ncsimplebnf}
-
 and the type of the identifier in the declaration
 \tcode{T}
 \tcode{D1}
@@ -1095,7 +1070,6 @@ pointers to
 \tcode{float}
 numbers.
 \end{example}
-
 \pnum
 \begin{example}
 \begin{codeblock}
@@ -1233,12 +1207,10 @@ In a declaration
 where
 \tcode{D}
 has the form
-
 \begin{ncsimplebnf}
 \terminal{D1 (} parameter-declaration-clause \terminal{)} \opt{cv-qualifier-seq}\br
 \bnfindent\opt{ref-qualifier} \opt{noexcept-specifier} \opt{attribute-specifier-seq} trailing-return-type
 \end{ncsimplebnf}
-
 and the type of the contained
 \grammarterm{declarator-id}
 in the declaration
@@ -1513,7 +1485,6 @@ its function declarator because that is the extent of its potential scope\iref{b
 \pnum
 \begin{example}
 The declaration
-
 \begin{codeblock}
 int i,
     *pi,
@@ -1522,7 +1493,6 @@ int i,
     (*pif)(const char*, const char*),
     (*fpif(int))(int);
 \end{codeblock}
-
 declares an integer
 \tcode{i},
 a pointer
@@ -1566,26 +1536,20 @@ For example,
 the function
 \tcode{fpif}
 above could have been declared
-
 \begin{codeblock}
 typedef int  IFUNC(int);
 IFUNC*  fpif(int);
 \end{codeblock}
-
 or
-
 \begin{codeblock}
 auto fpif(int)->int(*)(int);
 \end{codeblock}
 
 A \grammarterm{trailing-return-type} is most useful for a type that would be more complicated to specify before the \grammarterm{declarator-id}:
-
 \begin{codeblock}
 template <class T, class U> auto add(T t, U u) -> decltype(t + u);
 \end{codeblock}
-
 rather than
-
 \begin{codeblock}
 template <class T, class U> decltype((*(T*)0) + (*(U*)0)) add(T t, U u);
 \end{codeblock}
@@ -1649,11 +1613,9 @@ Default arguments will be used in calls where trailing arguments are missing.
 \indextext{argument!example of default}%
 \begin{example}
 The declaration
-
 \begin{codeblock}
 void point(int = 3, int = 4);
 \end{codeblock}
-
 declares a function that can be called with zero, one, or two arguments of type
 \tcode{int}.
 It can be called in any of these ways:
@@ -1984,7 +1946,6 @@ A function shall be defined only in namespace or class scope.
 \pnum
 \begin{example}
 A simple example of a complete function definition is
-
 \begin{codeblock}
 int max(int a, int b, int c) {
   int m = (a > b) ? a : b;
@@ -2027,7 +1988,6 @@ in the body of a member function; see~\ref{dcl.ref}.
 \begin{note}
 Unused parameters need not be named.
 For example,
-
 \begin{codeblock}
 void print(int a, int) {
   std::printf("a = %d\n",a);
@@ -2072,7 +2032,6 @@ is of the form
 \tcode{= default ;}
 is called an \defnx{explicitly-defaulted}{definition!function!explicitly-defaulted} definition.
 A function that is explicitly defaulted shall
-
 \begin{itemize}
 \item be a special member function or a comparison operator
 (\ref{expr.spaceship}, \ref{expr.rel}, \ref{expr.eq}), and
@@ -2273,11 +2232,9 @@ from the corresponding element of the \grammarterm{assignment-expression} as spe
 by the form of the \grammarterm{initializer}.
 Otherwise, \tcode{e}
 is defined as-if by
-
 \begin{ncbnf}
 \opt{attribute-specifier-seq} decl-specifier-seq \opt{ref-qualifier} \terminal{e} initializer \terminal{;}
 \end{ncbnf}
-
 where
 the declaration is never interpreted as a function declaration and
 the parts of the declaration other than the \grammarterm{declarator-id} are taken
@@ -2640,11 +2597,9 @@ Since
 \tcode{()}
 is not permitted by the syntax for
 \grammarterm{initializer},
-
 \begin{codeblock}
 X a();
 \end{codeblock}
-
 is not the declaration of an object of class
 \tcode{X},
 but the declaration of a function taking no argument and returning an
@@ -3226,7 +3181,6 @@ exceeds the number of elements of the aggregate.
 \begin{codeblock}
 char cv[4] = { 'a', 's', 'd', 'f', 0 };     // error
 \end{codeblock}
-
 is ill-formed.
 \end{example}
 
@@ -3280,11 +3234,9 @@ the
 initialize the elements with the last (rightmost) index of the array
 varying the fastest\iref{dcl.array}.
 \begin{example}
-
 \begin{codeblock}
 int x[2][2] = { 3, 1, 4, 2 };
 \end{codeblock}
-
 initializes
 \tcode{x[0][0]}
 to
@@ -3300,13 +3252,11 @@ and
 to
 \tcode{2}.
 On the other hand,
-
 \begin{codeblock}
 float y[4][3] = {
   { 1 }, { 2 }, { 3 }, { 4 }
 };
 \end{codeblock}
-
 initializes the first column of
 \tcode{y}
 (regarded as a two-dimensional array)
@@ -3680,20 +3630,16 @@ double& rd3 = i;                // error: type mismatch and reference not \tcode
 \end{example}
 
 \item Otherwise, if the initializer expression
-
 \begin{itemize}
 \item is an rvalue (but not a bit-field) or function lvalue and
 ``\cvqual{cv1} \tcode{T1}'' is
 reference-compatible with ``\cvqual{cv2} \tcode{T2}'', or
-
 \item has a class type (i.e., \tcode{T2} is a class type), where \tcode{T1}
 is not reference-related to \tcode{T2}, and can be converted to
 an rvalue or function lvalue of type ``\cvqual{cv3} \tcode{T3}'',
 where ``\cvqual{cv1} \tcode{T1}'' is
 reference-compatible with ``\cvqual{cv3} \tcode{T3}'' (see~\ref{over.match.ref}),
-
 \end{itemize}
-
 then
 the value of the initializer expression in the first case and
 the result of the conversion in the second case
@@ -4102,12 +4048,10 @@ X x{ 1,2,3 };
 \end{codeblock}
 
 The initialization will be implemented in a way roughly equivalent to this:
-
 \begin{codeblock}
 const double __a[3] = {double{1}, double{2}, double{3}};
 X x(std::initializer_list<double>(__a, __a+3));
 \end{codeblock}
-
 assuming that the implementation can construct an \tcode{initializer_list} object with a pair of pointers. \end{example}
 
 \pnum
diff --git a/source/expressions.tex b/source/expressions.tex
index f72163b..8bfa2ef 100644
--- a/source/expressions.tex
+++ b/source/expressions.tex
@@ -2463,11 +2463,9 @@ versions of the object type and of the type designated by the
 \grammarterm{pseudo-destructor-name} shall be the same type. Furthermore,
 the two \grammarterm{type-name}{s} in a \grammarterm{pseudo-destructor-name} of
 the form
-
 \begin{ncbnf}
 \opt{nested-name-specifier} type-name \terminal{::\,\~} type-name
 \end{ncbnf}
-
 shall designate the same scalar type (ignoring cv-qualification).
 
 \rSec3[expr.ref]{Class member access}
@@ -3335,13 +3333,10 @@ if \tcode{T1} and \tcode{T2} are different,
 there is a \deflink{cv-decomposition}{\ref{conv.qual}} of \tcode{T1}
 yielding \placeholder{n} such that
 \tcode{T2} has a cv-decomposition of the form
-
 \begin{indented}
 $\cv{}_0^2$ $P_0^2$ $\cv{}_1^2$ $P_1^2$ $\cdots$ $\cv{}_{n-1}^2$ $P_{n-1}^2$ $\cv{}_n^2$ $\mathtt{U}_2$,
 \end{indented}
-
 and there is no qualification conversion that converts \tcode{T1} to
-
 \begin{indented}
 $\cv{}_0^2$ $P_0^1$ $\cv{}_1^2$ $P_1^1$ $\cdots$ $\cv{}_{n-1}^2$ $P_{n-1}^1$ $\cv{}_n^2$ $\mathtt{U}_1$.
 \end{indented}
@@ -3782,7 +3777,6 @@ This prevents ambiguities between the declarator operators \tcode{\&}, \tcode{\&
 \tcode{*}, and \tcode{[]} and their expression counterparts.
 \end{note}
 \begin{example}
-
 \begin{codeblock}
 new int * i;                    // syntax error: parsed as \tcode{(new int*) i}, not as \tcode{(new int)*i}
 \end{codeblock}
@@ -3796,13 +3790,10 @@ operator.
 Parentheses in a \grammarterm{new-type-id} of a \grammarterm{new-expression}
 can have surprising effects.
 \begin{example}
-
 \begin{codeblock}
 new int(*[10])();               // error
 \end{codeblock}
-
 is ill-formed because the binding is
-
 \begin{codeblock}
 (new int) (*[10])();            // error
 \end{codeblock}
@@ -3810,11 +3801,9 @@ is ill-formed because the binding is
 Instead, the explicitly parenthesized version of the \tcode{new}
 operator can be used to create objects of \link{compound
 types}{\ref{basic.compound}}:
-
 \begin{codeblock}
 new (int (*[10])());
 \end{codeblock}
-
 allocates an array of \tcode{10} pointers to functions (taking no
 argument and returning \tcode{int}).
 \end{example}
@@ -4510,7 +4499,6 @@ the user\iref{class.conv} is ill-formed.
 
 \pnum
 The conversions performed by
-
 \begin{itemize}
 \indextext{cast!const}%
 \indextext{cast!static}%
@@ -4521,7 +4509,6 @@ The conversions performed by
 \item a \link{\tcode{reinterpret_cast}}{\ref{expr.reinterpret.cast}}, or
 \item a \tcode{reinterpret_cast} followed by a \tcode{const_cast},
 \end{itemize}
-
 can be performed using the cast notation of explicit type conversion.
 The same semantic restrictions and behaviors apply, with the exception
 that in performing a \tcode{static_cast} in the following situations the
@@ -5436,7 +5423,6 @@ subject to the constraint that the reference must bind directly.
 
 \item If \tcode{E2} is a prvalue or if neither of the conversion sequences above can be
 formed and at least one of the operands has (possibly cv-qualified) class type:
-
 \begin{itemize}
 \item if \tcode{T1} and \tcode{T2} are the same class type
 (ignoring cv-qualification), or one is a base class of the other, and
@@ -5803,7 +5789,6 @@ zero}{\ref{expr.mul}}, or certain \link{shift operations}{\ref{expr.shift}}
 \item
 an \link{lvalue-to-rvalue conversion}{\ref{conv.lval}} unless
 it is applied to
-
 \begin{itemize}
   \item
   a non-volatile glvalue of integral or enumeration type that refers
@@ -6019,7 +6004,6 @@ of type \tcode{T} is an
 expression, implicitly converted to type \tcode{T}, where
 the converted expression is a constant expression and the
 implicit conversion sequence contains only
-
 \begin{itemize}
 \item user-defined conversions,
 \item \link{lvalue-to-rvalue conversions}{\ref{conv.lval}},
@@ -6033,7 +6017,6 @@ implicit conversion sequence contains only
 \item \deflinkx{null member pointer conversions}{null member pointer conversion}{\ref{conv.mem}} from \tcode{std::nullptr_t}, and
 \item \link{function pointer conversions}{\ref{conv.fctptr}},
 \end{itemize}
-
 and where the reference binding (if any) binds directly.
 \begin{note}
 Such expressions may be used in \link{\tcode{new}
@@ -6056,20 +6039,17 @@ a glvalue core constant expression that refers to
 an entity that is a permitted result of a constant expression (as defined below), or
 a prvalue core constant expression whose value
 satisfies the following constraints:
-
 \begin{itemize}
   \item
   if the value is an object of class type,
   each non-static data member of reference type refers to
   an entity that is a permitted result of a constant expression,
-
   \item
   if the value is of pointer type, it contains
   the address of an object with static storage duration,
   the address past the end of such an object\iref{expr.add},
   the address of a function,
   or a null pointer value, and
-
   \item
   if the value is an object of class or array type,
   each subobject satisfies these constraints for the value.
@@ -6089,7 +6069,6 @@ evaluation of the same expression (or the same operations on the same values) du
 execution.\footnote{Nonetheless, implementations should provide consistent results,
 irrespective of whether the evaluation was performed during translation and/or during program
 execution.} \begin{example}
-
 \begin{codeblock}
 bool f() {
     char array[1 + int(1 + 0.2 - 0.1 - 0.1)];  // Must be evaluated during translation
diff --git a/source/iterators.tex b/source/iterators.tex
index 1ff50d2..4aa6293 100644
--- a/source/iterators.tex
+++ b/source/iterators.tex
@@ -891,7 +891,6 @@ Accordingly, it is required that if
 \tcode{Iterator}
 is the type of an iterator,
 the types
-
 \indexlibrarymember{difference_type}{iterator_traits}%
 \indexlibrarymember{value_type}{iterator_traits}%
 \indexlibrarymember{iterator_category}{iterator_traits}%
@@ -900,28 +899,23 @@ iterator_traits<Iterator>::difference_type
 iterator_traits<Iterator>::value_type
 iterator_traits<Iterator>::iterator_category
 \end{codeblock}
-
 be defined as the iterator's difference type, value type and iterator category, respectively.
 In addition, the types
-
 \indexlibrarymember{reference}{iterator_traits}%
 \indexlibrarymember{pointer}{iterator_traits}%
 \begin{codeblock}
 iterator_traits<Iterator>::reference
 iterator_traits<Iterator>::pointer
 \end{codeblock}
-
 shall be defined as the iterator's reference and pointer types, that is, for an
 iterator object \tcode{a}, the same type as the type of \tcode{*a} and \tcode{a->},
 respectively. In the case of an output iterator, the types
-
 \begin{codeblock}
 iterator_traits<Iterator>::difference_type
 iterator_traits<Iterator>::value_type
 iterator_traits<Iterator>::reference
 iterator_traits<Iterator>::pointer
 \end{codeblock}
-
 may be defined as \tcode{void}.
 
 \pnum
@@ -942,7 +936,6 @@ shall have no members by any of the above names.
 
 \pnum
 It is specialized for pointers as
-
 \begin{codeblock}
 namespace std {
   template<class T> struct iterator_traits<T*> {
@@ -960,7 +953,6 @@ namespace std {
 To implement a generic
 \tcode{reverse}
 function, a \Cpp{} program can do the following:
-
 \begin{codeblock}
 template<class BidirectionalIterator>
 void reverse(BidirectionalIterator first, BidirectionalIterator last) {
@@ -1650,11 +1642,9 @@ adaptors, called
 \techterm{insert iterators},
 are provided in the library.
 With regular iterator classes,
-
 \begin{codeblock}
 while (first != last) *result++ = *first++;
 \end{codeblock}
-
 causes a range \range{first}{last}
 to be copied into a range starting with result.
 The same code with
@@ -2767,7 +2757,6 @@ is written to the stream after every
 is written.
 It is not possible to get a value out of the output iterator.
 Its only use is as an output iterator in situations like
-
 \begin{codeblock}
 while (first != last)
   *result++ = *first++;
@@ -2776,7 +2765,6 @@ while (first != last)
 \pnum
 \tcode{ostream_iterator}
 is defined as:
-
 \begin{codeblock}
 namespace std {
   template<class T, class charT = char, class traits = char_traits<charT>>
diff --git a/source/lex.tex b/source/lex.tex
index 1e725fb..10d2d46 100644
--- a/source/lex.tex
+++ b/source/lex.tex
@@ -1780,28 +1780,21 @@ If \placeholder{L} is a \grammarterm{user-defined-integer-literal}, let \placeho
 without its \grammarterm{ud-suffix}. If \placeholder{S} contains a literal operator with
 parameter type \tcode{unsigned long long}, the literal \placeholder{L} is treated as a call of
 the form
-
 \begin{codeblock}
 operator "" @\placeholder{X}@(@\placeholder{n}@ULL)
 \end{codeblock}
-
 Otherwise, \placeholder{S} shall contain a \deflink{raw literal operator}{\ref{over.literal}} or a
 \deflink{literal operator template}{\ref{over.literal}} but not both.
 If \placeholder{S} contains a raw literal operator,
 the literal \placeholder{L} is treated as a call of the form
-
 \begin{codeblock}
 operator "" @\placeholder{X}@(@"\placeholder{n}{"}@)
 \end{codeblock}
-
 Otherwise (\placeholder{S} contains a literal operator template), \placeholder{L} is treated as a call
 of the form
-
-
 \begin{codeblock}
 operator "" @\placeholder{X}@<'@$c_1$@', '@$c_2$@', ... '@$c_k$@'>()
 \end{codeblock}
-
 where \placeholder{n} is the source character sequence $c_1c_2...c_k$. \begin{note} The sequence
 $c_1c_2...c_k$ can only contain characters from the basic source character set.
 \end{note}
@@ -1811,27 +1804,21 @@ If \placeholder{L} is a \grammarterm{user-defined-floating-literal}, let \placeh
 literal without its \grammarterm{ud-suffix}. If \placeholder{S} contains a literal operator
 with parameter type \tcode{long double}, the literal \placeholder{L} is treated as a call of
 the form
-
 \begin{codeblock}
 operator "" @\placeholder{X}@(@\placeholder{f}@L)
 \end{codeblock}
-
 Otherwise, \placeholder{S} shall contain a \deflink{raw literal operator}{\ref{over.literal}} or a
 \deflink{literal operator template}{\ref{over.literal}} but not both.
 If \placeholder{S} contains a raw literal operator,
 the \grammarterm{literal} \placeholder{L} is treated as a call of the form
-
 \begin{codeblock}
 operator "" @\placeholder{X}@(@"\placeholder{f}{"}@)
 \end{codeblock}
-
 Otherwise (\placeholder{S} contains a literal operator template), \placeholder{L} is treated as a call
 of the form
-
 \begin{codeblock}
 operator "" @\placeholder{X}@<'@$c_1$@', '@$c_2$@', ... '@$c_k$@'>()
 \end{codeblock}
-
 where \placeholder{f} is the source character sequence $c_1c_2...c_k$. \begin{note} The sequence
 $c_1c_2...c_k$ can only contain characters from the basic source character set.
 \end{note}
@@ -1843,7 +1830,6 @@ the number of
 code units in \placeholder{str} (i.e., its length excluding the terminating
 null character).
  The literal \placeholder{L} is treated as a call of the form
-
 \begin{codeblock}
 operator "" @\placeholder{X}@(@\placeholder{str}{}@, @\placeholder{len}{}@)
 \end{codeblock}
@@ -1855,14 +1841,12 @@ literal without its \grammarterm{ud-suffix}.
 the type of \placeholder{ch} and the
 literal \placeholder{L} is treated as a call
 of the form
-
 \begin{codeblock}
 operator "" @\placeholder{X}@(@\placeholder{ch}{}@)
 \end{codeblock}
 
 \pnum
 \begin{example}
-
 \begin{codeblock}
 long double operator "" _w(long double);
 std::string operator "" _w(const char16_t*, std::size_t);
@@ -1874,7 +1858,6 @@ int main() {
   "two"_w;    // error: no applicable literal operator
 }
 \end{codeblock}
-
 \end{example}
 
 \pnum
diff --git a/source/locales.tex b/source/locales.tex
index c63ea0f..c2dd3c2 100644
--- a/source/locales.tex
+++ b/source/locales.tex
@@ -2569,7 +2569,6 @@ then stage 2 terminates.
 Otherwise a
 \tcode{charT}
 is taken from \tcode{in} and local variables are initialized as if by
-
 \begin{codeblock}
 char_type ct = *in;
 char c = src[find(atoms, atoms + sizeof(src) - 1, ct) - atoms];
@@ -2579,19 +2578,16 @@ bool discard =
   ct == use_facet<numpunct<charT>>(loc).thousands_sep()
   && use_facet<numpunct<charT>>(loc).grouping().length() != 0;
 \end{codeblock}
-
 where the values
 \tcode{src}
 and
 \tcode{atoms}
 are defined as if by:
-
 \begin{codeblock}
 static const char src[] = "0123456789abcdefxABCDEFX+-";
 char_type atoms[sizeof(src)];
 use_facet<ctype<charT>>(loc).widen(src, src + sizeof(src), atoms);
 \end{codeblock}
-
 for this value of
 \tcode{loc}.
 
@@ -2628,7 +2624,6 @@ The sequence of \tcode{char}{s} accumulated in stage 2 (the field) is converted
 \end{itemize}
 
 The numeric value to be stored can be one of:
-
 \begin{itemize}
 \item zero, if the conversion function does not convert the entire field.
 
@@ -2855,11 +2850,9 @@ Determine a printf conversion specifier \tcode{spec} and
 determine the characters that would be printed by
 \tcode{printf}\iref{c.files}
 given this conversion specifier for
-
 \begin{codeblock}
 printf(spec, val)
 \end{codeblock}
-
 assuming that the current locale is
 the \tcode{"C"} locale.
 \item
@@ -3007,7 +3000,6 @@ Decimal point characters(.) are replaced by
 
 \stage{3}
 A local variable is initialized as
-
 \begin{codeblock}
 fmtflags adjustfield = (flags & (ios_base::adjustfield));
 \end{codeblock}
@@ -3152,7 +3144,6 @@ are the results of corresponding
 \tcode{numpunct<charT>}
 members.
 Integer values have the format:
-
 \begin{codeblock}
 integer   ::= [sign] units
 sign      ::= plusminus
@@ -3160,15 +3151,12 @@ plusminus ::= '+' | '-'
 units     ::= digits [thousands-sep units]
 digits    ::= digit [digits]
 \end{codeblock}
-
 and floating-point values have:
-
 \begin{codeblock}
 floatval ::= [sign] units [decimal-point [digits]] [e [sign] digits] |
              [sign]        decimal-point  digits   [e [sign] digits]
 e        ::= 'e' | 'E'
 \end{codeblock}
-
 where the number of digits between
 \tcode{thousands-sep}s
 is as specified by
@@ -4326,14 +4314,12 @@ The value
 \tcode{units}
 is produced as if by\footnote{The semantics here are different from
 \tcode{ct.narrow}.}
-
 \begin{codeblock}
 for (int i = 0; i < n; ++i)
   buf2[i] = src[find(atoms, atoms+sizeof(src), buf1[i]) - atoms];
 buf2[n] = 0;
 sscanf(buf2, "%Lf", &units);
 \end{codeblock}
-
 where
 \tcode{n}
 is the number of characters placed in
@@ -4344,7 +4330,6 @@ is a character buffer, and the values
 and
 \tcode{atoms}
 are defined as if by
-
 \begin{codeblock}
 static const char src[] = "0123456789-";
 charT atoms[sizeof(src)];
@@ -4432,11 +4417,9 @@ and
 The argument
 \tcode{units}
 is transformed into a sequence of wide characters as if by
-
 \begin{codeblock}
 ct.widen(buf1, buf1 + sprintf(buf1, "%.0Lf", units), buf2)
 \end{codeblock}
-
 for character buffers
 \tcode{buf1}
 and
diff --git a/source/overloading.tex b/source/overloading.tex
index 8e6bc3f..afcc6d0 100644
--- a/source/overloading.tex
+++ b/source/overloading.tex
@@ -514,7 +514,6 @@ the object to be operated on.
 \pnum
 For non-static member functions, the type of the implicit object
 parameter is
-
 \begin{itemize}
 \item ``lvalue reference to \cv{}~\tcode{X}'' for functions declared
 without a \grammarterm{ref-qualifier} or with the
@@ -522,7 +521,6 @@ without a \grammarterm{ref-qualifier} or with the
 \item ``rvalue reference to \cv{}~\tcode{X}'' for functions declared with the
 \tcode{\&\&} \grammarterm{ref-qualifier}
 \end{itemize}
-
 where
 \tcode{X}
 is the class of which the function is a member and
@@ -807,11 +805,9 @@ in the context of
 \pnum
 In addition, for each non-explicit conversion function declared in \tcode{T} of the
 form
-
 \begin{ncsimplebnf}
 \terminal{operator} conversion-type-id \terminal{(\,)} cv-qualifier \opt{ref-qualifier} \opt{noexcept-specifier} \opt{attribute-specifier-seq} \terminal{;}
 \end{ncsimplebnf}
-
 where
 \grammarterm{cv-qualifier}
 is the same cv-qualification as, or a greater cv-qualification than,
@@ -827,12 +823,10 @@ or the type
 returning \tcode{R}'', a \defn{surrogate call function} with the unique name
 \placeholder{call-function}
 and having the form
-
 \begin{ncbnf}
 \terminal{R} \placeholder{call-function} \terminal{(} conversion-type-id \ %
 \terminal{F, P$_1$ a$_1$, $\dotsc$, P$_n$ a$_n$)} \terminal{\{ return F (a$_1$, $\dotsc$, a$_n$); \}}
 \end{ncbnf}
-
 is also considered as a candidate function.
 Similarly, surrogate
 call functions are added to the set of candidate functions for
@@ -2544,7 +2538,6 @@ is a better conversion
 sequence than standard conversion sequence
 \tcode{S2}
 if
-
 \begin{itemize}
 \item
 \indextext{subsequence rule!overloading}%
@@ -2568,7 +2561,6 @@ and
 have the same rank and are distinguishable by the rules
 in the paragraph below,
 or, if not that,
-
 \item \tcode{S1} and \tcode{S2} are \link{reference}{\ref{dcl.init.ref}} bindings and
 neither refers to an implicit object parameter of a non-static member function
 declared without a \grammarterm{ref-qualifier},
@@ -2636,7 +2628,6 @@ int j = f(&i);                  // calls \tcode{f(const int*)}
 \end{codeblock}
 \end{example}
 or, if not that,
-
 \item
 \tcode{S1}
 and
@@ -3297,11 +3288,9 @@ shall be a non-static member function with an arbitrary number of
 parameters.
 It can have default arguments.
 It implements the function call syntax
-
 \begin{ncsimplebnf}
 postfix-expression \terminal{(} \opt{expression-list} \terminal{)}
 \end{ncsimplebnf}
-
 where the
 \grammarterm{postfix-expression}
 evaluates to a class object and the possibly empty
@@ -3658,7 +3647,6 @@ there exist candidate operator functions of the form
 For every cv-qualified or cv-unqualified object type
 \tcode{\placeholder{T}},
 there exist candidate operator functions of the form
-
 \begin{codeblock}
 @\placeholder{T}@&    operator*(@\placeholder{T}@*);
 \end{codeblock}
@@ -3667,14 +3655,12 @@ there exist candidate operator functions of the form
 For every function type
 \tcode{\placeholder{T}} that does not have cv-qualifiers or a \grammarterm{ref-qualifier},
 there exist candidate operator functions of the form
-
 \begin{codeblock}
 @\placeholder{T}@&    operator*(@\placeholder{T}@*);
 \end{codeblock}
 
 \pnum
 For every type \tcode{\placeholder{T}} there exist candidate operator functions of the form
-
 \begin{codeblock}
 @\placeholder{T}@*    operator+(@\placeholder{T}@*);
 \end{codeblock}
@@ -3683,7 +3669,6 @@ For every type \tcode{\placeholder{T}} there exist candidate operator functions
 For every promoted arithmetic type
 \tcode{\placeholder{T}},
 there exist candidate operator functions of the form
-
 \begin{codeblock}
 @\placeholder{T}@ operator+(@\placeholder{T}@);
 @\placeholder{T}@ operator-(@\placeholder{T}@);
@@ -3693,7 +3678,6 @@ there exist candidate operator functions of the form
 For every promoted integral type
 \tcode{\placeholder{T}},
 there exist candidate operator functions of the form
-
 \begin{codeblock}
 @\placeholder{T}@ operator~(@\placeholder{T}@);
 \end{codeblock}
@@ -3713,7 +3697,6 @@ is the same type as \tcode{\placeholder{C2}} or is a derived class of \tcode{\pl
 \tcode{\placeholder{T}}
 is an object type or a function type,
 there exist candidate operator functions of the form
-
 \begin{codeblock}
 @\cvqual{cv12} \placeholder{T}@& operator->*(@\cvqual{cv1} \placeholder{C1}@*, @\cvqual{cv2} \placeholder{T C2}@::*);
 \end{codeblock}
@@ -3770,7 +3753,6 @@ std::partial_ordering operator<=>(@\placeholder{L}@, @\placeholder{R}@);
 For every cv-qualified or cv-unqualified object type
 \tcode{\placeholder{T}}
 there exist candidate operator functions of the form
-
 \begin{codeblock}
 @\placeholder{T}@*      operator+(@\placeholder{T}@*, std::ptrdiff_t);
 @\placeholder{T}@&      operator[](@\placeholder{T}@*, std::ptrdiff_t);
@@ -3786,7 +3768,6 @@ where
 \tcode{\placeholder{T}}
 is a pointer to object type,
 there exist candidate operator functions of the form
-
 \begin{codeblock}
 std::ptrdiff_t   operator-(@\placeholder{T}@, @\placeholder{T}@);
 \end{codeblock}
@@ -3794,7 +3775,6 @@ std::ptrdiff_t   operator-(@\placeholder{T}@, @\placeholder{T}@);
 \pnum
 For every \tcode{\placeholder{T}}, where \tcode{\placeholder{T}} is an enumeration type or a pointer type,
 there exist candidate operator functions of the form
-
 \begin{codeblock}
 bool    operator==(@\placeholder{T}@, @\placeholder{T}@);
 bool    operator!=(@\placeholder{T}@, @\placeholder{T}@);
@@ -3811,7 +3791,6 @@ where \tcode{\placeholder{R}} is the result type specified in \ref{expr.spaceshi
 For every \tcode{\placeholder{T}}, where \tcode{\placeholder{T}}
 is a pointer-to-member type or \tcode{std::nullptr_t},
 there exist candidate operator functions of the form
-
 \begin{codeblock}
 bool                 operator==(@\placeholder{T}@, @\placeholder{T}@);
 bool                 operator!=(@\placeholder{T}@, @\placeholder{T}@);
@@ -3824,7 +3803,6 @@ For every pair of promoted integral types
 and
 \tcode{\placeholder{R}},
 there exist candidate operator functions of the form
-
 \begin{codeblock}
 @\placeholder{LR}@      operator%(@\placeholder{L}@, @\placeholder{R}@);
 @\placeholder{LR}@      operator&(@\placeholder{L}@, @\placeholder{R}@);
@@ -3833,7 +3811,6 @@ there exist candidate operator functions of the form
 @\placeholder{L}@       operator<<(@\placeholder{L}@, @\placeholder{R}@);
 @\placeholder{L}@       operator>>(@\placeholder{L}@, @\placeholder{R}@);
 \end{codeblock}
-
 where
 \tcode{\placeholder{LR}}
 is the result of the usual arithmetic conversions\iref{expr.arith.conv} between types
@@ -3853,7 +3830,6 @@ and
 \tcode{\placeholder{R}}
 is a promoted arithmetic type,
 there exist candidate operator functions of the form
-
 \begin{codeblock}
 @\cvqual{vq} \placeholder{L}@&   operator=(@\cvqual{vq} \placeholder{L}@&, @\placeholder{R}@);
 @\cvqual{vq} \placeholder{L}@&   operator*=(@\cvqual{vq} \placeholder{L}@&, @\placeholder{R}@);
@@ -3866,7 +3842,6 @@ there exist candidate operator functions of the form
 For every pair (\tcode{\placeholder{T}}, \cvqual{vq}),
 where \tcode{\placeholder{T}} is any type,
 there exist candidate operator functions of the form
-
 \begin{codeblock}
 @\placeholder{T}@*@\cvqual{vq}@&   operator=(@\placeholder{T}@*@\cvqual{vq}@&, @\placeholder{T}@*);
 \end{codeblock}
@@ -3879,7 +3854,6 @@ where
 \tcode{\placeholder{T}}
 is an enumeration or pointer-to-member type,
 there exist candidate operator functions of the form
-
 \begin{codeblock}
 @\cvqual{vq} \placeholder{T}@&   operator=(@\cvqual{vq} \placeholder{T}@&, @\placeholder{T}@);
 \end{codeblock}
@@ -3892,7 +3866,6 @@ where
 \tcode{\placeholder{T}}
 is a cv-qualified or cv-unqualified object type,
 there exist candidate operator functions of the form
-
 \begin{codeblock}
 @\placeholder{T}@*@\cvqual{vq}@&   operator+=(@\placeholder{T}@*@\cvqual{vq}@&, std::ptrdiff_t);
 @\placeholder{T}@*@\cvqual{vq}@&   operator-=(@\placeholder{T}@*@\cvqual{vq}@&, std::ptrdiff_t);
@@ -3909,7 +3882,6 @@ is an integral type, and
 \tcode{\placeholder{R}}
 is a promoted integral type,
 there exist candidate operator functions of the form
-
 \begin{codeblock}
 @\cvqual{vq} \placeholder{L}@&   operator%=(@\cvqual{vq} \placeholder{L}@&, @\placeholder{R}@);
 @\cvqual{vq} \placeholder{L}@&   operator<<=(@\cvqual{vq} \placeholder{L}@&, @\placeholder{R}@);
@@ -3921,7 +3893,6 @@ there exist candidate operator functions of the form
 
 \pnum
 There also exist candidate operator functions of the form
-
 \begin{codeblock}
 bool    operator!(bool);
 bool    operator&&(bool, bool);
@@ -3934,11 +3905,9 @@ For every pair of promoted arithmetic types
 and
 \tcode{\placeholder{R}},
 there exist candidate operator functions of the form
-
 \begin{codeblock}
 @\placeholder{LR}@      operator?:(bool, @\placeholder{L}@, @\placeholder{R}@);
 \end{codeblock}
-
 where
 \tcode{\placeholder{LR}}
 is the result of the usual arithmetic conversions\iref{expr.arith.conv} between types
@@ -3960,7 +3929,6 @@ where
 \tcode{\placeholder{T}}
 is a pointer, pointer-to-member, or scoped enumeration type, there exist candidate operator
 functions of the form
-
 \begin{codeblock}
 @\placeholder{T}@       operator?:(bool, @\placeholder{T}@, @\placeholder{T}@);
 \end{codeblock}%
diff --git a/source/special.tex b/source/special.tex
index 1ab3a31..a7e2f9b 100644
--- a/source/special.tex
+++ b/source/special.tex
@@ -78,11 +78,9 @@ classes are called its \term{potentially constructed subobjects}.
 Constructors do not have names.
 In a declaration of a constructor, the \grammarterm{declarator} is a
 \link{function declarator}{\ref{dcl.fct}} of the form
-
 \begin{ncbnf}
 ptr-declarator \terminal{(} parameter-declaration-clause \terminal{)} \opt{noexcept-specifier} \opt{attribute-specifier-seq}
 \end{ncbnf}
-
 where the \grammarterm{ptr-declarator} consists solely of an
 \grammarterm{id-expression}, an optional \grammarterm{attribute-specifier-seq},
 and optional surrounding parentheses, and the \grammarterm{id-expression} has
@@ -209,7 +207,6 @@ constructor.
 A default constructor is
 \defnx{trivial}{constructor!default!trivial}
 if it is not user-provided and if:
-
 \begin{itemize}
 \item
 its class has no \link{virtual functions}{\ref{class.virtual}} and no \deflinkx{virtual base
@@ -872,22 +869,18 @@ it may be called for implicit type conversions.
 
 \pnum
 A member function of a class \tcode{X} having no parameters with a name of the form
-
 \begin{bnf}
 \nontermdef{conversion-function-id}\br
     \terminal{operator} conversion-type-id
 \end{bnf}
-
 \begin{bnf}
 \nontermdef{conversion-type-id}\br
     type-specifier-seq \opt{conversion-declarator}
 \end{bnf}
-
 \begin{bnf}
 \nontermdef{conversion-declarator}\br
     ptr-operator \opt{conversion-declarator}
 \end{bnf}
-
 specifies a conversion from
 \tcode{X}
 to the type specified by the
@@ -1007,11 +1000,9 @@ struct S {
 \pnum
 In a declaration of a destructor, the \grammarterm{declarator} is a
 \link{function declarator}{\ref{dcl.fct}} of the form
-
 \begin{ncbnf}
 ptr-declarator \terminal{(} parameter-declaration-clause \terminal{)} \opt{noexcept-specifier} \opt{attribute-specifier-seq}
 \end{ncbnf}
-
 where the \grammarterm{ptr-declarator} consists solely of an
 \grammarterm{id-expression}, an optional \grammarterm{attribute-specifier-seq},
 and optional surrounding parentheses, and the \grammarterm{id-expression} has
@@ -1810,7 +1801,6 @@ a given potentially constructed subobject is not designated by a
 because the constructor has no
 \grammarterm{ctor-initializer}),
 then
-
 \begin{itemize}
 \item if the entity is a non-static data member that has
 a \deflink{default member initializer}{\ref{class.mem}} and either
@@ -1823,7 +1813,6 @@ member of that union is designated by a \grammarterm{mem-initializer-id} or
 anonymous union, no other member of that union is designated by a
 \grammarterm{mem-initializer-id},
 \end{itemize}
-
 the entity is initialized from its default member initializer
 as specified in~\ref{dcl.init};
 
@@ -1888,7 +1877,6 @@ struct A {
   // ...
 };
 \end{codeblock}
-
 the \tcode{A(int)} constructor will simply initialize \tcode{i} to the value of
 \tcode{arg}, and the
 \indextext{side effects}%
@@ -2604,11 +2592,9 @@ operator or a user-declared destructor.
 The implicitly-declared copy constructor for a class
 \tcode{X}
 will have the form
-
 \begin{codeblock}
 X::X(const X&)
 \end{codeblock}
-
 if each potentially constructed subobject of a class type
 \tcode{M}
 (or array thereof)
@@ -2634,7 +2620,6 @@ X::X(X&)
 If the definition of a class \tcode{X} does not explicitly declare
 a move constructor, a non-explicit one will be
 implicitly declared as defaulted if and only if
-
 \begin{itemize}
 \item
 \tcode{X} does not have a user-declared copy constructor,
@@ -2698,7 +2683,6 @@ A copy/move constructor for class
 is
 trivial
 if it is not user-provided and if:
-
 \begin{itemize}
 \item
 class
@@ -2849,13 +2833,10 @@ or a user-declared destructor.
 The implicitly-declared copy assignment operator for a class
 \tcode{X}
 will have the form
-
 \begin{codeblock}
 X& X::operator=(const X&)
 \end{codeblock}
-
 if
-
 \begin{itemize}
 \item
 each direct base class
@@ -3015,7 +2996,6 @@ A copy/move assignment operator for class
 is
 trivial
 if it is not user-provided and if:
-
 \begin{itemize}
 \item
 class
diff --git a/source/statements.tex b/source/statements.tex
index 98b63d5..6f56b9b 100644
--- a/source/statements.tex
+++ b/source/statements.tex
@@ -219,14 +219,11 @@ selection-statement is a single statement and not a
 \grammarterm{compound-statement}, it is as if it was rewritten to be a
 compound-statement containing the original substatement.
 \begin{example}
-
 \begin{codeblock}
 if (x)
   int i;
 \end{codeblock}
-
 can be equivalently rewritten as
-
 \begin{codeblock}
 if (x) {
   int i;
@@ -339,12 +336,10 @@ to the promoted type.
 Any
 statement within the \tcode{switch} statement can be labeled with one or
 more case labels as follows:
-
 \begin{ncbnf}
 \indextext{label!\idxcode{case}}%
 \terminal{case} constant-expression \terminal{:}
 \end{ncbnf}
-
 where the \grammarterm{constant-expression} shall be
 a converted \link{constant expression}{\ref{expr.const}} of the
 adjusted type of the switch condition. No two of the case constants in
@@ -353,11 +348,9 @@ the same switch shall have the same value after conversion.
 \pnum
 \indextext{label!\idxcode{default}}%
 There shall be at most one label of the form
-
 \begin{codeblock}
 default :
 \end{codeblock}
-
 within a \tcode{switch} statement.
 
 \pnum
@@ -452,14 +445,11 @@ If the substatement in an iteration-statement is a single statement and
 not a \grammarterm{compound-statement}, it is as if it was rewritten to be
 a compound-statement containing the original statement.
 \begin{example}
-
 \begin{codeblock}
 while (--x >= 0)
   int i;
 \end{codeblock}
-
 can be equivalently rewritten as
-
 \begin{codeblock}
 while (--x >= 0) {
   int i;
diff --git a/source/strings.tex b/source/strings.tex
index 3bffa08..e25b1ee 100644
--- a/source/strings.tex
+++ b/source/strings.tex
@@ -196,12 +196,10 @@ is \tcode{false} for all values \tcode{c}.                                  &
 
 \pnum
 The class template
-
 \indexlibrary{\idxcode{char_traits}}%
 \begin{codeblock}
 template<class charT> struct char_traits;
 \end{codeblock}
-
 shall be provided in the header
 \tcode{<string>}
 as a basis for explicit specializations.
diff --git a/source/support.tex b/source/support.tex
index 19c595b..233b2d7 100644
--- a/source/support.tex
+++ b/source/support.tex
@@ -1575,7 +1575,6 @@ namespace std {
 
 \pnum
 The header also defines numerous macros of the form:
-
 \begin{codeblock}
   INT_[FAST LEAST]{8 16 32 64}_MIN
   [U]INT_[FAST LEAST]{8 16 32 64}_MAX
@@ -1584,9 +1583,7 @@ The header also defines numerous macros of the form:
   {PTRDIFF SIG_ATOMIC WCHAR WINT}{_MAX _MIN}
   SIZE_MAX
 \end{codeblock}
-
 plus function macros of the form:
-
 \begin{codeblock}
   [U]INT{8 16 32 64 MAX}_C
 \end{codeblock}
diff --git a/source/templates.tex b/source/templates.tex
index 67d4399..5fc7b22 100644
--- a/source/templates.tex
+++ b/source/templates.tex
@@ -8590,7 +8590,6 @@ may be deduced from an array bound, the resulting value will always be
 \tcode{true}
 because the array bound will be nonzero.}
 \begin{example}
-
 \begin{codeblock}
 template<int i> class A { @\commentellip@ };
 template<short s> void f(A<s>);
@@ -8616,7 +8615,6 @@ can be deduced from a function, pointer to function, or
 pointer-to-member-function type.
 
 \begin{example}
-
 \begin{codeblock}
 template<class T> void f(void(*)(T,int));
 template<class T> void foo(T,int);
@@ -8638,7 +8636,6 @@ A template
 \grammarterm{type-parameter}
 cannot be deduced from the type of a function default argument.
 \begin{example}
-
 \begin{codeblock}
 template <class T> void f(T = 5, T = 7);
 void g() {
@@ -8658,7 +8655,6 @@ is deduced from the type of the
 \grammarterm{template-argument}
 of a class template specialization used in the argument list of a function call.
 \begin{example}
-
 \begin{codeblock}
 template <template <class T> class X> struct A { };
 template <template <class T> class X> void f(A<X>) { }
@@ -8790,7 +8786,6 @@ for
 Here is an example involving conversions on a function argument involved in
 \grammarterm{template-argument}
 deduction:
-
 \begin{codeblock}
 template<class T> struct B { @\commentellip@ };
 template<class T> struct D : public B<T> { @\commentellip@ };
@@ -8808,7 +8803,6 @@ void g(B<int>& bi, D<int>& di) {
 Here is an example involving conversions on a function argument not involved in
 \grammarterm{template-parameter}
 deduction:
-
 \begin{codeblock}
 template<class T> void f(T*,int);       // \#1
 template<class T> void f(T,char);       // \#2
@@ -8829,7 +8823,6 @@ specialization in a set of candidate functions.
 Therefore only the function template declaration is needed to resolve a call
 for which a template specialization is a candidate.
 \begin{example}
-
 \begin{codeblock}
 template<class T> void f(T);    // declaration
 
diff --git a/source/utilities.tex b/source/utilities.tex
index e24d488..31e3cac 100644
--- a/source/utilities.tex
+++ b/source/utilities.tex
@@ -17068,9 +17068,7 @@ struct S {
 using PMF = void (S::*)(long) const;
 using PMD = char  S::*;
 \end{codeblock}
-
 the following assertions will hold:
-
 \begin{codeblock}
 static_assert(is_same_v<invoke_result_t<S, int>, short>);
 static_assert(is_same_v<invoke_result_t<S&, unsigned char, int&>, double>);
-- 
2.7.4


From 647f955c4ab3886c857fe36a87ae21d10ffb5f2f Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sun, 30 Apr 2017 20:01:43 +0200
Subject: [PATCH 16/18] Prevent cxxdraft-htmlgen from interpreting some periods
 as sentence terminators.

---
 source/intro.tex | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/source/intro.tex b/source/intro.tex
index 5eb8c65..0463119 100644
--- a/source/intro.tex
+++ b/source/intro.tex
@@ -673,9 +673,9 @@ Ritchie: \doccite{The C Programming Language} (Prentice-Hall, 1978, ISBN
 
 \pnum
 Portions of the library Clauses of this document are based
-on work by P.J. Plauger, which was published as \doccite{The Draft
+on work by {P.J. Plauger}, which was published as \doccite{The Draft
 Standard \Cpp{}  Library} (Prentice-Hall, ISBN 0-13-117003-1, copyright
-\copyright 1995 P.J. Plauger).
+\copyright 1995 {P.J. Plauger}).
 
 \pnum
 POSIX\textregistered\ is a registered trademark of the Institute of Electrical and
-- 
2.7.4


From 09bfbab7cd1db87bf10372aba9b6ff5ae6e530ef Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Tue, 1 Aug 2017 14:38:23 +0200
Subject: [PATCH 17/18] Fix dubious \defnx that has see{} in it, and remove
 range index entry with the same key.

---
 source/iostreams.tex | 2 +-
 source/templates.tex | 5 ++---
 2 files changed, 3 insertions(+), 4 deletions(-)

diff --git a/source/iostreams.tex b/source/iostreams.tex
index 9d07429..8abebe5 100644
--- a/source/iostreams.tex
+++ b/source/iostreams.tex
@@ -11403,7 +11403,7 @@ without an intervening \grammarterm{root-directory} element.
 
 \pnum
 \indextext{path!normalization|(}%
-\defnx{Normalization}{normalization!path|see{path, normalization}} of a generic format pathname means:
+\defnx{Normalization}{normalization!path} of a generic format pathname means:
 
 \begin{enumerate}
 \item If the path is empty, stop.
diff --git a/source/templates.tex b/source/templates.tex
index 5fc7b22..8e93524 100644
--- a/source/templates.tex
+++ b/source/templates.tex
@@ -1764,7 +1764,6 @@ and those of
 \end{example}
 
 \rSec2[temp.constr.normal]{Constraint normalization}
-\indextext{constraint!normalization|(}%
 
 \pnum
 The \defnx{normal form}{normal form!constraint} of an \grammarterm{expression} \tcode{E} is
@@ -1821,10 +1820,11 @@ whose parameter mapping is the identity mapping.
 \end{itemize}
 
 \pnum
+\indextext{normalization|see{constraint, normalization}}%
 The process of obtaining the normal form of a
 \grammarterm{constraint-expression}
 is called
-\defnx{normalization}{normalization!constraint|see{constraint, normalization}}.
+\defnx{normalization}{constraint!normalization}.
 \begin{note}
 Normalization of \grammarterm{constraint-expression}{s}
 is performed
@@ -1854,7 +1854,6 @@ The associated constraints of \#2 are
 The associated constraints of \#3 are
 \tcode{requires (T x) \{ ++x; \}} (with mapping $\tcode{T} \mapsto \tcode{U}$).
 \end{example}
-\indextext{constraint!normalization|)}
 
 \rSec2[temp.constr.order]{Partial ordering by constraints}
 \indextext{subsume|see{constraint, subsumption}}
-- 
2.7.4


From d7df1c48cad3b0acad6728646512af6344761c3f Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Fri, 11 Aug 2017 19:33:53 +0200
Subject: [PATCH 18/18] Use link macros more.

---
 source/basic.tex        |  56 +++++-----
 source/classes.tex      |   2 +-
 source/conversions.tex  |   4 +-
 source/declarations.tex |  14 +--
 source/declarators.tex  |   2 +-
 source/expressions.tex  | 110 +++++++++----------
 source/iostreams.tex    |  64 +++++++----
 source/iterators.tex    |  26 +++--
 source/lib-intro.tex    |  10 +-
 source/limits.tex       |   2 +-
 source/numerics.tex     | 113 ++++++++++++-------
 source/overloading.tex  |   4 +-
 source/regex.tex        |  54 ++++-----
 source/special.tex      |  10 +-
 source/support.tex      |  27 ++---
 source/templates.tex    |  46 ++++----
 source/utilities.tex    | 286 +++++++++++++++++++++++++-----------------------
 17 files changed, 439 insertions(+), 391 deletions(-)

diff --git a/source/basic.tex b/source/basic.tex
index f36db26..a7aa814 100644
--- a/source/basic.tex
+++ b/source/basic.tex
@@ -55,10 +55,10 @@ an object. The variable's name, if any, denotes the reference or object.
 
 \pnum
 A \defn{local entity} is a variable with
-automatic storage duration\iref{basic.stc.auto},
-a structured binding\iref{dcl.struct.bind}
+\link{automatic storage duration}{\ref{basic.stc.auto}},
+a \link{structured binding}{\ref{dcl.struct.bind}}
 whose corresponding variable is such an entity,
-or the \tcode{*this} object\iref{expr.prim.this}.
+or the \link{\tcode{*this} object}{\ref{expr.prim.this}}.
 
 \pnum
 Some names denote types or templates. In general,
@@ -2495,9 +2495,9 @@ identity does not require a diagnostic.
 \indextext{memory model|(}%
 The fundamental storage unit in the \Cpp{} memory model is the
 \defn{byte}.
-A byte is at least large enough to contain any member of the basic
+A byte is at least large enough to contain any member of the
 \indextext{character set!basic execution}%
-execution character set\iref{lex.charset}
+\deflinkx{basic execution character set}{character set!basic execution}{\ref{lex.charset}}
 and the eight-bit code units of the Unicode UTF-8 encoding form
 and is composed of a contiguous sequence of
 bits,\footnote{The number of bits in a byte is reported by the macro
@@ -2517,8 +2517,8 @@ A \defn{memory location} is either an object of scalar type or a maximal
 sequence of adjacent bit-fields all having nonzero width. \begin{note} Various
 features of the language, such as references and virtual functions, might
 involve additional memory locations that are not accessible to programs but are
-managed by the implementation. \end{note} Two or more threads of
-execution\iref{intro.multithread} can access separate memory
+managed by the implementation. \end{note} Two or more \deflinkx{threads of
+execution}{thread of execution}{\ref{intro.multithread}} can access separate memory
 locations without interfering with each other.
 
 \pnum
@@ -2982,9 +2982,9 @@ by calling \tcode{std::launder}\iref{support.dynamic}.
 
 \pnum
 If a program ends the lifetime of an object of type \tcode{T} with
-static\iref{basic.stc.static}, thread\iref{basic.stc.thread},
-or automatic\iref{basic.stc.auto}
-storage duration and if \tcode{T} has a non-trivial destructor,\footnote{That
+\link{static}{\ref{basic.stc.static}}, \link{thread}{\ref{basic.stc.thread}},
+or \link{automatic storage duration}{\ref{basic.stc.auto}}
+and if \tcode{T} has a non-trivial destructor,\footnote{That
 is, an object for which a destructor will be called
 implicitly---upon exit from the block for an object with
 automatic storage duration, upon exit from the thread for an object with
@@ -3459,7 +3459,7 @@ may be allocated. An \defn{alignment} is an \impldef{alignment}
 integer value representing the number of bytes between successive addresses
 at which a given object can be allocated. An object type imposes an alignment
 requirement on every object of that type; stricter alignment can be requested
-using the alignment specifier\iref{dcl.align}.
+using the \link{alignment specifier}{\ref{dcl.align}}.
 
 \pnum
 \indextext{alignment!fundamental}%
@@ -3513,8 +3513,8 @@ requirement also satisfies any weaker valid alignment requirement.
 
 \pnum
 The alignment requirement of a complete type can be queried using an
-\tcode{alignof} expression\iref{expr.alignof}. Furthermore,
-the narrow character types\iref{basic.fundamental} shall have the weakest
+\link{\tcode{alignof} expression}{\ref{expr.alignof}}. Furthermore,
+the \deflinkx{narrow character types}{type!narrow character}{\ref{basic.fundamental}} shall have the weakest
 alignment requirement.
 \begin{note} This enables the narrow character types to be used as the
 underlying type for an aligned memory area\iref{dcl.align}.\end{note}
@@ -3897,7 +3897,7 @@ uninitialized automatic object, might cause it to behave as if it is
 neither \tcode{true} nor \tcode{false}.}
 \begin{note} There are no \tcode{signed}, \tcode{unsigned}, \tcode{short},
 or \tcode{long bool} types or values. \end{note} Values of type
-\tcode{bool} participate in integral promotions\iref{conv.prom}.
+\tcode{bool} participate in \deflink{integral promotions}{\ref{conv.prom}}.
 
 \pnum
 Types \tcode{bool}, \tcode{char}, \tcode{char16_t}, \tcode{char32_t},
@@ -3958,17 +3958,17 @@ an empty set of values. It is used as the return
 type for functions that do not return a value. Any expression can be
 explicitly converted to type \cv{}~\tcode{void}\iref{expr.cast}.
 An expression of type \cv{}~\tcode{void} shall
-be used only as an expression statement\iref{stmt.expr}, as an operand
-of a comma expression\iref{expr.comma}, as a second or third operand
+be used only as an \link{expression statement}{\ref{stmt.expr}}, as an operand
+of a \link{comma expression}{\ref{expr.comma}}, as a second or third operand
 of \tcode{?:}\iref{expr.cond}, as the operand of
 \tcode{typeid}, \tcode{noexcept}, or \tcode{decltype}, as
-the expression in a \tcode{return} statement\iref{stmt.return} for a function
+the expression in a \link{\tcode{return} statement}{\ref{stmt.return}} for a function
 with the return type \cv{}~\tcode{void}, or as the operand of an explicit conversion
 to type \cv{}~\tcode{void}.
 
 \pnum
-A value of type \tcode{std::nullptr_t} is a null pointer
-constant\iref{conv.ptr}. Such values participate in the pointer and the
+A value of type \tcode{std::nullptr_t} is a \deflink{null pointer
+constant}{\ref{conv.ptr}}. Such values participate in the pointer and the
 pointer-to-member conversions~(\ref{conv.ptr}, \ref{conv.mem}).
 \tcode{sizeof(std::nullptr_t)} shall be equal to \tcode{sizeof(void*)}.
 
@@ -4094,7 +4094,7 @@ pointer types is \impldef{value representation of pointer types}. Pointers to
 layout-compatible types shall
 have the same value representation and alignment
 requirements\iref{basic.align}.
-\begin{note} Pointers to over-aligned types\iref{basic.align} have no special
+\begin{note} Pointers to \deflinkx{over-aligned types}{type!over-aligned}{\ref{basic.align}} have no special
 representation, but their range of valid values is restricted by the extended
 alignment requirement.\end{note}
 
@@ -4120,7 +4120,7 @@ If two objects are pointer-interconvertible,
 then they have the same address,
 and it is possible to obtain a pointer to one
 from a pointer to the other
-via a \tcode{reinterpret_cast}\iref{expr.reinterpret.cast}.
+via a \link{\tcode{reinterpret_cast}}{\ref{expr.reinterpret.cast}}.
 \begin{note}
 An array object and its first element are not pointer-interconvertible,
 even though they have the same address.
@@ -4295,9 +4295,9 @@ rank than \tcode{T3}, then \tcode{T1} shall have greater rank than
 \end{itemize}
 
 \begin{note}
-The integer conversion rank is used in the definition of the integral
-promotions\iref{conv.prom} and the usual arithmetic
-conversions\iref{expr.prop}.
+The integer conversion rank is used in the definition of the \deflink{integral
+promotions}{\ref{conv.prom}} and the usual arithmetic
+conversions\iref{expr.prop}. % todo: badref?
 \end{note}%
 
 \rSec1[basic.exec]{Program execution}
@@ -4305,8 +4305,8 @@ conversions\iref{expr.prop}.
 \rSec2[intro.execution]{Sequential execution}
 
 \pnum
-An instance of each object with automatic storage
-duration\iref{basic.stc.auto} is associated with each entry into its
+An instance of each object with \link{automatic storage
+duration}{\ref{basic.stc.auto}} is associated with each entry into its
 block. Such an object exists and retains its last-stored value during
 the execution of the block and while the block is suspended (by a call
 of a function or receipt of a signal).
@@ -4347,7 +4347,7 @@ if \tcode{e} is a \grammarterm{lambda-expression}\iref{expr.prim.lambda},
 the initialization of the entities captured by copy and
 the constituent expressions of the \grammarterm{initializer} of the \grammarterm{init-capture}{s},
 \item
-if \tcode{e} is a function call\iref{expr.call} or implicitly invokes a function,
+if \tcode{e} is a \link{function call}{\ref{expr.call}} or implicitly invokes a function,
 the constituent expressions of each default argument\iref{dcl.fct.default}
 used in the call, or
 \item
@@ -4369,7 +4369,7 @@ are not subexpressions of the \grammarterm{lambda-expression}.
 A \defn{full-expression} is
 \begin{itemize}
 \item
-an unevaluated operand\iref{expr.prop},
+an \deflink{unevaluated operand}{\ref{expr.prop}},
 \item
 a \grammarterm{constant-expression}\iref{expr.const},
 \item
diff --git a/source/classes.tex b/source/classes.tex
index cf873f1..cbcfedb 100644
--- a/source/classes.tex
+++ b/source/classes.tex
@@ -542,7 +542,7 @@ Any other data member or member function is a \defn{non-static member}
 (a \defn{non-static data member} or
 \defn{non-static member function}~(\ref{class.mfct.non-static}), respectively).
 \begin{note} A non-static data member of non-reference
-type is a member subobject of a class object\iref{intro.object}.\end{note}
+type is a \deflink{member subobject}{\ref{intro.object}} of a class object.\end{note}
 
 \pnum
 A member shall not be declared twice in the
diff --git a/source/conversions.tex b/source/conversions.tex
index 2199c19..426f27f 100644
--- a/source/conversions.tex
+++ b/source/conversions.tex
@@ -356,7 +356,7 @@ to a prvalue of its underlying type.
 \pnum
 \indextext{type!underlying!enumeration}%
 A prvalue of an unscoped enumeration type whose underlying type is not
-fixed\iref{dcl.enum} can be converted to a prvalue of the first of the following
+\deflinkx{fixed}{type!underlying!fixed}{\ref{dcl.enum}} can be converted to a prvalue of the first of the following
 types that can represent all the values of the enumeration (i.e., the values in the
 range $b_\text{min}$ to $b_\text{max}$ as described in~\ref{dcl.enum}): \tcode{int},
 \tcode{unsigned int}, \tcode{long int}, \tcode{unsigned long int},
@@ -369,7 +369,7 @@ two such extended types, the signed one is chosen.
 
 \pnum
 A prvalue of an unscoped enumeration type whose underlying type is
-fixed\iref{dcl.enum} can be converted to a prvalue of its underlying type. Moreover,
+\deflinkx{fixed}{type!underlying!fixed}{\ref{dcl.enum}} can be converted to a prvalue of its underlying type. Moreover,
 if integral promotion can be applied to its underlying type, a prvalue of an unscoped
 enumeration type whose underlying type is fixed can also be converted to a prvalue of
 the promoted underlying type.
diff --git a/source/declarations.tex b/source/declarations.tex
index 397ab78..9faa82c 100644
--- a/source/declarations.tex
+++ b/source/declarations.tex
@@ -1851,7 +1851,7 @@ in the \grammarterm{new-type-id} or \grammarterm{type-id}
 of a \grammarterm{new-expression}\iref{expr.new},
 or
 as the \grammarterm{simple-type-specifier}
-in an explicit type conversion (functional notation)\iref{expr.type.conv}.
+in an \link{explicit type conversion (functional notation)}{\ref{expr.type.conv}}.
 A placeholder for a deduced class type
 shall not appear in any other context.
 
@@ -2275,7 +2275,7 @@ or in a namespace scope\iref{basic.scope.namespace}.
 \pnum
 In a \grammarterm{named-namespace-definition},
 the \grammarterm{identifier} is the name of the namespace.
-If the \grammarterm{identifier}, when looked up\iref{basic.lookup.unqual},
+If the \grammarterm{identifier}, when \link{looked up}{\ref{basic.lookup.unqual}},
 refers to a \grammarterm{namespace-name} (but not a \grammarterm{namespace-alias})
 that was introduced in the namespace
 in which the \grammarterm{named-namespace-definition} appears
@@ -2501,8 +2501,8 @@ If a friend declaration in a non-local class first declares a
 class, function, class template or function template\footnote{this implies that the name of the class or function is unqualified.}
 the friend is a member of the innermost enclosing
 namespace. The friend declaration does not by itself make the name
-visible to unqualified lookup\iref{basic.lookup.unqual} or qualified
-lookup\iref{basic.lookup.qual}. \begin{note} The name of the friend will be
+visible to \link{unqualified lookup}{\ref{basic.lookup.unqual}} or \link{qualified
+lookup}{\ref{basic.lookup.qual}}. \begin{note} The name of the friend will be
 visible in its namespace if a matching declaration is provided at namespace
 scope (either before or after the class definition granting friendship).
 \end{note} If a friend
@@ -3742,7 +3742,7 @@ definition of a class (in an
 \grammarterm{class-head}\iref{class}, respectively) and to the
 declaration or definition of an enumeration (in an
 \grammarterm{opaque-enum-declaration} or \grammarterm{enum-head},
-respectively\iref{dcl.enum}).
+respectively).
 An \grammarterm{alignment-specifier} with an ellipsis is a \deflink{pack expansion}{\ref{temp.variadic}}.
 
 \pnum
@@ -3760,7 +3760,7 @@ declaration, the program is ill-formed.
 \pnum
 An \grammarterm{alignment-specifier} of the form
 \tcode{alignas(} \grammarterm{type-id} \tcode{)} has the same
-effect as \tcode{alignas(\brk{}alignof(} \grammarterm{type-id}~\tcode{))}\iref{expr.alignof}.
+effect as \tcode{alignas(\brk{}\link{alignof}{expr.alignof}(} \grammarterm{type-id}~\tcode{))}.
 
 \pnum
 The alignment requirement of an entity is the strictest nonzero alignment
@@ -4116,7 +4116,7 @@ A nodiscard call is a function call expression that
 calls a function previously declared \tcode{nodiscard}, or
 whose return type is a possibly cv-qualified class or enumeration type
 marked \tcode{nodiscard}. Appearance of a nodiscard call as
-a potentially-evaluated discarded-value expression\iref{expr.prop}
+a potentially-evaluated \deflink{discarded-value expression}{\ref{expr.prop}}
 is discouraged unless explicitly cast to \tcode{void}.
 Implementations should issue a warning in such cases.
 This is typically because discarding the return value
diff --git a/source/declarators.tex b/source/declarators.tex
index 3c5f1dc..f70e4df 100644
--- a/source/declarators.tex
+++ b/source/declarators.tex
@@ -3018,7 +3018,7 @@ each element that is not an explicitly initialized element
 is initialized as follows:
 \begin{itemize}
 \item
-If the element has a default member initializer\iref{class.mem},
+If the element has a \deflink{default member initializer}{\ref{class.mem}},
 the element is initialized from that initializer.
 \item
 Otherwise, if the element is not a reference, the element
diff --git a/source/expressions.tex b/source/expressions.tex
index 8bfa2ef..081bf22 100644
--- a/source/expressions.tex
+++ b/source/expressions.tex
@@ -378,15 +378,15 @@ An unevaluated operand is not evaluated.
 In an unevaluated operand, a non-static class member may be
 named\iref{expr.prim.id} and naming of objects or functions does not, by
 itself, require that a definition be provided\iref{basic.def.odr}.
-An unevaluated operand is considered a full-expression\iref{intro.execution}.
+An unevaluated operand is considered a \deflink{full-expression}{\ref{intro.execution}}.
 \end{note}
 
 \pnum
 In some contexts, an expression only appears for its side effects. Such an
 expression is called a \defn{discarded-value expression}.
-The array-to-pointer\iref{conv.array}
-and function-to-pointer\iref{conv.func} standard conversions are not
-applied. The lvalue-to-rvalue conversion\iref{conv.lval} is applied
+The \link{array-to-pointer}{\ref{conv.array}}
+and \link{function-to-pointer}{\ref{conv.func}} standard conversions are not
+applied. The \link{lvalue-to-rvalue}{\ref{conv.lval}} conversion is applied
 if and only if
 the expression is a glvalue of volatile-qualified type and it is one of the
 following:
@@ -395,13 +395,13 @@ following:
 \item \tcode{(} \grammarterm{expression} \tcode{)}, where
   \grammarterm{expression} is one of these expressions,
 \item \grammarterm{id-expression}\iref{expr.prim.id},
-\item subscripting\iref{expr.sub},
-\item class member access\iref{expr.ref},
-\item indirection\iref{expr.unary.op},
-\item pointer-to-member operation\iref{expr.mptr.oper},
-\item conditional expression\iref{expr.cond} where both the second and the
+\item \link{subscripting}{\ref{expr.sub}},
+\item \link{class member access}{\ref{expr.ref}},
+\item \deflink{indirection}{\ref{expr.unary.op}},
+\item \link{pointer-to-member operation}{\ref{expr.mptr.oper}},
+\item \link{conditional expression}{\ref{expr.cond}} where both the second and the
       third operands are one of these expressions, or
-\item comma expression\iref{expr.comma} where the right operand is one of
+\item \link{comma expression}{\ref{expr.comma}} where the right operand is one of
       these expressions.
 \end{itemize}
 
@@ -409,7 +409,7 @@ following:
 above covers only operators with built-in meaning.
 \end{note}
 If the (possibly converted) expression is a prvalue,
-the temporary materialization conversion\iref{conv.rval} is applied.
+the \link{temporary materialization conversion}{\ref{conv.rval}} is applied.
 \begin{note}
 If the expression is an lvalue of
 class type, it must have a volatile copy constructor to initialize the
@@ -427,7 +427,7 @@ This pattern is called the \defnx{usual arithmetic conversions}{conversion!usual
 which are defined as follows:
 
 \begin{itemize}
-\item If either operand is of scoped enumeration type\iref{dcl.enum}, no conversions
+\item If either operand is of \deflinkx{scoped enumeration type}{enumeration!scoped}{\ref{dcl.enum}}, no conversions
 are performed; if the other operand does not have the same type, the expression is
 ill-formed.
 
@@ -440,7 +440,7 @@ converted to \tcode{double}.
 \item Otherwise, if either operand is \tcode{float}, the other shall be
 converted to \tcode{float}.
 
-\item Otherwise, the integral promotions\iref{conv.prom} shall be
+\item Otherwise, the \deflink{integral promotions}{\ref{conv.prom}} shall be
 performed on both operands.\footnote{As a consequence, operands of type \tcode{bool}, \tcode{char16_t},
 \tcode{char32_t}, \tcode{wchar_t}, or an enumerated type are converted
 to some integral type.}
@@ -633,7 +633,7 @@ static_assert(C<int>);  // OK
 \begin{note}
 A concept's constraints are also considered
 when using a template name\iref{temp.names}
-and during overload resolution\iref{over},
+and during \deflink{overload resolution}{\ref{over}},
 and they are compared
 during the the partial ordering of constraints\iref{temp.constr.order}.
 \end{note}
@@ -659,7 +659,7 @@ In each case, the constraints of \tcode{f} are not satisfied.
 In the declaration of \tcode{p2},
 those constraints are required to be satisfied
 even though
-\tcode{f} is an unevaluated operand\iref{expr.prop}.
+\tcode{f} is an \deflink{unevaluated operand}{\ref{expr.prop}}.
 \end{example}
 
 \rSec3[expr.prim.id.unqual]{Unqualified names}
@@ -789,7 +789,7 @@ A \grammarterm{typedef-name} that names a class is a
 \pnum
 The \grammarterm{nested-name-specifier} \tcode{::} names the global namespace.
 A \grammarterm{nested-name-specifier} that names a
-namespace\iref{basic.namespace}, optionally followed by the keyword
+\link{namespace}{\ref{basic.namespace}}, optionally followed by the keyword
 \tcode{template}\iref{temp.names}, and then followed by the name of a member
 of that namespace (or the name of a member of a namespace made visible by a
 \grammarterm{using-directive}), is a
@@ -909,7 +909,7 @@ scope, class scope, or namespace scope that contains the corresponding
 \grammarterm{lambda-expression}. \begin{note} This determines the set of namespaces and
 classes associated with the closure type\iref{basic.lookup.argdep}. The parameter
 types of a \grammarterm{lambda-declarator} do not affect these associated namespaces and
-classes. \end{note} The closure type is not an aggregate type\iref{dcl.init.aggr}.
+classes. \end{note} The closure type is not an \deflink{aggregate}{\ref{dcl.init.aggr}} type.
 An implementation may define the closure type differently from what
 is described below provided this does not alter the observable behavior of the program
 other than by changing:
@@ -1033,7 +1033,7 @@ static_assert(add(one)(one)() == monoid(2)()); // OK
 \end{example}
 
 \pnum
-The function call operator or operator template may be constrained\iref{temp.constr.decl}
+The function call operator or operator template may be \link{constrained}{\ref{temp.constr.decl}}
 by a \grammarterm{constrained-parameter}\iref{temp.param}, a \grammarterm{requires-clause}\iref{temp},
 or a trailing \grammarterm{requires-clause}\iref{dcl.decl}.
 \begin{example}
@@ -1207,9 +1207,9 @@ implicitly-declared destructor\iref{class.dtor}.
 
 \pnum
 A member of a closure type shall not be
-explicitly instantiated\iref{temp.explicit},
-explicitly specialized\iref{temp.expl.spec}, or
-named in a friend declaration\iref{class.friend}.
+\link{explicitly instantiated}{\ref{temp.explicit}},
+\link{explicitly specialized}{\ref{temp.expl.spec}}, or
+named in a \link{friend declaration}{\ref{class.friend}}.
 
 \rSec3[expr.prim.lambda.capture]{Captures}%
 
@@ -1305,7 +1305,7 @@ any other
 
 \pnum
 The \grammarterm{identifier} in a \grammarterm{simple-capture} is looked up using the
-usual rules for unqualified name lookup\iref{basic.lookup.unqual}; each such lookup
+usual rules for \link{unqualified name lookup}{\ref{basic.lookup.unqual}}; each such lookup
 shall find a local entity.
 The \grammarterm{simple-capture}{s} \tcode{this} and \tcode{* this}
 denote the local entity \tcode{*this}.
@@ -1741,7 +1741,7 @@ bool f(Args ...args) {
 \pnum
 A \grammarterm{requires-expression} provides a concise way to express
 requirements on template arguments
-that can be checked by name lookup\iref{basic.lookup}
+that can be checked by \link{name lookup}{\ref{basic.lookup}}
 or by checking properties of types and expressions.
 
 \begin{bnf}
@@ -1777,7 +1777,7 @@ or by checking properties of types and expressions.
 A \grammarterm{requires-expression} is a prvalue of type \tcode{bool}
 whose value is described below.
 Expressions appearing within a \grammarterm{requirement-body}
-are unevaluated operands\iref{expr.prop}.
+are \deflinkx{unevaluated operands}{unevaluated operand}{\ref{expr.prop}}.
 
 \pnum
 \begin{example}
@@ -1875,7 +1875,7 @@ the validity of an \grammarterm{expression}.
 \begin{note}
 The enclosing \grammarterm{requires-expression} will evaluate to \tcode{false}
 if substitution of template arguments into the \grammarterm{expression} fails.
-The \grammarterm{expression} is an unevaluated operand\iref{expr.prop}.
+The \grammarterm{expression} is an \deflink{unevaluated operand}{\ref{expr.prop}}.
 \end{note}
 \begin{example}
 \begin{codeblock}
@@ -1942,7 +1942,7 @@ semantic properties proceed in the following order:
 into the \grammarterm{expression} is performed.
 
 \item If the \tcode{noexcept} specifier is present,
-\tcode{E} shall not be a potentially-throwing expression\iref{except.spec}.
+\tcode{E} shall not be a \deflinkx{potentially-throwing expression}{potentially-throwing!expression}{\ref{except.spec}}.
 
 \item If the \grammarterm{return-type-requirement} is present, then:
 
@@ -2062,7 +2062,7 @@ template<typename T> concept D = requires (T t) {
 \end{example}
 
 \pnum
-A local parameter shall only appear as an unevaluated operand\iref{expr.prop}
+A local parameter shall only appear as an \deflink{unevaluated operand}{\ref{expr.prop}}
 within the \grammarterm{constraint-expression}.
 \begin{example}
 \begin{codeblock}
@@ -2798,7 +2798,7 @@ of the program. Whether or not the destructor is called for the
 
 \pnum
 When \tcode{typeid} is applied to a glvalue expression whose type is a
-\deflink{polymorphic class}{\ref{class.virtual}} type, the result refers to a
+\deflinkx{polymorphic class}{class!polymorphic}{\ref{class.virtual}} type, the result refers to a
 \tcode{std::type_info} object representing the type of the \deflink{most derived
 object}{\ref{intro.object}} (that is, the dynamic type) to which the
 glvalue refers. If the glvalue expression is obtained by applying the
@@ -2994,7 +2994,7 @@ constness}{casting away constness}{\ref{expr.const.cast}}, and the following add
 for specific cases:
 
 \pnum
-A value of a \link{scoped enumeration type}{\ref{dcl.enum}} can be explicitly converted to an
+A value of a \deflinkx{scoped enumeration type}{enumeration!scoped}{\ref{dcl.enum}} can be explicitly converted to an
 integral type. When that type is \cv{}~\tcode{bool}, the resulting value is
 \tcode{false} if the original value is zero and \tcode{true} for all other
 values. For the remaining integral types, the value is unchanged if the
@@ -4693,7 +4693,7 @@ left-to-right.
 \pnum
 The operands of \tcode{*} and \tcode{/} shall have arithmetic or unscoped
 enumeration type; the operands of \tcode{\%} shall have integral or unscoped
-enumeration type. The usual arithmetic conversions\iref{expr.arith.conv} are performed on the
+enumeration type. The \link{usual arithmetic conversions}{\ref{expr.arith.conv}} are performed on the
 operands and determine the type of the result.
 
 \pnum
@@ -4718,7 +4718,7 @@ of both \tcode{a/b} and \tcode{a\%b} is undefined.
 
 \pnum
 The additive operators \tcode{+} and \tcode{-} group left-to-right. The
-usual arithmetic conversions\iref{expr.arith.conv} are performed for operands of arithmetic or
+\link{usual arithmetic conversions}{\ref{expr.arith.conv}} are performed for operands of arithmetic or
 enumeration type.
 
 \indextext{operator!addition}%
@@ -4902,12 +4902,12 @@ and the other is not, the program is ill-formed.
 
 \pnum
 If both operands have arithmetic types,
-the usual arithmetic conversions\iref{expr.arith.conv} are applied to the operands.
+the \link{usual arithmetic conversions}{\ref{expr.arith.conv}} are applied to the operands.
 Then:
 
 \begin{itemize}
 \item
-If a narrowing conversion\iref{dcl.init.list} is required,
+If a \deflink{narrowing conversion}{\ref{dcl.init.list}} is required,
 other than from an integral type to a floating point type,
 the program is ill-formed.
 
@@ -4945,31 +4945,31 @@ and applying \tcode{<=>} to the converted operands.
 
 \pnum
 If at least one of the operands is of pointer type,
-array-to-pointer conversions\iref{conv.array},
-pointer conversions\iref{conv.ptr},
-function pointer conversions\iref{conv.fctptr},
+\link{array-to-pointer conversions}{\ref{conv.array}},
+\link{pointer conversions}{\ref{conv.ptr}},
+\link{function pointer conversions}{\ref{conv.fctptr}},
 and
-qualification conversions\iref{conv.qual}
+\link{qualification conversions}{\ref{conv.qual}}
 are performed on both operands
-to bring them to their composite pointer type\iref{expr.type}.
+to bring them to their \deflink{composite pointer type}{\ref{expr.type}}.
 %
 If at least one of the operands is of pointer-to-member type,
-pointer-to-member conversions\iref{conv.mem}
+\link{pointer-to-member conversions}{\ref{conv.mem}}
 and
-qualification conversions\iref{conv.qual}
+\link{qualification conversions}{\ref{conv.qual}}
 are performed on both operands
-to bring them to their composite pointer type\iref{expr.type}.
+to bring them to their \deflink{composite pointer type}{\ref{expr.type}}.
 %
 If both operands are null pointer constants,
 but not both of integer type,
-pointer conversions\iref{conv.ptr}
+\link{pointer conversions}{\ref{conv.ptr}}
 are performed on both operands
-to bring them to their composite pointer type\iref{expr.type}.
+to bring them to their \deflink{composite pointer type}{\ref{expr.type}}.
 %
 In all cases, after the conversions, the operands shall have the same type.
 \begin{note}
 If both of the operands are arrays,
-array-to-pointer conversions\iref{conv.array} are not applied.
+\link{array-to-pointer conversions}{\ref{conv.array}} are not applied.
 \end{note}
 
 \pnum
@@ -5004,7 +5004,7 @@ Otherwise, the result is unspecified.
 Otherwise, the program is ill-formed.
 
 \pnum
-The five comparison category types\iref{cmp.categories}
+The five \deflink{comparison category types}{\ref{cmp.categories}}
 (the types
 \tcode{std::strong_ordering},
 \tcode{std::strong_equality},
@@ -5016,8 +5016,8 @@ if the header
 \indexhdr{compare}\tcode{<compare>}
 is not included prior to a use of such a class type --
 even an implicit use in which the type is not named
-(e.g., via the \tcode{auto} specifier\iref{dcl.spec.auto}
-in a defaulted three-way comparison\iref{class.spaceship}
+(e.g., via the \link{\tcode{auto} specifier}{\ref{dcl.spec.auto}}
+in a defaulted \link{three-way comparison}{\ref{class.spaceship}}
 or use of the built-in operator) -- the program is ill-formed.
 
 \rSec2[expr.rel]{Relational operators}%
@@ -5228,8 +5228,8 @@ compare unequal, the result is \tcode{false} for the \tcode{==} operator and
 operators is unspecified.
 
 \pnum
-If both operands are of arithmetic or enumeration type, the usual arithmetic
-conversions\iref{expr.arith.conv} are performed on both operands; each of the operators shall yield
+If both operands are of arithmetic or enumeration type, the \link{usual arithmetic
+conversions}{\ref{expr.arith.conv}} are performed on both operands; each of the operators shall yield
 \tcode{true} if the specified relationship is true and \tcode{false} if it is
 false.
 
@@ -5246,7 +5246,7 @@ false.
 \end{bnf}
 
 \pnum
-The usual arithmetic conversions\iref{expr.arith.conv} are performed; the result is the
+The \link{usual arithmetic conversions}{\ref{expr.arith.conv}} are performed; the result is the
 bitwise \logop{AND} function of the operands. The operator
 applies only to integral or unscoped enumeration operands.
 
@@ -5262,7 +5262,7 @@ applies only to integral or unscoped enumeration operands.
 \end{bnf}
 
 \pnum
-The usual arithmetic conversions\iref{expr.arith.conv} are performed; the result is the
+The \link{usual arithmetic conversions}{\ref{expr.arith.conv}} are performed; the result is the
 bitwise exclusive \logop{OR} function of the operands. The
 operator applies only to integral or unscoped enumeration operands.
 
@@ -5278,7 +5278,7 @@ operator applies only to integral or unscoped enumeration operands.
 \end{bnf}
 
 \pnum
-The usual arithmetic conversions\iref{expr.arith.conv} are performed; the result is the
+The \link{usual arithmetic conversions}{\ref{expr.arith.conv}} are performed; the result is the
 bitwise inclusive \logop{OR} function of its operands. The
 operator applies only to integral or unscoped enumeration operands.
 
@@ -5481,7 +5481,7 @@ of the following shall hold:
 that type and the result object is initialized using the selected operand.
 
 \item The second and third operands have arithmetic or enumeration type;
-the usual arithmetic conversions\iref{expr.arith.conv} are performed to bring them to a common
+the \link{usual arithmetic conversions}{\ref{expr.arith.conv}} are performed to bring them to a common
 type, and the result is of that type.
 
 \item One or both of the second and third operands have pointer type;
@@ -5489,7 +5489,7 @@ type, and the result is of that type.
 \link{function pointer conversions}{\ref{conv.fctptr}}, and
 \link{qualification conversions}{\ref{conv.qual}}
 are performed to bring them to their
-composite pointer type\iref{expr.prop}. The result is of the composite
+\deflink{composite pointer type}{\ref{expr.prop}}. The result is of the composite
 pointer type.
 
 \item One or both of the second and third operands have pointer-to-member type;
@@ -6010,7 +6010,7 @@ implicit conversion sequence contains only
 \item \link{array-to-pointer conversions}{\ref{conv.array}},
 \item \link{function-to-pointer conversions}{\ref{conv.func}},
 \item \link{qualification conversions}{\ref{conv.qual}},
-\item \link{integral promotions}{\ref{conv.prom}},
+\item \deflink{integral promotions}{\ref{conv.prom}},
 \item \link{integral conversions}{\ref{conv.integral}} other than
 \deflinkx{narrowing conversions}{narrowing conversion}{\ref{dcl.init.list}},
 \item \deflinkx{null pointer conversions}{null pointer conversion}{\ref{conv.ptr}} from \tcode{std::nullptr_t},
diff --git a/source/iostreams.tex b/source/iostreams.tex
index 8abebe5..f693db9 100644
--- a/source/iostreams.tex
+++ b/source/iostreams.tex
@@ -453,10 +453,11 @@ Concurrent access to a synchronized\iref{ios.members.static} standard iostream o
 
 \rSec2[narrow.stream.objects]{Narrow stream objects}
 
-\indexlibrary{\idxcode{cin}}%
+\begin{indexed}{\indexlibrary{\idxcode{cin}}}
 \begin{itemdecl}
 istream cin;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -480,10 +481,11 @@ Its state is otherwise the same as required for
 \linkx{\tcode{basic_ios<char>::init}}{basic_ios!init}{\ref{basic.ios.cons}}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{cout}}%
+\begin{indexed}{\indexlibrary{\idxcode{cout}}}
 \begin{itemdecl}
 ostream cout;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -497,10 +499,11 @@ declared in
 \link{\tcode{<cstdio>}}{\ref{cstdio.syn}}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{cerr}}%
+\begin{indexed}{\indexlibrary{\idxcode{cerr}}}
 \begin{itemdecl}
 ostream cerr;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -523,10 +526,11 @@ Its state is otherwise the same as required for
 \linkx{\tcode{basic_ios<char>::init}}{basic_ios!init}{\ref{basic.ios.cons}}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{clog}}%
+\begin{indexed}{\indexlibrary{\idxcode{clog}}}
 \begin{itemdecl}
 ostream clog;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -542,10 +546,11 @@ declared in
 
 \rSec2[wide.stream.objects]{Wide stream objects}
 
-\indexlibrary{\idxcode{wcin}}%
+\begin{indexed}{\indexlibrary{\idxcode{wcin}}}
 \begin{itemdecl}
 wistream wcin;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -569,10 +574,11 @@ Its state is otherwise the same as required for
 \linkx{\tcode{basic_ios<wchar_t>::init}}{basic_ios!init}{\ref{basic.ios.cons}}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{wcout}}%
+\begin{indexed}{\indexlibrary{\idxcode{wcout}}}
 \begin{itemdecl}
 wostream wcout;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -586,10 +592,11 @@ declared in
 \link{\tcode{<cstdio>}}{\ref{cstdio.syn}}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{wcerr}}%
+\begin{indexed}{\indexlibrary{\idxcode{wcerr}}}
 \begin{itemdecl}
 wostream wcerr;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -612,10 +619,11 @@ Its state is otherwise the same as required for
 \linkx{\tcode{basic_ios<wchar_t>::init}}{basic_ios!init}{\ref{basic.ios.cons}}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{wclog}}%
+\begin{indexed}{\indexlibrary{\idxcode{wclog}}}
 \begin{itemdecl}
 wostream wclog;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -704,10 +712,11 @@ namespace std {
 
 \rSec2[stream.types]{Types}
 
-\indexlibrary{\idxcode{streamoff}}%
+\begin{indexed}{\indexlibrary{\idxcode{streamoff}}}
 \begin{itemdecl}
 using streamoff = @\impdef@;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -715,10 +724,11 @@ The type \tcode{streamoff} is a synonym for one of the signed basic integral typ
 sufficient size to represent the maximum possible file size for the operating system.\footnote{Typically \tcode{long long}.}
 \end{itemdescr}
 
-\indexlibrary{\idxcode{streamsize}}%
+\begin{indexed}{\indexlibrary{\idxcode{streamsize}}}
 \begin{itemdecl}
 using streamsize = @\impdef@;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -732,7 +742,7 @@ is used in most places where ISO C would use \tcode{size_t}.}
 \end{itemdescr}
 
 \rSec2[ios.base]{Class \tcode{ios_base}}
-\indexlibrary{\idxcode{ios_base}}%
+\begin{indexed}{\indexlibrary{\idxcode{ios_base}}}
 \begin{codeblock}
 namespace std {
   class ios_base {
@@ -828,6 +838,7 @@ namespace std {
   };
 }
 \end{codeblock}
+\end{indexed}
 
 \pnum
 \tcode{ios_base}
@@ -919,10 +930,11 @@ reported by the operating system. Errors arising from within the stream library
 typically be reported as \tcode{error_code(io_errc::stream,
 iostream_category())}. \end{note}
 
-\indexlibrary{\idxcode{ios_base::failure}!constructor}%
+\begin{indexed}{\indexlibrary{\idxcode{ios_base::failure}!constructor}}
 \begin{itemdecl}
 explicit failure(const string& msg, const error_code& ec = io_errc::stream);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1044,10 +1056,11 @@ the value zero.
 
 \rSec4[ios::openmode]{Type \tcode{ios_base::openmode}}
 
-\indexlibrarymember{openmode}{ios_base}%
+\begin{indexed}{\indexlibrarymember{openmode}{ios_base}}
 \begin{itemdecl}
 using openmode = @\textit{T3}@;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1074,10 +1087,11 @@ It contains the elements indicated in \tref{iostreams.openmode.effects}.
 
 \rSec4[ios::seekdir]{Type \tcode{ios_base::seekdir}}
 
-\indexlibrarymember{seekdir}{ios_base}%
+\begin{indexed}{\indexlibrarymember{seekdir}{ios_base}}
 \begin{itemdecl}
 using seekdir = @\textit{T4}@;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1148,10 +1162,11 @@ Constructs and initializes the objects \tcode{cin}, \tcode{cout}, \tcode{cerr},
 they have not already been constructed and initialized.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{ios_base::Init}!destructor}%
+\begin{indexed}{\indexlibrary{\idxcode{ios_base::Init}!destructor}}
 \begin{itemdecl}
 ~Init();
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1306,10 +1321,11 @@ The previous value of
 
 \rSec3[ios.base.locales]{\tcode{ios_base} functions}
 
-\indexlibrarymember{imbue}{ios_base}%
+\begin{indexed}{\indexlibrarymember{imbue}{ios_base}}
 \begin{itemdecl}
 locale imbue(const locale& loc);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1973,12 +1989,12 @@ locale imbue(const locale& loc);
 \pnum
 \effects
 Calls
-\tcode{ios_base::imbue(loc)}\iref{ios.base.locales}
+\liblinkx{\tcode{ios_base::imbue}}{ios_base!imbue}{\ref{ios.base.locales}}\tcode{(loc)}
 and
 if
 \tcode{rdbuf() != 0}
 then
-\tcode{rdbuf()->pubimbue(loc)}\iref{streambuf.locales}.
+\tcode{rdbuf()->}\liblinkx{\tcode{pubimbue}}{basic_streambuf!pubimbue}{\ref{streambuf.locales}}\tcode{(loc)}.
 
 \pnum
 \returns
@@ -2697,7 +2713,7 @@ Calls
 Each function specified in this subclause
 is a designated addressable function\iref{namespace.std}.
 
-\indexlibrary{\idxcode{fixed}}%
+\begin{indexed}{\indexlibrary{\idxcode{fixed}}}
 \begin{itemdecl}
 ios_base& fixed(ios_base& str);
 \end{itemdecl}
@@ -3119,10 +3135,11 @@ None.
 
 \rSec4[streambuf.locales]{Locales}
 
-\indexlibrarymember{pubimbue}{basic_streambuf}%
+\begin{indexed}{\indexlibrarymember{pubimbue}{basic_streambuf}}
 \begin{itemdecl}
 locale pubimbue(const locale& loc);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -3140,10 +3157,11 @@ Previous value of
 \tcode{getloc()}.
 \end{itemdescr}
 
-\indexlibrarymember{getloc}{basic_streambuf}%
+\begin{indexed}{\indexlibrarymember{getloc}{basic_streambuf}}
 \begin{itemdecl}
 locale getloc() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5561,7 +5579,7 @@ Each instantiation of the function template
 specified in this subclause
 is a designated addressable function\iref{namespace.std}.
 
-\indexlibrary{\idxcode{ws}}%
+\begin{indexed}{\indexlibrary{\idxcode{ws}}}
 \begin{itemdecl}
 template<class charT, class traits>
   basic_istream<charT, traits>& ws(basic_istream<charT, traits>& is);
@@ -6639,7 +6657,7 @@ Each instantiation of any of the function templates
 specified in this subclause
 is a designated addressable function\iref{namespace.std}.
 
-\indexlibrary{\idxcode{endl}}%
+\begin{indexed}{\indexlibrary{\idxcode{endl}}}
 \begin{itemdecl}
 template<class charT, class traits>
   basic_ostream<charT, traits>& endl(basic_ostream<charT, traits>& os);
diff --git a/source/iterators.tex b/source/iterators.tex
index 4aa6293..ed89c3f 100644
--- a/source/iterators.tex
+++ b/source/iterators.tex
@@ -3011,10 +3011,11 @@ an end-of-stream iterator is constructed if and only if
 the exposition-only member \tcode{sbuf_} is initialized with a null pointer value.
 
 
-\indexlibrary{\idxcode{istreambuf_iterator}!constructor}%
+\begin{indexed}{\indexlibrary{\idxcode{istreambuf_iterator}!constructor}}
 \begin{itemdecl}
 constexpr istreambuf_iterator() noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -3022,11 +3023,11 @@ constexpr istreambuf_iterator() noexcept;
 Initializes \tcode{sbuf_} with \tcode{nullptr}.
 \end{itemdescr}
 
-
-\indexlibrary{\idxcode{istreambuf_iterator}!constructor}%
+\begin{indexed}{\indexlibrary{\idxcode{istreambuf_iterator}!constructor}}
 \begin{itemdecl}
 istreambuf_iterator(istream_type& s) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -3034,11 +3035,11 @@ istreambuf_iterator(istream_type& s) noexcept;
 Initializes \tcode{sbuf_} with \tcode{s.rdbuf()}.
 \end{itemdescr}
 
-
-\indexlibrary{\idxcode{istreambuf_iterator}!constructor}%
+\begin{indexed}{\indexlibrary{\idxcode{istreambuf_iterator}!constructor}}
 \begin{itemdecl}
 istreambuf_iterator(streambuf_type* s) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -3046,11 +3047,11 @@ istreambuf_iterator(streambuf_type* s) noexcept;
 Initializes \tcode{sbuf_} with \tcode{s}.
 \end{itemdescr}
 
-
-\indexlibrary{\idxcode{istreambuf_iterator}!constructor}%
+\begin{indexed}{\indexlibrary{\idxcode{istreambuf_iterator}!constructor}}
 \begin{itemdecl}
 istreambuf_iterator(const proxy& p) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -3185,11 +3186,11 @@ It is not possible to get a character value out of the output iterator.
 
 \rSec3[ostreambuf.iter.cons]{\tcode{ostreambuf_iterator} constructors}
 
-
-\indexlibrary{\idxcode{ostreambuf_iterator}!constructor}%
+\begin{indexed}{\indexlibrary{\idxcode{ostreambuf_iterator}!constructor}}
 \begin{itemdecl}
 ostreambuf_iterator(ostream_type& s) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -3202,11 +3203,11 @@ shall not be a null pointer.
 Initializes \tcode{sbuf_} with \tcode{s.rdbuf()}.
 \end{itemdescr}
 
-
-\indexlibrary{\idxcode{ostreambuf_iterator}!constructor}%
+\begin{indexed}{\indexlibrary{\idxcode{ostreambuf_iterator}!constructor}}
 \begin{itemdecl}
 ostreambuf_iterator(streambuf_type* s) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -3466,10 +3467,11 @@ template<class T, size_t N> [[nodiscard]] constexpr bool empty(const T (&array)[
 \pnum \returns \tcode{false}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{empty(initializer_list<E>)}}%
+\begin{indexed}{\indexlibrary{\idxcode{empty(initializer_list<E>)}}}
 \begin{itemdecl}
 template<class E> [[nodiscard]] constexpr bool empty(initializer_list<E> il) noexcept;
 \end{itemdecl}
+\end{indexed}
 \begin{itemdescr}
 \pnum \returns \tcode{il.size() == 0}.
 \end{itemdescr}
diff --git a/source/lib-intro.tex b/source/lib-intro.tex
index 87e2acd..e76983c 100644
--- a/source/lib-intro.tex
+++ b/source/lib-intro.tex
@@ -171,8 +171,8 @@ iostream, and regular expression class templates.
 
 \definition{comparison function}{defns.comparison}
 \indexdefn{function!comparison}%
-operator function\iref{over.oper} for any of the equality\iref{expr.eq} or
-relational\iref{expr.rel} operators
+\deflink{operator function}{\ref{over.oper}} for any of the \link{equality}{\ref{expr.eq}} or
+\link{relational}{\ref{expr.rel}} operators
 
 \definition{component}{defns.component}
 \indexdefn{component}%
@@ -216,8 +216,8 @@ semantics
 
 \definition{direct-non-list-initialization}{defns.direct-non-list-init}
 \indexdefn{direct-non-list-initialization}%
-direct-initialization\iref{dcl.init}
-that is not list-initialization\iref{dcl.init.list}
+\deflink{direct-initialization}{\ref{dcl.init}}
+that is not \deflink{list-initialization}{\ref{dcl.init.list}}
 
 \definition{handler function}{defns.handler}
 \indexdefn{function!handler}%
@@ -274,7 +274,7 @@ value
 
 \definition{observer function}{defns.observer}
 \indexdefn{function!observer}%
-class member function\iref{class.mfct} that accesses the state of an object of the class
+\link{class member function}{\ref{class.mfct}} that accesses the state of an object of the class
 but does not alter that state
 
 \begin{defnote}
diff --git a/source/limits.tex b/source/limits.tex
index e0f6c5e..cfb6f93 100644
--- a/source/limits.tex
+++ b/source/limits.tex
@@ -129,6 +129,6 @@ during template argument deduction\iref{temp.deduct} [1\,024].
 \item%
 Handlers per try block\iref{except.handle} [256].
 \item%
-Number of placeholders\iref{func.bind.place} [10].
+Number of \link{placeholders}{\ref{func.bind.place}} [10].
 
 \end{itemize}
diff --git a/source/numerics.tex b/source/numerics.tex
index b5c26f3..af929a6 100644
--- a/source/numerics.tex
+++ b/source/numerics.tex
@@ -2815,10 +2815,11 @@ explicit linear_congruential_engine(result_type s = default_seed);
  otherwise sets the engine's state to $\tcode{s} \bmod m$.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{linear_congruential_engine}!constructor}%
+\begin{indexed}{\indexlibrary{\idxcode{linear_congruential_engine}!constructor}}
 \begin{itemdecl}
 template<class Sseq> explicit linear_congruential_engine(Sseq& q);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\effects Constructs a \tcode{linear_congruential_engine} object.
@@ -2971,10 +2972,11 @@ of \state{x}{i}
 consists of the values of $X_{i - n}, \dotsc, X_{i - 1}$,
 in that order.
 
-\indexlibrary{\idxcode{mersenne_twister_engine}!constructor}%
+\begin{indexed}{\indexlibrary{\idxcode{mersenne_twister_engine}!constructor}}
 \begin{itemdecl}
 explicit mersenne_twister_engine(result_type value = default_seed);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\effects Constructs a \tcode{mersenne_twister_engine} object.
@@ -2992,10 +2994,11 @@ Then, iteratively for $i = 1 - n, \dotsc, -1$, sets $X_i$ to
 \pnum\complexity \bigoh{n}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{mersenne_twister_engine}!constructor}%
+\begin{indexed}{\indexlibrary{\idxcode{mersenne_twister_engine}!constructor}}
 \begin{itemdecl}
 template<class Sseq> explicit mersenne_twister_engine(Sseq& q);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\effects Constructs a \tcode{mersenne_twister_engine} object.
@@ -3120,10 +3123,11 @@ consists of the values of
 in that order, followed by $c$.
 
 
-\indexlibrary{\idxcode{subtract_with_carry_engine}!constructor}%
+\begin{indexed}{\indexlibrary{\idxcode{subtract_with_carry_engine}!constructor}}
 \begin{itemdecl}
 explicit subtract_with_carry_engine(result_type value = default_seed);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\effects Constructs a \tcode{subtract_with_carry_engine} object.
@@ -3153,10 +3157,11 @@ linear_congruential_engine<result_type,
 
 
 
-\indexlibrary{\idxcode{subtract_with_carry_engine}!constructor}%
+\begin{indexed}{\indexlibrary{\idxcode{subtract_with_carry_engine}!constructor}}
 \begin{itemdecl}
 template<class Sseq> explicit subtract_with_carry_engine(Sseq& q);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\effects Constructs a \tcode{subtract_with_carry_engine} object.
@@ -4696,10 +4701,11 @@ template<class IntType = int>
 \end{codeblock}
 
 
-\indexlibrary{\idxcode{negative_binomial_distribution}!constructor}%
+\begin{indexed}{\indexlibrary{\idxcode{negative_binomial_distribution}!constructor}}
 \begin{itemdecl}
 explicit negative_binomial_distribution(IntType k = 1, double p = 0.5);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\requires
@@ -4721,10 +4727,11 @@ IntType k() const;
  with which the object was constructed.
 \end{itemdescr}
 
-\indexlibrarymember{p}{negative_binomial_distribution}%
+\begin{indexed}{\indexlibrarymember{p}{negative_binomial_distribution}}
 \begin{itemdecl}
 double p() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\returns The value of the \tcode{p} parameter
@@ -4809,10 +4816,11 @@ explicit poisson_distribution(double mean = 1.0);
 \tcode{mean} corresponds to the parameter of the distribution.
 \end{itemdescr}
 
-\indexlibrarymember{mean}{poisson_distribution}%
+\begin{indexed}{\indexlibrarymember{mean}{poisson_distribution}}
 \begin{itemdecl}
 double mean() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\returns The value of the \tcode{mean} parameter
@@ -4865,10 +4873,11 @@ template<class RealType = double>
 \end{codeblock}
 
 
-\indexlibrary{\idxcode{exponential_distribution}!constructor}%
+\begin{indexed}{\indexlibrary{\idxcode{exponential_distribution}!constructor}}
 \begin{itemdecl}
 explicit exponential_distribution(RealType lambda = 1.0);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -4879,10 +4888,11 @@ explicit exponential_distribution(RealType lambda = 1.0);
 \tcode{lambda} corresponds to the parameter of the distribution.
 \end{itemdescr}
 
-\indexlibrarymember{lambda}{exponential_distribution}%
+\begin{indexed}{\indexlibrarymember{lambda}{exponential_distribution}}
 \begin{itemdecl}
 RealType lambda() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\returns The value of the \tcode{lambda} parameter
@@ -4907,7 +4917,7 @@ the probability density function%
      \frac{e^{-x/\beta}}{\beta^{\alpha} \cdot \Gamma(\alpha)} \, \cdot \, x^{\, \alpha-1}
      \text{ .} \]
 
-\indexlibrary{\idxcode{gamma_distribution}}%
+\begin{indexed}{\indexlibrary{\idxcode{gamma_distribution}}}
 \begin{codeblock}
 template<class RealType = double>
   class gamma_distribution {
@@ -4936,12 +4946,13 @@ template<class RealType = double>
     result_type max() const;
   };
 \end{codeblock}
+\end{indexed}
 
-
-\indexlibrary{\idxcode{gamma_distribution}!constructor}%
+\begin{indexed}{\indexlibrary{\idxcode{gamma_distribution}!constructor}}
 \begin{itemdecl}
 explicit gamma_distribution(RealType alpha = 1.0, RealType beta = 1.0);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -4953,20 +4964,22 @@ explicit gamma_distribution(RealType alpha = 1.0, RealType beta = 1.0);
 correspond to the parameters of the distribution.
 \end{itemdescr}
 
-\indexlibrarymember{alpha}{gamma_distribution}%
+\begin{indexed}{\indexlibrarymember{alpha}{gamma_distribution}}
 \begin{itemdecl}
 RealType alpha() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\returns The value of the \tcode{alpha} parameter
  with which the object was constructed.
 \end{itemdescr}
 
-\indexlibrarymember{beta}{gamma_distribution}%
+\begin{indexed}{\indexlibrarymember{beta}{gamma_distribution}}
 \begin{itemdecl}
 RealType beta() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\returns The value of the \tcode{beta} parameter
@@ -5023,10 +5036,11 @@ template<class RealType = double>
   };
 \end{codeblock}
 
-\indexlibrary{\idxcode{weibull_distribution}!constructor}%
+\begin{indexed}{\indexlibrary{\idxcode{weibull_distribution}!constructor}}
 \begin{itemdecl}
 explicit weibull_distribution(RealType a = 1.0, RealType b = 1.0);
-\end{itemdecl}%
+\end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5038,20 +5052,22 @@ explicit weibull_distribution(RealType a = 1.0, RealType b = 1.0);
 correspond to the respective parameters of the distribution.
 \end{itemdescr}
 
-\indexlibrarymember{a}{weibull_distribution}%
+\begin{indexed}{\indexlibrarymember{a}{weibull_distribution}}
 \begin{itemdecl}
 RealType a() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\returns The value of the \tcode{a} parameter
  with which the object was constructed.
 \end{itemdescr}
 
-\indexlibrarymember{b}{weibull_distribution}%
+\begin{indexed}{\indexlibrarymember{b}{weibull_distribution}}
 \begin{itemdecl}
 RealType b() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\returns The value of the \tcode{b} parameter
@@ -5114,11 +5130,11 @@ template<class RealType = double>
   };
 \end{codeblock}
 
-
-\indexlibrary{\idxcode{extreme_value_distribution}!constructor}%
+\begin{indexed}{\indexlibrary{\idxcode{extreme_value_distribution}!constructor}}
 \begin{itemdecl}
 explicit extreme_value_distribution(RealType a = 0.0, RealType b = 1.0);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5130,20 +5146,22 @@ explicit extreme_value_distribution(RealType a = 0.0, RealType b = 1.0);
 correspond to the respective parameters of the distribution.
 \end{itemdescr}
 
-\indexlibrarymember{a}{extreme_value_distribution}%
+\begin{indexed}{\indexlibrarymember{a}{extreme_value_distribution}}
 \begin{itemdecl}
 RealType a() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\returns The value of the \tcode{a} parameter
  with which the object was constructed.
 \end{itemdescr}
 
-\indexlibrarymember{b}{extreme_value_distribution}%
+\begin{indexed}{\indexlibrarymember{b}{extreme_value_distribution}}
 \begin{itemdecl}
 RealType b() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\returns The value of the \tcode{b} parameter
@@ -5227,11 +5245,11 @@ template<class RealType = double>
   };
 \end{codeblock}
 
-
-\indexlibrary{\idxcode{normal_distribution}!constructor}%
+\begin{indexed}{\indexlibrary{\idxcode{normal_distribution}!constructor}}
 \begin{itemdecl}
 explicit normal_distribution(RealType mean = 0.0, RealType stddev = 1.0);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5243,20 +5261,22 @@ explicit normal_distribution(RealType mean = 0.0, RealType stddev = 1.0);
 correspond to the respective parameters of the distribution.
 \end{itemdescr}
 
-\indexlibrarymember{mean}{normal_distribution}%
+\begin{indexed}{\indexlibrarymember{mean}{normal_distribution}}
 \begin{itemdecl}
 RealType mean() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\returns The value of the \tcode{mean} parameter
  with which the object was constructed.
 \end{itemdescr}
 
-\indexlibrarymember{stddev}{normal_distribution}%
+\begin{indexed}{\indexlibrarymember{stddev}{normal_distribution}}
 \begin{itemdecl}
 RealType stddev() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\returns The value of the \tcode{stddev} parameter
@@ -5328,20 +5348,22 @@ explicit lognormal_distribution(RealType m = 0.0, RealType s = 1.0);
 correspond to the respective parameters of the distribution.
 \end{itemdescr}
 
-\indexlibrarymember{m}{lognormal_distribution}%
+\begin{indexed}{\indexlibrarymember{m}{lognormal_distribution}}
 \begin{itemdecl}
 RealType m() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\returns The value of the \tcode{m} parameter
  with which the object was constructed.
 \end{itemdescr}
 
-\indexlibrarymember{s}{lognormal_distribution}%
+\begin{indexed}{\indexlibrarymember{s}{lognormal_distribution}}
 \begin{itemdecl}
 RealType s() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\returns The value of the \tcode{s} parameter
@@ -5394,11 +5416,11 @@ template<class RealType = double>
   };
 \end{codeblock}
 
-
-\indexlibrary{\idxcode{chi_squared_distribution}!constructor}%
+\begin{indexed}{\indexlibrary{\idxcode{chi_squared_distribution}!constructor}}
 \begin{itemdecl}
 explicit chi_squared_distribution(RealType n = 1);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5409,10 +5431,11 @@ explicit chi_squared_distribution(RealType n = 1);
 \tcode{n} corresponds to the parameter of the distribution.
 \end{itemdescr}
 
-\indexlibrarymember{n}{chi_squared_distribution}%
+\begin{indexed}{\indexlibrarymember{n}{chi_squared_distribution}}
 \begin{itemdecl}
 RealType n() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\returns The value of the \tcode{n} parameter
@@ -5482,20 +5505,22 @@ explicit cauchy_distribution(RealType a = 0.0, RealType b = 1.0);
 correspond to the respective parameters of the distribution.
 \end{itemdescr}
 
-\indexlibrarymember{a}{cauchy_distribution}%
+\begin{indexed}{\indexlibrarymember{a}{cauchy_distribution}}
 \begin{itemdecl}
 RealType a() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\returns The value of the \tcode{a} parameter
  with which the object was constructed.
 \end{itemdescr}
 
-\indexlibrarymember{b}{cauchy_distribution}%
+\begin{indexed}{\indexlibrarymember{b}{cauchy_distribution}}
 \begin{itemdecl}
 RealType b() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\returns The value of the \tcode{b} parameter
@@ -5553,11 +5578,11 @@ template<class RealType = double>
   };
 \end{codeblock}
 
-
-\indexlibrary{\idxcode{fisher_f_distribution}!constructor}%
+\begin{indexed}{\indexlibrary{\idxcode{fisher_f_distribution}!constructor}}
 \begin{itemdecl}
 explicit fisher_f_distribution(RealType m = 1, RealType n = 1);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5569,20 +5594,22 @@ explicit fisher_f_distribution(RealType m = 1, RealType n = 1);
 correspond to the respective parameters of the distribution.
 \end{itemdescr}
 
-\indexlibrarymember{m}{fisher_f_distribution}%
+\begin{indexed}{\indexlibrarymember{m}{fisher_f_distribution}}
 \begin{itemdecl}
 RealType m() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\returns The value of the \tcode{m} parameter
  with which the object was constructed.
 \end{itemdescr}
 
-\indexlibrarymember{n}{fisher_f_distribution}%
+\begin{indexed}{\indexlibrarymember{n}{fisher_f_distribution}}
 \begin{itemdecl}
 RealType n() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\returns The value of the \tcode{n} parameter
@@ -5638,11 +5665,11 @@ template<class RealType = double>
   };
 \end{codeblock}
 
-
-\indexlibrary{\idxcode{student_t_distribution}!constructor}%
+\begin{indexed}{\indexlibrary{\idxcode{student_t_distribution}!constructor}}
 \begin{itemdecl}
 explicit student_t_distribution(RealType n = 1);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5653,10 +5680,11 @@ explicit student_t_distribution(RealType n = 1);
 \tcode{n} corresponds to the parameter of the distribution.
 \end{itemdescr}
 
-\indexlibrarymember{mean}{student_t_distribution}%
+\begin{indexed}{\indexlibrarymember{mean}{student_t_distribution}}
 \begin{itemdecl}
 RealType n() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\returns The value of the \tcode{n} parameter
@@ -5740,10 +5768,11 @@ template<class IntType = int>
   };
 \end{codeblock}
 
-\indexlibrary{\idxcode{discrete_distribution}!constructor}
+\begin{indexed}{\indexlibrary{\idxcode{discrete_distribution}!constructor}}
 \begin{itemdecl}
 discrete_distribution();
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\effects Constructs a \tcode{discrete_distribution} object
diff --git a/source/overloading.tex b/source/overloading.tex
index afcc6d0..706156d 100644
--- a/source/overloading.tex
+++ b/source/overloading.tex
@@ -142,8 +142,8 @@ be overloaded:
 Parameter declarations that differ only in the use of equivalent typedef
 ``types'' are equivalent.
 A
-\tcode{typedef}
-is not a separate type, but only a synonym for another type\iref{dcl.typedef}.
+\link{\tcode{typedef}}{\ref{dcl.typedef}}
+is not a separate type, but only a synonym for another type.
 \begin{example}
 \begin{codeblock}
 typedef int Int;
diff --git a/source/regex.tex b/source/regex.tex
index 6e2caeb..3947d85 100644
--- a/source/regex.tex
+++ b/source/regex.tex
@@ -753,35 +753,22 @@ if the \tcode{ECMAScript} engine is selected.
 
 \indexlibrary{\idxcode{match_flag_type}}%
 \indexlibrary{\idxcode{regex_constants}!\idxcode{match_flag_type}}%
-\indexlibrary{\idxcode{match_default}}%
-\indexlibrary{\idxcode{match_not_bol}}%
-\indexlibrary{\idxcode{match_not_eol}}%
-\indexlibrary{\idxcode{match_not_bow}}%
-\indexlibrary{\idxcode{match_not_eow}}%
-\indexlibrary{\idxcode{match_any}}%
-\indexlibrary{\idxcode{match_not_null}}%
-\indexlibrary{\idxcode{match_continuous}}%
-\indexlibrary{\idxcode{match_prev_avail}}%
-\indexlibrary{\idxcode{format_default}}%
-\indexlibrary{\idxcode{format_sed}}%
-\indexlibrary{\idxcode{format_no_copy}}%
-\indexlibrary{\idxcode{format_first_only}}%
 \begin{codeblock}
 namespace std::regex_constants {
   using match_flag_type = @\textit{T2}@;
-  inline constexpr match_flag_type match_default = {};
-  inline constexpr match_flag_type match_not_bol = @\unspec@;
-  inline constexpr match_flag_type match_not_eol = @\unspec@;
-  inline constexpr match_flag_type match_not_bow = @\unspec@;
-  inline constexpr match_flag_type match_not_eow = @\unspec@;
-  inline constexpr match_flag_type match_any = @\unspec@;
-  inline constexpr match_flag_type match_not_null = @\unspec@;
-  inline constexpr match_flag_type match_continuous = @\unspec@;
-  inline constexpr match_flag_type match_prev_avail = @\unspec@;
-  inline constexpr match_flag_type format_default = {};
-  inline constexpr match_flag_type format_sed = @\unspec@;
-  inline constexpr match_flag_type format_no_copy = @\unspec@;
-  inline constexpr match_flag_type format_first_only = @\unspec@;
+  inline constexpr match_flag_type @\libentity{match_default}@ = {};
+  inline constexpr match_flag_type @\libentity{match_not_bol}@ = @\unspec@;
+  inline constexpr match_flag_type @\libentity{match_not_eol}@ = @\unspec@;
+  inline constexpr match_flag_type @\libentity{match_not_bow}@ = @\unspec@;
+  inline constexpr match_flag_type @\libentity{match_not_eow}@ = @\unspec@;
+  inline constexpr match_flag_type @\libentity{match_any}@ = @\unspec@;
+  inline constexpr match_flag_type @\libentity{match_not_null}@ = @\unspec@;
+  inline constexpr match_flag_type @\libentity{match_continuous}@ = @\unspec@;
+  inline constexpr match_flag_type @\libentity{match_prev_avail}@ = @\unspec@;
+  inline constexpr match_flag_type @\libentity{format_default}@ = {};
+  inline constexpr match_flag_type @\libentity{format_sed}@ = @\unspec@;
+  inline constexpr match_flag_type @\libentity{format_no_copy}@ = @\unspec@;
+  inline constexpr match_flag_type @\libentity{format_first_only}@ = @\unspec@;
 }
 \end{codeblock}
 
@@ -992,10 +979,11 @@ public:
 The class \tcode{regex_error} defines the type of objects thrown as
 exceptions to report errors from the regular expression library.
 
-\indexlibrary{\idxcode{regex_error}!constructor}%
+\begin{indexed}{\indexlibrary{\idxcode{regex_error}!constructor}}
 \begin{itemdecl}
 regex_error(regex_constants::error_type ecode);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\effects  Constructs an object of class \tcode{regex_error}.
@@ -1245,10 +1233,11 @@ int value(charT ch, int radix) const;
 \end{itemdescr}
 
 \indexlibrary{\idxcode{locale}}%
-\indexlibrary{\idxcode{imbue}}%
+\begin{indexed}{\indexlibrary{\idxcode{imbue}}}
 \begin{itemdecl}
 locale_type imbue(locale_type loc);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1267,10 +1256,11 @@ otherwise a copy of the last argument passed to \tcode{imbue}.
 \end{itemdescr}
 
 \indexlibrary{\idxcode{locale}}%
-\indexlibrary{\idxcode{getloc}}%
+\begin{indexed}{\indexlibrary{\idxcode{getloc}}}
 \begin{itemdecl}
 locale_type getloc() const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -3529,12 +3519,13 @@ regex_iterator();
 \pnum\effects  Constructs an end-of-sequence iterator.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{regex_iterator}!constructor}%
+\begin{indexed}{\indexlibrary{\idxcode{regex_iterator}!constructor}}
 \begin{itemdecl}
 regex_iterator(BidirectionalIterator a, BidirectionalIterator b,
                const regex_type& re,
                regex_constants::match_flag_type m = regex_constants::match_default);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\effects  Initializes \tcode{begin} and \tcode{end} to
@@ -3830,10 +3821,11 @@ The \textit{current match} is \tcode{(*position).prefix()} if \tcode{subs[N] ==
 
 \rSec3[re.tokiter.cnstr]{\tcode{regex_token_iterator} constructors}
 
-\indexlibrary{\idxcode{regex_token_iterator}!constructor}%
+\begin{indexed}{\indexlibrary{\idxcode{regex_token_iterator}!constructor}}
 \begin{itemdecl}
 regex_token_iterator();
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
diff --git a/source/special.tex b/source/special.tex
index a7e2f9b..a8e9205 100644
--- a/source/special.tex
+++ b/source/special.tex
@@ -3326,8 +3326,8 @@ in the expanded list of subobjects for an object \tcode{x}
 where $\tcode{x}_i$ is
 formed by a sequence of
 derived-to-base conversions\iref{over.best.ics},
-class member access expressions\iref{expr.ref}, and
-array subscript expressions\iref{expr.sub} applied to \tcode{x}.
+\link{class member access expressions}{\ref{expr.ref}}, and
+\link{array subscript expressions}{\ref{expr.sub}} applied to \tcode{x}.
 The type of the expression $\tcode{x}_i$ \tcode{<=>} $\tcode{x}_i$
 is denoted by $\tcode{R}_i$.
 It is unspecified
@@ -3373,7 +3373,7 @@ is defined as follows:
 \begin{itemize}
 \item
 If any $\tcode{T}_i$
-is not a comparison category type\iref{cmp.categories},
+is not a \deflinkx{comparison category type}{comparison category types}{\ref{cmp.categories}},
 \tcode{U} is \tcode{void}.
 
 \item
@@ -3382,7 +3382,7 @@ at least one $\tcode{T}_i$ is \tcode{std::weak_equality}, or
 at least one $\tcode{T}_i$ is \tcode{std::strong_equality} and
 at least one $\tcode{T}_j$ is \tcode{std::partial_ordering} or
                               \tcode{std::weak_ordering},
-\tcode{U} is \tcode{std::weak_equality}\iref{cmp.weakeq}.
+\tcode{U} is \link{\tcode{std::weak_equality}}{\ref{cmp.weakeq}}.
 
 \item
 Otherwise, if at least one $\tcode{T}_i$ is \tcode{std::strong_equality},
@@ -3397,7 +3397,7 @@ Otherwise, if at least one $\tcode{T}_i$ is \tcode{std::weak_ordering},
 \tcode{U} is \tcode{std::weak_ordering}\iref{cmp.weakord}.
 
 \item
-Otherwise, \tcode{U} is \tcode{std::strong_ordering}\iref{cmp.strongord}.
+Otherwise, \tcode{U} is \link{\tcode{std::strong_ordering}}{\ref{cmp.strongord}}.
 \begin{note}
 In particular, this is the result when $n$ is 0.
 \end{note}
diff --git a/source/support.tex b/source/support.tex
index 233b2d7..8b3a825 100644
--- a/source/support.tex
+++ b/source/support.tex
@@ -565,24 +565,19 @@ values:
 
 \begin{itemize}
 \item
-\indexlibrary{\idxcode{round_indeterminate}}%
-\tcode{round_indeterminate}
+\libentity{round_indeterminate}
 if the rounding style is indeterminable
 \item
-\indexlibrary{\idxcode{round_toward_zero}}%
-\tcode{round_toward_zero}
+\libentity{round_toward_zero}
 if the rounding style is toward zero
 \item
-\indexlibrary{\idxcode{round_to_nearest}}%
-\tcode{round_to_nearest}
+\libentity{round_to_nearest}
 if the rounding style is to the nearest representable value
 \item
-\indexlibrary{\idxcode{round_toward_infinity}}%
-\tcode{round_toward_infinity}
+\libentity{round_toward_infinity}
 if the rounding style is toward infinity
 \item
-\indexlibrary{\idxcode{round_toward_neg_infinity}}%
-\tcode{round_toward_neg_infinity}
+\libentity{round_toward_neg_infinity}
 if the rounding style is toward negative infinity
 \end{itemize}
 
@@ -3714,7 +3709,7 @@ template<class E> constexpr const E* end(initializer_list<E> il) noexcept;
 \pnum
 The header \tcode{<compare>} specifies types, objects, and functions
 for use primarily in connection with
-the three-way comparison operator\iref{expr.spaceship}.
+the \link{three-way comparison operator}{\ref{expr.spaceship}}.
 
 \indexhdr{compare}%
 \indexlibrary{\idxcode{is_eq}}%
@@ -3812,7 +3807,7 @@ that is accessible via the argument's public const members.
 
 \pnum
 The \tcode{weak_equality} type is typically used
-as the result type of a three-way comparison operator\iref{expr.spaceship}
+as the result type of a \link{three-way comparison operator}{\ref{expr.spaceship}}
 that (a) admits only equality and inequality comparisons,
 and (b) does not imply substitutability.
 
@@ -3887,7 +3882,7 @@ constexpr weak_equality operator<=>(@\unspec@, weak_equality v) noexcept;
 
 \pnum
 The \tcode{strong_equality} type is typically used
-as the result type of a three-way comparison operator\iref{expr.spaceship}
+as the result type of a \link{three-way comparison operator}{\ref{expr.spaceship}}
 that (a) admits only equality and inequality comparisons,
 and (b) does imply substitutability.
 
@@ -3982,7 +3977,7 @@ constexpr strong_equality operator<=>(@\unspec@, strong_equality v) noexcept;
 
 \pnum
 The \tcode{partial_ordering} type is typically used
-as the result type of a three-way comparison operator\iref{expr.spaceship}
+as the result type of a \link{three-way comparison operator}{\ref{expr.spaceship}}
 that (a) admits all of the six two-way comparison operators (\ref{expr.rel}, \ref{expr.eq}),
 (b) does not imply substitutability,
 and (c) permits two values to be incomparable.%
@@ -4132,7 +4127,7 @@ constexpr partial_ordering operator<=>(@\unspec@, partial_ordering v) noexcept;
 
 \pnum
 The \tcode{weak_ordering} type is typically used
-as the result type of a three-way comparison operator\iref{expr.spaceship}
+as the result type of a \link{three-way comparison operator}{\ref{expr.spaceship}}
 that (a) admits all of the six two-way comparison operators (\ref{expr.rel}, \ref{expr.eq}),
 and (b) does not imply substitutability.
 
@@ -4277,7 +4272,7 @@ constexpr weak_ordering operator<=>(@\unspec@, weak_ordering v) noexcept;
 
 \pnum
 The \tcode{strong_ordering} type is typically used
-as the result type of a three-way comparison operator\iref{expr.spaceship}
+as the result type of a \link{three-way comparison operator}{\ref{expr.spaceship}}
 that (a) admits all of the six two-way comparison operators (\ref{expr.rel}, \ref{expr.eq}),
 and (b) does imply substitutability.
 
diff --git a/source/templates.tex b/source/templates.tex
index 8e93524..5567f40 100644
--- a/source/templates.tex
+++ b/source/templates.tex
@@ -1546,7 +1546,7 @@ There are three different kinds of constraints:
 
 \pnum
 In order for a constrained template to be instantiated\iref{temp.spec},
-its associated constraints\iref{temp.constr.decl}
+its \deflink{associated constraints}{\ref{temp.constr.decl}}
 shall be satisfied as described in the following subsections.
 \begin{note}
 Forming the name of a specialization of
@@ -1611,7 +1611,7 @@ void f(int);
 
 f('a'); // OK: calls \tcode{f(int)}
 \end{codeblock}
-In the satisfaction of the associated constraints\iref{temp.constr.decl}
+In the satisfaction of the \deflink{associated constraints}{\ref{temp.constr.decl}}
 of \tcode{f}, the constraint \tcode{sizeof(char) > 1} is not satisfied;
 the second operand is not checked for satisfaction.
 \end{example}
@@ -1627,9 +1627,9 @@ template arguments involving the
 template parameters of the constrained entity,
 called the \defn{parameter mapping}\iref{temp.constr.decl}.
 \begin{note}
-Atomic constraints are formed by constraint normalization\iref{temp.constr.normal}.
-\tcode{E} is never a logical AND expression\iref{expr.log.and}
-nor a logical OR expression\iref{expr.log.or}.
+Atomic constraints are formed by \deflinkx{constraint normalization}{constraint!normalization}{\ref{temp.constr.normal}}.
+\tcode{E} is never a \link{logical AND expression}{\ref{expr.log.and}}
+nor a \link{logical OR expression}{\ref{expr.log.or}}.
 \end{note}
 
 \pnum
@@ -1648,7 +1648,7 @@ the parameter mapping and template arguments are
 first substituted into its expression.
 If substitution results in an invalid type or expression,
 the constraint is not satisfied.
-Otherwise, the lvalue-to-rvalue conversion\iref{conv.lval}
+Otherwise, the \link{lvalue-to-rvalue conversion}{\ref{conv.lval}}
 is performed if necessary,
 and \tcode{E} shall be a constant expression of type \tcode{bool}.
 The constraint is satisfied if and only if evaluation of \tcode{E}
@@ -1676,8 +1676,8 @@ void g() {
 \rSec2[temp.constr.decl]{Constrained declarations}
 
 \pnum
-A template declaration\iref{temp}
-or function declaration\iref{dcl.fct}
+A \link{template declaration}{\ref{temp}}
+or \link{function declaration}{\ref{dcl.fct}}
 can be constrained by the use of a \grammarterm{requires-clause}.
 This allows the specification of constraints for that declaration as
 an expression:
@@ -1703,11 +1703,11 @@ A template's \defn{associated constraints} are defined as follows:
 the declaration has no associated constraints.
 
 \item Otherwise, if there is a single introduced \grammarterm{constraint-expression},
-the associated constraints are the normal form\iref{temp.constr.normal}
+the associated constraints are the \deflink{normal form}{\ref{temp.constr.normal}}
 of that expression.
 
-\item Otherwise, the associated constraints are the normal form of a logical
-AND expression\iref{expr.log.and} whose operands are in the
+\item Otherwise, the associated constraints are the normal form of a \link{logical
+AND expression}{\ref{expr.log.and}} whose operands are in the
 following order:
 
 \begin{itemize}
@@ -1725,7 +1725,7 @@ by a \grammarterm{requires-clause} following a
 \item
 the \grammarterm{constraint-expression} introduced by a trailing
 \grammarterm{requires-clause}\iref{dcl.decl}
-of a function declaration\iref{dcl.fct}.
+of a \link{function declaration}{\ref{dcl.fct}}.
 \end{itemize}
 \end{itemize}
 
@@ -1767,7 +1767,7 @@ and those of
 
 \pnum
 The \defnx{normal form}{normal form!constraint} of an \grammarterm{expression} \tcode{E} is
-a constraint\iref{temp.constr.constr} that is defined as follows:
+a \deflink{constraint}{\ref{temp.constr.constr}} that is defined as follows:
 %
 \begin{itemize}
 \item
@@ -1776,7 +1776,7 @@ the normal form of \tcode{E}.
 
 \item
 The normal form of an expression \tcode{E1 || E2} is
-the disjunction\iref{temp.constr.op} of
+the \deflink{disjunction}{\ref{temp.constr.op}} of
 the normal forms of \tcode{E1} and \tcode{E2}.
 
 \item
@@ -1900,7 +1900,7 @@ rules described in \ref{temp.constr.atomic}.
 \end{itemize}
 %
 \begin{example}
-Let $A$ and $B$ be atomic constraints\iref{temp.constr.atomic}.
+Let $A$ and $B$ be \deflinkx{atomic constraints}{atomic constraint}{\ref{temp.constr.atomic}}.
 %
 The constraint $A \land B$ subsumes $A$, but $A$ does not subsume $A \land B$.
 %
@@ -1917,9 +1917,9 @@ This partial ordering is used to determine
 \begin{itemize}
 \item the best viable candidate of non-template functions\iref{over.match.best},
 \item the address of a non-template function\iref{over.over},
-\item the matching of template template arguments\iref{temp.arg.template},
-\item the partial ordering of class template specializations\iref{temp.class.order}, and
-\item the partial ordering of function templates\iref{temp.func.order}.
+\item the matching of \link{template template arguments}{\ref{temp.arg.template}},
+\item the \link{partial ordering of class template specializations}{\ref{temp.class.order}}, and
+\item the \link{partial ordering of function templates}{\ref{temp.func.order}}.
 \end{itemize}
 \end{note}
 
@@ -3233,8 +3233,8 @@ primary template.
 A partial specialization matches a given actual template argument
 list if the template arguments of the partial specialization can be
 \link{deduced}{\ref{temp.deduct}} from the actual template argument list,
-and the deduced template arguments satisfy the associated constraints
-of the partial specialization, if any\iref{temp.constr.decl}.
+and the deduced template arguments satisfy the \deflink{associated constraints}{\ref{temp.constr.decl}}
+of the partial specialization, if any.
 \begin{example}
 \begin{codeblock}
 template<class T1, class T2, int I> class A             { };    // \#1
@@ -3302,7 +3302,7 @@ templates}{\ref{temp.func.order}}:
 \item
 Each of the two
 function templates has the same template parameters
-and associated constraints\iref{temp.constr.decl}
+and \deflink{associated constraints}{\ref{temp.constr.decl}}
 as the corresponding partial specialization.
 \item
 Each function template
@@ -3974,7 +3974,7 @@ A \grammarterm{concept-definition}
 shall appear at namespace scope\iref{basic.scope.namespace}.
 
 \pnum
-A concept shall not have associated constraints\iref{temp.constr.decl}.
+A concept shall not have \deflink{associated constraints}{\ref{temp.constr.decl}}.
 
 \pnum
 A concept is not instantiated\iref{temp.spec}.
@@ -6253,7 +6253,7 @@ template void sort<>(Array<int>&);
 \pnum
 \begin{note}
 An explicit instantiation of a constrained template
-shall satisfy that template's associated constraints\iref{temp.constr.decl}.
+shall satisfy that template's \deflink{associated constraints}{\ref{temp.constr.decl}}.
 The satisfaction of constraints is determined
 % FIXME: What is a "template name"? Does this mean "simple-template-id"?
 when forming the template name of an explicit instantiation
diff --git a/source/utilities.tex b/source/utilities.tex
index 31e3cac..cdcc489 100644
--- a/source/utilities.tex
+++ b/source/utilities.tex
@@ -78,24 +78,20 @@ namespace std {
   // \ref{declval}, declval
   template<class T>
     add_rvalue_reference_t<T> declval() noexcept;  // as unevaluated operand
-@%
-\indexlibrary{\idxcode{index_sequence}}%
-\indexlibrary{\idxcode{make_index_sequence}}%
-\indexlibrary{\idxcode{index_sequence_for}}%
-@
+
   // \ref{intseq}, Compile-time integer sequences
   template<class T, T...>
     struct integer_sequence;
   template<size_t... I>
-    using index_sequence = integer_sequence<size_t, I...>;
+    using @\libentity{index_sequence}@ = integer_sequence<size_t, I...>;
 
   template<class T, T N>
     using make_integer_sequence = integer_sequence<T, @\seebelow{}@>;
   template<size_t N>
-    using make_index_sequence = make_integer_sequence<size_t, N>;
+    using @\libentity{make_index_sequence}@ = make_integer_sequence<size_t, N>;
 
   template<class... T>
-    using index_sequence_for = make_index_sequence<sizeof...(T)>;
+    using @\libentity{index_sequence_for}@ = make_index_sequence<sizeof...(T)>;
 
   // \ref{pairs}, class template \tcode{pair}
   template<class T1, class T2>
@@ -5906,10 +5902,11 @@ for which the corresponding bit in \tcode{rhs} is clear, and leaves all other bi
 \tcode{*this}.
 \end{itemdescr}
 
-\indexlibrarymember{operator"|=}{bitset}%
+\begin{indexed}{\indexlibrarymember{operator"|=}{bitset}}
 \begin{itemdecl}
 bitset<N>& operator|=(const bitset<N>& rhs) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -6193,10 +6190,11 @@ bit value one becomes the character
 The created object.
 \end{itemdescr}
 
-\indexlibrarymember{count}{bitset}%
+\begin{indexed}{\indexlibrarymember{count}{bitset}}
 \begin{itemdecl}
 size_t count() const noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -6262,10 +6260,11 @@ in
 has the value one.
 \end{itemdescr}
 
-\indexlibrarymember{all}{bitset}%
+\begin{indexed}{\indexlibrarymember{all}{bitset}}
 \begin{itemdecl}
 bool all() const noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -7247,10 +7246,11 @@ the \grammarterm{qualified-id} \tcode{Alloc::pointer} is valid and denotes a
 type\iref{temp.deduct}; otherwise, \tcode{value_type*}.
 \end{itemdescr}
 
-\indexlibrarymember{const_pointer}{allocator_traits}%
+\begin{indexed}{\indexlibrarymember{const_pointer}{allocator_traits}}
 \begin{itemdecl}
 using const_pointer = @\seebelow@;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -7260,10 +7260,11 @@ type\iref{temp.deduct}; otherwise,
 \tcode{pointer_traits<pointer>::rebind<\brk{}const value_type>}.
 \end{itemdescr}
 
-\indexlibrarymember{void_pointer}{allocator_traits}%
+\begin{indexed}{\indexlibrarymember{void_pointer}{allocator_traits}}
 \begin{itemdecl}
 using void_pointer = @\seebelow@;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -7469,10 +7470,10 @@ well-formed; otherwise, \tcode{rhs}.
 All specializations of the default allocator satisfy the
 allocator completeness requirements\iref{allocator.requirements.completeness}.
 
-\indexlibrary{\idxcode{allocator}}%
 \indexlibrarymember{value_type}{allocator}%
 \indexlibrarymember{propagate_on_container_move_assignment}{allocator}%
 \indexlibrarymember{is_always_equal}{allocator}%
+\begin{indexed}{\indexlibrary{\idxcode{allocator}}}
 \begin{codeblock}
 namespace std {
   template<class T> class allocator {
@@ -7491,6 +7492,7 @@ namespace std {
   };
 }
 \end{codeblock}
+\end{indexed}
 
 \rSec3[allocator.members]{\tcode{allocator} members}
 
@@ -7667,11 +7669,12 @@ for (; first != last; ++first)
 \end{codeblock}
 \end{itemdescr}
 
-\indexlibrary{\idxcode{uninitialized_value_construct_n}}%
+\begin{indexed}{\indexlibrary{\idxcode{uninitialized_value_construct_n}}}
 \begin{itemdecl}
 template<class ForwardIterator, class Size>
   ForwardIterator uninitialized_value_construct_n(ForwardIterator first, Size n);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -8527,10 +8530,11 @@ pointer release() noexcept;
 the call to \tcode{release}.
 \end{itemdescr}
 
-\indexlibrarymember{reset}{unique_ptr}%
+\begin{indexed}{\indexlibrarymember{reset}{unique_ptr}}
 \begin{itemdecl}
 void reset(pointer p = pointer()) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -8550,10 +8554,11 @@ destroys \tcode{*this} since \tcode{this->get()} is no longer a valid expression
 \end{note}
 \end{itemdescr}
 
-\indexlibrarymember{swap}{unique_ptr}%
+\begin{indexed}{\indexlibrarymember{swap}{unique_ptr}}
 \begin{itemdecl}
 void swap(unique_ptr& u) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -9437,11 +9442,12 @@ than its previous value. \end{note}
 
 \rSec3[util.smartptr.shared.assign]{\tcode{shared_ptr} assignment}
 
-\indexlibrarymember{operator=}{shared_ptr}%
+\begin{indexed}{\indexlibrarymember{operator=}{shared_ptr}}
 \begin{itemdecl}
 shared_ptr& operator=(const shared_ptr& r) noexcept;
 template<class Y> shared_ptr& operator=(const shared_ptr<Y>& r) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\effects  Equivalent to \tcode{shared_ptr(r).swap(*this)}.
@@ -9603,10 +9609,11 @@ of the function shall be well-formed.
 \pnum\throws Nothing.
 \end{itemdescr}
 
-\indexlibrarymember{use_count}{shared_ptr}%
+\begin{indexed}{\indexlibrarymember{use_count}{shared_ptr}}
 \begin{itemdecl}
 long use_count() const noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\returns  The number of \tcode{shared_ptr} objects, \tcode{*this} included,
@@ -9637,11 +9644,12 @@ explicit operator bool() const noexcept;
 \pnum\returns \tcode{get() != 0}.
 \end{itemdescr}
 
-\indexlibrarymember{owner_before}{shared_ptr}%
+\begin{indexed}{\indexlibrarymember{owner_before}{shared_ptr}}
 \begin{itemdecl}
 template<class U> bool owner_before(const shared_ptr<U>& b) const noexcept;
 template<class U> bool owner_before(const weak_ptr<U>& b) const noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -9665,8 +9673,6 @@ The common requirements that apply to
 all \tcode{make_shared} and \tcode{allocate_shared} overloads,
 unless specified otherwise, are described below.
 
-\indexlibrary{\idxcode{make_shared}}%
-\indexlibrary{\idxcode{allocate_shared}}%
 \begin{itemdecl}
 template<class T, ...>
   shared_ptr<T> make_shared(@\placeholdernc{args}@);
@@ -9774,8 +9780,6 @@ allow for internal bookkeeping structures such as reference counts.
 \end{note}
 \end{itemdescr}
 
-\indexlibrary{\idxcode{make_shared}}%
-\indexlibrary{\idxcode{allocate_shared}}%
 \begin{itemdecl}
 template<class T, class... Args>
   shared_ptr<T> make_shared(Args&&... args);                    // \tcode{T} is not array
@@ -9805,8 +9809,6 @@ shared_ptr<vector<int>> q = make_shared<vector<int>>(16, 1);
 \end{example}
 \end{itemdescr}
 
-\indexlibrary{\idxcode{make_shared}}%
-\indexlibrary{\idxcode{allocate_shared}}%
 \begin{itemdecl}
 template<class T> shared_ptr<T>
   make_shared(size_t N);                                        // \tcode{T} is \tcode{U[]}
@@ -9961,13 +9963,14 @@ used as keys in associative containers.
 \end{note}
 \end{itemdescr}
 
-\indexlibrarymember{operator==}{shared_ptr}%
+\begin{indexed}{\indexlibrarymember{operator==}{shared_ptr}}
 \begin{itemdecl}
 template<class T>
   bool operator==(const shared_ptr<T>& a, nullptr_t) noexcept;
 template<class T>
   bool operator==(nullptr_t, const shared_ptr<T>& a) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -10122,11 +10125,12 @@ undefined behavior, attempting to delete the same object twice.
 \end{note}
 \end{itemdescr}
 
-\indexlibrarymember{const_pointer_cast}{shared_ptr}%
+\begin{indexed}{\indexlibrarymember{const_pointer_cast}{shared_ptr}}
 \begin{itemdecl}
 template<class T, class U>
   shared_ptr<T> const_pointer_cast(const shared_ptr<U>& r) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -12021,11 +12025,11 @@ Calls \tcode{release()}.
 
 \rSec3[mem.res.pool.mem]{Pool resource members}
 
-\indexlibrarymember{release}{synchronized_pool_resource}%
-\indexlibrarymember{release}{unsynchronized_pool_resource}%
+\begin{indexed}{\indexlibrarymember{release}{synchronized_pool_resource}\indexlibrarymember{release}{unsynchronized_pool_resource}}
 \begin{itemdecl}
 void release();
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -12489,10 +12493,11 @@ using inner_allocator_type = @\seebelow@;
 zero; otherwise,\\ \tcode{scoped_allocator_adaptor<InnerAllocs...>}.
 \end{itemdescr}
 
-\indexlibrarymember{propagate_on_container_copy_assignment}{scoped_allocator_adaptor}%
+\begin{indexed}{\indexlibrarymember{propagate_on_container_copy_assignment}{scoped_allocator_adaptor}}
 \begin{itemdecl}
 using propagate_on_container_copy_assignment = @\seebelow@;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -12502,10 +12507,11 @@ using propagate_on_container_copy_assignment = @\seebelow@;
 \tcode{InnerAllocs...}; otherwise, \tcode{false_type}.
 \end{itemdescr}
 
-\indexlibrarymember{propagate_on_container_move_assignment}{scoped_allocator_adaptor}%
+\begin{indexed}{\indexlibrarymember{propagate_on_container_move_assignment}{scoped_allocator_adaptor}}
 \begin{itemdecl}
 using propagate_on_container_move_assignment = @\seebelow@;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -12515,10 +12521,11 @@ using propagate_on_container_move_assignment = @\seebelow@;
 \tcode{InnerAllocs...}; otherwise, \tcode{false_type}.
 \end{itemdescr}
 
-\indexlibrarymember{propagate_on_container_swap}{scoped_allocator_adaptor}%
+\begin{indexed}{\indexlibrarymember{propagate_on_container_swap}{scoped_allocator_adaptor}}
 \begin{itemdecl}
 using propagate_on_container_swap = @\seebelow@;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -12572,10 +12579,11 @@ allocator from the argument list).
 \tcode{is_constructible_v<OuterAlloc, OuterA2>} is \tcode{true}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{scoped_allocator_adaptor}!constructor}%
+\begin{indexed}{\indexlibrary{\idxcode{scoped_allocator_adaptor}!constructor}}
 \begin{itemdecl}
 scoped_allocator_adaptor(const scoped_allocator_adaptor& other) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -12583,10 +12591,11 @@ scoped_allocator_adaptor(const scoped_allocator_adaptor& other) noexcept;
 from \tcode{other}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{scoped_allocator_adaptor}!constructor}%
+\begin{indexed}{\indexlibrary{\idxcode{scoped_allocator_adaptor}!constructor}}
 \begin{itemdecl}
 scoped_allocator_adaptor(scoped_allocator_adaptor&& other) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -12964,7 +12973,7 @@ A \defnx{function object type}{function object!type} is an
 pointer or a class type which has a member \tcode{operator()} or a class type
 which has a conversion to a pointer to function.} A \defn{function object} is an
 object of a function object type. In the places where one would expect to pass a
-pointer to a function to an algorithmic template\iref{algorithms}, the
+pointer to a function to an \link{algorithmic template}{\ref{algorithms}}, the
 interface is specified to accept a function object. This not only makes
 algorithmic templates work with pointers to functions, but also enables them to
 work with arbitrary function objects.
@@ -13156,8 +13165,7 @@ A \defn{target object} is the callable object held by a call wrapper.
 \rSec2[func.require]{Requirements}
 
 \pnum
-\indexlibrary{invoke@\tcode{\placeholder{INVOKE}}}%
-Define \tcode{\placeholdernc{INVOKE}(f, t$_1$, t$_2$, $\dotsc$, t$_N$)} as follows:
+Define \indexedspan{\tcode{\placeholdernc{INVOKE}(f, t$_1$, t$_2$, $\dotsc$, t$_N$)}}{\indexlibrary{invoke@\tcode{\placeholder{INVOKE}}}} as follows:
 
 \begin{itemize}
 \item \tcode{(t$_1$.*f)(t$_2$, $\dotsc$, t$_N$)} when \tcode{f} is a pointer to a
@@ -13222,18 +13230,20 @@ template<class... UnBoundArgs>
 \end{note}
 
 \rSec2[func.invoke]{Function template \tcode{invoke}}
-\indexlibrary{\idxcode{invoke}}%
 \indexlibrary{invoke@\tcode{\placeholder{INVOKE}}}%
+\begin{indexed}{\indexlibrary{\idxcode{invoke}}}
 \begin{itemdecl}
 template<class F, class... Args>
   invoke_result_t<F, Args...> invoke(F&& f, Args&&... args)
     noexcept(is_nothrow_invocable_v<F, Args...>);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
 \returns
-\tcode{\placeholdernc{INVOKE}(std::forward<F>(f), std::forward<Args>(args)...)}\iref{func.require}.
+\liblinkx{\tcode{\placeholdernc{INVOKE}}}{INVOKE}{\ref{func.require}}%
+\tcode{(std::forward<F>(f), std::forward<Args>(args)...)}.
 \end{itemdescr}
 
 \rSec2[refwrap]{Class template \tcode{reference_wrapper}}
@@ -13658,12 +13668,13 @@ is also consistent with the partial order imposed by those built-in operators.
 
 \rSec3[comparisons.equal_to]{Class template \tcode{equal_to}}
 
-\indexlibrary{\idxcode{equal_to}}%
+\begin{indexed}{\indexlibrary{\idxcode{equal_to}}}
 \begin{itemdecl}
 template<class T = void> struct equal_to {
   constexpr bool operator()(const T& x, const T& y) const;
 };
 \end{itemdecl}
+\end{indexed}
 
 \indexlibrarymember{operator()}{equal_to}%
 \begin{itemdecl}
@@ -13722,11 +13733,12 @@ template<> struct not_equal_to<void> {
 };
 \end{itemdecl}
 
-\indexlibrarymember{operator()}{not_equal_to<>}%
+\begin{indexed}{\indexlibrarymember{operator()}{not_equal_to<>}}
 \begin{itemdecl}
 template<class T, class U> constexpr auto operator()(T&& t, U&& u) const
     -> decltype(std::forward<T>(t) != std::forward<U>(u));
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\returns \tcode{std::forward<T>(t) != std::forward<U>(u)}.
@@ -14085,11 +14097,12 @@ template<> struct bit_or<void> {
 };
 \end{itemdecl}
 
-\indexlibrarymember{operator()}{bit_or<>}%
+\begin{indexed}{\indexlibrarymember{operator()}{bit_or<>}}
 \begin{itemdecl}
 template<class T, class U> constexpr auto operator()(T&& t, U&& u) const
     -> decltype(std::forward<T>(t) | std::forward<U>(u));
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\returns \tcode{std::forward<T>(t) | std::forward<U>(u)}.
@@ -14151,7 +14164,7 @@ constexpr T operator()(const T& x) const;
 \pnum\returns \tcode{\~{}x}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{bit_not<>}}%
+\begin{indexed}{\indexlibrary{\idxcode{bit_not<>}}}
 \begin{itemdecl}
 template<> struct bit_not<void> {
   template<class T> constexpr auto operator()(T&& t) const
@@ -14160,6 +14173,7 @@ template<> struct bit_not<void> {
   using is_transparent = @\unspec@;
 };
 \end{itemdecl}
+\end{indexed}
 
 \indexlibrarymember{operator()}{bit_not<>}%
 \begin{itemdecl}
@@ -14495,10 +14509,11 @@ extern @\unspec@ _1;
 \rSec2[func.memfn]{Function template \tcode{mem_fn}}%
 \indextext{function object!\idxcode{mem_fn}|(}
 
-\indexlibrary{\idxcode{mem_fn}}%
+\begin{indexed}{\indexlibrary{\idxcode{mem_fn}}}
 \begin{itemdecl}
 template<class R, class T> @\unspec@ mem_fn(R T::* pm) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -14862,10 +14877,11 @@ void swap(function& other) noexcept;
 
 \rSec4[func.wrap.func.cap]{\tcode{function} capacity}
 
-\indexlibrarymember{operator bool}{function}%
+\begin{indexed}{\indexlibrarymember{operator bool}{function}}
 \begin{itemdecl}
 explicit operator bool() const noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -14874,11 +14890,11 @@ explicit operator bool() const noexcept;
 
 \rSec4[func.wrap.func.inv]{\tcode{function} invocation}
 
-\indexlibrary{\idxcode{function}!invocation}%
-\indexlibrarymember{operator()}{function}%
+\begin{indexed}{\indexlibrary{\idxcode{function}!invocation}\indexlibrarymember{operator()}{function}}
 \begin{itemdecl}
 R operator()(ArgTypes... args) const;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -14892,21 +14908,23 @@ exception thrown by the wrapped callable object.
 
 \rSec4[func.wrap.func.targ]{\tcode{function} target access}
 
-\indexlibrarymember{target_type}{function}%
+\begin{indexed}{\indexlibrarymember{target_type}{function}}
 \begin{itemdecl}
 const type_info& target_type() const noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\returns If \tcode{*this} has a target of type \tcode{T},
   \tcode{typeid(T)}; otherwise, \tcode{typeid(void)}.
 \end{itemdescr}
 
-\indexlibrarymember{target}{function}%
+\begin{indexed}{\indexlibrarymember{target}{function}}
 \begin{itemdecl}
 template<class T>       T* target() noexcept;
 template<class T> const T* target() const noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\returns If \tcode{target_type() == typeid(T)}
@@ -15906,27 +15924,27 @@ For any given type \tcode{T}, the result of applying one of these templates to
 \indexlibrary{\idxcode{is_arithmetic}}%
 \tcode{template<class T>}\br
  \tcode{struct is_arithmetic;}          &
- \tcode{T} is an arithmetic type\iref{basic.fundamental}              &   \\ \rowsep
+ \tcode{T} is an \deflinkx{arithmetic type}{type!arithmetic}{\ref{basic.fundamental}}              &   \\ \rowsep
 \indexlibrary{\idxcode{is_fundamental}}%
 \tcode{template<class T>}\br
  \tcode{struct is_fundamental;}         &
- \tcode{T} is a fundamental type\iref{basic.fundamental}              &   \\ \rowsep
+ \tcode{T} is a \link{fundamental type}{\ref{basic.fundamental}}              &   \\ \rowsep
 \indexlibrary{\idxcode{is_object}}%
 \tcode{template<class T>}\br
  \tcode{struct is_object;}              &
- \tcode{T} is an object type\iref{basic.types}                            &   \\ \rowsep
+ \tcode{T} is an \deflink{object type}{\ref{basic.types}}                            &   \\ \rowsep
 \indexlibrary{\idxcode{is_scalar}}%
 \tcode{template<class T>}\br
  \tcode{struct is_scalar;}              &
- \tcode{T} is a scalar type\iref{basic.types}                         &   \\ \rowsep
+ \tcode{T} is a \deflink{scalar type}{\ref{basic.types}}                         &   \\ \rowsep
 \indexlibrary{\idxcode{is_compound}}%
 \tcode{template<class T>}\br
  \tcode{struct is_compound;}            &
- \tcode{T} is a compound type\iref{basic.compound}                        &   \\ \rowsep
+ \tcode{T} is a \link{compound type}{\ref{basic.compound}}                        &   \\ \rowsep
 \indexlibrary{\idxcode{is_member_pointer}}%
 \tcode{template<class T>}\br
  \tcode{struct is_member_pointer;}      &
- \tcode{T} is a pointer-to-member type\iref{basic.compound}               &   \\
+ \tcode{T} is a \deflink{pointer-to-member}{\ref{basic.compound}} type               &   \\
 \end{libreqtab3b}
 
 \rSec3[meta.unary.prop]{Type properties}
@@ -17135,10 +17153,11 @@ The member names of the base class, other than \tcode{conjunction} and
 in \tcode{conjunction}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{disjunction}}%
+\begin{indexed}{\indexlibrary{\idxcode{disjunction}}}
 \begin{itemdecl}
 template<class... B> struct disjunction : @\seebelow@ { };
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -17182,10 +17201,11 @@ other than \tcode{disjunction} and \tcode{operator=},
 shall not be hidden and shall be unambiguously available in \tcode{disjunction}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{negation}}%
+\begin{indexed}{\indexlibrary{\idxcode{negation}}}
 \begin{itemdecl}
 template<class B> struct negation : @\seebelow@ { };
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -17206,17 +17226,15 @@ binary data in which the least significant byte is placed first, with the rest
 in ascending order. This subclause describes the endianness of the scalar types
 of the execution environment.
 
-\indexlibrary{\idxcode{endian}}%
-\indexlibrarymember{little}{endian}%
-\indexlibrarymember{big}{endian}%
-\indexlibrarymember{native}{endian}%
+\begin{indexed}{\indexlibrary{\idxcode{endian}}}
 \begin{itemdecl}
 enum class endian {
-  little = @\seebelow@,
-  big    = @\seebelow@,
-  native = @\seebelow@
+  @\libmember{little}{endian}@ = @\seebelow@,
+  @\libmember{big}{endian}@    = @\seebelow@,
+  @\libmember{native}{endian}@ = @\seebelow@
 };
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -17309,7 +17327,7 @@ namespace std {
 
 \rSec2[ratio.ratio]{Class template \tcode{ratio}}
 
-\indexlibrary{\idxcode{ratio}}%
+\begin{indexed}{\indexlibrary{\idxcode{ratio}}}
 \begin{codeblock}
 namespace std {
   template<intmax_t N, intmax_t D = 1> class ratio {
@@ -17320,6 +17338,7 @@ namespace std {
   };
 }
 \end{codeblock}
+\end{indexed}
 
 \pnum
 \indextext{signed integer representation!two's complement}%
@@ -18559,10 +18578,11 @@ requirements, recursively.
 
 \rSec3[time.traits.is_fp]{\tcode{treat_as_floating_point}}
 
-\indexlibrary{\idxcode{treat_as_floating_point}}%
+\begin{indexed}{\indexlibrary{\idxcode{treat_as_floating_point}}}
 \begin{itemdecl}
 template<class Rep> struct treat_as_floating_point : is_floating_point<Rep> { };
 \end{itemdecl}
+\end{indexed}
 
 \pnum
 The \tcode{duration} template uses the \tcode{treat_as_floating_point} trait to
@@ -19890,36 +19910,39 @@ template<class Clock, class Duration1, class Duration2>
 \returns \tcode{lhs.time_since_epoch() < rhs.time_since_epoch()}.
 \end{itemdescr}
 
-\indexlibrarymember{operator>}{time_point}%
+\begin{indexed}{\indexlibrarymember{operator>}{time_point}}
 \begin{itemdecl}
 template<class Clock, class Duration1, class Duration2>
   constexpr bool operator>(const time_point<Clock, Duration1>& lhs,
                            const time_point<Clock, Duration2>& rhs);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
 \returns \tcode{rhs < lhs}.
 \end{itemdescr}
 
-\indexlibrarymember{operator<=}{time_point}%
+\begin{indexed}{\indexlibrarymember{operator<=}{time_point}}
 \begin{itemdecl}
 template<class Clock, class Duration1, class Duration2>
   constexpr bool operator<=(const time_point<Clock, Duration1>& lhs,
                             const time_point<Clock, Duration2>& rhs);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
 \returns \tcode{!(rhs < lhs)}.
 \end{itemdescr}
 
-\indexlibrarymember{operator>=}{time_point}%
+\begin{indexed}{\indexlibrarymember{operator>=}{time_point}}
 \begin{itemdecl}
 template<class Clock, class Duration1, class Duration2>
   constexpr bool operator>=(const time_point<Clock, Duration1>& lhs,
                             const time_point<Clock, Duration2>& rhs);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -19928,12 +19951,12 @@ template<class Clock, class Duration1, class Duration2>
 
 \rSec3[time.point.cast]{\tcode{time_point_cast}}
 
-\indexlibrary{\idxcode{time_point}!\idxcode{time_point_cast}}%
-\indexlibrary{\idxcode{time_point_cast}}%
+\begin{indexed}{\indexlibrary{\idxcode{time_point}!\idxcode{time_point_cast}}\indexlibrary{\idxcode{time_point_cast}}}
 \begin{itemdecl}
 template<class ToDuration, class Clock, class Duration>
   constexpr time_point<Clock, ToDuration> time_point_cast(const time_point<Clock, Duration>& t);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -19947,11 +19970,12 @@ time_point<Clock, ToDuration>(duration_cast<ToDuration>(t.time_since_epoch()))
 \end{codeblock}
 \end{itemdescr}
 
-\indexlibrarymember{floor}{time_point}%
+\begin{indexed}{\indexlibrarymember{floor}{time_point}}
 \begin{itemdecl}
 template<class ToDuration, class Clock, class Duration>
   constexpr time_point<Clock, ToDuration> floor(const time_point<Clock, Duration>& tp);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -28682,28 +28706,28 @@ A \tcode{\%} character is extracted.
 \indexlibrary{\idxcode{time}}%
 \indexlibrary{\idxcode{tm}}%
 \begin{codeblock}
-#define NULL @\textit{see \ref{support.types.nullptr}}@
-#define CLOCKS_PER_SEC @\seebelow@
-#define TIME_UTC @\seebelow@
+#define @\libentity{NULL}@ @\textit{see \ref{support.types.nullptr}}@
+#define @\libentity{CLOCKS_PER_SEC}@ @\seebelow@
+#define @\libentity{TIME_UTC}@ @\seebelow@
 
 namespace std {
-  using size_t = @\textit{see \ref{support.types.layout}}@;
-  using clock_t = @\seebelow@;
-  using time_t = @\seebelow@;
-
-  struct timespec;
-  struct tm;
-
-  clock_t clock();
-  double difftime(time_t time1, time_t time0);
-  time_t mktime(struct tm* timeptr);
-  time_t time(time_t* timer);
-  int timespec_get(timespec* ts, int base);
-  char* asctime(const struct tm* timeptr);
-  char* ctime(const time_t* timer);
-  struct tm* gmtime(const time_t* timer);
-  struct tm* localtime(const time_t* timer);
-  size_t strftime(char* s, size_t maxsize, const char* format, const struct tm* timeptr);
+  using @\libentity{size_t}@ = @\textit{see \ref{support.types.layout}}@;
+  using @\libentity{clock_t}@ = @\seebelow@;
+  using @\libentity{time_t}@ = @\seebelow@;
+
+  struct @\libentity{timespec}@;
+  struct @\libentity{tm}@;
+
+  clock_t @\libentity{clock}@();
+  double @\libentity{difftime}@(time_t time1, time_t time0);
+  time_t @\libentity{mktime}@(struct tm* timeptr);
+  time_t @\libentity{time}@(time_t* timer);
+  int @\libentity{timespec_get}@(timespec* ts, int base);
+  char* @\libentity{asctime}@(const struct tm* timeptr);
+  char* @\libentity{ctime}@(const time_t* timer);
+  struct tm* @\libentity{gmtime}@(const time_t* timer);
+  struct tm* @\libentity{localtime}@(const time_t* timer);
+  size_t @\libentity{strftime}@(char* s, size_t maxsize, const char* format, const struct tm* timeptr);
 }
 \end{codeblock}
 
@@ -28799,9 +28823,8 @@ bool operator!=(const type_index& rhs) const noexcept;
 \returns \tcode{*target != *rhs.target}.
 \end{itemdescr}
 
-\indexlibrarymember{operator<}{type_index}%
 \begin{itemdecl}
-bool operator<(const type_index& rhs) const noexcept;
+bool @\libmember{operator<}{type_index}@(const type_index& rhs) const noexcept;
 \end{itemdecl}
 
 \begin{itemdescr}
@@ -28963,9 +28986,8 @@ The behavior of a program that adds specializations for
 
 \rSec2[execpol.seq]{Sequenced execution policy}
 
-\indexlibrary{\idxcode{execution::sequenced_policy}}%
 \begin{itemdecl}
-class execution::sequenced_policy { @\unspec@ };
+class @\libentity{execution::sequenced_policy}@ { @\unspec@ };
 \end{itemdecl}
 
 \begin{itemdescr}
@@ -28983,9 +29005,8 @@ if the invocation of an element access function exits via an uncaught exception,
 
 \rSec2[execpol.par]{Parallel execution policy}
 
-\indexlibrary{\idxcode{execution::parallel_policy}}%
 \begin{itemdecl}
-class execution::parallel_policy { @\unspec@ };
+class @\libentity{execution::parallel_policy}@ { @\unspec@ };
 \end{itemdecl}
 
 \begin{itemdescr}
@@ -29003,9 +29024,8 @@ if the invocation of an element access function exits via an uncaught exception,
 
 \rSec2[execpol.parunseq]{Parallel and unsequenced execution policy}
 
-\indexlibrary{\idxcode{execution::parallel_unsequenced_policy}}%
 \begin{itemdecl}
-class execution::parallel_unsequenced_policy { @\unspec@ };
+class @\libentity{execution::parallel_unsequenced_policy}@ { @\unspec@ };
 \end{itemdecl}
 
 \begin{itemdescr}
@@ -29047,29 +29067,19 @@ The header \tcode{<execution>} declares global objects associated with each type
 
 \indexhdr{charconv}%
 \begin{codeblock}
-@%
-\indexlibrary{\idxcode{chars_format}}%
-\indexlibrarymember{scientific}{chars_format}%
-\indexlibrarymember{fixed}{chars_format}%
-\indexlibrarymember{hex}{chars_format}%
-\indexlibrarymember{general}{chars_format}%
-@namespace std {
+namespace std {
   // floating-point format for primitive numerical conversion
-  enum class chars_format {
-    scientific = @\unspec@,
-    fixed = @\unspec@,
-    hex = @\unspec@,
-    general = fixed | scientific
+  enum class @\libentity{chars_format}@ {
+    @\libmember{scientific}{chars_format}@ = @\unspec@,
+    @\libmember{fixed}{chars_format}@ = @\unspec@,
+    @\libmember{hex}{chars_format}@ = @\unspec@,
+    @\libmember{general}{chars_format}@ = fixed | scientific
   };
-@%
-\indexlibrary{\idxcode{to_chars_result}}%
-\indexlibrarymember{ptr}{to_chars_result}%
-\indexlibrarymember{ec}{to_chars_result}
-@
+
   // \ref{charconv.to.chars}, primitive numerical output conversion
-  struct to_chars_result {
-    char* ptr;
-    errc ec;
+  struct @\libentity{to_chars_result}@ {
+    char* @\libmember{ptr}{to_chars_result}@;
+    errc @\libmember{ec}{to_chars_result}@;
   };
 
   to_chars_result to_chars(char* first, char* last, @\seebelow@ value, int base = 10);
@@ -29088,15 +29098,11 @@ The header \tcode{<execution>} declares global objects associated with each type
                            chars_format fmt, int precision);
   to_chars_result to_chars(char* first, char* last, long double value,
                            chars_format fmt, int precision);
-@%
-\indexlibrary{\idxcode{from_chars_result}}%
-\indexlibrarymember{ptr}{from_chars_result}%
-\indexlibrarymember{ec}{from_chars_result}
-@
+
   // \ref{charconv.from.chars}, primitive numerical input conversion
-  struct from_chars_result {
-    const char* ptr;
-    errc ec;
+  struct @\libentity{from_chars_result}@ {
+    const char* @\libmember{ptr}{from_chars_result}@;
+    errc @\libmember{ec}{from_chars_result}@;
   };
 
   from_chars_result from_chars(const char* first, const char* last,
@@ -29153,7 +29159,7 @@ If there are several such representations,
 the representation with the smallest difference from
 the floating-point argument value is chosen,
 resolving any remaining ties using rounding according to
-\tcode{round_to_nearest}\iref{round.style}.
+\liblinkx{\tcode{round_to_nearest}}{round_to_nearest}{\ref{round.style}}.
 
 \pnum
 The functions taking a \tcode{chars_format} parameter
@@ -29166,10 +29172,11 @@ if \tcode{fmt} is \tcode{chars_format::hex},
 and
 \tcode{g} if \tcode{fmt} is \tcode{chars_format::general}.
 
-\indexlibrary{\idxcode{to_chars}}%
+\begin{indexed}{\indexlibrary{\idxcode{to_chars}}}
 \begin{itemdecl}
 to_chars_result to_chars(char* first, char* last, @\seebelow@ value, int base = 10);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -29195,12 +29202,13 @@ and \tcode{char}
 as the type of the parameter \tcode{value}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{to_chars}}%
+\begin{indexed}{\indexlibrary{\idxcode{to_chars}}}
 \begin{itemdecl}
 to_chars_result to_chars(char* first, char* last, float value);
 to_chars_result to_chars(char* first, char* last, double value);
 to_chars_result to_chars(char* first, char* last, long double value);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -29216,12 +29224,13 @@ a tie is resolved in favor of \tcode{f}.
 \throws Nothing.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{to_chars}}%
+\begin{indexed}{\indexlibrary{\idxcode{to_chars}}}
 \begin{itemdecl}
 to_chars_result to_chars(char* first, char* last, float value, chars_format fmt);
 to_chars_result to_chars(char* first, char* last, double value, chars_format fmt);
 to_chars_result to_chars(char* first, char* last, long double value, chars_format fmt);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -29237,7 +29246,7 @@ in the \tcode{"C"} locale.
 \throws Nothing.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{to_chars}}%
+\begin{indexed}{\indexlibrary{\idxcode{to_chars}}}
 \begin{itemdecl}
 to_chars_result to_chars(char* first, char* last, float value,
                          chars_format fmt, int precision);
@@ -29246,6 +29255,7 @@ to_chars_result to_chars(char* first, char* last, double value,
 to_chars_result to_chars(char* first, char* last, long double value,
                          chars_format fmt, int precision);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -29296,14 +29306,15 @@ the member \tcode{ec} of the return value
 is equal to \tcode{errc::result_out_of_range}.
 Otherwise,
 \tcode{value} is set to the parsed value,
-after rounding according to \tcode{round_to_nearest}\iref{round.style}, and
+after rounding according to \liblinkx{\tcode{round_to_nearest}}{round_to_nearest}{\ref{round.style}}, and
 the member \tcode{ec} is value-initialized.
 
-\indexlibrary{\idxcode{from_chars}}%
+\begin{indexed}{\indexlibrary{\idxcode{from_chars}}}
 \begin{itemdecl}
 from_chars_result from_chars(const char* first, const char* last,
                              @\seebelow@&@\itcorr[-1]@ value, int base = 10);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -29331,7 +29342,7 @@ and \tcode{char}
 as the referenced type of the parameter \tcode{value}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{from_chars}}%
+\begin{indexed}{\indexlibrary{\idxcode{from_chars}}}
 \begin{itemdecl}
 from_chars_result from_chars(const char* first, const char* last, float& value,
                              chars_format fmt = chars_format::general);
@@ -29340,6 +29351,7 @@ from_chars_result from_chars(const char* first, const char* last, double& value,
 from_chars_result from_chars(const char* first, const char* last, long double& value,
                              chars_format fmt = chars_format::general);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
-- 
2.7.4

