From 354deafefb6ecc8d1a000cca03c7816429c5fc23 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Fri, 10 Mar 2017 14:45:02 +0100
Subject: [PATCH 01/45] [expr.mptr.oper] Add missing indentation in example
 code.

---
 source/expressions.tex | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/source/expressions.tex b/source/expressions.tex
index 7b7dfab..ee121b2 100644
--- a/source/expressions.tex
+++ b/source/expressions.tex
@@ -3971,9 +3971,9 @@ struct S {
 };
 void f()
 {
-const S cs;
-int S::* pm = &S::i;            // \tcode{pm} refers to \tcode{mutable} member \tcode{S::i}
-cs.*pm = 88;                    // ill-formed: \tcode{cs} is a \tcode{const} object
+  const S cs;
+  int S::* pm = &S::i;          // \tcode{pm} refers to \tcode{mutable} member \tcode{S::i}
+  cs.*pm = 88;                  // ill-formed: \tcode{cs} is a \tcode{const} object
 }
 \end{codeblock}
 \end{note}
-- 
2.7.4


From 46e6db990fe54a1914cea1d4a09195c068322567 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sun, 5 Mar 2017 16:24:26 +0100
Subject: [PATCH 02/45] [unord.req] Move library name index entries to library
 name index.

---
 source/containers.tex | 116 +++++++++++++++++++++++++-------------------------
 1 file changed, 58 insertions(+), 58 deletions(-)

diff --git a/source/containers.tex b/source/containers.tex
index 9b793e4..a8883d2 100644
--- a/source/containers.tex
+++ b/source/containers.tex
@@ -2226,8 +2226,8 @@ and \tcode{nh} denotes a non-const rvalue of type \tcode{X::node_type}.
 \endhead
 %%
 \tcode{X::key_type}   &
-\indextext{unordered associative containers!\idxcode{key_type}}%
-\indextext{\idxcode{key_type}!unordered associative containers}%
+\indexlibrary{unordered associative containers!\idxcode{key_type}}%
+\indexlibrary{\idxcode{key_type}!unordered associative containers}%
   \tcode{Key}         &
                       &
   compile time        \\ \rowsep
@@ -2251,8 +2251,8 @@ and \tcode{nh} denotes a non-const rvalue of type \tcode{X::node_type}.
 &   \tcode{Hash}
 &   \tcode{Hash} shall be a unary function object type such that the expression
     \tcode{hf(k)} has type \tcode{size_t}.%
-    \indextext{unordered associative containers!\idxcode{hasher}}%
-    \indextext{\idxcode{hasher}!unordered associative containers}%
+    \indexlibrary{unordered associative containers!\idxcode{hasher}}%
+    \indexlibrary{\idxcode{hasher}!unordered associative containers}%
 &   compile time
 \\ \rowsep
 %
@@ -2261,8 +2261,8 @@ and \tcode{nh} denotes a non-const rvalue of type \tcode{X::node_type}.
 &   \requires\ \tcode{Pred} is \tcode{CopyConstructible}.\br
     \tcode{Pred} shall be a binary predicate that takes two arguments
     of type \tcode{Key}.  \tcode{Pred} is an equivalence relation.%
-    \indextext{unordered associative containers!\idxcode{key_equal}}%
-    \indextext{\idxcode{key_equal}!unordered associative containers}%
+    \indexlibrary{unordered associative containers!\idxcode{key_equal}}%
+    \indexlibrary{\idxcode{key_equal}!unordered associative containers}%
 &   compile time
 \\ \rowsep
 %
@@ -2273,8 +2273,8 @@ and \tcode{nh} denotes a non-const rvalue of type \tcode{X::node_type}.
 &   A \tcode{local_iterator} object may be used to iterate through a
     single bucket, but may not be used to iterate across
     buckets.%
-    \indextext{unordered associative containers!\idxcode{local_iterator}}%
-    \indextext{\idxcode{local_iterator}!unordered associative containers}%
+    \indexlibrary{unordered associative containers!\idxcode{local_iterator}}%
+    \indexlibrary{\idxcode{local_iterator}!unordered associative containers}%
 &   compile time
 \\ \rowsep
 %
@@ -2285,8 +2285,8 @@ and \tcode{nh} denotes a non-const rvalue of type \tcode{X::node_type}.
 &   A \tcode{const_local_iterator} object may be used to iterate through a
     single bucket, but may not be used to iterate across
     buckets.%
-    \indextext{unordered associative containers!\idxcode{const_local_iterator}}%
-    \indextext{\idxcode{const_local_iterator}!unordered associative containers}%
+    \indexlibrary{unordered associative containers!\idxcode{const_local_iterator}}%
+    \indexlibrary{\idxcode{const_local_iterator}!unordered associative containers}%
 &   compile time
 \\ \rowsep
 %
@@ -2430,16 +2430,16 @@ and \tcode{CopyAssignable}.\br
 \tcode{b.hash_function()}
 &   \tcode{hasher}
 &   Returns \tcode{b}'s hash function.%
-    \indextext{unordered associative containers!\idxcode{hash_function}}%
-    \indextext{\idxcode{hash_function}!unordered associative containers}%
+    \indexlibrary{unordered associative containers!\idxcode{hash_function}}%
+    \indexlibrary{\idxcode{hash_function}!unordered associative containers}%
 &   constant
 \\ \rowsep
 %
 \tcode{b.key_eq()}
 &   \tcode{key_equal}
 &   Returns \tcode{b}'s key equality predicate.%
-    \indextext{unordered associative containers!\idxcode{key_eq}}%
-    \indextext{\idxcode{key_eq}!unordered associative containers}%
+    \indexlibrary{unordered associative containers!\idxcode{key_eq}}%
+    \indexlibrary{\idxcode{key_eq}!unordered associative containers}%
 &   constant
 \\ \rowsep
 %
@@ -2487,8 +2487,8 @@ and \tcode{CopyAssignable}.\br
     component of the returned pair indicates whether the insertion
     takes place, and the \tcode{iterator} component points to the element
     with key equivalent to the key of \tcode{t}.%
-    \indextext{unordered associative containers!\idxcode{insert}}%
-    \indextext{\idxcode{insert}!unordered associative containers}%
+    \indexlibrary{unordered associative containers!\idxcode{insert}}%
+    \indexlibrary{\idxcode{insert}!unordered associative containers}%
 &   Average case \bigoh{1}, worst case \bigoh{\tcode{a_uniq.}\br\tcode{size()}}.
 \\ \rowsep
 %
@@ -2499,8 +2499,8 @@ and \tcode{CopyAssignable}.\br
     \tcode{CopyInsertable} into \tcode{X}.\br
     \effects\ Inserts \tcode{t}, and returns an iterator pointing to the newly
     inserted element.
-    \indextext{unordered associative containers!\idxcode{insert}}%
-    \indextext{\idxcode{insert}!unordered associative containers}%
+    \indexlibrary{unordered associative containers!\idxcode{insert}}%
+    \indexlibrary{\idxcode{insert}!unordered associative containers}%
 &   Average case \bigoh{1}, worst case \bigoh{\tcode{a_eq.}\br\tcode{size()}}.
 \\ \rowsep
 %
@@ -2513,8 +2513,8 @@ and \tcode{CopyAssignable}.\br
 to the element with the key equivalent to that of \tcode{t}.  The
 iterator \tcode{p} is a hint pointing to where the search should
 start.  Implementations are permitted to ignore the hint.%
-    \indextext{unordered associative containers!\idxcode{insert}}%
-    \indextext{\idxcode{insert}!unordered associative containers}%
+    \indexlibrary{unordered associative containers!\idxcode{insert}}%
+    \indexlibrary{\idxcode{insert}!unordered associative containers}%
 &   Average case \bigoh{1}, worst case \bigoh{\tcode{a.size()}}.
 \\ \rowsep
 %
@@ -2523,8 +2523,8 @@ start.  Implementations are permitted to ignore the hint.%
 &   \requires\ \tcode{value_type} shall be \tcode{EmplaceConstructible} into \tcode{X} from \tcode{*i}.\br
     \requires \tcode{i} and \tcode{j} are not iterators in \tcode{a}.
     Equivalent to \tcode{a.insert(t)} for each element in \tcode{[i,j)}.%
-    \indextext{unordered associative containers!\idxcode{insert}}%
-    \indextext{\idxcode{insert}!unordered associative containers}%
+    \indexlibrary{unordered associative containers!\idxcode{insert}}%
+    \indexlibrary{\idxcode{insert}!unordered associative containers}%
 &   Average case \bigoh{N}, where $N$ is \tcode{distance(i, j)}.
     Worst case \bigoh{N(\tcode{a.size()}\brk{}+\brk{}1)}.
 \\ \rowsep
@@ -2620,8 +2620,8 @@ the number of elements erased.
 &   \tcode{iterator}
 &   Erases the element pointed to by \tcode{q}. Returns the
     iterator immediately following \tcode{q} prior to the erasure.
-    \indextext{unordered associative containers!\idxcode{erase}}%
-    \indextext{\idxcode{erase}!unordered associative containers}%
+    \indexlibrary{unordered associative containers!\idxcode{erase}}%
+    \indexlibrary{\idxcode{erase}!unordered associative containers}%
 &   Average case \bigoh{1}, worst case \bigoh{\tcode{a.size()}}.
 \\ \rowsep
 %
@@ -2629,8 +2629,8 @@ the number of elements erased.
 &   \tcode{iterator}
 &   Erases the element pointed to by \tcode{r}. Returns the
     iterator immediately following \tcode{r} prior to the erasure.
-    \indextext{unordered associative containers!\idxcode{erase}}%
-    \indextext{\idxcode{erase}!unordered associative containers}%
+    \indexlibrary{unordered associative containers!\idxcode{erase}}%
+    \indexlibrary{\idxcode{erase}!unordered associative containers}%
 &   Average case \bigoh{1}, worst case \bigoh{\tcode{a.size()}}.
 \\ \rowsep
 %
@@ -2639,8 +2639,8 @@ the number of elements erased.
 &   Erases all elements in the range \tcode{[q1, q2)}. Returns
     the iterator immediately following the erased elements prior to the
     erasure.%
-    \indextext{unordered associative containers!\idxcode{erase}}%
-    \indextext{\idxcode{erase}!unordered associative containers}%
+    \indexlibrary{unordered associative containers!\idxcode{erase}}%
+    \indexlibrary{\idxcode{erase}!unordered associative containers}%
 &   Average case linear in \tcode{distance(q1, q2)},
     worst case \bigoh{\tcode{a.size()}}.
 \\ \rowsep
@@ -2649,8 +2649,8 @@ the number of elements erased.
 & \tcode{void}
 & Erases all elements in the container.
    \postconditions \tcode{a.empty()} returns \tcode{true}%
-    \indextext{unordered associative containers!\idxcode{clear}}%
-    \indextext{\idxcode{clear}!unordered associative containers}%
+    \indexlibrary{unordered associative containers!\idxcode{clear}}%
+    \indexlibrary{\idxcode{clear}!unordered associative containers}%
 & Linear in \tcode{a.size()}.
 \\ \rowsep
 %
@@ -2658,16 +2658,16 @@ the number of elements erased.
 &   \tcode{iterator}; \br \tcode{const_iterator} for const \tcode{b}.
 &   Returns an iterator pointing to an element with key equivalent to
     \tcode{k}, or \tcode{b.end()} if no such element exists.%
-    \indextext{unordered associative containers!\idxcode{find}}%
-    \indextext{\idxcode{find}!unordered associative containers}%
+    \indexlibrary{unordered associative containers!\idxcode{find}}%
+    \indexlibrary{\idxcode{find}!unordered associative containers}%
 &   Average case \bigoh{1}, worst case \bigoh{\tcode{b.size()}}.
 \\ \rowsep
 %
 \tcode{b.count(k)}
 &   \tcode{size_type}
 &   Returns the number of elements with key equivalent to \tcode{k}.%
-    \indextext{unordered associative containers!\idxcode{count}}%
-    \indextext{\idxcode{count}!unordered associative containers}%
+    \indexlibrary{unordered associative containers!\idxcode{count}}%
+    \indexlibrary{\idxcode{count}!unordered associative containers}%
 &   Average case \bigoh{\tcode{b.count(k)}}, worst case \bigoh{\tcode{b.size()}}.
 \\ \rowsep
 %
@@ -2677,8 +2677,8 @@ the number of elements erased.
 &   Returns a range containing all elements with keys equivalent to
     \tcode{k}.  Returns \tcode{make_pair(b.end(), b.end())} if
     no such elements exist.%
-    \indextext{unordered associative containers!\idxcode{equal_range}}%
-    \indextext{\idxcode{equal_range}!unordered associative containers}%
+    \indexlibrary{unordered associative containers!\idxcode{equal_range}}%
+    \indexlibrary{\idxcode{equal_range}!unordered associative containers}%
 &   Average case \bigoh{\tcode{b.count(k)}}.  Worst case
     \bigoh{\tcode{b.size()}}.
 \\ \rowsep
@@ -2686,8 +2686,8 @@ the number of elements erased.
 \tcode{b.bucket_count()}
 &   \tcode{size_type}
 &   Returns the number of buckets that \tcode{b} contains.%
-    \indextext{unordered associative containers!\idxcode{bucket_count}}%
-    \indextext{\idxcode{bucket_count}!unordered associative containers}%
+    \indexlibrary{unordered associative containers!\idxcode{bucket_count}}%
+    \indexlibrary{\idxcode{bucket_count}!unordered associative containers}%
 &   Constant
 \\ \rowsep
 %
@@ -2695,8 +2695,8 @@ the number of elements erased.
 &   \tcode{size_type}
 &   Returns an upper bound on the number of buckets that \tcode{b} might
     ever contain.%
-    \indextext{unordered associative containers!\idxcode{max_bucket_count}}%
-    \indextext{\idxcode{max_bucket_count}!unordered associative containers}%
+    \indexlibrary{unordered associative containers!\idxcode{max_bucket_count}}%
+    \indexlibrary{\idxcode{max_bucket_count}!unordered associative containers}%
 &   Constant
 \\ \rowsep
 %
@@ -2707,8 +2707,8 @@ the number of elements erased.
     Returns the index of the bucket in which elements with keys equivalent
     to \tcode{k} would be found, if any such element existed.
     \postconditions the return value shall be in the range \tcode{[0, b.bucket_count())}.%
-    \indextext{unordered associative containers!\idxcode{bucket}}%
-    \indextext{\idxcode{bucket}!unordered associative containers}%
+    \indexlibrary{unordered associative containers!\idxcode{bucket}}%
+    \indexlibrary{\idxcode{bucket}!unordered associative containers}%
 & Constant
 \\ \rowsep
 %
@@ -2716,8 +2716,8 @@ the number of elements erased.
 &   \tcode{size_type}
 &   \requires \tcode{n} shall be in the range \tcode{[0, b.bucket_count())}.
     Returns the number of elements in the $\texttt{n}^{\textrm{ th}}$ bucket.%
-    \indextext{unordered associative containers!\idxcode{bucket_size}}%
-    \indextext{\idxcode{bucket_size}!unordered associative containers}%
+    \indexlibrary{unordered associative containers!\idxcode{bucket_size}}%
+    \indexlibrary{\idxcode{bucket_size}!unordered associative containers}%
 &   \bigoh{\tcode{b.bucket_}\-\tcode{size(n)}}
 \\ \rowsep
 %
@@ -2728,8 +2728,8 @@ the number of elements erased.
     \tcode{b.begin(n)} returns an iterator referring to the
     first element in the bucket. If the bucket is empty, then
     \tcode{b.begin(n) == b.end(n)}.%
-    \indextext{unordered associative containers!\idxcode{begin}}%
-    \indextext{\idxcode{begin}!unordered associative containers}%
+    \indexlibrary{unordered associative containers!\idxcode{begin}}%
+    \indexlibrary{\idxcode{begin}!unordered associative containers}%
 &   Constant
 \\ \rowsep
 %
@@ -2739,8 +2739,8 @@ the number of elements erased.
 &   \requires \tcode{n} shall be in the range \tcode{[0, b.bucket_count())}.
     \tcode{b.end(n)} returns an iterator which is the past-the-end
     value for the bucket.%
-    \indextext{unordered associative containers!\idxcode{end}}%
-    \indextext{\idxcode{end}!unordered associative containers}%
+    \indexlibrary{unordered associative containers!\idxcode{end}}%
+    \indexlibrary{\idxcode{end}!unordered associative containers}%
 &   Constant
 \\ \rowsep
 %
@@ -2749,24 +2749,24 @@ the number of elements erased.
 &   \requires \tcode{n} shall be in the range \tcode{[0, b.bucket_count())}.
     Note: \tcode{[b.cbegin(n), b.cend(n))} is a valid range containing
     all of the elements in the $\texttt{n}^{\textrm{ th}}$ bucket.%
-    \indextext{unordered associative containers!\idxcode{cbegin}}%
-    \indextext{\idxcode{cbegin}!unordered associative containers}%
+    \indexlibrary{unordered associative containers!\idxcode{cbegin}}%
+    \indexlibrary{\idxcode{cbegin}!unordered associative containers}%
 &   Constant
 \\ \rowsep
 %
 \tcode{b.cend(n)}
 &   \tcode{const_local_iterator}
 &   \requires \tcode{n} shall be in the range \tcode{[0, b.bucket_count())}.%
-    \indextext{unordered associative containers!\idxcode{cend}}%
-    \indextext{\idxcode{cend}!unordered associative containers}%
+    \indexlibrary{unordered associative containers!\idxcode{cend}}%
+    \indexlibrary{\idxcode{cend}!unordered associative containers}%
 &   Constant
 \\ \rowsep
 %
 \tcode{b.load_factor()}
 &   \tcode{float}
 &   Returns the average number of elements per bucket.%
-    \indextext{unordered associative containers!\idxcode{load_factor}}%
-    \indextext{\idxcode{load_factor}!unordered associative containers}%
+    \indexlibrary{unordered associative containers!\idxcode{load_factor}}%
+    \indexlibrary{\idxcode{load_factor}!unordered associative containers}%
 &   Constant
 \\ \rowsep
 %
@@ -2776,8 +2776,8 @@ the number of elements erased.
     less than or equal to. The container automatically increases the
     number of buckets as necessary to keep the load factor below this
     number.%
-    \indextext{unordered associative containers!\idxcode{max_load_factor}}%
-    \indextext{\idxcode{max_load_factor}!unordered associative containers}%
+    \indexlibrary{unordered associative containers!\idxcode{max_load_factor}}%
+    \indexlibrary{\idxcode{max_load_factor}!unordered associative containers}%
 &   Constant
 \\ \rowsep
 %
@@ -2792,8 +2792,8 @@ the number of elements erased.
 & \tcode{void}
 & \postconditions \tcode{a.bucket_count() >= a.size() / a.max_load_factor()} and
         \tcode{a.bucket_count() >= n}.%
-    \indextext{unordered associative containers!\idxcode{rehash}}%
-    \indextext{\idxcode{rehash}!unordered associative containers}%
+    \indexlibrary{unordered associative containers!\idxcode{rehash}}%
+    \indexlibrary{\idxcode{rehash}!unordered associative containers}%
 & Average case linear in \tcode{a.size()}, worst case quadratic.
 \\ \rowsep
 
-- 
2.7.4


From e4188f2245417203f5fc7dbcdeb4046acb270cae Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sun, 5 Mar 2017 01:25:37 +0100
Subject: [PATCH 03/45] [basic.scope.pdecl] Capitalize note.

---
 source/basic.tex | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/source/basic.tex b/source/basic.tex
index 96c2128..a914a54 100644
--- a/source/basic.tex
+++ b/source/basic.tex
@@ -626,7 +626,7 @@ value. \end{example}
 \pnum
 \begin{note}
 \indextext{name hiding}%
-a name from an outer scope remains visible up
+A name from an outer scope remains visible up
 to the point of declaration of the name that hides it. \begin{example}
 
 \begin{codeblock}
-- 
2.7.4


From 14827d8a517afbcb3bf948f4be216545be46f9a1 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sat, 4 Mar 2017 08:05:41 +0100
Subject: [PATCH 04/45] [support.runtime, list.ops] Move non-code punctuation
 out of \tcode.

---
 source/containers.tex | 2 +-
 source/support.tex    | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/source/containers.tex b/source/containers.tex
index a8883d2..dc15181 100644
--- a/source/containers.tex
+++ b/source/containers.tex
@@ -5003,7 +5003,7 @@ template <class Predicate> void remove_if(Predicate pred);
 \pnum
 \effects
 Erases all the elements in the list referred by a list iterator \tcode{i} for which the
-following conditions hold: \tcode{*i == value, pred(*i) != false}.
+following conditions hold: \tcode{*i == value}, \tcode{pred(*i) != false}.
 Invalidates only the iterators and references to the erased elements.
 
 \pnum
diff --git a/source/support.tex b/source/support.tex
index 23671c4..9b8d8d8 100644
--- a/source/support.tex
+++ b/source/support.tex
@@ -3729,7 +3729,7 @@ Headers
 \tcode{<csignal>} (signal handling),
 \tcode{<cstdarg>} (variable arguments),
 and
-\tcode{<cstdlib>} (runtime environment \tcode{getenv, system}),
+\tcode{<cstdlib>} (runtime environment \tcode{getenv}, \tcode{system}),
 provide further compatibility with C code.
 
 \pnum
-- 
2.7.4


From 7c98cd9e473f5026977833798ec833b2d187e087 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sun, 26 Feb 2017 19:38:28 +0100
Subject: [PATCH 05/45] Harmonize index entries for 'null pointer value'.

---
 source/basic.tex       | 3 ++-
 source/conversions.tex | 3 +--
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/source/basic.tex b/source/basic.tex
index a914a54..ff0e4a2 100644
--- a/source/basic.tex
+++ b/source/basic.tex
@@ -4013,7 +4013,8 @@ a \defn{pointer to} an object or function (the pointer is said to \defn{point} t
 \item
 a \defn{pointer past the end of} an object (\ref{expr.add}), or
 \item
-the \defn{null pointer value} (\ref{conv.ptr}) for that type, or
+\indextext{null pointer value|see{value, null pointer}}
+the \defnx{null pointer value}{value!null pointer} (\ref{conv.ptr}) for that type, or
 \item
 an \defn{invalid pointer value}.
 \end{itemize}
diff --git a/source/conversions.tex b/source/conversions.tex
index e88e8d0..05b8895 100644
--- a/source/conversions.tex
+++ b/source/conversions.tex
@@ -491,12 +491,11 @@ source type is \tcode{bool}, the value \tcode{false} is converted to zero and th
 \indextext{conversion!pointer}%
 \indextext{pointer!zero}%
 \indextext{constant!null pointer}%
-\indextext{value!null pointer}%
 A \term{null pointer constant} is an integer literal~(\ref{lex.icon}) with
 value zero
 or a prvalue of type \tcode{std::nullptr_t}. A null pointer constant can be
 converted to a pointer type; the
-result is the \term{null pointer value} of that type and is
+result is the \defnx{null pointer value}{value!null pointer} of that type and is
 distinguishable from every other value of
 object pointer or function pointer
 type.
-- 
2.7.4


From b7c589864928dc93cbc5ffae335a4ecc96c26ddc Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sun, 26 Feb 2017 14:24:19 +0100
Subject: [PATCH 06/45] Replace \term with \placeholder.

---
 source/access.tex      | 20 ++++++++++----------
 source/expressions.tex |  2 +-
 source/lib-intro.tex   | 24 ++++++++++++------------
 source/utilities.tex   | 12 ++++++------
 4 files changed, 29 insertions(+), 29 deletions(-)

diff --git a/source/access.tex b/source/access.tex
index 77ccc72..6f87863 100644
--- a/source/access.tex
+++ b/source/access.tex
@@ -408,7 +408,7 @@ of
 is
 \term{accessible}
 at
-\term{R},
+\placeholder{R},
 if
 \begin{itemize}
 \item
@@ -417,7 +417,7 @@ an invented public member of
 would be a public member of
 \tcode{N}, or
 \item
-\term{R}
+\placeholder{R}
 occurs in a member or friend of class
 \tcode{N},
 and an invented public member of
@@ -425,7 +425,7 @@ and an invented public member of
 would be a private or protected member of
 \tcode{N}, or
 \item
-\term{R}
+\placeholder{R}
 occurs in a member or friend of a class
 \tcode{P}
 derived from
@@ -442,13 +442,13 @@ such that
 is a base class of
 \tcode{S}
 accessible at
-\term{R}
+\placeholder{R}
 and
 \tcode{S}
 is a base class of
 \tcode{N}
 accessible at
-\term{R}.
+\placeholder{R}.
 \end{itemize}
 
 \begin{example}
@@ -509,7 +509,7 @@ of the
 A member
 \tcode{m}
 is accessible at the point
-\term{R}
+\placeholder{R}
 when named in class
 \tcode{N}
 if
@@ -524,7 +524,7 @@ is public, or
 as a member of
 \tcode{N}
 is private, and
-\term{R}
+\placeholder{R}
 occurs in a member or friend of class
 \tcode{N},
 or
@@ -533,7 +533,7 @@ or
 as a member of
 \tcode{N}
 is protected, and
-\term{R}
+\placeholder{R}
 occurs in a member or friend of class
 \tcode{N},
 or in a member of a class
@@ -551,11 +551,11 @@ there exists a base class
 of
 \tcode{N}
 that is accessible at
-\term{R},
+\placeholder{R},
 and
 \tcode{m}
 is accessible at
-\term{R}
+\placeholder{R}
 when named in class
 \tcode{B}.
 \begin{example}
diff --git a/source/expressions.tex b/source/expressions.tex
index ee121b2..a49eee1 100644
--- a/source/expressions.tex
+++ b/source/expressions.tex
@@ -2129,7 +2129,7 @@ The result of a \tcode{typeid} expression is an lvalue of static type
 \indextext{\idxcode{type_info}}%
 \indexlibrary{\idxcode{type_info}}%
 \tcode{const} \tcode{std::type_info}~(\ref{type.info}) and dynamic type \tcode{const}
-\tcode{std::type_info} or \tcode{const} \term{name} where \term{name} is an
+\tcode{std::type_info} or \tcode{const} \placeholder{name} where \placeholder{name} is an
 \impldef{derived type for \tcode{typeid}} class publicly derived from
 \tcode{std::type_info} which preserves the behavior described
 in~\ref{type.info}.\footnote{The recommended name for such a class is
diff --git a/source/lib-intro.tex b/source/lib-intro.tex
index abab423..13076f3 100644
--- a/source/lib-intro.tex
+++ b/source/lib-intro.tex
@@ -639,7 +639,7 @@ or as a
 \indextext{type!enumerated}%
 
 \pnum
-The bitmask type \term{bitmask} can be written:
+The bitmask type \placeholder{bitmask} can be written:
 
 \begin{codeblock}
 // For exposition only.
@@ -654,28 +654,28 @@ inline constexpr @$\tcode{\placeholder{bitmask C}}_{2}$@(@$\tcode{\placeholder{V
 inline constexpr @$\tcode{\placeholder{bitmask C}}_{3}$@(@$\tcode{\placeholder{V}}_{3}{}$@);
   .....
 
-constexpr @\term{bitmask}{}@ operator&(@\term{bitmask}{}@ X, @\term{bitmask}{}@ Y) {
-  return static_cast<@\term{bitmask}{}@>(
+constexpr @\placeholder{bitmask}{}@ operator&(@\placeholder{bitmask}{}@ X, @\placeholder{bitmask}{}@ Y) {
+  return static_cast<@\placeholder{bitmask}{}@>(
     static_cast<int_type>(X) & static_cast<int_type>(Y));
 }
-constexpr @\term{bitmask}{}@ operator|(@\term{bitmask}{}@ X, @\term{bitmask}{}@ Y) {
-  return static_cast<@\term{bitmask}{}@>(
+constexpr @\placeholder{bitmask}{}@ operator|(@\placeholder{bitmask}{}@ X, @\placeholder{bitmask}{}@ Y) {
+  return static_cast<@\placeholder{bitmask}{}@>(
     static_cast<int_type>(X) | static_cast<int_type>(Y));
 }
-constexpr @\term{bitmask}{}@ operator^(@\term{bitmask}{}@ X, @\term{bitmask}{}@ Y){
-  return static_cast<@\term{bitmask}{}@>(
+constexpr @\placeholder{bitmask}{}@ operator^(@\placeholder{bitmask}{}@ X, @\placeholder{bitmask}{}@ Y){
+  return static_cast<@\placeholder{bitmask}{}@>(
     static_cast<int_type>(X) ^ static_cast<int_type>(Y));
 }
-constexpr @\term{bitmask}{}@ operator~(@\term{bitmask}{}@ X){
-  return static_cast<@\term{bitmask}{}@>(~static_cast<int_type>(X));
+constexpr @\placeholder{bitmask}{}@ operator~(@\placeholder{bitmask}{}@ X){
+  return static_cast<@\placeholder{bitmask}{}@>(~static_cast<int_type>(X));
 }
-@\term{bitmask}{}@& operator&=(@\term{bitmask}{}@& X, @\term{bitmask}{}@ Y){
+@\placeholder{bitmask}{}@& operator&=(@\placeholder{bitmask}{}@& X, @\placeholder{bitmask}{}@ Y){
   X = X & Y; return X;
 }
-@\term{bitmask}{}@& operator|=(@\term{bitmask}{}@& X, @\term{bitmask}{}@ Y) {
+@\placeholder{bitmask}{}@& operator|=(@\placeholder{bitmask}{}@& X, @\placeholder{bitmask}{}@ Y) {
   X = X | Y; return X;
 }
-@\term{bitmask}{}@& operator^=(@\term{bitmask}{}@& X, @\term{bitmask}{}@ Y) {
+@\placeholder{bitmask}{}@& operator^=(@\placeholder{bitmask}{}@& X, @\placeholder{bitmask}{}@ Y) {
   X = X ^ Y; return X;
 }
 \end{codeblock}
diff --git a/source/utilities.tex b/source/utilities.tex
index 07c7c10..1b9602f 100644
--- a/source/utilities.tex
+++ b/source/utilities.tex
@@ -17431,12 +17431,12 @@ namespace std {
       constexpr ToDuration round(const duration<Rep, Period>& d);
 
     // convenience typedefs
-    using nanoseconds  = duration<@\term{signed integer type of at least 64 bits}@, nano>;
-    using microseconds = duration<@\term{signed integer type of at least 55 bits}@, micro>;
-    using milliseconds = duration<@\term{signed integer type of at least 45 bits}@, milli>;
-    using seconds      = duration<@\term{signed integer type of at least 35 bits}@>;
-    using minutes      = duration<@\term{signed integer type of at least 29 bits}@, ratio<  60>>;
-    using hours        = duration<@\term{signed integer type of at least 23 bits}@, ratio<3600>>;
+    using nanoseconds  = duration<@\placeholder{signed integer type of at least 64 bits}@, nano>;
+    using microseconds = duration<@\placeholder{signed integer type of at least 55 bits}@, micro>;
+    using milliseconds = duration<@\placeholder{signed integer type of at least 45 bits}@, milli>;
+    using seconds      = duration<@\placeholder{signed integer type of at least 35 bits}@>;
+    using minutes      = duration<@\placeholder{signed integer type of at least 29 bits}@, ratio<  60>>;
+    using hours        = duration<@\placeholder{signed integer type of at least 23 bits}@, ratio<3600>>;
 
     // \ref{time.point.nonmember}, \tcode{time_point} arithmetic
     template <class Clock, class Duration1, class Rep2, class Period2>
-- 
2.7.4


From 4a2d754a5cf1a8ed53f0bafa11f7a6c90add8107 Mon Sep 17 00:00:00 2001
From: Jens Maurer <Jens.Maurer@gmx.net>
Date: Mon, 6 Feb 2017 10:55:20 +0100
Subject: [PATCH 07/45] [macros] Remove \xspace from macros taking a mandatory
 argument.

Other than positively influencing kerning, this removal has no effect.
---
 source/macros.tex | 42 +++++++++++++++++++++---------------------
 1 file changed, 21 insertions(+), 21 deletions(-)

diff --git a/source/macros.tex b/source/macros.tex
index 59dca33..a7227e1 100644
--- a/source/macros.tex
+++ b/source/macros.tex
@@ -126,7 +126,7 @@
 \let\omname\mname%
 \let\mname\idxmname%
 \let\oCpp\Cpp%
-\let\Cpp\idxCpp
+\let\Cpp\idxCpp%
 \let\oBreakableUnderscore\BreakableUnderscore%  See the "underscore" package.
 \let\BreakableUnderscore\textunderscore%
 \edef\x{#1}%
@@ -164,11 +164,11 @@
 
 % Code and definitions embedded in text.
 \newcommand{\tcode}[1]{\CodeStylex{#1}}
-\newcommand{\techterm}[1]{\textit{#1}\xspace}
-\newcommand{\defnx}[2]{\indexdefn{#2}\textit{#1}\xspace}
+\newcommand{\techterm}[1]{\textit{#1}}
+\newcommand{\defnx}[2]{\indexdefn{#2}\textit{#1}}
 \newcommand{\defn}[1]{\defnx{#1}{#1}}
-\newcommand{\term}[1]{\textit{#1}\xspace}
-\newcommand{\grammarterm}[1]{\textit{#1}\xspace}
+\newcommand{\term}[1]{\textit{#1}}
+\newcommand{\grammarterm}[1]{\textit{#1}}
 \newcommand{\placeholder}[1]{\textit{#1}}
 \newcommand{\placeholdernc}[1]{\textit{#1\nocorr}}
 
@@ -178,10 +178,10 @@
 
 %%--------------------------------------------------
 %% Macros for funky text
-\newcommand{\Cpp}{\texorpdfstring{C\kern-0.05em\protect\raisebox{.35ex}{\textsmaller[2]{+\kern-0.05em+}}}{C++}\xspace}
-\newcommand{\CppIII}{\Cpp 2003\xspace}
-\newcommand{\CppXI}{\Cpp 2011\xspace}
-\newcommand{\CppXIV}{\Cpp 2014\xspace}
+\newcommand{\Cpp}{\texorpdfstring{C\kern-0.05em\protect\raisebox{.35ex}{\textsmaller[2]{+\kern-0.05em+}}}{C++}}
+\newcommand{\CppIII}{\Cpp{} 2003}
+\newcommand{\CppXI}{\Cpp{} 2011}
+\newcommand{\CppXIV}{\Cpp{} 2014}
 \newcommand{\opt}{{\ensuremath{_\mathit{opt}}}\xspace}
 \newcommand{\dcr}{-{-}}
 \newcommand{\bigoh}[1]{\ensuremath{\mathscr{O}(#1)}}
@@ -206,12 +206,12 @@
 %% Notes and examples
 \newcommand{\noteintro}[1]{[\,\textit{#1:}\space}
 \newcommand{\noteoutro}[1]{\textit{\,---\,end #1}\,]}
-\newenvironment{note}[1][Note]{\noteintro{#1}}{\noteoutro{note}\xspace}
-\newenvironment{example}[1][Example]{\noteintro{#1}}{\noteoutro{example}\xspace}
+\newenvironment{note}[1][Note]{\noteintro{#1}}{\noteoutro{note}\space}
+\newenvironment{example}[1][Example]{\noteintro{#1}}{\noteoutro{example}\space}
 
 %% Library function descriptions
-\newcommand{\Fundescx}[1]{\textit{#1}\xspace}
-\newcommand{\Fundesc}[1]{\Fundescx{#1:}}
+\newcommand{\Fundescx}[1]{\textit{#1}}
+\newcommand{\Fundesc}[1]{\Fundescx{#1:}\xspace}
 \newcommand{\required}{\Fundesc{Required behavior}}
 \newcommand{\requires}{\Fundesc{Requires}}
 \newcommand{\effects}{\Fundesc{Effects}}
@@ -287,14 +287,14 @@
 \newcommand{\commentellip}{\tcode{/* ...\ */}}
 
 %% Ranges
-\newcommand{\Range}[4]{\tcode{#1#3,\penalty2000{} #4#2}\xspace}
+\newcommand{\Range}[4]{\tcode{#1#3,\penalty2000{} #4#2}}
 \newcommand{\crange}[2]{\Range{[}{]}{#1}{#2}}
 \newcommand{\brange}[2]{\Range{(}{]}{#1}{#2}}
 \newcommand{\orange}[2]{\Range{(}{)}{#1}{#2}}
 \newcommand{\range}[2]{\Range{[}{)}{#1}{#2}}
 
 %% Change descriptions
-\newcommand{\diffdef}[1]{\hfill\break\textbf{#1:}\xspace}
+\newcommand{\diffdef}[1]{\hfill\break\textbf{#1:}\space}
 \newcommand{\change}{\diffdef{Change}}
 \newcommand{\rationale}{\diffdef{Rationale}}
 \newcommand{\effect}{\diffdef{Effect on original feature}}
@@ -303,13 +303,13 @@
 
 %% Miscellaneous
 \newcommand{\uniquens}{\placeholdernc{unique}}
-\newcommand{\stage}[1]{\item{\textbf{Stage #1:}}\xspace}
-\newcommand{\doccite}[1]{\textit{#1}\xspace}
+\newcommand{\stage}[1]{\item{\textbf{Stage #1:}}}
+\newcommand{\doccite}[1]{\textit{#1}}
 \newcommand{\cvqual}[1]{\textit{#1}}
 \newcommand{\cv}{\cvqual{cv}}
-\renewcommand{\emph}[1]{\textit{#1}\xspace}
-\newcommand{\numconst}[1]{\textsl{#1}\xspace}
-\newcommand{\logop}[1]{{\footnotesize #1}\xspace}
+\renewcommand{\emph}[1]{\textit{#1}}
+\newcommand{\numconst}[1]{\textsl{#1}}
+\newcommand{\logop}[1]{{\footnotesize #1}}
 
 %%--------------------------------------------------
 %% Environments for code listings.
@@ -397,7 +397,7 @@
 \newenvironment{bnfbase}
  {
  \newcommand{\nontermdef}[1]{{\BnfNontermshape##1\itcorr}\indexgrammar{\idxgram{##1}}\textnormal{:}}
- \newcommand{\terminal}[1]{{\BnfTermshape ##1}\xspace}
+ \newcommand{\terminal}[1]{{\BnfTermshape ##1}}
  \newcommand{\descr}[1]{\textnormal{##1}}
  \newcommand{\bnfindentfirst}{\BnfIndent}
  \newcommand{\bnfindentinc}{\BnfInc}
-- 
2.7.4


From 7023c09b3dd563a015caf059208aafda85893629 Mon Sep 17 00:00:00 2001
From: Jens Maurer <Jens.Maurer@gmx.net>
Date: Tue, 7 Feb 2017 10:14:45 +0100
Subject: [PATCH 08/45] Replace \Cpp and related macros with \Cpp{} etc.

---
 source/algorithms.tex    |   4 +-
 source/basic.tex         |  26 ++--
 source/compatibility.tex | 340 +++++++++++++++++++++++------------------------
 source/containers.tex    |   2 +-
 source/conversions.tex   |   2 +-
 source/cover-reg.tex     |   4 +-
 source/cover-wd.tex      |   2 +-
 source/declarations.tex  |  32 ++---
 source/declarators.tex   |   6 +-
 source/diagnostics.tex   |  12 +-
 source/expressions.tex   |   8 +-
 source/future.tex        |  10 +-
 source/grammar.tex       |   4 +-
 source/intro.tex         |  52 ++++----
 source/iostreams.tex     |   8 +-
 source/iterators.tex     |   8 +-
 source/lex.tex           |  12 +-
 source/lib-intro.tex     | 196 +++++++++++++--------------
 source/limits.tex        |   2 +-
 source/locales.tex       |  12 +-
 source/numerics.tex      |   6 +-
 source/regex.tex         |   4 +-
 source/support.tex       |  22 +--
 source/threads.tex       |   2 +-
 source/utilities.tex     |  18 +--
 25 files changed, 397 insertions(+), 397 deletions(-)

diff --git a/source/algorithms.tex b/source/algorithms.tex
index 1a8ffe5..2bf8128 100644
--- a/source/algorithms.tex
+++ b/source/algorithms.tex
@@ -4,7 +4,7 @@
 \rSec1[algorithms.general]{General}
 
 \pnum
-This Clause describes components that \Cpp programs may use to perform
+This Clause describes components that \Cpp{} programs may use to perform
 algorithmic operations on containers (Clause~\ref{containers}) and other sequences.
 
 \pnum
@@ -1226,7 +1226,7 @@ return distance(a, b);
 \rSec1[algorithms.parallel]{Parallel algorithms}
 
 \pnum
-This section describes components that \Cpp programs may use to perform
+This section describes components that \Cpp{} programs may use to perform
 operations on containers and other sequences in parallel.
 
 \rSec2[algorithms.parallel.defns]{Terms and definitions}
diff --git a/source/basic.tex b/source/basic.tex
index ff0e4a2..699d294 100644
--- a/source/basic.tex
+++ b/source/basic.tex
@@ -4,11 +4,11 @@
 \gramSec[gram.basic]{Basic concepts}
 
 \pnum
-\begin{note} This Clause presents the basic concepts of the \Cpp language.
+\begin{note} This Clause presents the basic concepts of the \Cpp{} language.
 It explains the difference between an object and a
 name and how they relate to the value categories for expressions.
 It introduces the concepts of a
-declaration and a definition and presents \Cpp's
+declaration and a definition and presents \Cpp{}'s
 notion of type, scope, linkage, and
 storage duration. The mechanisms for starting and
 terminating a program are discussed. Finally, this Clause presents the
@@ -206,7 +206,7 @@ using N::d;                     // declares \tcode{d}
 \pnum
 \begin{note}
 \indextext{implementation-generated}%
-In some circumstances, \Cpp implementations implicitly define the
+In some circumstances, \Cpp{} implementations implicitly define the
 default constructor~(\ref{class.ctor}),
 copy constructor~(\ref{class.copy}),
 move constructor~(\ref{class.copy}),
@@ -2422,7 +2422,7 @@ a major array bound~(\ref{dcl.array}). A violation of this rule on type
 identity does not require a diagnostic.
 
 \pnum
-\begin{note} Linkage to non-\Cpp declarations can be achieved using a
+\begin{note} Linkage to non-\Cpp{} declarations can be achieved using a
 \grammarterm{linkage-specification}~(\ref{dcl.link}). \end{note}%
 \indextext{linkage|)}
 
@@ -2448,7 +2448,7 @@ duration. \end{note}
 
 \pnum
 An implementation shall not predefine the \tcode{main} function. This
-function shall not be overloaded.  Its type shall have \Cpp language linkage
+function shall not be overloaded.  Its type shall have \Cpp{} language linkage
 and it shall have a declared return type of type
 \tcode{int}, but otherwise its type is \impldef{parameters to \tcode{main}}.
 \indextext{\idxcode{main} function!implementation-defined parameters to}%
@@ -2945,7 +2945,7 @@ execution~(\ref{intro.execution}), using
 \indextext{\idxcode{new}}%
 \grammarterm{new-expression}{s}~(\ref{expr.new}), and destroyed using
 \indextext{\idxcode{delete}}%
-\grammarterm{delete-expression}{s}~(\ref{expr.delete}). A \Cpp implementation
+\grammarterm{delete-expression}{s}~(\ref{expr.delete}). A \Cpp{} implementation
 provides access to, and management of, dynamic storage via the global
 \defn{allocation functions} \tcode{operator new} and \tcode{operator
 new[]} and the global \defn{deallocation functions} \tcode{operator
@@ -2958,7 +2958,7 @@ do not perform allocation or deallocation.
 \pnum
 The library provides default definitions for the global allocation and
 deallocation functions. Some global allocation and deallocation
-functions are replaceable~(\ref{new.delete}). A \Cpp program shall
+functions are replaceable~(\ref{new.delete}). A \Cpp{} program shall
 provide at most one definition of a replaceable allocation or
 deallocation function. Any such function definition replaces the default
 version provided in the library~(\ref{replacement.functions}). The
@@ -3004,7 +3004,7 @@ deallocation functions may also be declared and defined for any
 class~(\ref{class.free}).
 
 \pnum
-Any allocation and/or deallocation functions defined in a \Cpp program,
+Any allocation and/or deallocation functions defined in a \Cpp{} program,
 including the default versions in the library, shall conform to the
 semantics specified in~\ref{basic.stc.dynamic.allocation}
 and~\ref{basic.stc.dynamic.deallocation}.
@@ -3052,7 +3052,7 @@ The effect of indirecting through a pointer
 returned as a request for zero size is undefined.\footnote{The intent is
 to have \tcode{operator new()} implementable by
 calling \tcode{std::malloc()} or \tcode{std::calloc()}, so the rules are
-substantially the same. \Cpp differs from C in requiring a zero request
+substantially the same. \Cpp{} differs from C in requiring a zero request
 to return a non-null pointer.}
 
 \pnum
@@ -3075,7 +3075,7 @@ that would match a handler~(\ref{except.handle}) of type
 A global allocation function is only called as the result of a new
 expression~(\ref{expr.new}), or called directly using the function call
 syntax~(\ref{expr.call}), or called indirectly through calls to the
-functions in the \Cpp standard library. \begin{note} In particular, a
+functions in the \Cpp{} standard library. \begin{note} In particular, a
 global allocation function is not called to allocate storage for objects
 with static storage duration~(\ref{basic.stc.static}), for objects or references
 with thread storage duration~(\ref{basic.stc.thread}), for objects of
@@ -3158,12 +3158,12 @@ match those of some object pointer type.
 A pointer value is a \defn{safely-derived pointer} to a dynamic object only if it
 has an object pointer type and it is one of the following:
 \begin{itemize}
-\item the value returned by a call to the \Cpp standard library implementation of
+\item the value returned by a call to the \Cpp{} standard library implementation of
 \tcode{::operator new(std::\brk{}size_t)} or
 \tcode{::operator new(std::size_t, std::align_val_t)}%
 ;\footnote{This section does not impose restrictions
 on indirection through pointers to memory not allocated by \tcode{::operator new}. This
-maintains the ability of many \Cpp implementations to use binary libraries and
+maintains the ability of many \Cpp{} implementations to use binary libraries and
 components written in other languages. In particular, this applies to C binaries,
 because indirection through pointers to memory allocated by \tcode{std::malloc} is not restricted.}
 
@@ -3568,7 +3568,7 @@ the value of type \tcode{T}. For trivially copyable types, the value representat
 a set of bits in the object representation that determines a
 \defn{value}, which is one discrete element of an
 \impldef{values of a trivially copyable type} set of values.\footnote{The
-intent is that the memory model of \Cpp is compatible
+intent is that the memory model of \Cpp{} is compatible
 with that of ISO/IEC 9899 Programming Language C.}
 
 \pnum
diff --git a/source/compatibility.tex b/source/compatibility.tex
index 72889bc..3e4b5ff 100644
--- a/source/compatibility.tex
+++ b/source/compatibility.tex
@@ -1,26 +1,26 @@
 %!TEX root = std.tex
 \infannex{diff}{Compatibility}
 
-\rSec1[diff.iso]{\Cpp and ISO C}
+\rSec1[diff.iso]{\Cpp{} and ISO C}
 
 \pnum
 \indextext{summary!compatibility with ISO C}%
-This subclause lists the differences between \Cpp and
+This subclause lists the differences between \Cpp{} and
 ISO C, by the chapters of this document.
 
 \rSec2[diff.lex]{Clause~\ref{lex}: lexical conventions}
 
 \ref{lex.key}
 \change New Keywords\\
-New keywords are added to \Cpp;
+New keywords are added to \Cpp{};
 see \ref{lex.key}.
 \rationale
 These keywords were added in order to implement the new
-semantics of \Cpp.
+semantics of \Cpp{}.
 \effect
 Change to semantics of well-defined feature.
 Any ISO C programs that used any of these keywords as identifiers
-are not valid \Cpp programs.
+are not valid \Cpp{} programs.
 \difficulty
 Syntactic transformation.
 Converting one specific program is easy.
@@ -53,7 +53,7 @@ ISO C programs which depend on
 sizeof('x') == sizeof(int)
 \end{codeblock}
 
-will not work the same as \Cpp programs.
+will not work the same as \Cpp{} programs.
 \difficulty
 Simple.
 \howwide
@@ -82,7 +82,7 @@ Change to semantics of well-defined feature.
 Syntactic transformation. The fix is to add a cast:
 
 \begin{codeblock}
-char* p = "abc";                // valid in C, invalid in \Cpp
+char* p = "abc";                // valid in C, invalid in \Cpp{}
 void f(char*) {
   char* p = (char*)"abc";       // OK: cast added
   f(p);
@@ -97,7 +97,7 @@ as pointers to potentially modifiable memory are probably rare.
 \rSec2[diff.basic]{Clause \ref{basic}: basic concepts}
 
 \ref{basic.def}
-\change \Cpp does not have ``tentative definitions'' as in C.\\
+\change \Cpp{} does not have ``tentative definitions'' as in C.\\
 E.g., at file scope,
 
 \begin{codeblock}
@@ -105,7 +105,7 @@ int i;
 int i;
 \end{codeblock}
 
-is valid in C, invalid in \Cpp.
+is valid in C, invalid in \Cpp{}.
 This makes it impossible to define
 mutually referential file-local static objects, if initializers are
 restricted to the syntactic forms of C\@.
@@ -126,16 +126,16 @@ fundamental types and user-defined types.
 Deletion of semantically well-defined feature.
 \difficulty
 Semantic transformation.
-In \Cpp, the initializer for one of a set of
+In \Cpp{}, the initializer for one of a set of
 mutually-referential file-local static objects must invoke a function
 call to achieve the initialization.
 \howwide
 Seldom.
 
 \ref{basic.scope}
-\change A \tcode{struct} is a scope in \Cpp, not in C.
+\change A \tcode{struct} is a scope in \Cpp{}, not in C.
 \rationale
-Class scope is crucial to \Cpp, and a struct is a class.
+Class scope is crucial to \Cpp{}, and a struct is a class.
 \effect
 Change to semantics of well-defined feature.
 \difficulty
@@ -151,7 +151,7 @@ The latter is probably rare.
 declared \tcode{extern}, has internal linkage, while in C it would have external linkage.
 \rationale
 Because \tcode{const} objects may be used as values during translation in
-\Cpp, this feature urges programmers to provide an explicit initializer
+\Cpp{}, this feature urges programmers to provide an explicit initializer
 for each \tcode{const} object.
 This feature allows the user to put \tcode{const} objects in source files that are included
 in more than one translation unit.
@@ -175,13 +175,13 @@ Trivial: create an intermediary function such as
 Seldom.
 
 \ref{basic.types}
-\change C allows ``compatible types'' in several places, \Cpp does not.\\
+\change C allows ``compatible types'' in several places, \Cpp{} does not.\\
 For example,
 otherwise-identical \tcode{struct} types with different tag names
 are ``compatible'' in C but are distinctly different types
-in \Cpp.
+in \Cpp{}.
 \rationale
-Stricter type checking is essential for \Cpp.
+Stricter type checking is essential for \Cpp{}.
 \effect
 Deletion of semantically well-defined feature.
 \difficulty
@@ -210,14 +210,14 @@ void foo() {
 
 ISO C will accept this usage of pointer to void being assigned
 to a pointer to object type.
-\Cpp will not.
+\Cpp{} will not.
 \rationale
-\Cpp tries harder than C to enforce compile-time type safety.
+\Cpp{} tries harder than C to enforce compile-time type safety.
 \effect
 Deletion of semantically well-defined feature.
 \difficulty
 Could be automated.
-Violations will be diagnosed by the \Cpp translator.
+Violations will be diagnosed by the \Cpp{} translator.
 The
 fix is to add a  cast.
 For example:
@@ -237,7 +237,7 @@ if the cast is not used.
 \ref{expr.call}
 \change Implicit declaration of functions is not allowed.
 \rationale
-The type-safe nature of \Cpp.
+The type-safe nature of \Cpp{}.
 \effect
 Deletion of semantically well-defined feature.
 Note: the original feature was labeled as ``obsolescent'' in ISO C.
@@ -280,7 +280,7 @@ Seldom.
 \indextext{lvalue}%
 \change The result of a conditional expression, an assignment expression, or a comma expression may be an lvalue.
 \rationale
-\Cpp is an object-oriented language, placing relatively
+\Cpp{} is an object-oriented language, placing relatively
 more emphasis on lvalues.  For example, functions may
 return lvalues.
 \effect
@@ -295,7 +295,7 @@ sizeof(0, arr)
 
 yields
 \tcode{100}
-in \Cpp and
+in \Cpp{} and
 \tcode{sizeof(char*)}
 in C.
 \difficulty
@@ -315,7 +315,7 @@ Allowing jump past initializers would require
 complicated runtime determination of allocation.
 Furthermore, any use of the uninitialized object could be a
 disaster.
-With this simple compile-time rule, \Cpp assures that
+With this simple compile-time rule, \Cpp{} assures that
 if an initialized variable is in scope, then it has assuredly been
 initialized.
 \effect
@@ -352,14 +352,14 @@ this case.
 \rSec2[diff.dcl]{Clause \ref{dcl.dcl}: declarations}
 
 \ref{dcl.stc}
-\change In \Cpp, the \tcode{static} or \tcode{extern} specifiers can only be applied to names of objects or functions.\\
-Using these specifiers with type declarations is illegal in \Cpp.
+\change In \Cpp{}, the \tcode{static} or \tcode{extern} specifiers can only be applied to names of objects or functions.\\
+Using these specifiers with type declarations is illegal in \Cpp{}.
 In C, these specifiers are ignored when used on type declarations.
 
 Example:
 
 \begin{codeblock}
-static struct S {               // valid C, invalid in \Cpp
+static struct S {               // valid C, invalid in \Cpp{}
   int i;
 };
 \end{codeblock}
@@ -367,7 +367,7 @@ static struct S {               // valid C, invalid in \Cpp
 \rationale
 Storage class specifiers don't have any meaning when associated
 with a type.
-In \Cpp, class members can be declared with the \tcode{static} storage
+In \Cpp{}, class members can be declared with the \tcode{static} storage
 class specifier.
 Allowing storage class specifiers on type
 declarations could render the code confusing for users.
@@ -379,9 +379,9 @@ Syntactic transformation.
 Seldom.
 
 \ref{dcl.stc}
-\change In \Cpp, \tcode{register} is not a storage class specifier.
+\change In \Cpp{}, \tcode{register} is not a storage class specifier.
 \rationale
-The storage class specifier had no effect in \Cpp.
+The storage class specifier had no effect in \Cpp{}.
 \effect
 Deletion of semantically well-defined feature.
 \difficulty
@@ -390,20 +390,20 @@ Syntactic transformation.
 Common.
 
 \ref{dcl.typedef}
-\change A \Cpp typedef name must be different from any class type name declared
+\change A \Cpp{} typedef name must be different from any class type name declared
 in the same scope (except if the typedef is a synonym of the class name with the
 same name). In C, a typedef name and a struct tag name declared in the same scope
 can have the same name (because they have different name spaces).
 
 Example:
 \begin{codeblock}
-typedef struct name1 { @\commentellip@ } name1;         // valid C and \Cpp
+typedef struct name1 { @\commentellip@ } name1;         // valid C and \Cpp{}
 struct name { @\commentellip@ };
-typedef int name;               // valid C, invalid \Cpp
+typedef int name;               // valid C, invalid \Cpp{}
 \end{codeblock}
 
 \rationale
-For ease of use, \Cpp doesn't require that a type name be prefixed
+For ease of use, \Cpp{} doesn't require that a type name be prefixed
 with the keywords \tcode{class}, \tcode{struct} or \tcode{union} when used in object
 declarations or type casts.
 
@@ -422,7 +422,7 @@ One of the 2 types has to be renamed.
 Seldom.
 
 \ref{dcl.type} [see also \ref{basic.link}]
-\change \tcode{const} objects must be initialized in \Cpp but can be left uninitialized in C.
+\change \tcode{const} objects must be initialized in \Cpp{} but can be left uninitialized in C.
 \rationale
 A const object cannot be assigned to so it must be initialized
 to hold a useful value.
@@ -436,7 +436,7 @@ Seldom.
 \ref{dcl.type}
 \change Banning implicit \tcode{int}.
 
-In \Cpp a
+In \Cpp{} a
 \grammarterm{decl-specifier-seq}
 must contain a
 \grammarterm{type-specifier}{}, unless
@@ -445,7 +445,7 @@ conversion function.
 In the following example, the
 left-hand column presents valid C;
 the right-hand column presents
-equivalent \Cpp :
+equivalent \Cpp{} :
 
 \begin{codeblock}
 void f(const parm);            void f(const int parm);
@@ -455,7 +455,7 @@ main()                         int main()
 \end{codeblock}
 
 \rationale
-In \Cpp, implicit int creates several opportunities for
+In \Cpp{}, implicit int creates several opportunities for
 ambiguity between expressions involving function-like
 casts and declarations.
 Explicit declaration is increasingly considered
@@ -476,7 +476,7 @@ The keyword \tcode{auto} cannot be used as a storage class specifier.
 
 \begin{codeblock}
 void f() {
-  auto int x;     // valid C, invalid \Cpp
+  auto int x;     // valid C, invalid \Cpp{}
 }
 \end{codeblock}
 
@@ -488,17 +488,17 @@ of a variable from its initializer results in undesired interpretations of
 \howwide Rare.
 
 \ref{dcl.enum}
-\change \Cpp objects of enumeration type can only be assigned values of the same enumeration type.
+\change \Cpp{} objects of enumeration type can only be assigned values of the same enumeration type.
 In C, objects of enumeration type can be assigned values of any integral type.
 
 Example:
 \begin{codeblock}
 enum color { red, blue, green };
-enum color c = 1;               // valid C, invalid \Cpp
+enum color c = 1;               // valid C, invalid \Cpp{}
 \end{codeblock}
 
 \rationale
-The type-safe nature of \Cpp.
+The type-safe nature of \Cpp{}.
 \effect
 Deletion of semantically well-defined feature.
 \difficulty
@@ -509,19 +509,19 @@ corrected by applying an explicit cast.)
 Common.
 
 \ref{dcl.enum}
-\change In \Cpp, the type of an enumerator is its enumeration. In C, the type of an enumerator is \tcode{int}.
+\change In \Cpp{}, the type of an enumerator is its enumeration. In C, the type of an enumerator is \tcode{int}.
 
 Example:
 
 \begin{codeblock}
 enum e { A };
 sizeof(A) == sizeof(int)        // in C
-sizeof(A) == sizeof(e)          // in \Cpp
+sizeof(A) == sizeof(e)          // in \Cpp{}
 /* and @sizeof(int)@ is not necessarily equal to @sizeof(e)@ */
 \end{codeblock}
 
 \rationale
-In \Cpp, an enumeration is a distinct type.
+In \Cpp{}, an enumeration is a distinct type.
 \effect
 Change to semantics of well-defined feature.
 \difficulty
@@ -536,13 +536,13 @@ common C coding practice.
 \rSec2[diff.decl]{Clause \ref{dcl.decl}: declarators}
 
 \ref{dcl.fct}
-\change In \Cpp, a function declared with an empty parameter list takes no arguments.
+\change In \Cpp{}, a function declared with an empty parameter list takes no arguments.
 In C, an empty parameter list means that the number and type of the function arguments are unknown.
 
 Example:
 
 \begin{codeblock}
-int f();            // means   \tcode{int f(void)} in \Cpp
+int f();            // means   \tcode{int f(void)} in \Cpp{}
                     // \tcode{int f(} unknown \tcode{)} in C
 \end{codeblock}
 
@@ -563,21 +563,21 @@ if the type of corresponding arguments differed.
 Common.
 
 \ref{dcl.fct} [see \ref{expr.sizeof}]
-\change In \Cpp, types may not be defined in return or parameter types.
+\change In \Cpp{}, types may not be defined in return or parameter types.
 In C, these type definitions are allowed.
 
 Example:
 
 \begin{codeblock}
-void f( struct S { int a; } arg ) {}    // valid C, invalid \Cpp
-enum E { A, B, C } f() {}               // valid C, invalid \Cpp
+void f( struct S { int a; } arg ) {}    // valid C, invalid \Cpp{}
+enum E { A, B, C } f() {}               // valid C, invalid \Cpp{}
 \end{codeblock}
 
 \rationale
-When comparing types in different translation units, \Cpp relies
+When comparing types in different translation units, \Cpp{} relies
 on name equivalence when C relies on structural equivalence.
 Regarding parameter types: since the type defined in a parameter list
-would be in the scope of the function, the only legal calls in \Cpp
+would be in the scope of the function, the only legal calls in \Cpp{}
 would be from within the function itself.
 \effect
 Deletion of semantically well-defined feature.
@@ -589,7 +589,7 @@ Seldom.
 This style of type definition is seen as poor coding style.
 
 \ref{dcl.fct.def}
-\change In \Cpp, the syntax for function definition excludes the ``old-style'' C function.
+\change In \Cpp{}, the syntax for function definition excludes the ``old-style'' C function.
 In C, ``old-style'' syntax is allowed, but deprecated as ``obsolescent''.
 \rationale
 Prototypes are essential to type safety.
@@ -601,7 +601,7 @@ Syntactic transformation.
 Common in old programs, but already known to be obsolescent.
 
 \ref{dcl.init.string}
-\change In \Cpp, when initializing an array of character with a string, the number of
+\change In \Cpp{}, when initializing an array of character with a string, the number of
 characters in the string (including the terminating \tcode{'\textbackslash 0'}) must not exceed the
 number of elements in the array. In C, an array can be initialized with a string even if
 the array is not large enough to contain the string-terminating \tcode{'\textbackslash 0'}.
@@ -609,7 +609,7 @@ the array is not large enough to contain the string-terminating \tcode{'\textbac
 Example:
 
 \begin{codeblock}
-char array[4] = "abcd";         // valid C, invalid \Cpp
+char array[4] = "abcd";         // valid C, invalid \Cpp{}
 \end{codeblock}
 \rationale
 When these non-terminated arrays are manipulated by standard
@@ -627,7 +627,7 @@ This style of array initialization is seen as poor coding style.
 \rSec2[diff.class]{Clause \ref{class}: classes}
 
 \ref{class.name} [see also \ref{dcl.typedef}]
-\change In \Cpp, a class declaration introduces the class name into the scope where it is
+\change In \Cpp{}, a class declaration introduces the class name into the scope where it is
 declared and hides any object, function or other declaration of that name in an enclosing
 scope. In C, an inner scope declaration of a struct tag name never hides the name of an
 object or function in an outer scope.
@@ -639,17 +639,17 @@ int x[99];
 void f() {
   struct x { int a; };
   sizeof(x);  /* size of the array in C */
-  /* size of the struct in @\textit{\textrm{\Cpp}}@ */
+  /* size of the struct in @\textit{\textrm{\Cpp{}}}@ */
 }
 \end{codeblock}
 \rationale
-This is one of the few incompatibilities between C and \Cpp that
-can be attributed to the new \Cpp name space definition where a
+This is one of the few incompatibilities between C and \Cpp{} that
+can be attributed to the new \Cpp{} name space definition where a
 name can be declared as a type and as a non-type in a single scope
 causing the non-type name to hide the type name and requiring that
 the keywords \tcode{class}, \tcode{struct}, \tcode{union} or \tcode{enum} be used to refer to the type name.
 This new name space definition provides important notational
-conveniences to \Cpp programmers and helps making the use of the
+conveniences to \Cpp{} programmers and helps making the use of the
 user-defined types as similar as possible to the use of fundamental
 types.
 The advantages of the new name space definition were judged to
@@ -659,7 +659,7 @@ Change to semantics of well-defined feature.
 \difficulty
 Semantic transformation.
 If the hidden name that needs to be accessed is at global scope,
-the \tcode{::} \Cpp operator can be used.
+the \tcode{::} \Cpp{} operator can be used.
 If the hidden name is at block scope, either the type or the struct
 tag has to be renamed.
 \howwide
@@ -675,14 +675,14 @@ inconsistent definitions of template specializations. For consistency,
 the implementation freedom was eliminated for non-dependent types,
 too.
 \effect
-The choice is implementation-defined in C, but not so in \Cpp.
+The choice is implementation-defined in C, but not so in \Cpp{}.
 \difficulty
 Syntactic transformation.
 \howwide
 Seldom.
 
 \ref{class.nest}
-\change In \Cpp, the name of a nested class is local to its enclosing class. In C
+\change In \Cpp{}, the name of a nested class is local to its enclosing class. In C
 the name of the nested class belongs to the same scope as the name of the outermost enclosing class.
 
 Example:
@@ -691,16 +691,16 @@ Example:
 struct X {
   struct Y { @\commentellip@ } y;
 };
-struct Y yy;                    // valid C, invalid \Cpp
+struct Y yy;                    // valid C, invalid \Cpp{}
 \end{codeblock}
 \rationale
-\Cpp classes have member functions which require that classes
+\Cpp{} classes have member functions which require that classes
 establish scopes.
 The C rule would leave classes as an incomplete scope mechanism
-which would prevent \Cpp programmers from maintaining locality
+which would prevent \Cpp{} programmers from maintaining locality
 within a class.
-A coherent set of scope rules for \Cpp based on the C rule would
-be very complicated and \Cpp programmers would be unable to predict
+A coherent set of scope rules for \Cpp{} based on the C rule would
+be very complicated and \Cpp{} programmers would be unable to predict
 reliably the meanings of nontrivial examples involving nested or
 local functions.
 \effect
@@ -728,7 +728,7 @@ which is documented in \ref{basic.scope}.
 Seldom.
 
 \ref{class.nested.type}
-\change In \Cpp, a typedef name may not be redeclared in a class definition after being used in that definition.
+\change In \Cpp{}, a typedef name may not be redeclared in a class definition after being used in that definition.
 
 Example:
 
@@ -736,12 +736,12 @@ Example:
 typedef int I;
 struct S {
   I i;
-  int I;                  // valid C, invalid \Cpp
+  int I;                  // valid C, invalid \Cpp{}
 };
 \end{codeblock}
 \rationale
 When classes become complicated, allowing such a redefinition
-after the type has been used can create confusion for \Cpp
+after the type has been used can create confusion for \Cpp{}
 programmers as to what the meaning of \tcode{I} really is.
 \effect
 Deletion of semantically well-defined feature.
@@ -764,9 +764,9 @@ For example, the following is valid in ISO C:
 \begin{codeblock}
 struct X { int i; };
 volatile struct X x1 = {0};
-struct X x2 = x1;               // invalid \Cpp
+struct X x2 = x1;               // invalid \Cpp{}
 struct X x3;
-x3 = x1;                        // also invalid \Cpp
+x3 = x1;                        // also invalid \Cpp{}
 \end{codeblock}
 
 \rationale
@@ -805,7 +805,7 @@ Seldom.
 \change Whether \mname{STDC} is defined and if so, what its value is, are
 \impldef{definition and meaning of \mname{STDC}}.
 \rationale
-\Cpp is not identical to ISO C\@.
+\Cpp{} is not identical to ISO C\@.
 Mandating that \mname{STDC}
 be defined would require that translators make an incorrect claim.
 Each implementation must choose the behavior that will be most
@@ -818,12 +818,12 @@ Semantic transformation.
 Programs and headers that reference \mname{STDC} are
 quite common.
 
-\rSec1[diff.cpp03]{\Cpp and ISO \CppIII}
+\rSec1[diff.cpp03]{\Cpp{} and ISO \CppIII{}}
 
 \pnum
-\indextext{summary!compatibility with ISO \CppIII}%
-This subclause lists the differences between \Cpp and
-ISO \CppIII (ISO/IEC 14882:2003, \doccite{Programming Languages --- \Cpp}),
+\indextext{summary!compatibility with ISO \CppIII{}}%
+This subclause lists the differences between \Cpp{} and
+ISO \CppIII{} (ISO/IEC 14882:2003, \doccite{Programming Languages --- \Cpp{}}),
 by the chapters of this document.
 
 \rSec2[diff.cpp03.lex]{Clause \ref{lex}: lexical conventions}
@@ -832,7 +832,7 @@ by the chapters of this document.
 \change New kinds of string literals.
 \rationale Required for new features.
 \effect
-Valid \CppIII code may fail to compile or produce different results in
+Valid \CppIII{} code may fail to compile or produce different results in
 this International Standard. Specifically, macros named \tcode{R}, \tcode{u8},
 \tcode{u8R}, \tcode{u}, \tcode{uR}, \tcode{U}, \tcode{UR}, or \tcode{LR} will
 not be expanded when adjacent to a string literal but will be interpreted as
@@ -847,7 +847,7 @@ const char* s = u8"def";        // Previously \tcode{"abcdef"}, now \tcode{"def"
 \change User-defined literal string support.
 \rationale Required for new features.
 \effect
-Valid \CppIII code may fail to compile or produce different results in
+Valid \CppIII{} code may fail to compile or produce different results in
 this International Standard, as the following example illustrates.
 
 \begin{codeblock}
@@ -875,7 +875,7 @@ Added to Table~\ref{tab:keywords}, the following identifiers are new keywords:
 \tcode{static_assert},
 and
 \tcode{thread_local}.
-Valid \CppIII code using these identifiers is invalid in this International
+Valid \CppIII{} code using these identifiers is invalid in this International
 Standard.
 
 \ref{lex.icon}
@@ -891,7 +891,7 @@ change from an unsigned integer type to \tcode{signed long long}.
 \change Only literals are integer null pointer constants.
 \rationale Removing surprising interactions with templates and constant
 expressions.
-\effect Valid \CppIII code may fail to compile or produce different results in
+\effect Valid \CppIII{} code may fail to compile or produce different results in
 this International Standard, as the following example illustrates:
 
 \begin{codeblock}
@@ -908,7 +908,7 @@ template<int N> void g() {
 \change Specify rounding for results of integer \tcode{/} and \tcode{\%}.
 \rationale Increase portability, C99 compatibility.
 \effect
-Valid \CppIII code that uses integer division rounds the result toward 0 or
+Valid \CppIII{} code that uses integer division rounds the result toward 0 or
 toward negative infinity, whereas this International Standard always rounds
 the result toward 0.
 
@@ -916,7 +916,7 @@ the result toward 0.
 \change \tcode{\&\&} is valid in a \grammarterm{type-name}.
 \rationale Required for new features.
 \effect
-Valid \CppIII code may fail to compile or produce different results in
+Valid \CppIII{} code may fail to compile or produce different results in
 this International Standard, as the following example illustrates:
 
 \begin{codeblock}
@@ -931,7 +931,7 @@ bool b2 = &S::operator int && false;  // previously \tcode{false}, now ill-forme
 \change Remove \tcode{auto} as a storage class specifier.
 \rationale New feature.
 \effect
-Valid \CppIII code that uses the keyword \tcode{auto} as a storage class
+Valid \CppIII{} code that uses the keyword \tcode{auto} as a storage class
 specifier may be invalid in this International Standard. In this International
 Standard, \tcode{auto} indicates that the type of a variable is to be deduced
 from its initializer expression.
@@ -942,8 +942,8 @@ from its initializer expression.
 \change Narrowing restrictions in aggregate initializers.
 \rationale Catches bugs.
 \effect
-Valid \CppIII code may fail to compile in this International Standard. For
-example, the following code is valid in \CppIII but invalid in this
+Valid \CppIII{} code may fail to compile in this International Standard. For
+example, the following code is valid in \CppIII{} but invalid in this
 International Standard because \tcode{double} to \tcode{int} is a narrowing
 conversion:
 
@@ -958,7 +958,7 @@ int x[] = { 2.0 };
 when the implicit definition would have been ill-formed.
 \rationale Improves template argument deduction failure.
 \effect
-A valid \CppIII program that uses one of these special member functions in a
+A valid \CppIII{} program that uses one of these special member functions in a
 context where the definition is not required (e.g., in an expression that is
 not potentially evaluated) becomes ill-formed.
 
@@ -966,7 +966,7 @@ not potentially evaluated) becomes ill-formed.
 \change User-declared destructors have an implicit exception specification.
 \rationale Clarification of destructor requirements.
 \effect
-Valid \CppIII code may execute differently in this International Standard. In
+Valid \CppIII{} code may execute differently in this International Standard. In
 particular, destructors that throw exceptions will call \tcode{std::terminate}
 (without calling \tcode{std::unexpected}) if their exception specification is
 non-throwing.
@@ -977,7 +977,7 @@ non-throwing.
 \change Remove \tcode{export}.
 \rationale No implementation consensus.
 \effect
-A valid \CppIII declaration containing \tcode{export} is ill-formed in this
+A valid \CppIII{} declaration containing \tcode{export} is ill-formed in this
 International Standard.
 
 \ref{temp.arg}
@@ -986,10 +986,10 @@ brackets.
 \rationale Considered a persistent but minor annoyance. Template aliases
 representing non-class types would exacerbate whitespace issues.
 \effect
-Change to semantics of well-defined expression. A valid \CppIII expression
+Change to semantics of well-defined expression. A valid \CppIII{} expression
 containing a right angle bracket (``\tcode{>}'') followed immediately by
 another right angle bracket may now be treated as closing two templates.
-For example, the following code is valid in \CppIII because ``\tcode{>>}''
+For example, the following code is valid in \CppIII{} because ``\tcode{>>}''
 is a right-shift operator, but invalid in this International Standard because
 ``\tcode{>>}'' closes two templates.
 
@@ -1003,7 +1003,7 @@ X< Y< 1 >> 2 > > x;
 \change Allow dependent calls of functions with internal linkage.
 \rationale Overly constrained, simplify overload resolution rules.
 \effect
-A valid \CppIII program could get a different result than this
+A valid \CppIII{} program could get a different result than this
 International Standard.
 
 \rSec2[diff.cpp03.library]{Clause \ref{library}: library introduction}
@@ -1012,17 +1012,17 @@ International Standard.
 \change New reserved identifiers.
 \rationale Required by new features.
 \effect
-Valid \CppIII code that uses any identifiers added to the \Cpp standard
+Valid \CppIII{} code that uses any identifiers added to the \Cpp{} standard
 library by this International Standard may fail to compile or produce different
 results in this International Standard. A comprehensive list of identifiers used
-by the \Cpp standard library can be found in the Index of Library Names in this
+by the \Cpp{} standard library can be found in the Index of Library Names in this
 International Standard.
 
 \ref{headers}
 \change New headers.
 \rationale New functionality.
 \effect
-The following \Cpp headers are new:
+The following \Cpp{} headers are new:
 \tcode{<array>},
 \tcode{<atomic>},
 \tcode{<chrono>},
@@ -1054,13 +1054,13 @@ In addition the following C compatibility headers are new:
 \tcode{<ctgmath>},
 and
 \tcode{<cuchar>}.
-Valid \CppIII code that \tcode{\#include}{s} headers with these names may be
+Valid \CppIII{} code that \tcode{\#include}{s} headers with these names may be
 invalid in this International Standard.
 
 \ref{swappable.requirements}
 \effect Function \tcode{swap} moved to a different header
 \rationale Remove dependency on \tcode{<algorithm>} for \tcode{swap}.
-\effect Valid \CppIII code that has been compiled expecting swap to be in
+\effect Valid \CppIII{} code that has been compiled expecting swap to be in
 \tcode{<algorithm>} may have to instead include \tcode{<utility>}.
 
 \ref{namespace.posix}
@@ -1068,14 +1068,14 @@ invalid in this International Standard.
 \rationale New functionality.
 \effect
 The global namespace \tcode{posix} is now reserved for standardization. Valid
-\CppIII code that uses a top-level namespace \tcode{posix} may be invalid in
+\CppIII{} code that uses a top-level namespace \tcode{posix} may be invalid in
 this International Standard.
 
 \ref{res.on.macro.definitions}
 \change Additional restrictions on macro names.
 \rationale Avoid hard to diagnose or non-portable constructs.
 \effect
-Names of attribute identifiers may not be used as macro names. Valid \Cpp
+Names of attribute identifiers may not be used as macro names. Valid \Cpp{}
 2003 code that defines \tcode{override}, \tcode{final},
 \tcode{carries_dependency}, or \tcode{noreturn} as macros is invalid in this
 International Standard.
@@ -1090,7 +1090,7 @@ language support library}
 the other operators. This clarifies that replacing just these two signatures
 changes others, even if they are not explicitly changed.
 \effect
-Valid \CppIII code that replaces global \tcode{new} or \tcode{delete}
+Valid \CppIII{} code that replaces global \tcode{new} or \tcode{delete}
 operators may execute differently in this International Standard. For
 example, the following program should write \tcode{"custom deallocation"} twice,
 once for the single-object delete and once for the array delete.
@@ -1122,7 +1122,7 @@ int main() {
 \tcode{std::bad_alloc}.
 \rationale Consistent application of \tcode{noexcept}.
 \effect
-Valid \CppIII code that assumes that global \tcode{operator new} only
+Valid \CppIII{} code that assumes that global \tcode{operator new} only
 throws \tcode{std::bad_alloc} may execute differently in this International
 Standard.
 
@@ -1131,7 +1131,7 @@ Standard.
 \ref{errno}
 \change Thread-local error numbers.
 \rationale Support for new thread facilities.
-\effect Valid but implementation-specific \CppIII code that relies on
+\effect Valid but implementation-specific \CppIII{} code that relies on
 \tcode{errno} being the same across threads may change behavior in this
 International Standard.
 
@@ -1141,8 +1141,8 @@ International Standard.
 \change Minimal support for garbage-collected regions.
 \rationale Required by new feature.
 \effect
-Valid \CppIII code, compiled without traceable pointer support,
-that interacts with newer \Cpp code using regions declared reachable may
+Valid \CppIII{} code, compiled without traceable pointer support,
+that interacts with newer \Cpp{} code using regions declared reachable may
 have different runtime behavior.
 
 \ref{refwrap}, \ref{arithmetic.operations}, \ref{comparisons},
@@ -1152,7 +1152,7 @@ have different runtime behavior.
 \rationale Superseded by new feature; \tcode{unary_function} and
 \tcode{binary_function} are no longer defined.
 \effect
-Valid \CppIII code that depends on function object types being derived from
+Valid \CppIII{} code that depends on function object types being derived from
 \tcode{unary_function} or \tcode{binary_function} may fail to compile
 in this International Standard.
 
@@ -1164,13 +1164,13 @@ strings.
 \rationale Invalidation is subtly different with reference-counted strings.
 This change regularizes behavior for this International Standard.
 \effect
-Valid \CppIII code may execute differently in this International Standard.
+Valid \CppIII{} code may execute differently in this International Standard.
 
 \ref{string.require}
 \change Loosen \tcode{basic_string} invalidation rules.
 \rationale Allow small-string optimization.
 \effect
-Valid \CppIII code may execute differently in this International Standard.
+Valid \CppIII{} code may execute differently in this International Standard.
 Some \tcode{const} member functions, such as \tcode{data} and \tcode{c_str},
 no longer invalidate iterators.
 
@@ -1181,7 +1181,7 @@ no longer invalidate iterators.
 \rationale Lack of specification of complexity of \tcode{size()} resulted in
 divergent implementations with inconsistent performance characteristics.
 \effect
-Some container implementations that conform to \CppIII may not conform to the
+Some container implementations that conform to \CppIII{} may not conform to the
 specified \tcode{size()} requirements in this International Standard. Adjusting
 containers such as \tcode{std::list} to the stricter requirements may require
 incompatible changes.
@@ -1190,7 +1190,7 @@ incompatible changes.
 \change Requirements change: relaxation.
 \rationale Clarification.
 \effect
-Valid \CppIII code that attempts to meet the specified container requirements
+Valid \CppIII{} code that attempts to meet the specified container requirements
 may now be over-specified. Code that attempted to be portable across containers
 may need to be adjusted as follows:
 \begin{itemize}
@@ -1204,7 +1204,7 @@ of \tcode{size() == 0};
 \change Requirements change: default constructible.
 \rationale Clarification of container requirements.
 \effect
-Valid \CppIII code that attempts to explicitly instantiate a container using
+Valid \CppIII{} code that attempts to explicitly instantiate a container using
 a user-defined type with no default constructor may fail to compile.
 
 \ref{sequence.reqmts}, \ref{associative.reqmts}
@@ -1220,7 +1220,7 @@ The following member functions have changed:
 \item \tcode{insert(pos, beg, end)} for \tcode{vector}, \tcode{deque}, \tcode{list}, \tcode{forward_list}
 \end{itemize}
 
-Valid \CppIII code that relies on these functions returning \tcode{void}
+Valid \CppIII{} code that relies on these functions returning \tcode{void}
 (e.g., code that creates a pointer to member function that points to one
 of these functions) will fail to compile with this International Standard.
 
@@ -1242,7 +1242,7 @@ The signatures of the following member functions changed from taking an
 \item all forms of \tcode{list::merge}
 \end{itemize}
 
-Valid \CppIII code that uses these functions may fail to compile with this
+Valid \CppIII{} code that uses these functions may fail to compile with this
 International Standard.
 
 \ref{sequence.reqmts}, \ref{associative.reqmts}
@@ -1252,7 +1252,7 @@ International Standard.
 For \tcode{vector}, \tcode{deque}, and \tcode{list}
 the fill value passed to \tcode{resize} is now passed by reference instead of
 by value, and an additional overload of \tcode{resize} has been added. Valid
-\CppIII code that uses this function may fail to compile with this International
+\CppIII{} code that uses this function may fail to compile with this International
 Standard.
 
 \rSec2[diff.cpp03.algorithms]{Clause \ref{algorithms}: algorithms library}
@@ -1261,7 +1261,7 @@ Standard.
 \change Result state of inputs after application of some algorithms.
 \rationale Required by new feature.
 \effect
-A valid \CppIII program may detect that an object with a valid but
+A valid \CppIII{} program may detect that an object with a valid but
 unspecified state has a different valid but unspecified state with this
 International Standard. For example, \tcode{std::remove} and
 \tcode{std::remove_if} may leave the tail of the input sequence with a
@@ -1273,7 +1273,7 @@ different set of values than previously.
 \change Specified representation of complex numbers.
 \rationale Compatibility with C99.
 \effect
-Valid \CppIII code that uses implementation-specific knowledge about the
+Valid \CppIII{} code that uses implementation-specific knowledge about the
 binary representation of the required template specializations of
 \tcode{std::complex} may not be compatible with this International Standard.
 
@@ -1285,7 +1285,7 @@ binary representation of the required template specializations of
 \change Specify use of \tcode{explicit} in existing boolean conversion functions.
 \rationale Clarify intentions, avoid workarounds.
 \effect
-Valid \CppIII code that relies on implicit boolean conversions will fail to
+Valid \CppIII{} code that relies on implicit boolean conversions will fail to
 compile with this International Standard. Such conversions occur in the
 following conditions:
 
@@ -1303,7 +1303,7 @@ following conditions:
 \effect
 \tcode{std::ios_base::failure} is no longer derived directly from
 \tcode{std::exception}, but is now derived from \tcode{std::system_error},
-which in turn is derived from \tcode{std::runtime_error}. Valid \CppIII code
+which in turn is derived from \tcode{std::runtime_error}. Valid \CppIII{} code
 that assumes that \tcode{std::ios_base::failure} is derived directly from
 \tcode{std::exception} may execute differently in this International Standard.
 
@@ -1312,7 +1312,7 @@ that assumes that \tcode{std::ios_base::failure} is derived directly from
 defined as constexpr static members.
 \rationale Required for new features.
 \effect
-Valid \CppIII code that relies on \tcode{std::ios_base} flag types being
+Valid \CppIII{} code that relies on \tcode{std::ios_base} flag types being
 represented as \tcode{std::bitset} or as an integer type may fail to compile
 with this International Standard. For example:
 
@@ -1325,12 +1325,12 @@ int main() {
 }
 \end{codeblock}
 
-\rSec1[diff.cpp11]{\Cpp and ISO \CppXI}
+\rSec1[diff.cpp11]{\Cpp{} and ISO \CppXI{}}
 
 \pnum
-\indextext{summary!compatibility with ISO \CppXI}%
-This subclause lists the differences between \Cpp and
-ISO \CppXI (ISO/IEC 14882:2011, \doccite{Programming Languages --- \Cpp}),
+\indextext{summary!compatibility with ISO \CppXI{}}%
+This subclause lists the differences between \Cpp{} and
+ISO \CppXI{} (ISO/IEC 14882:2011, \doccite{Programming Languages --- \Cpp{}}),
 by the chapters of this document.
 
 \rSec2[diff.cpp11.lex]{Clause \ref{lex}: lexical conventions}
@@ -1338,16 +1338,16 @@ by the chapters of this document.
 \ref{lex.ppnumber}
 \change \grammarterm{pp-number} can contain one or more single quotes.
 \rationale Necessary to enable single quotes as digit separators.
-\effect Valid \CppXI code may fail to compile or may change meaning in this
-International Standard. For example, the following code is valid both in \CppXI and in
+\effect Valid \CppXI{} code may fail to compile or may change meaning in this
+International Standard. For example, the following code is valid both in \CppXI{} and in
 this International Standard, but the macro invocation produces different outcomes
-because the single quotes delimit a character literal in \CppXI, whereas they are digit
+because the single quotes delimit a character literal in \CppXI{}, whereas they are digit
 separators in this International Standard:
 
 \begin{codeblock}
 #define M(x, ...) __VA_ARGS__
 int x[2] = { M(1'2,3'4, 5) };
-// \tcode{int x[2] = \{ 5 \};\ \ \ \ \ } --- \CppXI
+// \tcode{int x[2] = \{ 5 \};\ \ \ \ \ } --- \CppXI{}
 // \tcode{int x[2] = \{ 3'4, 5 \};} --- this International Standard
 \end{codeblock}
 
@@ -1356,7 +1356,7 @@ int x[2] = { M(1'2,3'4, 5) };
 \ref{basic.stc.dynamic.deallocation}
 \change New usual (non-placement) deallocator.
 \rationale Required for sized deallocation.
-\effect Valid \CppXI code could declare a global placement allocation function and
+\effect Valid \CppXI{} code could declare a global placement allocation function and
 deallocation function as follows:
 
 \begin{codeblock}
@@ -1379,7 +1379,7 @@ operand keeps the type and value category of the other operand.
 array-to-pointer (\ref{conv.array}), and function-to-pointer (\ref{conv.func})
 standard conversions), especially the creation of the temporary due to
 lvalue-to-rvalue conversion, were considered gratuitous and surprising.
-\effect Valid \CppXI code that relies on the conversions may behave differently
+\effect Valid \CppXI{} code that relies on the conversions may behave differently
 in this International Standard:
 
 \begin{codeblock}
@@ -1394,14 +1394,14 @@ int f(bool cond) {
 }
 \end{codeblock}
 
-In \CppXI, \tcode{f(true)} returns \tcode{1}. In this International Standard,
+In \CppXI{}, \tcode{f(true)} returns \tcode{1}. In this International Standard,
 it returns \tcode{2}.
 
 \begin{codeblock}
 sizeof(true ? "" : throw 0)
 \end{codeblock}
 
-In \CppXI, the expression yields \tcode{sizeof(const char*)}. In this
+In \CppXI{}, the expression yields \tcode{sizeof(const char*)}. In this
 International Standard, it yields \tcode{sizeof(const char[1])}.
 
 \rSec2[diff.cpp11.dcl.dcl]{Clause \ref{dcl.dcl}: declarations}
@@ -1412,8 +1412,8 @@ International Standard, it yields \tcode{sizeof(const char[1])}.
 \rationale Necessary to allow \tcode{constexpr} member functions to mutate
 the object.
 \effect
-Valid \CppXI code may fail to compile in this International Standard.
-For example, the following code is valid in \CppXI
+Valid \CppXI{} code may fail to compile in this International Standard.
+For example, the following code is valid in \CppXI{}
 but invalid in this International Standard because it declares the same member
 function twice with different return types:
 
@@ -1431,9 +1431,9 @@ struct S {
 \rationale Necessary to allow default member initializers to be used
 by aggregate initialization.
 \effect
-Valid \CppXI code may fail to compile or may change meaning in this International Standard.
+Valid \CppXI{} code may fail to compile or may change meaning in this International Standard.
 \begin{codeblock}
-struct S { // Aggregate in \CppXIV onwards.
+struct S { // Aggregate in \CppXIV{} onwards.
   int m = 1;
 };
 struct X {
@@ -1441,7 +1441,7 @@ struct X {
   operator S();
 };
 X a{};
-S b{a};  // uses copy constructor in \CppXI,
+S b{a};  // uses copy constructor in \CppXI{},
          // performs aggregate initialization in this International Standard
 \end{codeblock}
 
@@ -1451,8 +1451,8 @@ S b{a};  // uses copy constructor in \CppXI,
 \change New header.
 \rationale New functionality.
 \effect
-The \Cpp header \tcode{<shared_mutex>} is new.
-Valid \CppXI code that \tcode{\#include}{s} a header with that name may be
+The \Cpp{} header \tcode{<shared_mutex>} is new.
+Valid \CppXI{} code that \tcode{\#include}{s} a header with that name may be
 invalid in this International Standard.
 
 \rSec2[diff.cpp11.input.output]{Clause \ref{input.output}: input/output library}
@@ -1461,15 +1461,15 @@ invalid in this International Standard.
 \change \tcode{gets} is not defined.
 \rationale Use of \tcode{gets} is considered dangerous.
 \effect
-Valid \CppXI code that uses the \tcode{gets} function may fail to compile
+Valid \CppXI{} code that uses the \tcode{gets} function may fail to compile
 in this International Standard.
 
-\rSec1[diff.cpp14]{\Cpp and ISO \CppXIV}
+\rSec1[diff.cpp14]{\Cpp{} and ISO \CppXIV{}}
 
 \pnum
-\indextext{summary!compatibility with ISO \CppXIV}%
-This subclause lists the differences between \Cpp and
-ISO \CppXIV (ISO/IEC 14882:2014, \doccite{Programming Languages --- \Cpp}),
+\indextext{summary!compatibility with ISO \CppXIV{}}%
+This subclause lists the differences between \Cpp{} and
+ISO \CppXIV{} (ISO/IEC 14882:2014, \doccite{Programming Languages --- \Cpp{}}),
 by the chapters of this document.
 
 \rSec2[diff.cpp14.lex]{Clause \ref{lex}: lexical conventions}
@@ -1479,9 +1479,9 @@ by the chapters of this document.
 \change Removal of trigraph support as a required feature.
 \rationale Prevents accidental uses of trigraphs in non-raw string literals and comments.
 \effect
-Valid \CppXIV code that uses trigraphs may not be valid or may have different
+Valid \CppXIV{} code that uses trigraphs may not be valid or may have different
 semantics in this International Standard. Implementations may choose to
-translate trigraphs as specified in \CppXIV if they appear outside of a raw
+translate trigraphs as specified in \CppXIV{} if they appear outside of a raw
 string literal, as part of the \impldef{mapping from physical source file characters
 to basic source character set} mapping from physical source file characters to
 the basic source character set.
@@ -1491,14 +1491,14 @@ the basic source character set.
 \tcode{P} \grammarterm{sign}.
 \rationale Necessary to enable hexadecimal floating literals.
 \effect
-Valid \CppXIV code may fail to compile or produce different results in
+Valid \CppXIV{} code may fail to compile or produce different results in
 this International Standard. Specifically, character sequences like \tcode{0p+0}
-and \tcode{0e1_p+0} are three separate tokens each in \CppXIV, but one single token
+and \tcode{0e1_p+0} are three separate tokens each in \CppXIV{}, but one single token
 in this International Standard.
 
 \begin{codeblock}
 #define F(a) b ## a
-int b0p = F(0p+0);  // ill-formed; equivalent to ``\tcode{int b0p = b0p + 0;}\!'' in \CppXIV
+int b0p = F(0p+0);  // ill-formed; equivalent to ``\tcode{int b0p = b0p + 0;}\!'' in \CppXIV{}
 \end{codeblock}
 
 \rSec2[diff.cpp14.expr]{Clause \ref{expr}: expressions}
@@ -1507,7 +1507,7 @@ int b0p = F(0p+0);  // ill-formed; equivalent to ``\tcode{int b0p = b0p + 0;}\!'
 \change
 Remove increment operator with \tcode{bool} operand.
 \rationale Obsolete feature with occasionally surprising semantics.
-\effect A valid \CppXIV expression utilizing the increment operator on
+\effect A valid \CppXIV{} expression utilizing the increment operator on
 a \tcode{bool} lvalue is ill-formed in this International Standard.
 Note that this might occur when the lvalue has a type given by a template
 parameter.
@@ -1515,7 +1515,7 @@ parameter.
 \ref{expr.new}, \ref{expr.delete}
 \change Dynamic allocation mechanism for over-aligned types.
 \rationale Simplify use of over-aligned types.
-\effect In \CppXIV code that uses a \grammarterm{new-expression}
+\effect In \CppXIV{} code that uses a \grammarterm{new-expression}
 to allocate an object with an over-aligned class type,
 where that class has no allocation functions of its own,
 \tcode{::operator new(std::size_t)}
@@ -1531,7 +1531,7 @@ is used instead.
 \change Removal of \tcode{register} \grammarterm{storage-class-specifier}.
 \rationale Enable repurposing of deprecated keyword in future revisions of this International Standard.
 \effect
-A valid \CppXIV declaration utilizing the \tcode{register}
+A valid \CppXIV{} declaration utilizing the \tcode{register}
 \grammarterm{storage-class-specifier} is ill-formed in this International Standard.
 The specifier can simply be removed to retain the original meaning.
 
@@ -1539,7 +1539,7 @@ The specifier can simply be removed to retain the original meaning.
 \change \tcode{auto} deduction from \grammarterm{braced-init-list}.
 \rationale More intuitive deduction behavior.
 \effect
-Valid \CppXIV code may fail to compile or may change meaning
+Valid \CppXIV{} code may fail to compile or may change meaning
 in this International Standard. For example:
 \begin{codeblock}
 auto x1{1};    // was \tcode{std::initializer_list<int>}, now \tcode{int}
@@ -1552,7 +1552,7 @@ auto x2{1, 2}; // was \tcode{std::initializer_list<int>}, now ill-formed
 \change Make exception specifications be part of the type system.
 \rationale Improve type-safety.
 \effect
-Valid \CppXIV code may fail to compile or change meaning in this
+Valid \CppXIV{} code may fail to compile or change meaning in this
 International Standard:
 
 \begin{codeblock}
@@ -1567,7 +1567,7 @@ int x = f(g1, g2);    // ill-formed; previously well-formed
 to apply to user-defined types with base classes.
 \rationale To increase convenience of aggregate initialization.
 \effect
-Valid \CppXIV code may fail to compile or produce different results in this
+Valid \CppXIV{} code may fail to compile or produce different results in this
 International Standard; initialization from an empty initializer list will
 perform aggregate initialization instead of invoking a default constructor
 for the affected types:
@@ -1592,7 +1592,7 @@ Inheriting a constructor no longer injects a constructor into the derived class.
 \rationale
 Better interaction with other language features.
 \effect
-Valid \CppXIV code that uses inheriting constructors may not be valid
+Valid \CppXIV{} code that uses inheriting constructors may not be valid
 or may have different semantics. A \grammarterm{using-declaration}
 that names a constructor now makes the corresponding base class constructors
 visible to initializations of the derived class
@@ -1619,7 +1619,7 @@ B b(42L); // now calls \tcode{B(int)}, used to call \tcode{B<long>(long)},
 non-type template arguments with placeholder types,
 allows partial specializations to decompose
 from the type deduced for the non-type template argument.
-\effect Valid \CppXIV code may fail to compile
+\effect Valid \CppXIV{} code may fail to compile
 or produce different results in this International Standard:
 \begin{codeblock}
 template <int N> struct A;
@@ -1640,7 +1640,7 @@ They interacted badly with the type system,
 which became a more significant issue in this International Standard
 where (non-dynamic) exception specifications are part of the function type.
 \effect
-A valid \CppXIV function declaration,
+A valid \CppXIV{} function declaration,
 member function declaration,
 function pointer declaration,
 or function reference declaration,
@@ -1661,7 +1661,7 @@ that might otherwise be incompatible with existing programs.
 The global namespaces \tcode{std}
 followed by an arbitrary sequence of digits
 is reserved for future standardization.
-Valid \CppXIV code that uses such a top-level namespace,
+Valid \CppXIV{} code that uses such a top-level namespace,
 e.g., \tcode{std2}, may be invalid in this International Standard.
 
 \rSec2[diff.cpp14.utilities]{Clause \ref{utilities}: general utilities library}
@@ -1670,7 +1670,7 @@ e.g., \tcode{std2}, may be invalid in this International Standard.
 \change Constructors taking allocators removed.
 \rationale No implementation consensus.
 \effect
-Valid \CppXIV code may fail to compile or may change meaning in this
+Valid \CppXIV{} code may fail to compile or may change meaning in this
 International Standard. Specifically, constructing a \tcode{std::function} with
 an allocator is ill-formed and uses-allocator construction will not pass an
 allocator to \tcode{std::function} constructors in this International Standard.
@@ -1717,7 +1717,7 @@ int x = f(s.data()); // ill-formed; previously well-formed
 \change Requirements change:
 \rationale Increase portability, clarification of associative container requirements.
 \effect
-Valid \CppXIV code that attempts to use associative containers
+Valid \CppXIV{} code that attempts to use associative containers
 having a comparison object with non-const function call operator
 may fail to compile in this International Standard:
 
@@ -1755,14 +1755,14 @@ and the function templates (and their return types)
 \tcode{bind2nd}
 are not defined.
 \rationale Superseded by new features.
-\effect Valid \CppXIV code that uses these class templates
+\effect Valid \CppXIV{} code that uses these class templates
 and function templates may fail to compile in this International Standard.
 
 \change
 Remove old iostreams members [depr.ios.members].
 \rationale Redundant feature for compatibility with pre-standard code
 has served its time.
-\effect A valid \CppXIV program using these identifiers
+\effect A valid \CppXIV{} program using these identifiers
 may be ill-formed in this International Standard.
 
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@ -1772,22 +1772,22 @@ may be ill-formed in this International Standard.
 \pnum
 This subclause summarizes the explicit changes in headers,
 definitions, declarations, or behavior between the C standard library
-in the C standard and the parts of the \Cpp standard library that were
+in the C standard and the parts of the \Cpp{} standard library that were
 included from the C standard library.
 
 \rSec2[diff.mods.to.headers]{Modifications to headers}
 
 \pnum
 For compatibility with the C standard library\indextext{library!C standard},
-the \Cpp standard library provides the C headers enumerated
-in~\ref{depr.c.headers}, but their use is deprecated in \Cpp.
+the \Cpp{} standard library provides the C headers enumerated
+in~\ref{depr.c.headers}, but their use is deprecated in \Cpp{}.
 
 \pnum
-There are no \Cpp headers for the C headers
+There are no \Cpp{} headers for the C headers
 \tcode{<stdatomic.h>}\indextext{\idxhdr{stdatomic.h}},
 \tcode{<stdnoreturn.h>}\indextext{\idxhdr{stdnoreturn.h}},
 and \tcode{<threads.h>}\indextext{\idxhdr{threads.h}},
-nor are the C headers themselves part of \Cpp.
+nor are the C headers themselves part of \Cpp{}.
 
 \pnum
 The \Cpp headers \tcode{<ccomplex>}\indextext{\idxhdr{ccomplex}} (\ref{depr.ccomplex.syn})
@@ -1795,12 +1795,12 @@ and \tcode{<ctgmath>}\indextext{\idxhdr{ctgmath}} (\ref{depr.ctgmath.syn}), as w
 as their corresponding C headers \tcode{<complex.h>}\indextext{\idxhdr{complex.h}}
 and \tcode{<tgmath.h>}\indextext{\idxhdr{tgmath.h}}, do not contain any of the
 content from the C standard library and instead merely include other headers
-from the \Cpp standard library.
+from the \Cpp{} standard library.
 
 \pnum
 The headers \tcode{<ciso646>}, \tcode{<cstdalign>}~(\ref{depr.cstdalign.syn}),
-and \tcode{<cstdbool>}~(\ref{depr.cstdbool.syn}) are meaningless in \Cpp. Use of
-the \Cpp headers \tcode{<ccomplex>}, \tcode{<cstdalign>}, \tcode{<cstdbool>},
+and \tcode{<cstdbool>}~(\ref{depr.cstdbool.syn}) are meaningless in \Cpp{}. Use of
+the \Cpp{} headers \tcode{<ccomplex>}, \tcode{<cstdalign>}, \tcode{<cstdbool>},
 and \tcode{<ctgmath>} is deprecated~(\ref{depr.c.headers}).
 
 \rSec2[diff.mods.to.definitions]{Modifications to definitions}
@@ -1888,7 +1888,7 @@ defined in any of
 \tcode{<cstring>}~(\ref{cstring.syn})\indexlibrary{\idxhdr{cstring}},
 \tcode{<ctime>}~(\ref{ctime.syn})\indexlibrary{\idxhdr{ctime}},
 or \tcode{<cwchar>}~(\ref{cwchar.syn})\indexlibrary{\idxhdr{cwchar}},
-is an \impldef{definition of \tcode{NULL}} \Cpp null pointer constant in
+is an \impldef{definition of \tcode{NULL}} \Cpp{} null pointer constant in
 this International Standard (\ref{support.types}).
 
 \rSec2[diff.mods.to.declarations]{Modifications to declarations}
diff --git a/source/containers.tex b/source/containers.tex
index dc15181..515e3b0 100644
--- a/source/containers.tex
+++ b/source/containers.tex
@@ -4,7 +4,7 @@
 \rSec1[containers.general]{General}
 
 \pnum
-This Clause describes components that \Cpp programs may use to
+This Clause describes components that \Cpp{} programs may use to
 organize collections of information.
 
 \pnum
diff --git a/source/conversions.tex b/source/conversions.tex
index 05b8895..70b02fc 100644
--- a/source/conversions.tex
+++ b/source/conversions.tex
@@ -129,7 +129,7 @@ program that necessitates this conversion is ill-formed. If \tcode{T}
 is a non-class type, the type of the prvalue is
 the cv-unqualified version of \tcode{T}. Otherwise, the type of the
 prvalue is \tcode{T}.%
-\footnote{In \Cpp class and array prvalues can have cv-qualified types.
+\footnote{In \Cpp{} class and array prvalues can have cv-qualified types.
 This differs from ISO C, in which non-lvalues never have
 cv-qualified types.}
 
diff --git a/source/cover-reg.tex b/source/cover-reg.tex
index 0a22c6e..afd2d23 100644
--- a/source/cover-reg.tex
+++ b/source/cover-reg.tex
@@ -22,9 +22,9 @@ Secretariat: ANSI
 
 \vfill
 
-\textbf{\LARGE Programming Languages --- \Cpp}
+\textbf{\LARGE Programming Languages --- \Cpp{}}
 
-Langages de programmation --- \Cpp
+Langages de programmation --- \Cpp{}
 
 \vfill
 
diff --git a/source/cover-wd.tex b/source/cover-wd.tex
index d2fcdb1..949c38d 100644
--- a/source/cover-wd.tex
+++ b/source/cover-wd.tex
@@ -22,7 +22,7 @@
 \vspace{2.5cm}
 \begin{center}
 \textbf{\Huge
-Working Draft, Standard for Programming Language \Cpp}
+Working Draft, Standard for Programming Language \Cpp{}}
 \end{center}
 \vfill
 \textbf{Note: this is an early draft. It's known to be incomplet and
diff --git a/source/declarations.tex b/source/declarations.tex
index 4645f6d..ffe2c95 100644
--- a/source/declarations.tex
+++ b/source/declarations.tex
@@ -1213,7 +1213,7 @@ be changed by means undetectable by an implementation.
 Furthermore, for some implementations, \tcode{volatile} might indicate that
 special hardware instructions are required to access the object.
 See~\ref{intro.execution} for detailed semantics. In general, the
-semantics of \tcode{volatile} are intended to be the same in \Cpp as
+semantics of \tcode{volatile} are intended to be the same in \Cpp{} as
 they are in C.
 \end{note}
 
@@ -3359,12 +3359,12 @@ particular form of representing names of objects and functions with
 external linkage, or with a particular calling convention, etc.
 \end{note}
 The default language linkage of all function types, function names, and
-variable names is \Cpp language linkage. Two function types with
+variable names is \Cpp{} language linkage. Two function types with
 different language linkages are distinct types even if they are
 otherwise identical.
 
 \pnum
-Linkage~(\ref{basic.link}) between \Cpp and  non-\Cpp code fragments can
+Linkage~(\ref{basic.link}) between \Cpp{} and  non-\Cpp{} code fragments can
 be achieved using a \grammarterm{linkage-specification}:
 
 \indextext{\idxgram{linkage-specification}}%
@@ -3397,10 +3397,10 @@ the vintage.
 Every implementation shall provide for linkage to functions written in
 the C programming language,
 \indextext{C!linkage to}%
-\tcode{"C"}, and linkage to \Cpp functions, \tcode{"C++"}.
+\tcode{"C"}, and linkage to \Cpp{} functions, \tcode{"C++"}.
 \begin{example}
 \begin{codeblock}
-complex sqrt(complex);          // \Cpp linkage by default
+complex sqrt(complex);          // \Cpp{} linkage by default
 extern "C" {
   double sqrt(double);          // C linkage
 }
@@ -3423,13 +3423,13 @@ extern "C"                      // the name \tcode{f1} and its function type hav
   void f1(void(*pf)(int));      // \tcode{pf} is a pointer to a C function
 
 extern "C" typedef void FUNC();
-FUNC f2;                        // the name \tcode{f2} has \Cpp language linkage and the
+FUNC f2;                        // the name \tcode{f2} has \Cpp{} language linkage and the
                                 // function's type has C language linkage
 
 extern "C" FUNC f3;             // the name of function \tcode{f3} and the function's type have C language linkage
 
-void (*pf2)(FUNC*);             // the name of the variable \tcode{pf2} has \Cpp linkage and the type
-                                // of \tcode{pf2} is ``pointer to \Cpp function that takes one parameter of type
+void (*pf2)(FUNC*);             // the name of the variable \tcode{pf2} has \Cpp{} linkage and the type
+                                // of \tcode{pf2} is ``pointer to \Cpp{} function that takes one parameter of type
                                 // pointer to C function''
 extern "C" {
   static void f4();             // the name of the function \tcode{f4} has internal linkage (not C language linkage)
@@ -3461,20 +3461,20 @@ extern "C" typedef void FUNC_c();
 
 class C {
   void mf1(FUNC_c*);            // the name of the function \tcode{mf1} and the member function's type have
-                                // \Cpp language linkage; the parameter has type ``pointer to C function''
+                                // \Cpp{} language linkage; the parameter has type ``pointer to C function''
 
   FUNC_c mf2;                   // the name of the function \tcode{mf2} and the member function's type have
-                                // \Cpp language linkage
+                                // \Cpp{} language linkage
 
-  static FUNC_c* q;             // the name of the data member \tcode{q} has \Cpp language linkage and
+  static FUNC_c* q;             // the name of the data member \tcode{q} has \Cpp{} language linkage and
                                 // the data member's type is ``pointer to C function''
 };
 
 extern "C" {
   class X {
     void mf();                  // the name of the function \tcode{mf} and the member function's type have
-                                // \Cpp language linkage
-    void mf2(void(*)());        // the name of the function \tcode{mf2} has \Cpp language linkage;
+                                // \Cpp{} language linkage
+    void mf2(void(*)());        // the name of the function \tcode{mf2} has \Cpp{} language linkage;
                                 // the parameter has type ``pointer to C function''
   };
 }
@@ -3489,7 +3489,7 @@ namespace and the declarations give the names different language linkages, the
 program is ill-formed; no diagnostic is required if the declarations appear in
 different translation units.
 \indextext{consistency!linkage specification}%
-Except for functions with \Cpp linkage, a function declaration without a
+Except for functions with \Cpp{} linkage, a function declaration without a
 linkage specification shall not precede the first linkage specification
 for that function. A function can be declared without a linkage
 specification after an explicit linkage specification has been seen; the
@@ -3573,8 +3573,8 @@ which the resulting lvalue refers is considered a C function.
 \pnum
 \indextext{object!linkage specification}%
 \indextext{linkage!implementation-defined object}%
-Linkage from \Cpp to objects defined in other languages and to objects
-defined in \Cpp from other languages is \impldef{linkage of objects between \Cpp and other languages} and
+Linkage from \Cpp{} to objects defined in other languages and to objects
+defined in \Cpp{} from other languages is \impldef{linkage of objects between \Cpp{} and other languages} and
 language-dependent. Only where the object layout strategies of two
 language implementations are similar enough can such linkage be
 achieved.%
diff --git a/source/declarators.tex b/source/declarators.tex
index 5c884c2..dafa870 100644
--- a/source/declarators.tex
+++ b/source/declarators.tex
@@ -921,7 +921,7 @@ See also~\ref{expr.unary} and~\ref{expr.mptr.oper}.
 The type ``pointer to member'' is distinct from the type ``pointer'',
 that is, a pointer to member is declared only by the pointer to member
 declarator syntax, and never by the pointer declarator syntax.
-There is no ``reference-to-member'' type in \Cpp.
+There is no ``reference-to-member'' type in \Cpp{}.
 \end{note}
 
 \rSec2[dcl.array]{Arrays}%
@@ -1216,7 +1216,7 @@ again; this time the result is an integer.
 
 \pnum
 \begin{note}
-It follows from all this that arrays in \Cpp are stored
+It follows from all this that arrays in \Cpp{} are stored
 row-wise (last subscript varies fastest)
 \indextext{array!storage of}%
 and that the first subscript in the declaration helps determine
@@ -3043,7 +3043,7 @@ An empty initializer list
 shall not be used as the \grammarterm{initializer-clause}
 for an array of unknown bound.\footnote{The syntax provides for empty
 \grammarterm{initializer-list}{s},
-but nonetheless \Cpp does not have zero length arrays.}
+but nonetheless \Cpp{} does not have zero length arrays.}
 \begin{note}
 A default member initializer does not determine the bound for a member
 array of unknown bound.  Since the default member initializer is
diff --git a/source/diagnostics.tex b/source/diagnostics.tex
index b30f0fe..51579d1 100644
--- a/source/diagnostics.tex
+++ b/source/diagnostics.tex
@@ -4,7 +4,7 @@
 \rSec1[diagnostics.general]{General}
 
 \pnum
-This Clause describes components that \Cpp programs may use to detect and
+This Clause describes components that \Cpp{} programs may use to detect and
 report error conditions.
 
 \pnum
@@ -24,8 +24,8 @@ as summarized in Table~\ref{tab:diagnostics.lib.summary}.
 \rSec1[std.exceptions]{Exception classes}
 
 \pnum
-The \Cpp standard library provides classes to be used to report certain errors~(\ref{res.on.exception.handling}) in
-\Cpp programs.
+The \Cpp{} standard library provides classes to be used to report certain errors~(\ref{res.on.exception.handling}) in
+\Cpp{} programs.
 In the error model reflected in these classes, errors are divided into two
 broad categories:
 \term{logic}
@@ -45,7 +45,7 @@ The header
 \tcode{<stdexcept>}
 \indextext{\idxhdr{stdexcept}}%
 \indexlibrary{\idxhdr{stdexcept}}%
-defines several types of predefined exceptions for reporting errors in a \Cpp program.
+defines several types of predefined exceptions for reporting errors in a \Cpp{} program.
 These exceptions are related by inheritance.
 
 \rSec2[stdexcept.syn]{Header \tcode{<stdexcept>} synopsis}
@@ -540,7 +540,7 @@ Constructs an object of class
 \pnum
 The header
 \tcode{<cassert>}
-provides a macro for documenting \Cpp program assertions and a mechanism
+provides a macro for documenting \Cpp{} program assertions and a mechanism
 for disabling the assertion checks.
 
 \rSec2[cassert.syn]{Header \tcode{<cassert>} synopsis}
@@ -764,7 +764,7 @@ The meaning of the macros in this header is defined by the POSIX standard.
 
 \pnum
 This subclause describes components that the standard library and
-\Cpp programs may use to report error conditions originating from
+\Cpp{} programs may use to report error conditions originating from
 the operating system or other low-level application program interfaces.
 
 \pnum
diff --git a/source/expressions.tex b/source/expressions.tex
index a49eee1..b13c749 100644
--- a/source/expressions.tex
+++ b/source/expressions.tex
@@ -793,7 +793,7 @@ static_assert(add(one)(one)() == monoid(2)()); // OK
 The closure type for a non-generic \grammarterm{lambda-expression} with no
 \grammarterm{lambda-capture}
 has a conversion function to pointer to
-function with \Cpp language linkage~(\ref{dcl.link}) having
+function with \Cpp{} language linkage~(\ref{dcl.link}) having
 the same parameter and return types as the closure type's function call operator.
 The conversion is to ``pointer to \tcode{noexcept} function''
 if the function call operator
@@ -999,7 +999,7 @@ by \tcode{\&}. If a \grammarterm{lambda-capture} includes a
 \grammarterm{simple-capture} of that \grammarterm{lambda-capture} shall
 be of the form ``\tcode{\&} \grammarterm{identifier}'' or ``\tcode{* this}''.
 \begin{note} The form \tcode{[\&,this]} is redundant but accepted
-for compatibility with ISO \CppXIV. \end{note}
+for compatibility with ISO \CppXIV{}. \end{note}
 Ignoring appearances in
 \grammarterm{initializer}{s} of \grammarterm{init-capture}{s}, an identifier or
 \tcode{this} shall not appear more than once in a
@@ -3251,7 +3251,7 @@ and the deallocation function's name is
 An implementation shall provide default definitions for the global
 allocation
 functions~(\ref{basic.stc.dynamic},~\ref{new.delete.single},~\ref{new.delete.array}).
-A \Cpp program can provide alternative definitions of
+A \Cpp{} program can provide alternative definitions of
 these functions~(\ref{replacement.functions}) and/or class-specific
 versions~(\ref{class.free}).
 The set of allocation and deallocation functions that may be called
@@ -3693,7 +3693,7 @@ An implementation provides default definitions of the global
 deallocation functions \tcode{operator delete} for
 non-arrays~(\ref{new.delete.single}) and
 \indextext{\idxcode{operator delete}}%
-\tcode{operator delete[]} for arrays~(\ref{new.delete.array}). A \Cpp
+\tcode{operator delete[]} for arrays~(\ref{new.delete.array}). A \Cpp{}
 program can provide alternative definitions of these
 functions~(\ref{replacement.functions}), and/or class-specific
 versions~(\ref{class.free}).
diff --git a/source/future.tex b/source/future.tex
index 4af3d13..c057a97 100644
--- a/source/future.tex
+++ b/source/future.tex
@@ -2,7 +2,7 @@
 \normannex{depr}{Compatibility features}
 
 \pnum
-This Clause describes features of the \Cpp Standard that are specified for compatibility with
+This Clause describes features of the \Cpp{} Standard that are specified for compatibility with
 existing implementations.
 
 \pnum
@@ -23,10 +23,10 @@ This usage is deprecated.
 \begin{example}
 \begin{codeblock}
 struct A {
-  static constexpr int n = 5;  // definition (declaration in \CppXIV)
+  static constexpr int n = 5;  // definition (declaration in \CppXIV{})
 };
 
-constexpr int A::n;  // redundant declaration (definition in \CppXIV)
+constexpr int A::n;  // redundant declaration (definition in \CppXIV{})
 \end{codeblock}
 \end{example}
 
@@ -129,7 +129,7 @@ overloads.\end{note}
 \pnum
 For compatibility with the
 \indextext{library!C standard}%
-C standard library, the \Cpp standard library provides
+C standard library, the \Cpp{} standard library provides
 the \defnx{C headers}{headers!C library} shown in Table~\ref{tab:future.c.headers}.
 
 \begin{floattable}{C headers}{tab:future.c.headers}
@@ -2153,7 +2153,7 @@ only to callers of that class.\end{note}
 
 \pnum
 \begin{example}
-If a \Cpp program wants to define a bidirectional iterator for some data
+If a \Cpp{} program wants to define a bidirectional iterator for some data
 structure containing \tcode{double} and such that it works on a large memory
 model of the implementation, it can do so with:
 
diff --git a/source/grammar.tex b/source/grammar.tex
index 7ac4257..149fd5e 100644
--- a/source/grammar.tex
+++ b/source/grammar.tex
@@ -3,10 +3,10 @@
 \pnum
 \indextext{grammar}%
 \indextext{summary!syntax}%
-This summary of \Cpp\  grammar is intended to be an aid to comprehension.
+This summary of \Cpp{}\  grammar is intended to be an aid to comprehension.
 It is not an exact statement of the language.
 In particular, the grammar described here accepts
-a superset of valid \Cpp\  constructs.
+a superset of valid \Cpp{}\  constructs.
 Disambiguation rules (\ref{stmt.ambig}, \ref{dcl.spec}, \ref{class.member.lookup})
 must be applied to distinguish expressions from declarations.
 Further, access control, ambiguity, and type rules must be used
diff --git a/source/intro.tex b/source/intro.tex
index d309ed5..b510ed9 100644
--- a/source/intro.tex
+++ b/source/intro.tex
@@ -5,17 +5,17 @@
 \pnum
 \indextext{scope|(}%
 This document specifies requirements for implementations
-of the \Cpp programming language. The first such requirement is that
+of the \Cpp{} programming language. The first such requirement is that
 they implement the language, so this document also
-defines \Cpp. Other requirements and relaxations of the first
+defines \Cpp{}. Other requirements and relaxations of the first
 requirement appear at various places within this document.
 
 \pnum
-\Cpp is a general purpose programming language based on the C
+\Cpp{} is a general purpose programming language based on the C
 programming language as described in ISO/IEC 9899:2011
 \doccite{Programming languages --- C} (hereinafter referred to as the
 \defnx{C standard}{C!standard}). In addition to
-the facilities provided by C, \Cpp provides additional data types,
+the facilities provided by C, \Cpp{} provides additional data types,
 classes, templates, exceptions, namespaces, operator
 overloading, function name overloading, references, free store
 management operators, and additional library facilities.%
@@ -61,7 +61,7 @@ is hereinafter called the
 \defnx{C standard library}{C!standard library}.%
 \footnote{With the qualifications noted in Clauses~\ref{\firstlibchapter}
 through~\ref{\lastlibchapter} and in~\ref{diff.library}, the C standard
-library is a subset of the \Cpp standard library.}
+library is a subset of the \Cpp{} standard library.}
 
 \pnum
 The operating system interface described in ISO/IEC 9945:2003 is
@@ -292,7 +292,7 @@ possible behaviors is usually delineated by this International Standard.
 
 \indexdefn{program!well-formed}%
 \definition{well-formed program}{defns.well.formed}
-\Cpp  program constructed according to the syntax rules, diagnosable
+\Cpp{}  program constructed according to the syntax rules, diagnosable
 semantic rules, and the one-definition rule~(\ref{basic.def.odr}).%
 \indextext{definitions|)}
 
@@ -334,7 +334,7 @@ Standard except for those rules containing an explicit notation that
 
 \pnum
 \indextext{conformance requirements!method of description}%
-Although this International Standard states only requirements on \Cpp
+Although this International Standard states only requirements on \Cpp{}
 implementations, those requirements are often easier to understand if
 they are phrased as requirements on programs, parts of programs, or
 execution of programs. Such requirements have the following meaning:
@@ -380,7 +380,7 @@ consistent with the descriptions in the library Clauses.
 
 \pnum
 The names defined in the library have namespace
-scope~(\ref{basic.namespace}). A \Cpp  translation
+scope~(\ref{basic.namespace}). A \Cpp{}  translation
 unit~(\ref{lex.phases}) obtains access to these names by including the
 appropriate standard library header~(\ref{cpp.include}).
 
@@ -388,7 +388,7 @@ appropriate standard library header~(\ref{cpp.include}).
 The templates, classes, functions, and objects in the library have
 external linkage~(\ref{basic.link}). The implementation provides
 definitions for standard library entities, as necessary, while combining
-translation units to form a complete \Cpp  program~(\ref{lex.phases}).%
+translation units to form a complete \Cpp{}  program~(\ref{lex.phases}).%
 \indextext{conformance requirements!library|)}
 
 \pnum
@@ -421,14 +421,14 @@ see~\ref{intro.execution}.}%
 \pnum
 \indextext{standard!structure of|(}%
 \indextext{standard!structure of}%
-Clauses~\ref{lex} through~\ref{cpp} describe the \Cpp  programming
+Clauses~\ref{lex} through~\ref{cpp} describe the \Cpp{}  programming
 language. That description includes detailed syntactic specifications in
 a form described in~\ref{syntax}. For convenience, Annex~\ref{gram}
 repeats all such syntactic specifications.
 
 \pnum
 Clauses~\ref{\firstlibchapter} through~\ref{\lastlibchapter} and Annex~\ref{depr}
-(the \defn{library clauses}) describe the \Cpp standard library.
+(the \defn{library clauses}) describe the \Cpp{} standard library.
 That description includes detailed descriptions of the
 entities and macros
 that constitute the library, in a form described in Clause~\ref{library}.
@@ -438,9 +438,9 @@ Annex~\ref{implimits} recommends lower bounds on the capacity of conforming
 implementations.
 
 \pnum
-Annex~\ref{diff} summarizes the evolution of \Cpp  since its first
+Annex~\ref{diff} summarizes the evolution of \Cpp{}  since its first
 published description, and explains in detail the differences between
-\Cpp  and C\@. Certain features of \Cpp  exist solely for compatibility
+\Cpp{}  and C\@. Certain features of \Cpp{}  exist solely for compatibility
 purposes; Annex~\ref{depr} describes those features.
 
 \pnum
@@ -486,11 +486,11 @@ identifiers separated by commas).
 \end{itemize}%
 \indextext{notation!syntax|)}
 
-\rSec1[intro.memory]{The \Cpp memory model}
+\rSec1[intro.memory]{The \Cpp{} memory model}
 
 \pnum
 \indextext{memory model|(}%
-The fundamental storage unit in the \Cpp memory model is the
+The fundamental storage unit in the \Cpp{} memory model is the
 \defn{byte}.
 A byte is at least large enough to contain any member of the basic
 \indextext{character set!basic execution}%
@@ -502,7 +502,7 @@ bits,\footnote{The number of bits in a byte is reported by the macro
 the number of which is \impldef{bits in a byte}. The least
 significant bit is called the \defn{low-order bit}; the most
 significant bit is called the \defn{high-order bit}. The memory
-available to a \Cpp program consists of one or more sequences of
+available to a \Cpp{} program consists of one or more sequences of
 contiguous bytes. Every byte has a unique address.
 
 \pnum
@@ -550,11 +550,11 @@ bit-fields \tcode{b} and \tcode{c} cannot be concurrently modified, but
 \tcode{b} and \tcode{a}, for example, can be. \end{example}%
 \indextext{memory model|)}
 
-\rSec1[intro.object]{The \Cpp object model}
+\rSec1[intro.object]{The \Cpp{} object model}
 
 \pnum
 \indextext{object model|(}%
-The constructs in a \Cpp program create, destroy, refer to, access, and
+The constructs in a \Cpp{} program create, destroy, refer to, access, and
 manipulate objects.
 An \defn{object} is created
 by a definition~(\ref{basic.def}),
@@ -740,7 +740,7 @@ const bool b = &test1 != &test2;      // always \tcode{true}
 
 \pnum
 \begin{note}
-\Cpp  provides a variety of fundamental types and several ways of composing
+\Cpp{}  provides a variety of fundamental types and several ways of composing
 new types from existing types~(\ref{basic.types}).
 \end{note}%
 \indextext{object model|)}
@@ -1112,7 +1112,7 @@ function executions do not interleave with each other.}
 If \placeholder{A} and \placeholder{B} would not otherwise be sequenced then they are
 indeterminately sequenced.
 \end{note}
-Several contexts in \Cpp  cause evaluation of a function call, even
+Several contexts in \Cpp{}  cause evaluation of a function call, even
 though no corresponding function call syntax appears in the translation
 unit.
 \begin{example}
@@ -1152,7 +1152,7 @@ potentially access every object and function in a program.\footnote{An object
 with automatic or thread storage duration~(\ref{basic.stc}) is associated with
 one specific thread, and can be accessed by a different thread only indirectly
 through a pointer or reference~(\ref{basic.compound}).} Under a hosted
-implementation, a \Cpp program can have more than one thread running
+implementation, a \Cpp{} program can have more than one thread running
 concurrently. The execution of each thread proceeds as defined by the remainder
 of this International Standard. The execution of the entire program consists of an execution
 of all of its threads. \begin{note} Usually the execution can be viewed as an
@@ -1430,7 +1430,7 @@ write-read coherence. \end{note}
 \begin{note} The four preceding coherence requirements effectively disallow
 compiler reordering of atomic operations to a single object, even if both
 operations are relaxed loads. This effectively makes the cache coherence
-guarantee provided by most hardware available to \Cpp atomic operations.
+guarantee provided by most hardware available to \Cpp{} atomic operations.
 \end{note}
 
 \pnum
@@ -1494,7 +1494,7 @@ rules. \end{note}
 
 \pnum
 \begin{note} Transformations that introduce a speculative read of a potentially
-shared memory location may not preserve the semantics of the \Cpp program as
+shared memory location may not preserve the semantics of the \Cpp{} program as
 defined in this International Standard, since they potentially introduce a data race. However,
 they are typically valid in the context of an optimizing compiler that targets a
 specific machine with well-defined semantics for data races. They would be
@@ -1707,9 +1707,9 @@ other threads in a finite period of time.%
 \rSec1[intro.ack]{Acknowledgments}
 
 \pnum
-The \Cpp  programming language as described in this document
+The \Cpp{}  programming language as described in this document
 is based on the language as described in Chapter R (Reference
-Manual) of Stroustrup: \doccite{The \Cpp  Programming Language} (second
+Manual) of Stroustrup: \doccite{The \Cpp{}  Programming Language} (second
 edition, Addison-Wesley Publishing Company, ISBN 0-201-53992-6,
 copyright \copyright 1991 AT\&T). That, in turn, is based on the C
 programming language as described in Appendix A of Kernighan and
@@ -1719,7 +1719,7 @@ Ritchie: \doccite{The C Programming Language} (Prentice-Hall, 1978, ISBN
 \pnum
 Portions of the library Clauses of this document are based
 on work by P.J. Plauger, which was published as \doccite{The Draft
-Standard \Cpp  Library} (Prentice-Hall, ISBN 0-13-117003-1, copyright
+Standard \Cpp{}  Library} (Prentice-Hall, ISBN 0-13-117003-1, copyright
 \copyright 1995 P.J. Plauger).
 
 \pnum
diff --git a/source/iostreams.tex b/source/iostreams.tex
index 5b5f008..6c7622e 100644
--- a/source/iostreams.tex
+++ b/source/iostreams.tex
@@ -4,7 +4,7 @@
 \rSec1[input.output.general]{General}
 
 \pnum
-This Clause describes components that \Cpp programs may use to perform
+This Clause describes components that \Cpp{} programs may use to perform
 input/output operations.
 
 \pnum
@@ -1348,7 +1348,7 @@ locale getloc() const;
 \begin{itemdescr}
 \pnum
 \returns
-If no locale has been imbued, a copy of the global \Cpp locale,
+If no locale has been imbued, a copy of the global \Cpp{} locale,
 \tcode{locale()},
 in effect at the time of construction.
 Otherwise, returns the imbued locale, to be used to
@@ -2722,7 +2722,7 @@ ios_base& hexfloat(ios_base& str);
 \pnum
 \begin{note} The more obvious use of
 \tcode{ios_base::hex} to specify hexadecimal floating-point format would
-change the meaning of existing well defined programs. \CppIII
+change the meaning of existing well defined programs. \CppIII{}
 gives no meaning to the combination of \tcode{fixed} and
 \tcode{scientific}.\end{note}
 
@@ -10839,7 +10839,7 @@ For Windows-based operating systems, the
 native narrow encoding is determined by calling a Windows API function.
 \end{note}
 \begin{note}
-This results in behavior identical to other C and \Cpp
+This results in behavior identical to other C and \Cpp{}
 standard library functions that perform file operations using narrow character
 strings to identify paths. Changing this behavior would be surprising and error
 prone.
diff --git a/source/iterators.tex b/source/iterators.tex
index 545bb01..e721c96 100644
--- a/source/iterators.tex
+++ b/source/iterators.tex
@@ -4,7 +4,7 @@
 \rSec1[iterators.general]{General}
 
 \pnum
-This Clause describes components that \Cpp programs may use to perform
+This Clause describes components that \Cpp{} programs may use to perform
 iterations over containers (Clause \ref{containers}),
 streams~(\ref{iostream.format}),
 and stream buffers~(\ref{stream.buffers}).
@@ -32,7 +32,7 @@ as summarized in Table~\ref{tab:iterators.lib.summary}.
 
 \pnum
 \indextext{requirements!iterator}%
-Iterators are a generalization of pointers that allow a \Cpp program to work with different data structures
+Iterators are a generalization of pointers that allow a \Cpp{} program to work with different data structures
 (containers) in a uniform manner.
 To be able to construct template algorithms that work correctly and
 efficiently on different types of data structures, the library formalizes not just the interfaces but also the
@@ -67,7 +67,7 @@ of the iterator.
 
 \pnum
 Since iterators are an abstraction of pointers, their semantics is
-a generalization of most of the semantics of pointers in \Cpp.
+a generalization of most of the semantics of pointers in \Cpp{}.
 This ensures that every
 function template
 that takes iterators
@@ -952,7 +952,7 @@ namespace std {
 \begin{example}
 To implement a generic
 \tcode{reverse}
-function, a \Cpp program can do the following:
+function, a \Cpp{} program can do the following:
 
 \begin{codeblock}
 template <class BidirectionalIterator>
diff --git a/source/lex.tex b/source/lex.tex
index faeeb96..bb4ae88 100644
--- a/source/lex.tex
+++ b/source/lex.tex
@@ -35,7 +35,7 @@ and source files included~(\ref{cpp.include}) via the preprocessing
 directive \tcode{\#include}, less any source lines skipped by any of the
 conditional inclusion~(\ref{cpp.cond}) preprocessing directives, is
 called a \defn{translation unit}.
-\begin{note} A \Cpp program need not all be translated at the same time.
+\begin{note} A \Cpp{} program need not all be translated at the same time.
 \end{note}
 
 \pnum
@@ -555,9 +555,9 @@ characters, an encoding of the \grammarterm{universal-character-name} may be use
 forming valid external identifiers. For example, some otherwise unused
 character or sequence of characters may be used to encode the
 \tcode{\textbackslash u} in a \grammarterm{universal-character-name}. Extended
-characters may produce a long external identifier, but \Cpp does not
+characters may produce a long external identifier, but \Cpp{} does not
 place a translation limit on significant characters for external
-identifiers. In \Cpp, upper- and lower-case letters are considered
+identifiers. In \Cpp{}, upper- and lower-case letters are considered
 different for all identifiers, including external identifiers. }
 
 \begin{floattable}{Ranges of characters allowed}{tab:charname.allowed}
@@ -639,7 +639,7 @@ token as a regular \grammarterm{identifier}.
 \indextext{\idxcode{_}|see{character, underscore}}%
 \indextext{character!underscore!in identifier}%
 \indextext{reserved identifier}%
-In addition, some identifiers are reserved for use by \Cpp
+In addition, some identifiers are reserved for use by \Cpp{}
 implementations and shall
 not be used otherwise; no diagnostic is required.
 \begin{itemize}
@@ -786,7 +786,7 @@ otherwise:
 \pnum
 \indextext{operator|(}%
 \indextext{punctuator|(}%
-The lexical representation of \Cpp programs includes a number of
+The lexical representation of \Cpp{} programs includes a number of
 preprocessing tokens which are used in the syntax of the preprocessor or
 are converted into tokens for operators and punctuators:
 
@@ -1197,7 +1197,7 @@ of a wide-character literal containing multiple \grammarterm{c-char}{s} is
 \pnum
 Certain non-graphic characters, the single quote \tcode{'}, the double quote \tcode{"},
 the question mark \tcode{?},\footnote{Using an escape sequence for a question mark
-is supported for compatibility with ISO \CppXIV and ISO C.}
+is supported for compatibility with ISO \CppXIV{} and ISO C.}
 and the backslash
 \indextext{backslash character}%
 \indextext{\idxcode{\textbackslash}|see{backslash character}}%
diff --git a/source/lib-intro.tex b/source/lib-intro.tex
index 13076f3..85d5a83 100644
--- a/source/lib-intro.tex
+++ b/source/lib-intro.tex
@@ -5,9 +5,9 @@
 
 \pnum
 This Clause describes the contents of the
-\term{\Cpp standard library},
+\term{\Cpp{} standard library},
 \indextext{library!C++ standard}%
-how a well-formed \Cpp program makes use of the library, and
+how a well-formed \Cpp{} program makes use of the library, and
 how a conforming implementation may provide the entities in the library.
 
 \pnum
@@ -16,7 +16,7 @@ description~(\ref{description}), and organization~(\ref{organization}) of the
 library. Clause~\ref{requirements}, Clauses~\ref{\firstlibchapter}
 through~\ref{\lastlibchapter}, and Annex~\ref{depr} specify the contents of the
 library, as well as library requirements and constraints on both well-formed
-\Cpp programs and conforming implementations.
+\Cpp{} programs and conforming implementations.
 
 \pnum
 Detailed specifications for each of the components in the library are in
@@ -41,19 +41,19 @@ Table~\ref{tab:library.categories}.
 
 \pnum
 The language support library (Clause~\ref{language.support}) provides components that are
-required by certain parts of the \Cpp language, such as memory allocation~(\ref{expr.new},
+required by certain parts of the \Cpp{} language, such as memory allocation~(\ref{expr.new},
 \ref{expr.delete}) and exception processing (Clause~\ref{except}).
 
 \pnum
 The diagnostics library (Clause~\ref{diagnostics}) provides a consistent framework for
-reporting errors in a \Cpp program, including predefined exception classes.
+reporting errors in a \Cpp{} program, including predefined exception classes.
 
 \pnum
 The general utilities library (Clause~\ref{utilities}) includes components used
 by other library elements, such as a predefined storage allocator for dynamic
 storage management~(\ref{basic.stc.dynamic}), and components used
 as infrastructure
-in \Cpp programs,
+in \Cpp{} programs,
 such as tuples, function wrappers, and time facilities.
 
 \pnum
@@ -74,7 +74,7 @@ support for text processing.
 
 \pnum
 The containers (Clause~\ref{containers}), iterators (Clause~\ref{iterators}),
-and algorithms (Clause~\ref{algorithms}) libraries provide a \Cpp program with access
+and algorithms (Clause~\ref{algorithms}) libraries provide a \Cpp{} program with access
 to a subset of the most widely used algorithms and data structures.
 
 \pnum
@@ -91,7 +91,7 @@ The random number component provides facilities for generating pseudo-random num
 \pnum
 The input/output library (Clause~\ref{input.output}) provides the
 \tcode{iostream}
-components that are the primary mechanism for \Cpp program input and output.
+components that are the primary mechanism for \Cpp{} program input and output.
 They can be used with other elements of the library, particularly
 strings, locales, and iterators.
 
@@ -109,7 +109,7 @@ and manage threads, including mutual exclusion and interthread communication.
 \rSec1[library.c]{The C standard library}
 
 \pnum
-The \Cpp standard library also makes available the facilities of the C standard library,
+The \Cpp{} standard library also makes available the facilities of the C standard library,
 \indextext{library!C standard}%
 suitably adjusted to ensure static type safety.
 
@@ -225,9 +225,9 @@ that is not list-initialization~(\ref{dcl.init.list})
 \indexdefn{function!handler}%
 a
 \term{non-reserved function}
-whose definition may be provided by a \Cpp program\\
+whose definition may be provided by a \Cpp{} program\\
 \begin{note}
-A \Cpp program may designate a handler function at various points in its execution by
+A \Cpp{} program may designate a handler function at various points in its execution by
 supplying a pointer to the function when calling any of the library functions that install
 handler functions (Clause~\ref{language.support}).
 \end{note}
@@ -295,7 +295,7 @@ including reference types. \end{note}
 \indexdefn{function!replacement}%
 a
 \term{non-reserved function}
-whose definition is provided by a \Cpp program\\
+whose definition is provided by a \Cpp{} program\\
 \begin{note}
 Only one definition for such a function is in effect for the duration of the program's
 execution, as the result of creating the program~(\ref{lex.phases}) and resolving the
@@ -317,17 +317,17 @@ semantics
 applicable to both the behavior provided by the implementation and
 the behavior of any such function definition in the program\\
 \begin{note}
-If such a function defined in a \Cpp program fails to meet the required
+If such a function defined in a \Cpp{} program fails to meet the required
 behavior when it executes, the behavior is undefined.%
 \indextext{undefined}
 \end{note}
 
 \definition{reserved function}{defns.reserved.function}
 \indexdefn{function!reserved}%
-a function, specified as part of the \Cpp standard library, that must be defined by the
+a function, specified as part of the \Cpp{} standard library, that must be defined by the
 implementation\\
 \begin{note}
-If a \Cpp program provides a definition for any reserved function, the results are undefined.%
+If a \Cpp{} program provides a definition for any reserved function, the results are undefined.%
 \indextext{undefined}
 \end{note}
 
@@ -355,7 +355,7 @@ and \tcode{x.front()} can be called only if \tcode{x.empty()} returns
 \rSec1[description]{Method of description (Informative)}
 
 \pnum
-This subclause describes the conventions used to specify the \Cpp standard
+This subclause describes the conventions used to specify the \Cpp{} standard
 library. \ref{structure} describes the structure of the normative
 Clauses~\ref{\firstlibchapter} through~\ref{\lastlibchapter} and
 Annex~\ref{depr}. \ref{conventions} describes other editorial conventions.
@@ -404,7 +404,7 @@ The contents of the summary and the detailed specifications include:
 
 \pnum
 \indextext{requirements}%
-Requirements describe constraints that shall be met by a \Cpp program that extends the standard library.
+Requirements describe constraints that shall be met by a \Cpp{} program that extends the standard library.
 Such extensions are generally one of the following:
 
 \begin{itemize}
@@ -437,7 +437,7 @@ Template argument requirements are sometimes referenced by name.
 See~\ref{type.descriptions}.
 
 \pnum
-In some cases the semantic requirements are presented as \Cpp code.
+In some cases the semantic requirements are presented as \Cpp{} code.
 Such code is intended as a
 specification of equivalence of a construct to another construct, not
 necessarily as the way the construct
@@ -518,7 +518,7 @@ The
 \term{required behavior}
 describes the semantics of a function definition provided by
 \indextext{behavior!required}%
-either the implementation or a \Cpp program.
+either the implementation or a \Cpp{} program.
 Where no distinction is explicitly made in the description, the
 behavior described is the required behavior.
 
@@ -548,7 +548,7 @@ of this International Standard and the ISO C standard.
 
 \pnum
 This subclause describes several editorial conventions used to describe the contents
-of the \Cpp standard library.
+of the \Cpp{} standard library.
 These conventions are for describing
 implementation-defined types~(\ref{type.descriptions}),
 and member functions~(\ref{functions.within.classes}).
@@ -569,7 +569,7 @@ Examples from~\ref{iterator.requirements} include:
 \tcode{ForwardIterator}.}
 These names are used in library Clauses
 to describe the types that
-may be supplied as arguments by a \Cpp program when instantiating template components from
+may be supplied as arguments by a \Cpp{} program when instantiating template components from
 the library.
 
 \pnum
@@ -895,7 +895,7 @@ An implementation may use any technique that provides equivalent observable beha
 \rSec1[requirements]{Library-wide requirements}
 
 \pnum
-This subclause specifies requirements that apply to the entire \Cpp standard library.
+This subclause specifies requirements that apply to the entire \Cpp{} standard library.
 Clauses~\ref{\firstlibchapter} through~\ref{\lastlibchapter} and Annex~\ref{depr}
 specify the requirements of individual entities within the library.
 
@@ -905,27 +905,27 @@ programs having only a single thread of execution.
 
 \pnum
 Within this subclause, \ref{organization} describes the library's contents and
-organization, \ref{using} describes how well-formed \Cpp programs gain access to library
+organization, \ref{using} describes how well-formed \Cpp{} programs gain access to library
 entities,
 \ref{utility.requirements} describes constraints on types and functions used with
-the \Cpp standard library,
-\ref{constraints} describes constraints on well-formed \Cpp programs, and
+the \Cpp{} standard library,
+\ref{constraints} describes constraints on well-formed \Cpp{} programs, and
 \ref{conforming} describes constraints on conforming implementations.
 
 \rSec2[organization]{Library contents and organization}
 
 \pnum
-\ref{contents} describes the entities and macros defined in the \Cpp standard library.
+\ref{contents} describes the entities and macros defined in the \Cpp{} standard library.
 \ref{headers} lists the standard library headers and some constraints on those headers.
-\ref{compliance} lists requirements for a freestanding implementation of the \Cpp
+\ref{compliance} lists requirements for a freestanding implementation of the \Cpp{}
 standard library.
 
 \rSec3[contents]{Library contents}
 
 \pnum
-The \Cpp standard library provides definitions
+The \Cpp{} standard library provides definitions
 for the entities and macros described in the synopses
-of the \Cpp standard library headers~(\ref{headers}).
+of the \Cpp{} standard library headers~(\ref{headers}).
 
 \pnum
 All library entities except
@@ -936,7 +936,7 @@ are defined within the namespace
 \tcode{std}
 or namespaces nested within namespace
 \tcode{std}.\footnote{The C standard library headers (Annex~\ref{depr.c.headers}) also define
-names within the global namespace, while the \Cpp headers for C library
+names within the global namespace, while the \Cpp{} headers for C library
 facilities~(\ref{headers}) may also define names within the global namespace.}%
 \indextext{namespace}
 It is unspecified whether names declared in a specific namespace are declared
@@ -957,17 +957,17 @@ is meant.
 \rSec3[headers]{Headers}
 
 \pnum
-Each element of the \Cpp standard library is declared or defined (as appropriate) in a
+Each element of the \Cpp{} standard library is declared or defined (as appropriate) in a
 \term{header}.\footnote{A header is not necessarily a source file, nor are the
 sequences delimited by \tcode{<} and \tcode{>} in header names necessarily valid source
 file names~(\ref{cpp.include}).}
 
 \pnum
-The \Cpp standard library provides the
-\defnx{\Cpp library headers}{header!C++ library},
+The \Cpp{} standard library provides the
+\defnx{\Cpp{} library headers}{header!C++ library},
 shown in Table~\ref{tab:cpp.library.headers}.
 
-\begin{floattable}{\Cpp library headers}{tab:cpp.library.headers}
+\begin{floattable}{\Cpp{} library headers}{tab:cpp.library.headers}
 {llll}
 \topline
 \tcode{<algorithm>} &
@@ -1056,7 +1056,7 @@ shown in Table~\ref{tab:cpp.library.headers}.
 The facilities of the C standard library are provided in the
 \indextext{library!C standard}%
 additional headers shown in Table~\ref{tab:cpp.c.headers}.%
-\footnote{It is intentional that there is no \Cpp header
+\footnote{It is intentional that there is no \Cpp{} header
 for any of these C headers:
 \indextext{\idxhdr{stdatomic.h}}%
 \indextext{\idxhdr{stdnoreturn.h}}%
@@ -1065,7 +1065,7 @@ for any of these C headers:
 \tcode{<stdnoreturn.h>},
 \tcode{<threads.h>}.}
 
-\begin{floattable}{\Cpp headers for C library facilities}{tab:cpp.c.headers}
+\begin{floattable}{\Cpp{} headers for C library facilities}{tab:cpp.c.headers}
 {lllll}
 \topline
 
@@ -1109,7 +1109,7 @@ Except as noted in Clauses~\ref{library} through~\ref{\lastlibchapter}
 and Annex~\ref{depr}, the contents of each header \tcode{c\placeholder{name}} is
 the same as that of the corresponding header \tcode{\placeholder{name}.h} as
 specified in the C standard library (Clause~\ref{intro.refs}).
-In the \Cpp standard library, however, the
+In the \Cpp{} standard library, however, the
 declarations (except for names which are defined as macros in C) are within
 namespace scope~(\ref{basic.scope.namespace}) of the namespace \tcode{std}.
 It is unspecified whether these names (including any overloads added in
@@ -1119,7 +1119,7 @@ and are then injected into namespace \tcode{std} by explicit
 \grammarterm{using-declaration}{s}~(\ref{namespace.udecl}).
 
 \pnum
-Names which are defined as macros in C shall be defined as macros in the \Cpp
+Names which are defined as macros in C shall be defined as macros in the \Cpp{}
 standard library, even if C grants license for implementation as functions.
 \begin{note} The names defined as macros in C include the following:
 \tcode{assert}, \tcode{offsetof}, \tcode{setjmp}, \tcode{va_arg},
@@ -1127,22 +1127,22 @@ standard library, even if C grants license for implementation as functions.
 
 \pnum
 Names that are defined as functions in C shall be defined as functions in the
-\Cpp standard library.\footnote{This disallows the practice, allowed in C, of
+\Cpp{} standard library.\footnote{This disallows the practice, allowed in C, of
 providing a masking macro in addition to the function prototype. The only way to
-achieve equivalent inline behavior in \Cpp is to provide a definition as an
+achieve equivalent inline behavior in \Cpp{} is to provide a definition as an
 extern inline function.}
 
 \pnum
-Identifiers that are keywords or operators in \Cpp shall not be defined as
-macros in \Cpp standard library headers.\footnote{In particular, including the
+Identifiers that are keywords or operators in \Cpp{} shall not be defined as
+macros in \Cpp{} standard library headers.\footnote{In particular, including the
 standard header \tcode{<iso646.h>} or \tcode{<ciso646>} has no effect.}
 
 \pnum
 \ref{depr.c.headers}, C standard library headers, describes the effects of using
-the \tcode{\placeholder{name}.h} (C header) form in a \Cpp program.\footnote{ The
+the \tcode{\placeholder{name}.h} (C header) form in a \Cpp{} program.\footnote{ The
 \tcode{".h"} headers dump all their names into the global namespace, whereas the
 newer forms keep their names in namespace \tcode{std}. Therefore, the newer
-forms are the preferred forms for all uses except for \Cpp programs which are
+forms are the preferred forms for all uses except for \Cpp{} programs which are
 intended to be strictly compatible with C. }
 
 \pnum
@@ -1155,9 +1155,9 @@ most of them provide the same service
 as the C library function with the unsuffixed name,
 but generally take an additional argument
 whose value is the size of the result array.
-If any \Cpp header is included,
+If any \Cpp{} header is included,
 it is \impldef{whether functions from Annex K of the C standard library
-are declared when \Cpp headers are included}
+are declared when \Cpp{} headers are included}
 whether any of these names
 is declared in the global namespace.
 (None of them is declared in namespace \tcode{std}.)
@@ -1280,7 +1280,7 @@ A freestanding implementation\indextext{implementation!freestanding} has an
 \impldef{headers for freestanding implementation} set of headers. This set shall
 include at least the headers shown in Table~\ref{tab:cpp.headers.freestanding}.
 
-\begin{libsumtab}{\Cpp headers for freestanding implementations}{tab:cpp.headers.freestanding}
+\begin{libsumtab}{\Cpp{} headers for freestanding implementations}{tab:cpp.headers.freestanding}
                          &                           & \tcode{<ciso646>}          \\ \rowsep
 \ref{support.types}      & Types                     & \tcode{<cstddef>}          \\ \rowsep
 \ref{support.limits}     & Implementation properties & \tcode{<cfloat>} \tcode{<limits>} \tcode{<climits>} \\ \rowsep
@@ -1318,15 +1318,15 @@ The other headers listed in this table shall meet the same requirements as for a
 \rSec3[using.overview]{Overview}
 
 \pnum
-This section describes how a \Cpp program gains access to the facilities of the
-\Cpp standard library. \ref{using.headers} describes effects during translation
+This section describes how a \Cpp{} program gains access to the facilities of the
+\Cpp{} standard library. \ref{using.headers} describes effects during translation
 phase 4, while~\ref{using.linkage} describes effects during phase
 8~(\ref{lex.phases}).
 
 \rSec3[using.headers]{Headers}
 
 \pnum
-The entities in the \Cpp standard library are defined in headers,
+The entities in the \Cpp{} standard library are defined in headers,
 whose contents are made available to a translation unit when it contains the appropriate
 \indextext{unit!translation}%
 \tcode{\#include}
@@ -1362,7 +1362,7 @@ declared in that header. No diagnostic is required.
 \rSec3[using.linkage]{Linkage}
 
 \pnum
-Entities in the \Cpp standard library have external linkage~(\ref{basic.link}).
+Entities in the \Cpp{} standard library have external linkage~(\ref{basic.link}).
 Unless otherwise specified, objects and functions have the default
 \tcode{extern "C++"}
 linkage~(\ref{dcl.link}).
@@ -1388,7 +1388,7 @@ Standard.}
 
 \pnum
 Objects and functions
-defined in the library and required by a \Cpp program are included in
+defined in the library and required by a \Cpp{} program are included in
 the program prior to program startup.
 
 \indextext{startup!program}%
@@ -1402,7 +1402,7 @@ runtime changes~(\ref{handler.functions}).
 \pnum
 \ref{utility.arg.requirements}
 describes requirements on types and expressions used to instantiate templates
-defined in the \Cpp standard library.
+defined in the \Cpp{} standard library.
 \ref{swappable.requirements} describes the requirements on swappable types and
 swappable expressions.
 \ref{nullablepointer.requirements} describes the requirements on pointer-like
@@ -1414,11 +1414,11 @@ allocators.
 \rSec3[utility.arg.requirements]{Template argument requirements}
 
 \pnum
-The template definitions in the \Cpp standard library
+The template definitions in the \Cpp{} standard library
 refer to various named requirements whose details are set out in
 Tables~\ref{tab:equalitycomparable}--\ref{tab:destructible}.
 In these tables, \tcode{T} is an object or reference type to be
-supplied by a \Cpp program instantiating a template;
+supplied by a \Cpp{} program instantiating a template;
 \tcode{a},
 \tcode{b}, and
 \tcode{c} are values of type (possibly \tcode{const}) \tcode{T};
@@ -2145,8 +2145,8 @@ whether or not \tcode{T} is a complete type:
 \rSec3[constraints.overview]{Overview}
 
 \pnum
-This section describes restrictions on \Cpp programs that use the facilities of
-the \Cpp standard library. The following subclauses specify constraints on the
+This section describes restrictions on \Cpp{} programs that use the facilities of
+the \Cpp{} standard library. The following subclauses specify constraints on the
 program's use of namespaces~(\ref{namespace.std}), its use of various reserved
 names~(\ref{reserved.names}), its use of headers~(\ref{alt.headers}), its use of
 standard library classes as base classes~(\ref{derived.classes}), its
@@ -2158,7 +2158,7 @@ installation of handler functions during execution~(\ref{handler.functions}).
 \rSec4[namespace.std]{Namespace \tcode{std}}
 
 \pnum
-The behavior of a \Cpp program is undefined if it adds declarations or definitions to namespace
+The behavior of a \Cpp{} program is undefined if it adds declarations or definitions to namespace
 \tcode{std}
 or to a namespace within namespace
 \tcode{std}
@@ -2174,7 +2174,7 @@ must be prepared to work adequately with any user-supplied specialization
 that meets the minimum requirements of this International Standard.}
 
 \pnum
-The behavior of a \Cpp program is undefined if it declares
+The behavior of a \Cpp{} program is undefined if it declares
 \begin{itemize}
 \item an explicit specialization of any member function of a standard
 library class template, or
@@ -2198,7 +2198,7 @@ A translation unit shall not declare namespace \tcode{std} to be an inline names
 \rSec4[namespace.posix]{Namespace \tcode{posix}}
 
 \pnum
-The behavior of a \Cpp program is undefined if it adds declarations or definitions to namespace
+The behavior of a \Cpp{} program is undefined if it adds declarations or definitions to namespace
 \tcode{posix}
 or to a namespace within namespace
 \tcode{posix}
@@ -2211,7 +2211,7 @@ ISO/IEC 9945 and other POSIX standards.
 Top level namespaces with a name starting with \tcode{std} and
 followed by a non-empty sequence of digits
 are reserved for future standardization.
-The behavior of a \Cpp program is undefined if
+The behavior of a \Cpp{} program is undefined if
 it adds declarations or definitions to such a namespace.
 \begin{example} The top level namespace \tcode{std2} is reserved
 for use by future revisions of this International Standard. \end{example}
@@ -2220,7 +2220,7 @@ for use by future revisions of this International Standard. \end{example}
 \indextext{name!reserved}
 
 \pnum
-The \Cpp standard library reserves the following kinds of names:
+The \Cpp{} standard library reserves the following kinds of names:
 \begin{itemize}
 \item macros
 \item global names
@@ -2403,7 +2403,7 @@ Literal suffix identifiers~(\ref{over.literal}) that do not start with an unders
 
 \pnum
 If a file with a name
-equivalent to the derived file name for one of the \Cpp standard library headers
+equivalent to the derived file name for one of the \Cpp{} standard library headers
 is not provided as part of the implementation, and a file with that name
 is placed in any of the standard places for a source file to be included~(\ref{cpp.include}),
 the behavior is undefined.%
@@ -2415,7 +2415,7 @@ the behavior is undefined.%
 \pnum
 Virtual member function signatures defined
 \indextext{function!virtual member}%
-for a base class in the \Cpp standard
+for a base class in the \Cpp{} standard
 \indextext{class!base}%
 \indextext{library!C++ standard}%
 library may be overridden in a derived class defined in the program~(\ref{class.virtual}).
@@ -2426,14 +2426,14 @@ library may be overridden in a derived class defined in the program~(\ref{class.
 \indextext{definition!alternate}%
 Clauses~\ref{\firstlibchapter} through~\ref{\lastlibchapter} and Annex~\ref{depr}
 describe the behavior of numerous functions defined by
-the \Cpp standard library.
+the \Cpp{} standard library.
 Under some circumstances,
 \indextext{library!C++ standard}%
 however, certain of these function descriptions also apply to replacement functions defined
 in the program~(\ref{definitions}).
 
 \pnum
-A \Cpp program may provide the definition for any of the following
+A \Cpp{} program may provide the definition for any of the following
 dynamic memory allocation function signatures declared in header
 \tcode{<new>}~(\ref{basic.stc.dynamic}, \ref{support.dynamic}):
 
@@ -2486,7 +2486,7 @@ No diagnostic is required.
 \rSec3[handler.functions]{Handler functions}
 
 \pnum
-The \Cpp standard library provides a default version of the following handler
+The \Cpp{} standard library provides a default version of the following handler
 function (Clause~\ref{language.support}):
 
 \begin{itemize}
@@ -2496,7 +2496,7 @@ function (Clause~\ref{language.support}):
 \end{itemize}
 
 \pnum
-A \Cpp program may install different handler functions during execution, by
+A \Cpp{} program may install different handler functions during execution, by
 supplying a pointer to a function defined in the program or the library
 as an argument to (respectively):
 \begin{itemize}
@@ -2507,7 +2507,7 @@ See also subclauses~\ref{alloc.errors}, Storage allocation errors, and~\ref{supp
 Exception handling.
 
 \pnum
-A \Cpp program can get a pointer to the current handler function by calling the following
+A \Cpp{} program can get a pointer to the current handler function by calling the following
 functions:
 
 \begin{itemize}
@@ -2528,8 +2528,8 @@ any of the \tcode{set_*} functions shall synchronize with subsequent calls to th
 
 \pnum
 In certain cases (replacement functions, handler functions, operations on types used to
-instantiate standard library template components), the \Cpp standard library depends on
-components supplied by a \Cpp program.
+instantiate standard library template components), the \Cpp{} standard library depends on
+components supplied by a \Cpp{} program.
 If these components do not meet their requirements, this International Standard places no requirements
 on the implementation.
 
@@ -2574,7 +2574,7 @@ allowed for that component.
 \indextext{argument}%
 Each of the following applies to all arguments
 \indextext{argument}%
-to functions defined in the \Cpp standard library,%
+to functions defined in the \Cpp{} standard library,%
 \indextext{library!C++ standard}
 unless explicitly stated otherwise.
 
@@ -2641,7 +2641,7 @@ paragraph specifies throwing an exception when the precondition is violated.
 \rSec3[conforming.overview]{Overview}
 
 \pnum
-This section describes the constraints upon, and latitude of, implementations of the \Cpp standard library.
+This section describes the constraints upon, and latitude of, implementations of the \Cpp{} standard library.
 
 \pnum
 An implementation's use of headers is discussed in~\ref{res.on.headers}, its use
@@ -2654,9 +2654,9 @@ exceptions in~\ref{res.on.exception.handling}.
 \rSec3[res.on.headers]{Headers}
 
 \pnum
-A \Cpp header may include other \Cpp headers.
-A \Cpp header shall provide the declarations and definitions that appear in its
-synopsis. A \Cpp header shown in its synopsis as including other \Cpp headers
+A \Cpp{} header may include other \Cpp{} headers.
+A \Cpp{} header shall provide the declarations and definitions that appear in its
+synopsis. A \Cpp{} header shown in its synopsis as including other \Cpp{} headers
 shall provide the declarations and definitions that appear in the synopses of
 those other headers.
 
@@ -2667,7 +2667,7 @@ included after any other header that also defines it~(\ref{basic.def.odr}).
 
 \pnum
 The C standard library headers (\ref{depr.c.headers})
-shall include only their corresponding \Cpp standard library header,
+shall include only their corresponding \Cpp{} standard library header,
 as described in~\ref{headers}.
 
 \rSec3[res.on.macro.definitions]{Restrictions on macro definitions}
@@ -2693,17 +2693,17 @@ explicitly stated otherwise.
 \pnum
 It is unspecified whether any
 non-member
-functions in the \Cpp standard library are defined as
+functions in the \Cpp{} standard library are defined as
 \tcode{inline}~(\ref{dcl.inline}).
 
 \pnum
 A call to a non-member function signature
 described in Clauses~\ref{\firstlibchapter} through~\ref{\lastlibchapter} and
 Annex~\ref{depr} shall behave as if the implementation declared no additional
-non-member function signatures.\footnote{A valid \Cpp program always
+non-member function signatures.\footnote{A valid \Cpp{} program always
 calls the expected library non-member function. An implementation may
 also define additional non-member functions that would otherwise not
-be called by a valid \Cpp program.}
+be called by a valid \Cpp{} program.}
 
 \pnum
 An implementation shall not declare a non-member function signature
@@ -2733,11 +2733,11 @@ return *this;
 \rSec3[member.functions]{Member functions}
 
 \pnum
-It is unspecified whether any member functions in the \Cpp standard library are defined as
+It is unspecified whether any member functions in the \Cpp{} standard library are defined as
 \tcode{inline}~(\ref{dcl.inline}).
 
 \pnum
-For a non-virtual member function described in the \Cpp standard library,
+For a non-virtual member function described in the \Cpp{} standard library,
 an implementation may declare a different set of member function signatures,
 provided that any call to the member function that would select
 an overload from the set of declarations described in this International Standard
@@ -2784,7 +2784,7 @@ original order).
 
 \pnum
 Except where explicitly specified in this International Standard, it is \impldef{which functions in
-the \Cpp standard library may be recursively reentered} which functions in the \Cpp standard
+the \Cpp{} standard library may be recursively reentered} which functions in the \Cpp{} standard
 library may be recursively reentered.
 
 \rSec3[res.on.data.races]{Data race avoidance}
@@ -2796,13 +2796,13 @@ Every standard library function shall meet each requirement unless otherwise spe
 Implementations may prevent data races in cases other than those specified below.
 
 \pnum
-A \Cpp standard library function shall not directly or indirectly access
+A \Cpp{} standard library function shall not directly or indirectly access
 objects~(\ref{intro.multithread}) accessible by threads other than the current thread
 unless the objects are accessed directly or indirectly via the function's arguments,
 including \tcode{this}.
 
 \pnum
-A \Cpp standard library function shall not directly or indirectly modify
+A \Cpp{} standard library function shall not directly or indirectly modify
 objects~(\ref{intro.multithread}) accessible by threads other than the current thread
 unless the objects are accessed directly or indirectly via the function's non-const
 arguments, including \tcode{this}.
@@ -2813,7 +2813,7 @@ internal purposes without synchronization because it could cause a data race eve
 programs that do not explicitly share objects between threads. \end{note}
 
 \pnum
-A \Cpp standard library function shall not access objects indirectly accessible via its
+A \Cpp{} standard library function shall not access objects indirectly accessible via its
 arguments or via elements of its container arguments except by invoking functions
 required by its specification on those container elements.
 
@@ -2828,7 +2828,7 @@ Implementations may share their own internal objects between threads if the obje
 not visible to users and are protected against data races.
 
 \pnum
-Unless otherwise specified, \Cpp standard library functions shall perform all operations
+Unless otherwise specified, \Cpp{} standard library functions shall perform all operations
 solely within the current thread if those operations have effects that are
 visible~(\ref{intro.multithread}) to users.
 
@@ -2844,7 +2844,7 @@ side effects. \end{note}
 It is unspecified whether any function signature or class described in
 Clauses~\ref{\firstlibchapter} through~\ref{\lastlibchapter} and Annex~\ref{depr} is a
 \tcode{friend}
-of another class in the \Cpp standard library.
+of another class in the \Cpp{} standard library.
 \indextext{specifier!\idxcode{friend}}
 
 \rSec3[derivation]{Derived classes}
@@ -2852,13 +2852,13 @@ of another class in the \Cpp standard library.
 \pnum
 \indextext{class!derived}%
 \indextext{class!base}%
-An implementation may derive any class in the \Cpp standard library from a class with a
+An implementation may derive any class in the \Cpp{} standard library from a class with a
 name reserved to the implementation.
 
 \pnum
-Certain classes defined in the \Cpp standard library are required to be derived from
+Certain classes defined in the \Cpp{} standard library are required to be derived from
 other classes
-in the \Cpp standard library.
+in the \Cpp{} standard library.
 \indextext{library!C++ standard}%
 An implementation may derive such a class directly from the required base or indirectly
 through a hierarchy of base classes with names reserved to the implementation.
@@ -2884,7 +2884,7 @@ described as synonyms for basic integral types, such as
 \end{itemize}
 
 \pnum
-All types specified in the \Cpp standard library shall be non-\tcode{final} types
+All types specified in the \Cpp{} standard library shall be non-\tcode{final} types
 unless otherwise specified.
 
 \rSec3[res.on.exception.handling]{Restrictions on exception handling}%
@@ -2892,7 +2892,7 @@ unless otherwise specified.
 \indextext{exception handling!handler}
 
 \pnum
-Any of the functions defined in the \Cpp standard library
+Any of the functions defined in the \Cpp{} standard library
 \indextext{library!C++ standard}%
 can report a failure by throwing an exception of a type described in its
 \throws
@@ -2918,14 +2918,14 @@ and
 \tcode{bsearch()}~(\ref{alg.c.library}) meet this condition.}
 
 \pnum
-Destructor operations defined in the \Cpp standard library
+Destructor operations defined in the \Cpp{} standard library
 shall not throw exceptions.
-Every destructor in the \Cpp standard library shall behave as if it had a
+Every destructor in the \Cpp{} standard library shall behave as if it had a
 non-throwing exception specification.
 
 \pnum
 Functions defined in the
-\Cpp standard library
+\Cpp{} standard library
 \indextext{specifications!C++}%
 that do not have a
 \throws
@@ -2966,7 +2966,7 @@ pointer location. \end{note}
 \rSec3[value.error.codes]{Value of error codes}
 
 \pnum
-Certain functions in the \Cpp standard library report errors via a
+Certain functions in the \Cpp{} standard library report errors via a
 \tcode{std::error_code}~(\ref{syserr.errcode.overview}) object. That object's
 \tcode{category()} member shall return \tcode{std::system_category()} for
 errors originating from the operating system, or a reference to an
@@ -2984,7 +2984,7 @@ may provide enums for the associated values. \end{example}
 \rSec3[lib.types.movedfrom]{Moved-from state of library types}
 
 \pnum
-Objects of types defined in the \Cpp standard library may be moved
+Objects of types defined in the \Cpp{} standard library may be moved
 from~(\ref{class.copy}). Move operations may be explicitly specified or
 implicitly generated. Unless otherwise specified, such moved-from objects shall
 be placed in a valid but unspecified state.
diff --git a/source/limits.tex b/source/limits.tex
index d1b2c85..306ee8d 100644
--- a/source/limits.tex
+++ b/source/limits.tex
@@ -2,7 +2,7 @@
 \infannex{implimits}{Implementation quantities}
 
 \pnum
-Because computers are finite, \Cpp  implementations are inevitably
+Because computers are finite, \Cpp{}  implementations are inevitably
 limited in the size of the programs they can successfully process.
 Every implementation shall
 document those limitations where known.
diff --git a/source/locales.tex b/source/locales.tex
index 256774c..7b03a78 100644
--- a/source/locales.tex
+++ b/source/locales.tex
@@ -4,7 +4,7 @@
 \rSec1[localization.general]{General}
 
 \pnum
-This Clause describes components that \Cpp programs may use to
+This Clause describes components that \Cpp{} programs may use to
 encapsulate (and therefore be more portable when confronting)
 cultural differences.
 The locale facility includes internationalization
@@ -219,7 +219,7 @@ is not present in a
 locale,
 it throws the standard exception
 \tcode{bad_cast}.
-A \Cpp program can check if a locale implements a particular
+A \Cpp{} program can check if a locale implements a particular
 facet with the
 function template
 \tcode{has_facet<Facet>()}.
@@ -248,7 +248,7 @@ functions such as
 and
 \tcode{isspace()},
 so that given a locale
-object \tcode{loc} a \Cpp program can call
+object \tcode{loc} a \Cpp{} program can call
 \tcode{isspace(c, loc)}.
 (This eases upgrading existing extractors~(\ref{istream.formatted}).)
 \end{itemize}
@@ -5061,9 +5061,9 @@ namespace std {
 \rSec2[facets.examples]{Program-defined facets}
 
 \pnum
-A \Cpp program may define facets to be added to a locale and used identically as
+A \Cpp{} program may define facets to be added to a locale and used identically as
 the built-in facets.
-To create a new facet interface, \Cpp programs simply derive from
+To create a new facet interface, \Cpp{} programs simply derive from
 \tcode{locale::facet}
 a class containing a static member:
 \tcode{static locale::id id}.
@@ -5189,7 +5189,7 @@ std::istream& operator>>(std::istream& s, Date& d) {
 A locale object may be extended with a new facet simply by constructing
 it with an instance of a class derived from
 \tcode{locale::facet}.
-The only member a \Cpp program must define is the static member
+The only member a \Cpp{} program must define is the static member
 \tcode{id},
 which identifies your class interface as a new facet.
 
diff --git a/source/numerics.tex b/source/numerics.tex
index d6b313c..0a21712 100644
--- a/source/numerics.tex
+++ b/source/numerics.tex
@@ -4,7 +4,7 @@
 \rSec1[numerics.general]{General}
 
 \pnum
-This Clause describes components that \Cpp programs may use to perform
+This Clause describes components that \Cpp{} programs may use to perform
 seminumerical operations.
 
 \pnum
@@ -59,7 +59,7 @@ The
 and
 \tcode{valarray}
 components are parameterized by the type of information they contain and manipulate.
-A \Cpp program shall instantiate these components only with a type
+A \Cpp{} program shall instantiate these components only with a type
 \tcode{T}
 that satisfies the
 following requirements:\footnote{In other words, value types.
@@ -7771,7 +7771,7 @@ class represents a BLAS-like slice from an array.
 Such a slice is specified by a starting index, a length, and a
 stride.\footnote{BLAS stands for
 \textit{Basic Linear Algebra Subprograms.}
-\Cpp programs may instantiate this class.
+\Cpp{} programs may instantiate this class.
 See, for example,
 Dongarra, Du Croz, Duff, and Hammerling:
 \textit{A set of Level 3 Basic Linear Algebra Subprograms};
diff --git a/source/regex.tex b/source/regex.tex
index 44d2c92..9c8c266 100644
--- a/source/regex.tex
+++ b/source/regex.tex
@@ -6,7 +6,7 @@
 
 
 \pnum
-This Clause describes components that \Cpp programs may use to
+This Clause describes components that \Cpp{} programs may use to
 perform operations involving regular expression matching and
 searching.
 
@@ -4038,7 +4038,7 @@ Objects of type specialization of \tcode{basic_regex} store within themselves a
 default-constructed instance of their \tcode{traits} template parameter, henceforth
 referred to as \tcode{traits_inst}. This \tcode{traits_inst} object is used to support localization
 of the regular expression; \tcode{basic_regex} member functions shall not call
-any locale dependent C or \Cpp API, including the formatted string input functions.
+any locale dependent C or \Cpp{} API, including the formatted string input functions.
 Instead they shall call the appropriate traits member function to achieve the required effect.
 
 \pnum
diff --git a/source/support.tex b/source/support.tex
index 9b8d8d8..16fd32a 100644
--- a/source/support.tex
+++ b/source/support.tex
@@ -6,7 +6,7 @@
 \pnum
 This Clause describes the function signatures that are called
 implicitly, and the types of objects generated implicitly, during the execution
-of some \Cpp programs.
+of some \Cpp{} programs.
 It also describes the headers that declare these function
 signatures and define any related types.
 
@@ -14,7 +14,7 @@ signatures and define any related types.
 The following subclauses describe
 common type definitions used throughout the library,
 characteristics of the predefined types,
-functions supporting start and termination of a \Cpp program,
+functions supporting start and termination of a \Cpp{} program,
 support for dynamic memory management,
 support for dynamic type identification,
 support for exception processing, support for initializer lists,
@@ -627,7 +627,7 @@ if the type does allow subnormal values
 The
 \indexlibrary{\idxcode{numeric_limits}}%
 \tcode{numeric_limits}
-class template provides a \Cpp program with information about various properties of
+class template provides a \Cpp{} program with information about various properties of
 the implementation's representation of the
 arithmetic types.
 
@@ -1883,9 +1883,9 @@ is not a valid alignment value,
 the behavior is undefined.
 
 \newcommand{\replaceabledesc}[1]{%
-A \Cpp program may define functions with #1 of these function signatures,
+A \Cpp{} program may define functions with #1 of these function signatures,
 and thereby displace the default versions defined by the
-\Cpp standard library.%
+\Cpp{} standard library.%
 }
 
 \rSec3[new.delete.single]{Single-object forms}
@@ -1966,7 +1966,7 @@ void* operator new(std::size_t size, std::align_val_t alignment, const std::noth
 \effects
 Same as above, except that these are called by a placement version of a
 \grammarterm{new-expression}
-when a \Cpp program prefers a null pointer result as an error indication,
+when a \Cpp{} program prefers a null pointer result as an error indication,
 instead of a
 \tcode{bad_alloc}
 exception.
@@ -2228,7 +2228,7 @@ void* operator new[](std::size_t size, std::align_val_t alignment, const std::no
 \effects
 Same as above, except that these are called by a placement version of a
 \grammarterm{new-expression}
-when a \Cpp program prefers a null pointer result as an error indication,
+when a \Cpp{} program prefers a null pointer result as an error indication,
 instead of a
 \tcode{bad_alloc}
 exception.
@@ -2396,8 +2396,8 @@ respectively.
 \rSec3[new.delete.placement]{Non-allocating forms}
 
 \pnum
-These functions are reserved; a \Cpp program may not define functions that displace
-the versions in the \Cpp standard library~(\ref{constraints}).
+These functions are reserved; a \Cpp{} program may not define functions that displace
+the versions in the \Cpp{} standard library~(\ref{constraints}).
 The provisions of~\ref{basic.stc.dynamic} do not apply to these reserved
 placement forms of \tcode{operator new} and \tcode{operator delete}.
 
@@ -3073,7 +3073,7 @@ suitable for conversion and display as a
 \pnum
 The header
 \tcode{<exception>}
-defines several types and functions related to the handling of exceptions in a \Cpp program.
+defines several types and functions related to the handling of exceptions in a \Cpp{} program.
 
 \rSec2[exception.syn]{Header \tcode{<exception>} synopsis}
 \indextext{\idxhdr{exception}}%
@@ -3126,7 +3126,7 @@ The class
 \tcode{exception}
 defines the base
 class for the types of objects thrown as exceptions by
-\Cpp standard library components, and certain
+\Cpp{} standard library components, and certain
 expressions, to report errors detected during program execution.
 
 \pnum
diff --git a/source/threads.tex b/source/threads.tex
index 99dce29..2c5f1c3 100644
--- a/source/threads.tex
+++ b/source/threads.tex
@@ -3615,7 +3615,7 @@ return wait_until(lock, chrono::steady_clock::now() + rel_time, std::move(pred))
 \rSec2[futures.overview]{Overview}
 
 \pnum
-\ref{futures} describes components that a \Cpp program can use to retrieve in one thread the
+\ref{futures} describes components that a \Cpp{} program can use to retrieve in one thread the
 result (value or exception) from a function that has run in the same thread or another thread.
 \begin{note} These components are not restricted to multi-threaded programs but can be useful in
 single-threaded programs as well. \end{note}
diff --git a/source/utilities.tex b/source/utilities.tex
index 1b9602f..dce7093 100644
--- a/source/utilities.tex
+++ b/source/utilities.tex
@@ -4,8 +4,8 @@
 \rSec1[utilities.general]{General}
 
 \pnum
-This Clause describes utilities that are generally useful in \Cpp programs; some
-of these utilities are used by other elements of the \Cpp standard library.
+This Clause describes utilities that are generally useful in \Cpp{} programs; some
+of these utilities are used by other elements of the \Cpp{} standard library.
 These utilities are summarized in Table~\ref{tab:util.lib.summary}.
 
 \begin{libsumtab}{General utilities library summary}{tab:util.lib.summary}
@@ -1271,7 +1271,7 @@ In place of:
 \begin{codeblock}
   return pair<int, double>(5, 3.1415926);   // explicit types
 \end{codeblock}
-a \Cpp program may contain:
+a \Cpp{} program may contain:
 \begin{codeblock}
   return make_pair(5, 3.1415926);           // types are deduced
 \end{codeblock}
@@ -5447,7 +5447,7 @@ even though it does not have a nested \tcode{allocator_type}.
 \rSec1[any]{Storage for any type}
 
 \pnum
-This section describes components that \Cpp programs may use to perform operations on objects of a discriminated type.
+This section describes components that \Cpp{} programs may use to perform operations on objects of a discriminated type.
 
 \pnum
 \begin{note}
@@ -13040,7 +13040,7 @@ namespace std {
 
 \pnum
 \begin{example}
-If a \Cpp program wants to have a by-element addition of two vectors \tcode{a}
+If a \Cpp{} program wants to have a by-element addition of two vectors \tcode{a}
 and \tcode{b} containing \tcode{double} and put the result into \tcode{a},
 it can do:
 
@@ -15210,13 +15210,13 @@ user-defined specialization that depends on at least one user-defined type.
 \rSec1[meta]{Metaprogramming and type traits}
 
 \pnum
-This subclause describes components used by \Cpp programs, particularly in
+This subclause describes components used by \Cpp{} programs, particularly in
 templates, to support the widest possible range of types, optimise
 template code usage, detect type related user errors, and perform
 type inference and transformation at compile time. It includes type
 classification traits, type property inspection traits, and type
 transformations. The type classification traits describe a complete taxonomy
-of all possible \Cpp types, and state where in that taxonomy a given
+of all possible \Cpp{} types, and state where in that taxonomy a given
 type belongs. The type property inspection traits allow important
 characteristics of types or of combinations of types to be inspected. The
 type transformations allow certain properties of types to be manipulated.
@@ -15693,7 +15693,7 @@ with a base characteristic of
 
 \pnum
 The primary type categories correspond to the descriptions given in
-section~\ref{basic.types} of the \Cpp standard.
+section~\ref{basic.types} of the \Cpp{} standard.
 
 \pnum
 For any given type \tcode{T}, the result of applying one of these templates to
@@ -16777,7 +16777,7 @@ assert((is_same_v<remove_all_extents_t<int[][3]>, int>));
  struct aligned_storage;}
  &
  The value of \textit{default-alignment} shall be the most
- stringent alignment requirement for any \Cpp object type whose size
+ stringent alignment requirement for any \Cpp{} object type whose size
  is no greater than \tcode{Len}~(\ref{basic.types}).
  The member typedef \tcode{type} shall be a POD type
  suitable for use as uninitialized storage for any object whose size
-- 
2.7.4


From 383ec7a7a2c0c69d79f297924e381bfe57c07f06 Mon Sep 17 00:00:00 2001
From: Jens Maurer <Jens.Maurer@gmx.net>
Date: Tue, 7 Feb 2017 10:26:32 +0100
Subject: [PATCH 09/45] [macros] remove \xspace from \NTS

---
 source/macros.tex | 9 +++++----
 1 file changed, 5 insertions(+), 4 deletions(-)

diff --git a/source/macros.tex b/source/macros.tex
index a7227e1..f988cfe 100644
--- a/source/macros.tex
+++ b/source/macros.tex
@@ -237,12 +237,13 @@
 \newcommand{\xref}{\textsc{See also:}\xspace}
 
 %% NTBS, etc.
-\newcommand{\NTS}[1]{\textsc{#1}\xspace}
+\newcommand{\NTS}[1]{\textsc{#1}}
 \newcommand{\ntbs}{\NTS{ntbs}}
 \newcommand{\ntmbs}{\NTS{ntmbs}}
-\newcommand{\ntwcs}{\NTS{ntwcs}}
-\newcommand{\ntcxvis}{\NTS{ntc16s}}
-\newcommand{\ntcxxxiis}{\NTS{ntc32s}}
+% The following are currently unused:
+% \newcommand{\ntwcs}{\NTS{ntwcs}}
+% \newcommand{\ntcxvis}{\NTS{ntc16s}}
+% \newcommand{\ntcxxxiis}{\NTS{ntc32s}}
 
 %% Code annotations
 \newcommand{\EXPO}[1]{\textit{#1}}
-- 
2.7.4


From f8a8d21ac1108dd347da83775670ad75c4b67a6d Mon Sep 17 00:00:00 2001
From: Jens Maurer <Jens.Maurer@gmx.net>
Date: Tue, 7 Feb 2017 10:26:52 +0100
Subject: [PATCH 10/45] Replace \ntbs with \ntbs{} and \ntmbs with \ntmbs{}

---
 source/basic.tex       |  4 ++--
 source/diagnostics.tex |  4 ++--
 source/future.tex      |  6 +++---
 source/iostreams.tex   |  4 ++--
 source/lib-intro.tex   | 25 +++++++++++++------------
 source/support.tex     | 14 +++++++-------
 source/threads.tex     |  2 +-
 source/utilities.tex   |  8 ++++----
 8 files changed, 34 insertions(+), 33 deletions(-)

diff --git a/source/basic.tex b/source/basic.tex
index 699d294..e992d6a 100644
--- a/source/basic.tex
+++ b/source/basic.tex
@@ -2470,9 +2470,9 @@ arguments passed to the program from the environment in which the
 program is run. If
 \tcode{argc} is nonzero these arguments shall be supplied in
 \tcode{argv[0]} through \tcode{argv[argc-1]} as pointers to the initial
-characters of null-terminated multibyte strings (\ntmbs
+characters of null-terminated multibyte strings (\ntmbs{}
 s)~(\ref{multibyte.strings}) and \tcode{argv[0]} shall be the pointer to
-the initial character of a \ntmbs that represents the name used to
+the initial character of a \ntmbs{} that represents the name used to
 invoke the program or \tcode{""}. The value of \tcode{argc} shall be
 non-negative. The value of \tcode{argv[argc]} shall be 0. \begin{note} It
 is recommended that any further (optional) parameters be added after
diff --git a/source/diagnostics.tex b/source/diagnostics.tex
index 51579d1..253c9a5 100644
--- a/source/diagnostics.tex
+++ b/source/diagnostics.tex
@@ -1791,8 +1791,8 @@ const char* what() const noexcept override;
 
 \begin{itemdescr}
 \pnum
-\returns An \ntbs incorporating the arguments supplied in the constructor.
+\returns An \ntbs{} incorporating the arguments supplied in the constructor.
 
-\begin{note} The returned \ntbs might be the contents of \tcode{what_arg + ": " +
+\begin{note} The returned \ntbs{} might be the contents of \tcode{what_arg + ": " +
 code.message()}.\end{note}
 \end{itemdescr}
diff --git a/source/future.tex b/source/future.tex
index c057a97..3d7e5a5 100644
--- a/source/future.tex
+++ b/source/future.tex
@@ -913,7 +913,7 @@ initializing the base class with
 \tcode{istream(\&sb)}
 and initializing \tcode{sb} with
 \tcode{strstreambuf(s,0)}.
-\tcode{s} shall designate the first element of an \ntbs.%
+\tcode{s} shall designate the first element of an \ntbs{}.%
 \indextext{NTBS}
 \end{itemdescr}
 
@@ -1040,7 +1040,7 @@ The constructor is
 If
 \tcode{(mode \& app) != 0},
 then \tcode{s} shall designate the first element of an array of \tcode{n} elements that
-contains an \ntbs whose first element is designated by \tcode{s}.
+contains an \ntbs{} whose first element is designated by \tcode{s}.
 \indextext{NTBS}%
 The constructor is
 \tcode{strstreambuf(s, n, s + std::strlen(s))}.\footnote{The function signature
@@ -1190,7 +1190,7 @@ If
 \tcode{(mode \& app) != 0},
 then \tcode{s} shall
 designate the first element of an array of \tcode{n} elements that contains
-an \ntbs whose first element is designated by \tcode{s}.
+an \ntbs{} whose first element is designated by \tcode{s}.
 The constructor is
 \tcode{strstreambuf(s,n,s + std::strlen(s))}.
 \indexlibrary{\idxcode{strstream}!destructor}%
diff --git a/source/iostreams.tex b/source/iostreams.tex
index 6c7622e..c64be54 100644
--- a/source/iostreams.tex
+++ b/source/iostreams.tex
@@ -8648,12 +8648,12 @@ initializes the
 \tcode{filebuf}
 as required.
 It then opens a file, if possible, whose name is the
-\ntbs \tcode{s}
+\ntbs{} \tcode{s}
 (as if by calling
 \tcode{fopen(s, modstr)}).
 \indextext{NTBS}%
 \indexlibrary{\idxcode{fopen}}%
-The \ntbs \tcode{modstr} is determined from
+The \ntbs{} \tcode{modstr} is determined from
 \tcode{mode \& \~{}ios_base::ate}
 as indicated in Table~\ref{tab:iostreams.file.open.modes}.
 If \tcode{mode} is not some combination of flags shown in the table then
diff --git a/source/lib-intro.tex b/source/lib-intro.tex
index 85d5a83..5ba9e45 100644
--- a/source/lib-intro.tex
+++ b/source/lib-intro.tex
@@ -784,7 +784,7 @@ A
 \indextext{string!null-terminated byte}%
 \indextext{NTBS}%
 \term{null-terminated byte string},
-or \ntbs,
+or \ntbs{},
 is a character sequence whose highest-addressed element
 with defined content has the value zero
 (the
@@ -802,17 +802,17 @@ a length value, maintained separately from the character sequence.}
 
 \pnum
 The
-\term{length} of an \ntbs
+\term{length} of an \ntbs{}
 is the number of elements that
 precede the terminating null character.
 \indextext{NTBS}%
 An
-\term{empty} \ntbs
+\term{empty} \ntbs{}
 has a length of zero.
 
 \pnum
 The
-\term{value} of an \ntbs
+\term{value} of an \ntbs{}
 is the sequence of values of the
 elements up to and including the terminating null character.
 \indextext{NTBS}%
@@ -821,11 +821,11 @@ elements up to and including the terminating null character.
 A
 \indextext{NTBS}%
 \indextext{NTBS!static}%
-\term{static} \ntbs
-is an \ntbs with
+\term{static} \ntbs{}
+is an \ntbs{} with
 static storage duration.\footnote{A string literal, such as
 \tcode{"abc"},
-is a static \ntbs.}
+is a static \ntbs{}.}
 
 \rSec5[multibyte.strings]{Multibyte strings}
 
@@ -833,17 +833,18 @@ is a static \ntbs.}
 \indextext{NTBS}%
 \indextext{NTMBS}%
 A \defnx{null-terminated multibyte string}{string!null-terminated multibyte},
-or \ntmbs, is an \ntbs that constitutes a
+or \ntmbs{},
+is an \ntbs{} that constitutes a
 sequence of valid multibyte characters, beginning and ending in the initial
-shift state.\footnote{An \ntbs that contains characters only from the
-basic execution character set is also an \ntmbs.
+shift state.\footnote{An \ntbs{} that contains characters only from the
+basic execution character set is also an \ntmbs{}.
 Each multibyte character then
 consists of a single byte.}
 
 \pnum
 A
-\term{static} \ntmbs
-is an \ntmbs with static storage duration.
+\term{static} \ntmbs{}
+is an \ntmbs{} with static storage duration.
 \indextext{NTMBS!static}%
 \indextext{NTMBS}%
 
diff --git a/source/support.tex b/source/support.tex
index 16fd32a..a9d8bd7 100644
--- a/source/support.tex
+++ b/source/support.tex
@@ -2561,7 +2561,7 @@ const char* what() const noexcept override;
 \begin{itemdescr}
 \pnum
 \returns
-An \impldef{return value of \tcode{bad_alloc::what}} \ntbs.
+An \impldef{return value of \tcode{bad_alloc::what}} \ntbs{}.
 
 \pnum
 \remarks
@@ -2607,7 +2607,7 @@ const char* what() const noexcept override;
 \begin{itemdescr}
 \pnum
 \returns
-An \impldef{return value of \tcode{bad_array_new_length::what}} \ntbs.
+An \impldef{return value of \tcode{bad_array_new_length::what}} \ntbs{}.
 
 \pnum
 \remarks
@@ -2925,7 +2925,7 @@ const char* name() const noexcept;
 \begin{itemdescr}
 \pnum
 \returns
-An \impldef{return value of \tcode{type_info::name()}} \ntbs.
+An \impldef{return value of \tcode{type_info::name()}} \ntbs{}.
 
 \pnum
 \remarks
@@ -2992,7 +2992,7 @@ const char* what() const noexcept override;
 \begin{itemdescr}
 \pnum
 \returns
-An \impldef{return value of \tcode{bad_cast::what}} \ntbs.
+An \impldef{return value of \tcode{bad_cast::what}} \ntbs{}.
 
 \pnum
 \remarks
@@ -3059,7 +3059,7 @@ const char* what() const noexcept override;
 \begin{itemdescr}
 \pnum
 \returns
-An \impldef{return value of \tcode{bad_typeid::what}} \ntbs.
+An \impldef{return value of \tcode{bad_typeid::what}} \ntbs{}.
 
 \pnum
 \remarks
@@ -3188,7 +3188,7 @@ virtual const char* what() const noexcept;
 \begin{itemdescr}
 \pnum
 \returns
-An \impldef{return value of \tcode{exception::what}} \ntbs.
+An \impldef{return value of \tcode{exception::what}} \ntbs{}.
 
 \pnum
 \remarks
@@ -3257,7 +3257,7 @@ const char* what() const noexcept override;
 \begin{itemdescr}
 \pnum
 \returns
-An \impldef{return value of \tcode{bad_exception::what}} \ntbs.
+An \impldef{return value of \tcode{bad_exception::what}} \ntbs{}.
 
 \pnum
 \remarks
diff --git a/source/threads.tex b/source/threads.tex
index 2c5f1c3..3f4ca7f 100644
--- a/source/threads.tex
+++ b/source/threads.tex
@@ -3785,7 +3785,7 @@ const char* what() const noexcept;
 
 \begin{itemdescr}
 \pnum
-\returns An \ntbs incorporating \tcode{code().message()}.
+\returns An \ntbs{} incorporating \tcode{code().message()}.
 \end{itemdescr}
 
 \rSec2[futures.state]{Shared state}
diff --git a/source/utilities.tex b/source/utilities.tex
index dce7093..d2c3e4e 100644
--- a/source/utilities.tex
+++ b/source/utilities.tex
@@ -3540,7 +3540,7 @@ Constructs an object of class \tcode{bad_optional_access}.
 \postconditions
 \tcode{what()} returns an
 \impldef{return value of \tcode{bad_optional_access::what}}
-\ntbs.
+\ntbs{}.
 \end{itemdescr}
 
 \rSec2[optional.relops]{Relational operators}
@@ -5395,7 +5395,7 @@ const char* what() const noexcept override;
 
 \begin{itemdescr}
 \pnum
-\returns An \impldef{return value of \tcode{bad_variant_access::what}} \ntbs.
+\returns An \impldef{return value of \tcode{bad_variant_access::what}} \ntbs{}.
 \end{itemdescr}
 
 \rSec2[variant.hash]{Hash support}
@@ -9498,7 +9498,7 @@ bad_weak_ptr() noexcept;
 
 \begin{itemdescr}
 \pnum\postconditions  \tcode{what()} returns an
-\impldef{return value of \tcode{bad_weak_ptr::what}} \ntbs.
+\impldef{return value of \tcode{bad_weak_ptr::what}} \ntbs{}.
 
 \end{itemdescr}
 
@@ -14465,7 +14465,7 @@ bad_function_call() noexcept;
 
 \begin{itemdescr}
 \pnum\postconditions  \tcode{what()} returns an
-\impldef{return value of \tcode{bad_function_call::what}} \ntbs.
+\impldef{return value of \tcode{bad_function_call::what}} \ntbs{}.
 \end{itemdescr}
 
 \rSec3[func.wrap.func]{Class template \tcode{function}}
-- 
2.7.4


From 7e5002b0d58307924f6e140fe4665f32aad53395 Mon Sep 17 00:00:00 2001
From: Jens Maurer <Jens.Maurer@gmx.net>
Date: Tue, 7 Feb 2017 10:34:22 +0100
Subject: [PATCH 11/45] Replace \opt with \opt{}

---
 source/access.tex       |  2 +-
 source/basic.tex        | 10 +++----
 source/classes.tex      | 20 ++++++-------
 source/declarations.tex | 62 +++++++++++++++++++-------------------
 source/declarators.tex  | 80 ++++++++++++++++++++++++-------------------------
 source/derived.tex      | 12 ++++----
 source/exceptions.tex   |  8 ++---
 source/expressions.tex  | 36 +++++++++++-----------
 source/intro.tex        |  2 +-
 source/lex.tex          | 44 +++++++++++++--------------
 source/overloading.tex  |  4 +--
 source/preprocessor.tex | 34 ++++++++++-----------
 source/special.tex      | 12 ++++----
 source/statements.tex   | 34 ++++++++++-----------
 source/templates.tex    | 22 +++++++-------
 15 files changed, 191 insertions(+), 191 deletions(-)

diff --git a/source/access.tex b/source/access.tex
index 6f87863..a010889 100644
--- a/source/access.tex
+++ b/source/access.tex
@@ -200,7 +200,7 @@ Member declarations can be labeled by an
 (Clause~\ref{class.derived}):
 
 \begin{ncbnftab}
-access-specifier \terminal{:} member-specification\opt
+access-specifier \terminal{:} member-specification\opt{}
 \end{ncbnftab}
 
 An
diff --git a/source/basic.tex b/source/basic.tex
index e992d6a..5b77a9e 100644
--- a/source/basic.tex
+++ b/source/basic.tex
@@ -686,7 +686,7 @@ The point of declaration of a class first declared in an
 \item for a declaration of the form
 
 \begin{ncbnf}
-class-key attribute-specifier-seq\opt identifier \terminal{;}
+class-key attribute-specifier-seq\opt{} identifier \terminal{;}
 \end{ncbnf}
 
 the \grammarterm{identifier} is declared to be a
@@ -1657,7 +1657,7 @@ up as types in the scope designated by the
 \grammarterm{qualified-id} of the form:
 
 \begin{ncbnf}
-nested-name-specifier\opt class-name \terminal{::} \terminal{\tilde} class-name
+nested-name-specifier\opt{} class-name \terminal{::} \terminal{\tilde} class-name
 \end{ncbnf}
 
 the second \grammarterm{class-name} is looked up in the same scope as the
@@ -2017,7 +2017,7 @@ If the \grammarterm{elaborated-type-specifier} has no
 following form:
 
 \begin{ncbnf}
-class-key attribute-specifier-seq\opt identifier \terminal{;}
+class-key attribute-specifier-seq\opt{} identifier \terminal{;}
 \end{ncbnf}
 
 the \grammarterm{identifier} is looked up according
@@ -2032,7 +2032,7 @@ declared \grammarterm{type-name}, or if the
 form:
 
 \begin{ncbnf}
-class-key attribute-specifier-seq\opt identifier \terminal{;}
+class-key attribute-specifier-seq\opt{} identifier \terminal{;}
 \end{ncbnf}
 
 the \grammarterm{elaborated-type-specifier} is a declaration that
@@ -2198,7 +2198,7 @@ of a sequence of declarations.
 
 \begin{bnf}
 \nontermdef{translation-unit}\br
-    declaration-seq\opt
+    declaration-seq\opt{}
 \end{bnf}
 
 \pnum
diff --git a/source/classes.tex b/source/classes.tex
index ab1b59f..66c1912 100644
--- a/source/classes.tex
+++ b/source/classes.tex
@@ -34,13 +34,13 @@ make \grammarterm{class-name}{s}. An object of a class consists of a
 
 \begin{bnf}
 \nontermdef{class-head}\br
-    class-key attribute-specifier-seq\opt class-head-name class-virt-specifier\opt base-clause\opt\br
-    class-key attribute-specifier-seq\opt base-clause\opt
+    class-key attribute-specifier-seq\opt{} class-head-name class-virt-specifier\opt{} base-clause\opt{}\br
+    class-key attribute-specifier-seq\opt{} base-clause\opt{}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{class-head-name}\br
-    nested-name-specifier\opt class-name
+    nested-name-specifier\opt{} class-name
 \end{bnf}
 
 \begin{bnf}
@@ -442,13 +442,13 @@ ignored. A \grammarterm{typedef-name} shall not be used as the
 
 \begin{bnf}
 \nontermdef{member-specification}\br
-    member-declaration member-specification\opt\br
-    access-specifier \terminal{:} member-specification\opt
+    member-declaration member-specification\opt{}\br
+    access-specifier \terminal{:} member-specification\opt{}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{member-declaration}\br
-    attribute-specifier-seq\opt decl-specifier-seq\opt member-declarator-list\opt{} \terminal{;}\br
+    attribute-specifier-seq\opt{} decl-specifier-seq\opt{} member-declarator-list\opt{} \terminal{;}\br
     function-definition\br
     using-declaration\br
     static_assert-declaration\br
@@ -466,9 +466,9 @@ ignored. A \grammarterm{typedef-name} shall not be used as the
 
 \begin{bnf}
 \nontermdef{member-declarator}\br
-    declarator virt-specifier-seq\opt pure-specifier\opt\br
-    declarator brace-or-equal-initializer\opt\br
-    identifier\opt attribute-specifier-seq\opt{} \terminal{:} constant-expression
+    declarator virt-specifier-seq\opt{} pure-specifier\opt{}\br
+    declarator brace-or-equal-initializer\opt{}\br
+    identifier\opt{} attribute-specifier-seq\opt{} \terminal{:} constant-expression
 \end{bnf}
 
 \begin{bnf}
@@ -1294,7 +1294,7 @@ A static data member shall not be
 A \grammarterm{member-declarator} of the form
 
 \begin{ncbnftab}
-identifier\opt  attribute-specifier-seq\opt{} \terminal{:} constant-expression
+identifier\opt{}  attribute-specifier-seq\opt{} \terminal{:} constant-expression
 \end{ncbnftab}
 
 \indextext{\idxcode{:}!bit-field declaration}%
diff --git a/source/declarations.tex b/source/declarations.tex
index ffe2c95..022c459 100644
--- a/source/declarations.tex
+++ b/source/declarations.tex
@@ -45,7 +45,7 @@ the form
 
 \begin{bnf}
 \nontermdef{nodeclspec-function-declaration}\br
-    attribute-specifier-seq\opt declarator \terminal{;}
+    attribute-specifier-seq\opt{} declarator \terminal{;}
 \end{bnf}
 
 \begin{bnf}
@@ -57,7 +57,7 @@ the form
 \nontermdef{simple-declaration}\br
     decl-specifier-seq init-declarator-list\opt{} \terminal{;}\br
     attribute-specifier-seq decl-specifier-seq init-declarator-list \terminal{;}\br
-    attribute-specifier-seq\opt decl-specifier-seq ref-qualifier\opt{} \terminal{[} identifier-list \terminal{]} initializer \terminal{;}
+    attribute-specifier-seq\opt{} decl-specifier-seq ref-qualifier\opt{} \terminal{[} identifier-list \terminal{]} initializer \terminal{;}
 \end{bnf}
 
 \begin{bnf}
@@ -93,7 +93,7 @@ A
 \grammarterm{nodeclspec-function-declaration} of the form
 
 \begin{ncsimplebnf}
-attribute-specifier-seq\opt decl-specifier-seq\opt init-declarator-list\opt{} \terminal{;}
+attribute-specifier-seq\opt{} decl-specifier-seq\opt{} init-declarator-list\opt{} \terminal{;}
 \end{ncsimplebnf}
 
 is divided into three parts.
@@ -259,7 +259,7 @@ The specifiers that can be used in a declaration are
 
 \begin{bnf}
 \nontermdef{decl-specifier-seq}\br
-    decl-specifier attribute-specifier-seq\opt\br
+    decl-specifier attribute-specifier-seq\opt{}\br
     decl-specifier decl-specifier-seq
 \end{bnf}
 
@@ -1035,7 +1035,7 @@ The type-specifiers are
 
 \begin{bnf}
 \nontermdef{type-specifier-seq}\br
-    type-specifier attribute-specifier-seq\opt\br
+    type-specifier attribute-specifier-seq\opt{}\br
     type-specifier type-specifier-seq
 \end{bnf}
 
@@ -1048,7 +1048,7 @@ The type-specifiers are
 
 \begin{bnf}
 \nontermdef{defining-type-specifier-seq}\br
-  defining-type-specifier attribute-specifier-seq\opt\br
+  defining-type-specifier attribute-specifier-seq\opt{}\br
   defining-type-specifier defining-type-specifier-seq
 \end{bnf}
 
@@ -1225,9 +1225,9 @@ The simple type specifiers are
 
 \begin{bnf}
 \nontermdef{simple-type-specifier}\br
-    nested-name-specifier\opt type-name\br
+    nested-name-specifier\opt{} type-name\br
     nested-name-specifier \terminal{template} simple-template-id\br
-    nested-name-specifier\opt template-name\br
+    nested-name-specifier\opt{} template-name\br
     \terminal{char}\br
     \terminal{char16_t}\br
     \terminal{char32_t}\br
@@ -1458,10 +1458,10 @@ void r() {
 
 \begin{bnf}
 \nontermdef{elaborated-type-specifier}\br
-    class-key attribute-specifier-seq\opt nested-name-specifier\opt identifier\br
+    class-key attribute-specifier-seq\opt{} nested-name-specifier\opt{} identifier\br
     class-key simple-template-id\br
-    class-key nested-name-specifier \terminal{template}\opt simple-template-id\br
-    \terminal{enum} nested-name-specifier\opt identifier
+    class-key nested-name-specifier \terminal{template}\opt{} simple-template-id\br
+    \terminal{enum} nested-name-specifier\opt{} identifier
 \end{bnf}
 
 \pnum
@@ -1476,11 +1476,11 @@ instantiation~(\ref{temp.explicit}) or it has one of the following
 forms:
 
 \begin{ncsimplebnf}
-class-key attribute-specifier-seq\opt identifier \terminal{;}\br
-\terminal{friend} class-key \terminal{::\opt} identifier \terminal{;}\br
-\terminal{friend} class-key \terminal{::\opt} simple-template-id \terminal{;}\br
+class-key attribute-specifier-seq\opt{} identifier \terminal{;}\br
+\terminal{friend} class-key \terminal{::\opt{}} identifier \terminal{;}\br
+\terminal{friend} class-key \terminal{::\opt{}} simple-template-id \terminal{;}\br
 \terminal{friend} class-key nested-name-specifier identifier \terminal{;}\br
-\terminal{friend} class-key nested-name-specifier \terminal{template\opt} simple-template-id \terminal{;}
+\terminal{friend} class-key nested-name-specifier \terminal{template\opt{}} simple-template-id \terminal{;}
 \end{ncsimplebnf}
 
 In the first case, the \grammarterm{attribute-specifier-seq}, if any, appertains
@@ -1922,17 +1922,17 @@ constants. Its name becomes an \grammarterm{enum-name} within its scope.
 
 \begin{bnf}
 \nontermdef{enum-head}\br
-    enum-key attribute-specifier-seq\opt enum-head-name\opt enum-base\opt
+    enum-key attribute-specifier-seq\opt{} enum-head-name\opt{} enum-base\opt{}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{enum-head-name}\br
-    nested-name-specifier\opt identifier
+    nested-name-specifier\opt{} identifier
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{opaque-enum-declaration}\br
-    enum-key attribute-specifier-seq\opt nested-name-specifier\opt identifier enum-base\opt{} \terminal{;}
+    enum-key attribute-specifier-seq\opt{} nested-name-specifier\opt{} identifier enum-base\opt{} \terminal{;}
 \end{bnf}
 
 \begin{bnf}
@@ -1961,7 +1961,7 @@ constants. Its name becomes an \grammarterm{enum-name} within its scope.
 
 \begin{bnf}
 \nontermdef{enumerator}\br
-    identifier attribute-specifier-seq\opt
+    identifier attribute-specifier-seq\opt{}
 \end{bnf}
 
 The optional \grammarterm{attribute-specifier-seq} in the \grammarterm{enum-head} and
@@ -2270,12 +2270,12 @@ see~\ref{basic.scope.namespace}.
 
 \begin{bnf}
 \nontermdef{named-namespace-definition}\br
-        \terminal{inline\opt} \terminal{namespace} attribute-specifier-seq\opt identifier \terminal{\{} namespace-body \terminal{\}}
+        \terminal{inline\opt{}} \terminal{namespace} attribute-specifier-seq\opt{} identifier \terminal{\{} namespace-body \terminal{\}}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{unnamed-namespace-definition}\br
-        \terminal{inline\opt} \terminal{namespace} attribute-specifier-seq\opt{} \terminal{\{} namespace-body \terminal{\}}
+        \terminal{inline\opt{}} \terminal{namespace} attribute-specifier-seq\opt{} \terminal{\{} namespace-body \terminal{\}}
 \end{bnf}
 
 \begin{bnf}
@@ -2291,7 +2291,7 @@ see~\ref{basic.scope.namespace}.
 
 \begin{bnf}
 \nontermdef{namespace-body}\br
-        declaration-seq\opt
+        declaration-seq\opt{}
 \end{bnf}
 
 \pnum
@@ -2602,7 +2602,7 @@ namespace according to the following grammar:
 
 \begin{bnf}
 \nontermdef{qualified-namespace-specifier}\br
-    nested-name-specifier\opt namespace-name
+    nested-name-specifier\opt{} namespace-name
 \end{bnf}
 
 \pnum
@@ -2642,13 +2642,13 @@ namespace CWVLN = CWVLN;
 
 \begin{bnf}
 \nontermdef{using-declarator-list}\br
-    using-declarator \terminal{...}\opt\br
-    using-declarator-list \terminal{,} using-declarator \terminal{...}\opt
+    using-declarator \terminal{...}\opt{}\br
+    using-declarator-list \terminal{,} using-declarator \terminal{...}\opt{}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{using-declarator}\br
-    \terminal{typename\opt} nested-name-specifier unqualified-id
+    \terminal{typename\opt{}} nested-name-specifier unqualified-id
 \end{bnf}
 
 \pnum
@@ -3117,7 +3117,7 @@ specifies a dependent name~(\ref{temp.dep}), the name introduced by the
 
 \begin{bnf}
 \nontermdef{using-directive}\br
-    attribute-specifier-seq\opt{} \terminal{using  namespace} nested-name-specifier\opt namespace-name \terminal{;}
+    attribute-specifier-seq\opt{} \terminal{using  namespace} nested-name-specifier\opt{} namespace-name \terminal{;}
 \end{bnf}
 
 \pnum
@@ -3592,7 +3592,7 @@ such as types, variables, names, blocks, or translation units.
 
 \begin{bnf}
 \nontermdef{attribute-specifier-seq}\br
-  attribute-specifier-seq\opt attribute-specifier
+  attribute-specifier-seq\opt{} attribute-specifier
 \end{bnf}
 
 \begin{bnf}
@@ -3614,15 +3614,15 @@ such as types, variables, names, blocks, or translation units.
 
 \begin{bnf}
 \nontermdef{attribute-list}\br
-  attribute\opt\br
-  attribute-list \terminal{,} attribute\opt\br
+  attribute\opt{}\br
+  attribute-list \terminal{,} attribute\opt{}\br
   attribute \terminal{...}\br
   attribute-list \terminal{,} attribute \terminal{...}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{attribute}\br
-    attribute-token attribute-argument-clause\opt
+    attribute-token attribute-argument-clause\opt{}
 \end{bnf}
 
 \begin{bnf}
diff --git a/source/declarators.tex b/source/declarators.tex
index dafa870..d530155 100644
--- a/source/declarators.tex
+++ b/source/declarators.tex
@@ -27,7 +27,7 @@ each of which can have an initializer.
 
 \begin{bnf}
 \nontermdef{init-declarator}\br
-    declarator initializer\opt
+    declarator initializer\opt{}
 \end{bnf}
 
 \pnum
@@ -112,16 +112,16 @@ Declarators have the syntax
 
 \begin{bnf}
 \nontermdef{noptr-declarator}\br
-    declarator-id attribute-specifier-seq\opt\br
+    declarator-id attribute-specifier-seq\opt{}\br
     noptr-declarator parameters-and-qualifiers\br
-    noptr-declarator \terminal{[} constant-expression\opt{} \terminal{]} attribute-specifier-seq\opt\br
+    noptr-declarator \terminal{[} constant-expression\opt{} \terminal{]} attribute-specifier-seq\opt{}\br
     \terminal{(} ptr-declarator \terminal{)}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{parameters-and-qualifiers}\br
-    \terminal{(} parameter-declaration-clause \terminal{)} cv-qualifier-seq\opt\br
-\hspace*{\bnfindentinc}ref-qualifier\opt noexcept-specifier\opt attribute-specifier-seq\opt
+    \terminal{(} parameter-declaration-clause \terminal{)} cv-qualifier-seq\opt{}\br
+\hspace*{\bnfindentinc}ref-qualifier\opt{} noexcept-specifier\opt{} attribute-specifier-seq\opt{}
 \end{bnf}
 
 \begin{bnf}
@@ -131,15 +131,15 @@ Declarators have the syntax
 
 \begin{bnf}
 \nontermdef{ptr-operator}\br
-    \terminal{*} attribute-specifier-seq\opt cv-qualifier-seq\opt\br
-    \terminal{\&} attribute-specifier-seq\opt\br
-    \terminal{\&\&} attribute-specifier-seq\opt\br
-    nested-name-specifier \terminal{*} attribute-specifier-seq\opt cv-qualifier-seq\opt
+    \terminal{*} attribute-specifier-seq\opt{} cv-qualifier-seq\opt{}\br
+    \terminal{\&} attribute-specifier-seq\opt{}\br
+    \terminal{\&\&} attribute-specifier-seq\opt{}\br
+    nested-name-specifier \terminal{*} attribute-specifier-seq\opt{} cv-qualifier-seq\opt{}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{cv-qualifier-seq}\br
-    cv-qualifier cv-qualifier-seq\opt
+    cv-qualifier cv-qualifier-seq\opt{}
 \end{bnf}
 
 \begin{bnf}
@@ -156,7 +156,7 @@ Declarators have the syntax
 
 \begin{bnf}
 \nontermdef{declarator-id}\br
-    \terminal{...}\opt id-expression
+    \terminal{...}\opt{} id-expression
 \end{bnf}
 
 \rSec1[dcl.name]{Type names}
@@ -179,31 +179,31 @@ of that type that omits the name of the entity.
 
 \begin{bnf}
 \nontermdef{type-id}\br
-    type-specifier-seq abstract-declarator\opt
+    type-specifier-seq abstract-declarator\opt{}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{defining-type-id}\br
-    defining-type-specifier-seq abstract-declarator\opt
+    defining-type-specifier-seq abstract-declarator\opt{}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{abstract-declarator}\br
     ptr-abstract-declarator\br
-    noptr-abstract-declarator\opt parameters-and-qualifiers trailing-return-type\br
+    noptr-abstract-declarator\opt{} parameters-and-qualifiers trailing-return-type\br
     abstract-pack-declarator
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{ptr-abstract-declarator}\br
     noptr-abstract-declarator\br
-    ptr-operator ptr-abstract-declarator\opt
+    ptr-operator ptr-abstract-declarator\opt{}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{noptr-abstract-declarator}\br
-    noptr-abstract-declarator\opt parameters-and-qualifiers\br
-    noptr-abstract-declarator\opt{} \terminal{[} constant-expression\opt{} \terminal{]} attribute-specifier-seq\opt\br
+    noptr-abstract-declarator\opt{} parameters-and-qualifiers\br
+    noptr-abstract-declarator\opt{} \terminal{[} constant-expression\opt{} \terminal{]} attribute-specifier-seq\opt{}\br
     \terminal{(} ptr-abstract-declarator \terminal{)}
 \end{bnf}
 
@@ -216,7 +216,7 @@ of that type that omits the name of the entity.
 \begin{bnf}
 \nontermdef{noptr-abstract-pack-declarator}\br
     noptr-abstract-pack-declarator parameters-and-qualifiers\br
-    noptr-abstract-pack-declarator \terminal{[} constant-expression\opt{} \terminal{]} attribute-specifier-seq\opt\br
+    noptr-abstract-pack-declarator \terminal{[} constant-expression\opt{} \terminal{]} attribute-specifier-seq\opt{}\br
     \terminal{...}
 \end{bnf}
 
@@ -519,7 +519,7 @@ where
 has the form
 
 \begin{ncsimplebnf}
-\terminal{*} attribute-specifier-seq\opt cv-qualifier-seq\opt{} \terminal{D1}
+\terminal{*} attribute-specifier-seq\opt{} cv-qualifier-seq\opt{} \terminal{D1}
 \end{ncsimplebnf}
 
 and the type of the identifier in the declaration
@@ -827,7 +827,7 @@ where
 has the form
 
 \begin{ncsimplebnf}
-nested-name-specifier \terminal{*} attribute-specifier-seq\opt cv-qualifier-seq\opt{} \terminal{D1}
+nested-name-specifier \terminal{*} attribute-specifier-seq\opt{} cv-qualifier-seq\opt{} \terminal{D1}
 \end{ncsimplebnf}
 
 and the
@@ -936,7 +936,7 @@ where
 has the form
 
 \begin{ncsimplebnf}
-\terminal{D1 [} constant-expression\opt{} \terminal{]} attribute-specifier-seq\opt
+\terminal{D1 [} constant-expression\opt{} \terminal{]} attribute-specifier-seq\opt{}
 \end{ncsimplebnf}
 
 and the type of the identifier in the declaration
@@ -1236,8 +1236,8 @@ where
 \tcode{D}
 has the form
 \begin{ncsimplebnf}
-\terminal{D1 (} parameter-declaration-clause \terminal{)} cv-qualifier-seq\opt\br
-\hspace*{\bnfindentinc}ref-qualifier\opt noexcept-specifier\opt attribute-specifier-seq\opt
+\terminal{D1 (} parameter-declaration-clause \terminal{)} cv-qualifier-seq\opt{}\br
+\hspace*{\bnfindentinc}ref-qualifier\opt{} noexcept-specifier\opt{} attribute-specifier-seq\opt{}
 \end{ncsimplebnf}
 and the type of the contained
 \grammarterm{declarator-id}
@@ -1253,7 +1253,7 @@ in
 \tcode{D}
 is
 ``\placeholder{derived-declarator-type-list}
-\tcode{noexcept}\opt
+\tcode{noexcept}\opt{}
 function of
 (\grammarterm{parameter-declaration-clause})
 \grammarterm{cv-qualifier-seq}\opt{} \grammarterm{ref-qualifier}\opt{}
@@ -1273,8 +1273,8 @@ where
 has the form
 
 \begin{ncsimplebnf}
-\terminal{D1 (} parameter-declaration-clause \terminal{)} cv-qualifier-seq\opt\br
-\hspace*{\bnfindentinc}ref-qualifier\opt noexcept-specifier\opt attribute-specifier-seq\opt trailing-return-type
+\terminal{D1 (} parameter-declaration-clause \terminal{)} cv-qualifier-seq\opt{}\br
+\hspace*{\bnfindentinc}ref-qualifier\opt{} noexcept-specifier\opt{} attribute-specifier-seq\opt{} trailing-return-type
 \end{ncsimplebnf}
 
 and the type of the contained
@@ -1291,10 +1291,10 @@ in
 \tcode{D}
 is
 ``\placeholder{derived-declarator-type-list}
-\tcode{noexcept}\opt
+\tcode{noexcept}\opt{}
 function of
 (\grammarterm{parameter-declaration-clause})
-\grammarterm{cv-qualifier-seq}\opt \grammarterm{ref-qualifier}\opt
+\grammarterm{cv-qualifier-seq}\opt{} \grammarterm{ref-qualifier}\opt{}
 returning \tcode{U}'',
 where \tcode{U} is the type specified by
 the \grammarterm{trailing-return-type}, and
@@ -1310,7 +1310,7 @@ A type of either form is a \term{function type}.\footnote{As indicated by syntax
 \indextext{declaration!function}%
 \begin{bnf}
 \nontermdef{parameter-declaration-clause}\br
-    parameter-declaration-list\opt{} \terminal{...}\opt\br
+    parameter-declaration-list\opt{} \terminal{...}\opt{}\br
     parameter-declaration-list \terminal{, ...}
 \end{bnf}
 
@@ -1322,10 +1322,10 @@ A type of either form is a \term{function type}.\footnote{As indicated by syntax
 
 \begin{bnf}
 \nontermdef{parameter-declaration}\br
-    attribute-specifier-seq\opt decl-specifier-seq declarator\br
-    attribute-specifier-seq\opt decl-specifier-seq declarator \terminal{=} initializer-clause\br
-    attribute-specifier-seq\opt decl-specifier-seq abstract-declarator\opt\br
-    attribute-specifier-seq\opt decl-specifier-seq abstract-declarator\opt{} \terminal{=} initializer-clause
+    attribute-specifier-seq\opt{} decl-specifier-seq declarator\br
+    attribute-specifier-seq\opt{} decl-specifier-seq declarator \terminal{=} initializer-clause\br
+    attribute-specifier-seq\opt{} decl-specifier-seq abstract-declarator\opt{}\br
+    attribute-specifier-seq\opt{} decl-specifier-seq abstract-declarator\opt{} \terminal{=} initializer-clause
 \end{bnf}
 
 The optional \grammarterm{attribute-specifier-seq} in a \grammarterm{parameter-declaration}
@@ -1990,12 +1990,12 @@ Function definitions have the form
 %
 \begin{bnf}
 \nontermdef{function-definition}\br
-    attribute-specifier-seq\opt decl-specifier-seq\opt declarator virt-specifier-seq\opt function-body
+    attribute-specifier-seq\opt{} decl-specifier-seq\opt{} declarator virt-specifier-seq\opt{} function-body
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{function-body}\br
-    ctor-initializer\opt compound-statement\br
+    ctor-initializer\opt{} compound-statement\br
     function-try-block\br
     \terminal{= default ;}\br
     \terminal{= delete ;}
@@ -2107,7 +2107,7 @@ void f(const char* s = __func__);   // error: \tcode{__func__} is undeclared
 A function definition of the form:
 
 \begin{ncbnf}
-    attribute-specifier-seq\opt decl-specifier-seq\opt declarator virt-specifier-seq\opt{} \terminal{ = default ;}
+    attribute-specifier-seq\opt{} decl-specifier-seq\opt{} declarator virt-specifier-seq\opt{} \terminal{ = default ;}
 \end{ncbnf}
 
 is called an \grammarterm{explicitly-defaulted} definition.
@@ -2205,7 +2205,7 @@ nontrivial1::nontrivial1() = default;   // not first declaration
 A function definition of the form:
 
 \begin{ncbnf}
-    attribute-specifier-seq\opt decl-specifier-seq\opt declarator virt-specifier-seq\opt{} \terminal{ = delete ;}
+    attribute-specifier-seq\opt{} decl-specifier-seq\opt{} declarator virt-specifier-seq\opt{} \terminal{ = delete ;}
 \end{ncbnf}
 
 is called a \term{deleted definition}. A function with a
@@ -2418,13 +2418,13 @@ the initialization of return values (\ref{stmt.return}).
 
 \begin{bnf}
 \nontermdef{initializer-list}\br
-    initializer-clause \terminal{...}\opt\br
-    initializer-list \terminal{,} initializer-clause \terminal{...}\opt
+    initializer-clause \terminal{...}\opt{}\br
+    initializer-list \terminal{,} initializer-clause \terminal{...}\opt{}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{braced-init-list}\br
-    \terminal{\{} initializer-list \terminal{,\opt} \terminal{\}}\br
+    \terminal{\{} initializer-list \terminal{,\opt{}} \terminal{\}}\br
     \terminal{\{} \terminal{\}}
 \end{bnf}
 
diff --git a/source/derived.tex b/source/derived.tex
index 29ed414..803ff91 100644
--- a/source/derived.tex
+++ b/source/derived.tex
@@ -23,20 +23,20 @@ the notation:
 
 \begin{bnf}
 \nontermdef{base-specifier-list}\br
-    base-specifier \terminal{...}\opt\br
-    base-specifier-list \terminal{,} base-specifier \terminal{...}\opt
+    base-specifier \terminal{...}\opt{}\br
+    base-specifier-list \terminal{,} base-specifier \terminal{...}\opt{}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{base-specifier}\br
-    attribute-specifier-seq\opt class-or-decltype\br
-    attribute-specifier-seq\opt{} \terminal{virtual} access-specifier\opt class-or-decltype\br
-    attribute-specifier-seq\opt access-specifier \terminal{virtual}\opt class-or-decltype
+    attribute-specifier-seq\opt{} class-or-decltype\br
+    attribute-specifier-seq\opt{} \terminal{virtual} access-specifier\opt{} class-or-decltype\br
+    attribute-specifier-seq\opt{} access-specifier \terminal{virtual}\opt{} class-or-decltype
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{class-or-decltype}\br
-    nested-name-specifier\opt class-name\br
+    nested-name-specifier\opt{} class-name\br
     nested-name-specifier \terminal{template} simple-template-id\br
     decltype-specifier
 \end{bnf}
diff --git a/source/exceptions.tex b/source/exceptions.tex
index 605371f..93e49d9 100644
--- a/source/exceptions.tex
+++ b/source/exceptions.tex
@@ -26,12 +26,12 @@ or in functions called from the handler's try block.
 %
 \begin{bnf}
 \nontermdef{function-try-block}\br
-    \terminal{try} ctor-initializer\opt compound-statement handler-seq
+    \terminal{try} ctor-initializer\opt{} compound-statement handler-seq
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{handler-seq}\br
-    handler handler-seq\opt
+    handler handler-seq\opt{}
 \end{bnf}
 
 \indextext{\idxcode{catch}}%
@@ -43,8 +43,8 @@ or in functions called from the handler's try block.
 
 \begin{bnf}
 \nontermdef{exception-declaration}\br
-    attribute-specifier-seq\opt type-specifier-seq declarator\br
-    attribute-specifier-seq\opt type-specifier-seq abstract-declarator\opt\br
+    attribute-specifier-seq\opt{} type-specifier-seq declarator\br
+    attribute-specifier-seq\opt{} type-specifier-seq abstract-declarator\opt{}\br
     \terminal{...}
 \end{bnf}
 
diff --git a/source/expressions.tex b/source/expressions.tex
index b13c749..d19c061 100644
--- a/source/expressions.tex
+++ b/source/expressions.tex
@@ -513,7 +513,7 @@ it is a bit-field if the identifier designates a bit-field~(\ref{dcl.struct.bind
 %
 \begin{bnf}
 \nontermdef{qualified-id}\br
-    nested-name-specifier \terminal{template}\opt unqualified-id
+    nested-name-specifier \terminal{template}\opt{} unqualified-id
 \end{bnf}
 
 \indextext{operator!scope resolution}%
@@ -526,7 +526,7 @@ it is a bit-field if the identifier designates a bit-field~(\ref{dcl.struct.bind
     namespace-name \terminal{::}\br
     decltype-specifier \terminal{::}\br
     nested-name-specifier identifier \terminal{::}\br
-    nested-name-specifier \terminal{template}\opt simple-template-id \terminal{::}
+    nested-name-specifier \terminal{template}\opt{} simple-template-id \terminal{::}
 \end{bnf}
 
 \pnum
@@ -594,7 +594,7 @@ by the \grammarterm{nested-name-specifier}.
 
 \begin{bnf}
 \nontermdef{lambda-expression}\br
-    lambda-introducer lambda-declarator\opt compound-statement
+    lambda-introducer lambda-declarator\opt{} compound-statement
 \end{bnf}
 
 \begin{bnf}
@@ -604,8 +604,8 @@ by the \grammarterm{nested-name-specifier}.
 
 \begin{bnf}
 \nontermdef{lambda-declarator}\br
-    \terminal{(} parameter-declaration-clause \terminal{)} decl-specifier-seq\opt\br
-    \hspace*{\bnfindentinc}noexcept-specifier\opt attribute-specifier-seq\opt trailing-return-type\opt
+    \terminal{(} parameter-declaration-clause \terminal{)} decl-specifier-seq\opt{}\br
+    \hspace*{\bnfindentinc}noexcept-specifier\opt{} attribute-specifier-seq\opt{} trailing-return-type\opt{}
 \end{bnf}
 
 \pnum
@@ -960,8 +960,8 @@ named in a \tcode{friend} declaration~(\ref{class.friend}).
 
 \begin{bnf}
 \nontermdef{capture-list}\br
-    capture \terminal{...\opt}\br
-    capture-list \terminal{,} capture \terminal{...\opt}
+    capture \terminal{...\opt{}}\br
+    capture-list \terminal{,} capture \terminal{...\opt{}}
 \end{bnf}
 
 \begin{bnf}
@@ -1449,8 +1449,8 @@ Postfix expressions group left-to-right.
     typename-specifier \terminal{(} expression-list\opt{} \terminal{)}\br
     simple-type-specifier braced-init-list\br
     typename-specifier braced-init-list\br
-    postfix-expression \terminal{. template}\opt id-expression\br
-    postfix-expression \terminal{-> template}\opt id-expression\br
+    postfix-expression \terminal{. template}\opt{} id-expression\br
+    postfix-expression \terminal{-> template}\opt{} id-expression\br
     postfix-expression \terminal{.} pseudo-destructor-name\br
     postfix-expression \terminal{->} pseudo-destructor-name\br
     postfix-expression \terminal{++}\br
@@ -1472,7 +1472,7 @@ Postfix expressions group left-to-right.
 
 \begin{bnf}
 \nontermdef{pseudo-destructor-name}\br
-    nested-name-specifier\opt type-name \terminal{::\,\tilde} type-name\br
+    nested-name-specifier\opt{} type-name \terminal{::\,\tilde} type-name\br
     nested-name-specifier \terminal{template} simple-template-id \terminal{::\,\tilde} type-name\br
     \terminal{\tilde} type-name\br
     \terminal{\tilde} decltype-specifier
@@ -1809,7 +1809,7 @@ the two \grammarterm{type-name}{s} in a \grammarterm{pseudo-destructor-name} of
 the form
 
 \begin{ncbnf}
-nested-name-specifier\opt type-name \terminal{::\,\tilde} type-name
+nested-name-specifier\opt{} type-name \terminal{::\,\tilde} type-name
 \end{ncbnf}
 
 shall designate the same scalar type (ignoring cv-qualification).
@@ -3030,8 +3030,8 @@ object created by the \grammarterm{new-expression} has a cv-qualified type.
 
 \begin{bnf}
 \nontermdef{new-expression}\br
-    \terminal{::}\opt{} \terminal{new} new-placement\opt new-type-id new-initializer\opt \br
-    \terminal{::}\opt{} \terminal{new} new-placement\opt{} \terminal{(} type-id \terminal{)} new-initializer\opt
+    \terminal{::}\opt{} \terminal{new} new-placement\opt{} new-type-id new-initializer\opt{} \br
+    \terminal{::}\opt{} \terminal{new} new-placement\opt{} \terminal{(} type-id \terminal{)} new-initializer\opt{}
 \end{bnf}
 
 \indextext{\idxcode{new}!storage allocation}%
@@ -3043,19 +3043,19 @@ object created by the \grammarterm{new-expression} has a cv-qualified type.
 
 \begin{bnf}
 \nontermdef{new-type-id}\br
-    type-specifier-seq new-declarator\opt
+    type-specifier-seq new-declarator\opt{}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{new-declarator}\br
-    ptr-operator new-declarator\opt \br
+    ptr-operator new-declarator\opt{} \br
     noptr-new-declarator
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{noptr-new-declarator}\br
-    \terminal{[} expression \terminal{]} attribute-specifier-seq\opt\br
-    noptr-new-declarator \terminal{[} constant-expression \terminal{]} attribute-specifier-seq\opt
+    \terminal{[} expression \terminal{]} attribute-specifier-seq\opt{}\br
+    noptr-new-declarator \terminal{[} constant-expression \terminal{]} attribute-specifier-seq\opt{}
 \end{bnf}
 
 \begin{bnf}
@@ -4702,7 +4702,7 @@ that type and the other is a null pointer constant. The result is of type
 %
 \begin{bnf}
 \nontermdef{throw-expression}\br
-    \terminal{throw}  assignment-expression\opt
+    \terminal{throw}  assignment-expression\opt{}
 \end{bnf}
 
 \pnum
diff --git a/source/intro.tex b/source/intro.tex
index b510ed9..b93febc 100644
--- a/source/intro.tex
+++ b/source/intro.tex
@@ -460,7 +460,7 @@ and characters in \tcode{constant} \tcode{width} type. Alternatives are
 listed on separate lines except in a few cases where a long set of
 alternatives is marked by the phrase ``one of''. If the text of an alternative is too long to fit on a line, the text is continued on subsequent lines indented from the first one.
 An optional terminal or non-terminal symbol is indicated by the subscript
-``\opt'', so
+``\opt{}'', so
 
 \begin{ncbnf}
 \terminal{\{} expression\opt{} \terminal{\}}
diff --git a/source/lex.tex b/source/lex.tex
index bb4ae88..3fd1fd0 100644
--- a/source/lex.tex
+++ b/source/lex.tex
@@ -836,29 +836,29 @@ ISO C. }
 \indextext{literal!integer}%
 \begin{bnf}
 \nontermdef{integer-literal}\br
-    binary-literal integer-suffix\opt\br
-    octal-literal integer-suffix\opt\br
-    decimal-literal integer-suffix\opt\br
-    hexadecimal-literal integer-suffix\opt
+    binary-literal integer-suffix\opt{}\br
+    octal-literal integer-suffix\opt{}\br
+    decimal-literal integer-suffix\opt{}\br
+    hexadecimal-literal integer-suffix\opt{}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{binary-literal}\br
     \terminal{0b} binary-digit\br
     \terminal{0B} binary-digit\br
-    binary-literal \terminal{'}\opt binary-digit
+    binary-literal \terminal{'}\opt{} binary-digit
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{octal-literal}\br
     \terminal{0}\br
-    octal-literal \terminal{'}\opt octal-digit
+    octal-literal \terminal{'}\opt{} octal-digit
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{decimal-literal}\br
     nonzero-digit\br
-    decimal-literal \terminal{'}\opt digit
+    decimal-literal \terminal{'}\opt{} digit
 \end{bnf}
 
 \begin{bnf}
@@ -890,7 +890,7 @@ ISO C. }
 \begin{bnf}
 \nontermdef{hexadecimal-digit-sequence}\br
     hexadecimal-digit\br
-    hexadecimal-digit-sequence \terminal{'}\opt hexadecimal-digit
+    hexadecimal-digit-sequence \terminal{'}\opt{} hexadecimal-digit
 \end{bnf}
 
 \begin{bnf}
@@ -902,10 +902,10 @@ ISO C. }
 
 \begin{bnf}
 \nontermdef{integer-suffix}\br
-    unsigned-suffix long-suffix\opt \br
-    unsigned-suffix long-long-suffix\opt \br
-    long-suffix unsigned-suffix\opt \br
-    long-long-suffix unsigned-suffix\opt
+    unsigned-suffix long-suffix\opt{} \br
+    unsigned-suffix long-long-suffix\opt{} \br
+    long-suffix unsigned-suffix\opt{} \br
+    long-long-suffix unsigned-suffix\opt{}
 \end{bnf}
 
 \begin{bnf}
@@ -1283,14 +1283,14 @@ so long as the same results are obtained. \end{note}
 
 \begin{bnf}
 \nontermdef{decimal-floating-literal}\br
-    fractional-constant exponent-part\opt floating-suffix\opt\br
-    digit-sequence exponent-part floating-suffix\opt
+    fractional-constant exponent-part\opt{} floating-suffix\opt{}\br
+    digit-sequence exponent-part floating-suffix\opt{}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{hexadecimal-floating-literal}\br
-    hexadecimal-prefix hexadecimal-fractional-constant binary-exponent-part floating-suffix\opt\br
-    hexadecimal-prefix hexadecimal-digit-sequence binary-exponent-part floating-suffix\opt
+    hexadecimal-prefix hexadecimal-fractional-constant binary-exponent-part floating-suffix\opt{}\br
+    hexadecimal-prefix hexadecimal-digit-sequence binary-exponent-part floating-suffix\opt{}
 \end{bnf}
 
 \begin{bnf}
@@ -1307,14 +1307,14 @@ so long as the same results are obtained. \end{note}
 
 \begin{bnf}
 \nontermdef{exponent-part}\br
-    \terminal{e} sign\opt digit-sequence\br
-    \terminal{E} sign\opt digit-sequence
+    \terminal{e} sign\opt{} digit-sequence\br
+    \terminal{E} sign\opt{} digit-sequence
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{binary-exponent-part}\br
-    \terminal{p} sign\opt digit-sequence\br
-    \terminal{P} sign\opt digit-sequence
+    \terminal{p} sign\opt{} digit-sequence\br
+    \terminal{P} sign\opt{} digit-sequence
 \end{bnf}
 
 \begin{bnf}
@@ -1325,7 +1325,7 @@ so long as the same results are obtained. \end{note}
 \begin{bnf}
 \nontermdef{digit-sequence}\br
     digit\br
-    digit-sequence \terminal{'}\opt digit
+    digit-sequence \terminal{'}\opt{} digit
 \end{bnf}
 
 \begin{bnf}
@@ -1744,7 +1744,7 @@ and~\ref{conv.mem}.
 
 \begin{bnf}
 \nontermdef{user-defined-floating-literal}\br
-    fractional-constant exponent-part\opt ud-suffix\br
+    fractional-constant exponent-part\opt{} ud-suffix\br
     digit-sequence exponent-part ud-suffix\br
     hexadecimal-prefix hexadecimal-fractional-constant binary-exponent-part ud-suffix\br
     hexadecimal-prefix hexadecimal-digit-sequence binary-exponent-part ud-suffix
diff --git a/source/overloading.tex b/source/overloading.tex
index 5805937..86365ab 100644
--- a/source/overloading.tex
+++ b/source/overloading.tex
@@ -814,7 +814,7 @@ In addition, for each non-explicit conversion function declared in \tcode{T} of
 form
 
 \begin{ncsimplebnf}
-\terminal{operator} conversion-type-id \terminal{(\,)} cv-qualifier ref-qualifier\opt noexcept-specifier\opt attribute-specifier-seq\opt{} \terminal{;}
+\terminal{operator} conversion-type-id \terminal{(\,)} cv-qualifier ref-qualifier\opt{} noexcept-specifier\opt{} attribute-specifier-seq\opt{} \terminal{;}
 \end{ncsimplebnf}
 
 where
@@ -3232,7 +3232,7 @@ It implements the class member access syntax that
 uses \tcode{->}.
 
 \begin{ncsimplebnf}
-postfix-expression \terminal{->} \terminal{template\opt} id-expression\\
+postfix-expression \terminal{->} \terminal{template\opt{}} id-expression\\
 postfix-expression \terminal{->} pseudo-destructor-name
 \end{ncsimplebnf}
 
diff --git a/source/preprocessor.tex b/source/preprocessor.tex
index fda5256..b669f5b 100644
--- a/source/preprocessor.tex
+++ b/source/preprocessor.tex
@@ -30,7 +30,7 @@ within what would otherwise be an invocation of a function-like macro.
 
 \begin{bnf}
 \nontermdef{preprocessing-file}\br
-    group\opt
+    group\opt{}
 \end{bnf}
 
 \begin{bnf}
@@ -56,21 +56,21 @@ within what would otherwise be an invocation of a function-like macro.
 \>\terminal{\# define}\>\>identifier lparen identifier-list \terminal{, ... )} replacement-list new-line\br
 \>\terminal{\# undef}\>\>identifier new-line\br
 \>\terminal{\# line}\>\>pp-tokens new-line\br
-\>\terminal{\# error}\>\>pp-tokens\opt new-line\br
-\>\terminal{\# pragma}\>\>pp-tokens\opt new-line\br
+\>\terminal{\# error}\>\>pp-tokens\opt{} new-line\br
+\>\terminal{\# pragma}\>\>pp-tokens\opt{} new-line\br
 \>\terminal{\# }new-line
 \end{bnftab}
 
 \begin{bnf}
 \nontermdef{if-section}\br
-    if-group elif-groups\opt else-group\opt endif-line
+    if-group elif-groups\opt{} else-group\opt{} endif-line
 \end{bnf}
 
 \begin{bnftab}
 \nontermdef{if-group}\br
-\>\terminal{\# if}\>\>constant-expression new-line group\opt\br
-\>\terminal{\# ifdef}\>\>identifier new-line group\opt\br
-\>\terminal{\# ifndef}\>\>identifier new-line group\opt
+\>\terminal{\# if}\>\>constant-expression new-line group\opt{}\br
+\>\terminal{\# ifdef}\>\>identifier new-line group\opt{}\br
+\>\terminal{\# ifndef}\>\>identifier new-line group\opt{}
 \end{bnftab}
 
 \begin{bnf}
@@ -81,12 +81,12 @@ within what would otherwise be an invocation of a function-like macro.
 
 \begin{bnftab}
 \nontermdef{elif-group}\br
-\>\terminal{\# elif}\>\>constant-expression new-line group\opt
+\>\terminal{\# elif}\>\>constant-expression new-line group\opt{}
 \end{bnftab}
 
 \begin{bnftab}
 \nontermdef{else-group}\br
-\>\terminal{\# else}\>\>new-line group\opt
+\>\terminal{\# else}\>\>new-line group\opt{}
 \end{bnftab}
 
 \begin{bnftab}
@@ -96,7 +96,7 @@ within what would otherwise be an invocation of a function-like macro.
 
 \begin{bnf}
 \nontermdef{text-line}\br
-    pp-tokens\opt new-line
+    pp-tokens\opt{} new-line
 \end{bnf}
 
 \begin{bnf}
@@ -117,7 +117,7 @@ within what would otherwise be an invocation of a function-like macro.
 
 \begin{bnf}
 \nontermdef{replacement-list}\br
-    pp-tokens\opt
+    pp-tokens\opt{}
 \end{bnf}
 
 \begin{bnf}
@@ -274,9 +274,9 @@ Preprocessing directives of the forms
 
 \begin{ncbnftab}
 \indextext{\idxcode{\#if}}%
-\terminal{\# if}\>\>constant-expression new-line group\opt\br
+\terminal{\# if}\>\>constant-expression new-line group\opt{}\br
 \indextext{\idxcode{\#elif}}%
-\terminal{\# elif}\>\>constant-expression new-line group\opt
+\terminal{\# elif}\>\>constant-expression new-line group\opt{}
 \end{ncbnftab}
 
 check whether the controlling constant expression evaluates to nonzero.
@@ -369,9 +369,9 @@ is subjected to integral promotion before processing continues.
 Preprocessing directives of the forms
 
 \begin{ncbnftab}
-\terminal{\# ifdef}\>\>identifier new-line group\opt\br
+\terminal{\# ifdef}\>\>identifier new-line group\opt{}\br
 \indextext{\idxcode{\#ifdef}}%
-\terminal{\# ifndef}\>\>identifier new-line group\opt
+\terminal{\# ifndef}\>\>identifier new-line group\opt{}
 \indextext{\idxcode{\#ifndef}}%
 \end{ncbnftab}
 
@@ -1192,7 +1192,7 @@ otherwise, the result is processed as appropriate.
 A preprocessing directive of the form
 
 \begin{ncsimplebnf}
-\terminal{\# error} pp-tokens\opt new-line
+\terminal{\# error} pp-tokens\opt{} new-line
 \end{ncsimplebnf}
 
 causes the implementation to produce
@@ -1207,7 +1207,7 @@ and renders the program ill-formed.
 A preprocessing directive of the form
 
 \begin{ncsimplebnf}
-\terminal{\# pragma} pp-tokens\opt new-line
+\terminal{\# pragma} pp-tokens\opt{} new-line
 \end{ncsimplebnf}
 
 causes the implementation to behave
diff --git a/source/special.tex b/source/special.tex
index 757f0ec..ab0139f 100644
--- a/source/special.tex
+++ b/source/special.tex
@@ -77,7 +77,7 @@ In a declaration of a constructor, the \grammarterm{declarator} is a
 function declarator~(\ref{dcl.fct}) of the form
 
 \begin{ncbnf}
-ptr-declarator \terminal{(} parameter-declaration-clause \terminal{)} noexcept-specifier\opt attribute-specifier-seq\opt
+ptr-declarator \terminal{(} parameter-declaration-clause \terminal{)} noexcept-specifier\opt{} attribute-specifier-seq\opt{}
 \end{ncbnf}
 
 where the \grammarterm{ptr-declarator} consists solely of an
@@ -812,12 +812,12 @@ A member function of a class \tcode{X} having no parameters with a name of the f
 
 \begin{bnf}
 \nontermdef{conversion-type-id}\br
-    type-specifier-seq conversion-declarator\opt
+    type-specifier-seq conversion-declarator\opt{}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{conversion-declarator}\br
-    ptr-operator conversion-declarator\opt
+    ptr-operator conversion-declarator\opt{}
 \end{bnf}
 
 specifies a conversion from
@@ -941,7 +941,7 @@ In a declaration of a destructor, the \grammarterm{declarator} is a
 function declarator~(\ref{dcl.fct}) of the form
 
 \begin{ncbnf}
-ptr-declarator \terminal{(} parameter-declaration-clause \terminal{)} noexcept-specifier\opt attribute-specifier-seq\opt
+ptr-declarator \terminal{(} parameter-declaration-clause \terminal{)} noexcept-specifier\opt{} attribute-specifier-seq\opt{}
 \end{ncbnf}
 
 where the \grammarterm{ptr-declarator} consists solely of an
@@ -1592,8 +1592,8 @@ which has the form
 
 \begin{bnf}
 \nontermdef{mem-initializer-list}\br
-    mem-initializer \terminal{...}\opt\br
-    mem-initializer-list \terminal{,} mem-initializer \terminal{...}\opt
+    mem-initializer \terminal{...}\opt{}\br
+    mem-initializer-list \terminal{,} mem-initializer \terminal{...}\opt{}
 \end{bnf}
 
 \begin{bnf}
diff --git a/source/statements.tex b/source/statements.tex
index fb7ba2e..45f5fb2 100644
--- a/source/statements.tex
+++ b/source/statements.tex
@@ -12,13 +12,13 @@ Except as indicated, statements are executed in sequence.
 \begin{bnf}
 \nontermdef{statement}\br
     labeled-statement\br
-    attribute-specifier-seq\opt expression-statement\br
-    attribute-specifier-seq\opt compound-statement\br
-    attribute-specifier-seq\opt selection-statement\br
-    attribute-specifier-seq\opt iteration-statement\br
-    attribute-specifier-seq\opt jump-statement\br
+    attribute-specifier-seq\opt{} expression-statement\br
+    attribute-specifier-seq\opt{} compound-statement\br
+    attribute-specifier-seq\opt{} selection-statement\br
+    attribute-specifier-seq\opt{} iteration-statement\br
+    attribute-specifier-seq\opt{} jump-statement\br
     declaration-statement\br
-    attribute-specifier-seq\opt try-block
+    attribute-specifier-seq\opt{} try-block
 
 \nontermdef{init-statement}\br
     expression-statement\br
@@ -26,7 +26,7 @@ Except as indicated, statements are executed in sequence.
 
 \nontermdef{condition}\br
     expression\br
-    attribute-specifier-seq\opt decl-specifier-seq declarator brace-or-equal-initializer
+    attribute-specifier-seq\opt{} decl-specifier-seq declarator brace-or-equal-initializer
 \end{bnf}
 
 The optional \grammarterm{attribute-specifier-seq} appertains to the respective statement.
@@ -102,7 +102,7 @@ A statement can be labeled.
 
 \begin{bnf}
 \nontermdef{labeled-statement}\br
-    attribute-specifier-seq\opt identifier \terminal{:} statement\br
+    attribute-specifier-seq\opt{} identifier \terminal{:} statement\br
     attribute-specifier-seq\opt{} \terminal{case} constant-expression \terminal{:} statement\br
     attribute-specifier-seq\opt{} \terminal{default :} statement
 \end{bnf}
@@ -196,9 +196,9 @@ Selection statements choose one of several flows of control.
 %
 \begin{bnf}
 \nontermdef{selection-statement}\br
-    \terminal{if constexpr\opt (} init-statement\opt condition \terminal{)} statement\br
-    \terminal{if constexpr\opt (} init-statement\opt condition \terminal{)} statement \terminal{else} statement\br
-    \terminal{switch (} init-statement\opt condition \terminal{)} statement
+    \terminal{if constexpr\opt{} (} init-statement\opt{} condition \terminal{)} statement\br
+    \terminal{if constexpr\opt{} (} init-statement\opt{} condition \terminal{)} statement \terminal{else} statement\br
+    \terminal{switch (} init-statement\opt{} condition \terminal{)} statement
 \end{bnf}
 
 See~\ref{dcl.meaning} for the optional \grammarterm{attribute-specifier-seq} in a condition.
@@ -295,7 +295,7 @@ int f() {
 An \tcode{if} statement of the form
 
 \begin{ncbnf}
-\terminal{if constexpr\opt (} init-statement condition \terminal{)} statement
+\terminal{if constexpr\opt{} (} init-statement condition \terminal{)} statement
 \end{ncbnf}
 
 is equivalent to
@@ -303,14 +303,14 @@ is equivalent to
 \begin{ncbnftab}
 \terminal{\{}\br
 \>init-statement\br
-\>\terminal{if constexpr\opt (} condition \terminal{)} statement\br
+\>\terminal{if constexpr\opt{} (} condition \terminal{)} statement\br
 \terminal{\}}
 \end{ncbnftab}
 
 and an \tcode{if} statement of the form
 
 \begin{ncbnf}
-\terminal{if constexpr\opt (} init-statement condition \terminal{)} statement \terminal{else} statement
+\terminal{if constexpr\opt{} (} init-statement condition \terminal{)} statement \terminal{else} statement
 \end{ncbnf}
 
 is equivalent to
@@ -318,7 +318,7 @@ is equivalent to
 \begin{ncbnftab}
 \terminal{\{}\br
 \>init-statement\br
-\>\terminal{if constexpr\opt (} condition \terminal{)} statement \terminal{else} statement\br
+\>\terminal{if constexpr\opt{} (} condition \terminal{)} statement \terminal{else} statement\br
 \terminal{\}}
 \end{ncbnftab}
 
@@ -436,8 +436,8 @@ Iteration statements specify looping.
 
 \begin{bnf}
 \nontermdef{for-range-declaration}\br
-    attribute-specifier-seq\opt decl-specifier-seq declarator\br
-    attribute-specifier-seq\opt decl-specifier-seq ref-qualifier\opt{} \terminal{[} identifier-list \terminal{]}
+    attribute-specifier-seq\opt{} decl-specifier-seq declarator\br
+    attribute-specifier-seq\opt{} decl-specifier-seq ref-qualifier\opt{} \terminal{[} identifier-list \terminal{]}
 \end{bnf}
 
 \begin{bnf}
diff --git a/source/templates.tex b/source/templates.tex
index bac69bb..5abe7a5 100644
--- a/source/templates.tex
+++ b/source/templates.tex
@@ -178,9 +178,9 @@ is:
 
 \begin{bnf}
 \nontermdef{type-parameter}\br
-  type-parameter-key \terminal{...}\opt identifier\opt\br
+  type-parameter-key \terminal{...}\opt{} identifier\opt{}\br
   type-parameter-key identifier\opt{} \terminal{=} type-id\br
-  \terminal{template <} template-parameter-list \terminal{>} type-parameter-key \terminal{...}\opt identifier\opt\br
+  \terminal{template <} template-parameter-list \terminal{>} type-parameter-key \terminal{...}\opt{} identifier\opt{}\br
   \terminal{template <} template-parameter-list \terminal{>} type-parameter-key identifier\opt{} \terminal{=} id-expression
 \end{bnf}
 
@@ -572,8 +572,8 @@ A template specialization~(\ref{temp.spec}) can be referred to by a
 
 \begin{bnf}
 \nontermdef{template-argument-list}\br
-  template-argument \terminal{...}\opt\br
-  template-argument-list \terminal{,} template-argument \terminal{...}\opt
+  template-argument \terminal{...}\opt{}\br
+  template-argument-list \terminal{,} template-argument \terminal{...}\opt{}
 \end{bnf}
 
 \begin{bnf}
@@ -3040,7 +3040,7 @@ the program is ill-formed.
 \begin{bnf}
 \nontermdef{typename-specifier}\br
   \terminal{typename} nested-name-specifier identifier\br
-  \terminal{typename} nested-name-specifier \terminal{template\opt} simple-template-id
+  \terminal{typename} nested-name-specifier \terminal{template\opt{}} simple-template-id
 \end{bnf}
 
 \pnum
@@ -4062,8 +4062,8 @@ is dependent, even if any subexpression is type-dependent:
 
 \begin{ncbnftab}
 simple-type-specifier \terminal{(} expression-list\opt{} \terminal{)}\br
-\terminal{::\opt new} new-placement\opt new-type-id new-initializer\opt\br
-\terminal{::\opt new} new-placement\opt{} \terminal{(} type-id \terminal{)} new-initializer\opt\br
+\terminal{::\opt{} new} new-placement\opt{} new-type-id new-initializer\opt{}\br
+\terminal{::\opt{} new} new-placement\opt{} \terminal{(} type-id \terminal{)} new-initializer\opt{}\br
 \terminal{dynamic_cast <} type-id \terminal{> (} expression \terminal{)}\br
 \terminal{static_cast <} type-id \terminal{> (} expression \terminal{)}\br
 \terminal{const_cast <} type-id \terminal{> (} expression \terminal{)}\br
@@ -4085,9 +4085,9 @@ postfix-expression \terminal{->} pseudo-destructor-name\br
 \terminal{alignof (} type-id \terminal{)}\br
 \terminal{typeid (} expression \terminal{)}\br
 \terminal{typeid (} type-id \terminal{)}\br
-\terminal{::\opt delete} cast-expression\br
-\terminal{::\opt delete [ ]} cast-expression\br
-\terminal{throw} assignment-expression\opt\br
+\terminal{::\opt{} delete} cast-expression\br
+\terminal{::\opt{} delete [ ]} cast-expression\br
+\terminal{throw} assignment-expression\opt{}\br
 \terminal{noexcept} \terminal{(} expression \terminal{)}
 \end{ncbnftab}
 
@@ -4880,7 +4880,7 @@ The syntax for explicit instantiation is:
 
 \begin{bnf}
 \nontermdef{explicit-instantiation}\br
-  \terminal{extern\opt} \terminal{template} declaration
+  \terminal{extern\opt{}} \terminal{template} declaration
 \end{bnf}
 
 There are two forms of explicit instantiation: an explicit instantiation
-- 
2.7.4


From 22675c583e7e86231aa286dcc1f841f36ead96b6 Mon Sep 17 00:00:00 2001
From: Jens Maurer <Jens.Maurer@gmx.net>
Date: Tue, 7 Feb 2017 10:34:48 +0100
Subject: [PATCH 12/45] [macros] Remove \xspace from \opt

---
 source/macros.tex | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/source/macros.tex b/source/macros.tex
index f988cfe..35098e0 100644
--- a/source/macros.tex
+++ b/source/macros.tex
@@ -182,7 +182,7 @@
 \newcommand{\CppIII}{\Cpp{} 2003}
 \newcommand{\CppXI}{\Cpp{} 2011}
 \newcommand{\CppXIV}{\Cpp{} 2014}
-\newcommand{\opt}{{\ensuremath{_\mathit{opt}}}\xspace}
+\newcommand{\opt}{{\ensuremath{_\mathit{opt}}}}
 \newcommand{\dcr}{-{-}}
 \newcommand{\bigoh}[1]{\ensuremath{\mathscr{O}(#1)}}
 
-- 
2.7.4


From 3cbab96ceeb498982874ac55d37315b0f76faad9 Mon Sep 17 00:00:00 2001
From: Jens Maurer <Jens.Maurer@gmx.net>
Date: Tue, 7 Feb 2017 10:43:07 +0100
Subject: [PATCH 13/45] Use \opt{arg} instead of suffix \opt{}

This was machine-converted using

sed -i 's/\([-a-z]\{1,\}\)\opt{}/\opt{\1}/g' *.tex
sed -i 's/::\opt{}/\opt{::}/g' *.tex
sed -i 's/\(\terminal{[^}]*}\)\opt{}/\opt{\1}/g' *.tex
---
 source/access.tex       |  2 +-
 source/basic.tex        | 10 +++---
 source/classes.tex      | 22 ++++++------
 source/declarations.tex | 90 ++++++++++++++++++++++++-------------------------
 source/declarators.tex  | 84 ++++++++++++++++++++++-----------------------
 source/derived.tex      | 12 +++----
 source/exceptions.tex   |  8 ++---
 source/expressions.tex  | 48 +++++++++++++-------------
 source/intro.tex        |  2 +-
 source/iostreams.tex    | 10 +++---
 source/lex.tex          | 58 +++++++++++++++----------------
 source/macros.tex       |  2 +-
 source/overloading.tex  |  8 ++---
 source/preprocessor.tex | 40 +++++++++++-----------
 source/special.tex      | 14 ++++----
 source/statements.tex   | 48 +++++++++++++-------------
 source/templates.tex    | 40 +++++++++++-----------
 source/utilities.tex    |  2 +-
 18 files changed, 250 insertions(+), 250 deletions(-)

diff --git a/source/access.tex b/source/access.tex
index a010889..93e88ef 100644
--- a/source/access.tex
+++ b/source/access.tex
@@ -200,7 +200,7 @@ Member declarations can be labeled by an
 (Clause~\ref{class.derived}):
 
 \begin{ncbnftab}
-access-specifier \terminal{:} member-specification\opt{}
+access-specifier \terminal{:} \opt{member-specification}
 \end{ncbnftab}
 
 An
diff --git a/source/basic.tex b/source/basic.tex
index 5b77a9e..58c4a71 100644
--- a/source/basic.tex
+++ b/source/basic.tex
@@ -686,7 +686,7 @@ The point of declaration of a class first declared in an
 \item for a declaration of the form
 
 \begin{ncbnf}
-class-key attribute-specifier-seq\opt{} identifier \terminal{;}
+class-key \opt{attribute-specifier-seq} identifier \terminal{;}
 \end{ncbnf}
 
 the \grammarterm{identifier} is declared to be a
@@ -1657,7 +1657,7 @@ up as types in the scope designated by the
 \grammarterm{qualified-id} of the form:
 
 \begin{ncbnf}
-nested-name-specifier\opt{} class-name \terminal{::} \terminal{\tilde} class-name
+\opt{nested-name-specifier} class-name \terminal{::} \terminal{\tilde} class-name
 \end{ncbnf}
 
 the second \grammarterm{class-name} is looked up in the same scope as the
@@ -2017,7 +2017,7 @@ If the \grammarterm{elaborated-type-specifier} has no
 following form:
 
 \begin{ncbnf}
-class-key attribute-specifier-seq\opt{} identifier \terminal{;}
+class-key \opt{attribute-specifier-seq} identifier \terminal{;}
 \end{ncbnf}
 
 the \grammarterm{identifier} is looked up according
@@ -2032,7 +2032,7 @@ declared \grammarterm{type-name}, or if the
 form:
 
 \begin{ncbnf}
-class-key attribute-specifier-seq\opt{} identifier \terminal{;}
+class-key \opt{attribute-specifier-seq} identifier \terminal{;}
 \end{ncbnf}
 
 the \grammarterm{elaborated-type-specifier} is a declaration that
@@ -2198,7 +2198,7 @@ of a sequence of declarations.
 
 \begin{bnf}
 \nontermdef{translation-unit}\br
-    declaration-seq\opt{}
+    \opt{declaration-seq}
 \end{bnf}
 
 \pnum
diff --git a/source/classes.tex b/source/classes.tex
index 66c1912..4347990 100644
--- a/source/classes.tex
+++ b/source/classes.tex
@@ -29,18 +29,18 @@ make \grammarterm{class-name}{s}. An object of a class consists of a
 
 \begin{bnf}
 \nontermdef{class-specifier}\br
-    class-head \terminal{\{} member-specification\opt{} \terminal{\}}
+    class-head \terminal{\{} \opt{member-specification} \terminal{\}}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{class-head}\br
-    class-key attribute-specifier-seq\opt{} class-head-name class-virt-specifier\opt{} base-clause\opt{}\br
-    class-key attribute-specifier-seq\opt{} base-clause\opt{}
+    class-key \opt{attribute-specifier-seq} class-head-name \opt{class-virt-specifier} \opt{base-clause}\br
+    class-key \opt{attribute-specifier-seq} \opt{base-clause}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{class-head-name}\br
-    nested-name-specifier\opt{} class-name
+    \opt{nested-name-specifier} class-name
 \end{bnf}
 
 \begin{bnf}
@@ -442,13 +442,13 @@ ignored. A \grammarterm{typedef-name} shall not be used as the
 
 \begin{bnf}
 \nontermdef{member-specification}\br
-    member-declaration member-specification\opt{}\br
-    access-specifier \terminal{:} member-specification\opt{}
+    member-declaration \opt{member-specification}\br
+    access-specifier \terminal{:} \opt{member-specification}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{member-declaration}\br
-    attribute-specifier-seq\opt{} decl-specifier-seq\opt{} member-declarator-list\opt{} \terminal{;}\br
+    \opt{attribute-specifier-seq} \opt{decl-specifier-seq} \opt{member-declarator-list} \terminal{;}\br
     function-definition\br
     using-declaration\br
     static_assert-declaration\br
@@ -466,9 +466,9 @@ ignored. A \grammarterm{typedef-name} shall not be used as the
 
 \begin{bnf}
 \nontermdef{member-declarator}\br
-    declarator virt-specifier-seq\opt{} pure-specifier\opt{}\br
-    declarator brace-or-equal-initializer\opt{}\br
-    identifier\opt{} attribute-specifier-seq\opt{} \terminal{:} constant-expression
+    declarator \opt{virt-specifier-seq} \opt{pure-specifier}\br
+    declarator \opt{brace-or-equal-initializer}\br
+    \opt{identifier} \opt{attribute-specifier-seq} \terminal{:} constant-expression
 \end{bnf}
 
 \begin{bnf}
@@ -1294,7 +1294,7 @@ A static data member shall not be
 A \grammarterm{member-declarator} of the form
 
 \begin{ncbnftab}
-identifier\opt{}  attribute-specifier-seq\opt{} \terminal{:} constant-expression
+\opt{identifier}  \opt{attribute-specifier-seq} \terminal{:} constant-expression
 \end{ncbnftab}
 
 \indextext{\idxcode{:}!bit-field declaration}%
diff --git a/source/declarations.tex b/source/declarations.tex
index 022c459..07e70e1 100644
--- a/source/declarations.tex
+++ b/source/declarations.tex
@@ -45,19 +45,19 @@ the form
 
 \begin{bnf}
 \nontermdef{nodeclspec-function-declaration}\br
-    attribute-specifier-seq\opt{} declarator \terminal{;}
+    \opt{attribute-specifier-seq} declarator \terminal{;}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{alias-declaration}\br
-    \terminal{using} identifier attribute-specifier-seq\opt{} \terminal{=} defining-type-id \terminal{;}
+    \terminal{using} identifier \opt{attribute-specifier-seq} \terminal{=} defining-type-id \terminal{;}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{simple-declaration}\br
-    decl-specifier-seq init-declarator-list\opt{} \terminal{;}\br
+    decl-specifier-seq \opt{init-declarator-list} \terminal{;}\br
     attribute-specifier-seq decl-specifier-seq init-declarator-list \terminal{;}\br
-    attribute-specifier-seq\opt{} decl-specifier-seq ref-qualifier\opt{} \terminal{[} identifier-list \terminal{]} initializer \terminal{;}
+    \opt{attribute-specifier-seq} decl-specifier-seq \opt{ref-qualifier} \terminal{[} identifier-list \terminal{]} initializer \terminal{;}
 \end{bnf}
 
 \begin{bnf}
@@ -93,7 +93,7 @@ A
 \grammarterm{nodeclspec-function-declaration} of the form
 
 \begin{ncsimplebnf}
-attribute-specifier-seq\opt{} decl-specifier-seq\opt{} init-declarator-list\opt{} \terminal{;}
+\opt{attribute-specifier-seq} \opt{decl-specifier-seq} \opt{init-declarator-list} \terminal{;}
 \end{ncsimplebnf}
 
 is divided into three parts.
@@ -259,7 +259,7 @@ The specifiers that can be used in a declaration are
 
 \begin{bnf}
 \nontermdef{decl-specifier-seq}\br
-    decl-specifier attribute-specifier-seq\opt{}\br
+    decl-specifier \opt{attribute-specifier-seq}\br
     decl-specifier decl-specifier-seq
 \end{bnf}
 
@@ -1035,7 +1035,7 @@ The type-specifiers are
 
 \begin{bnf}
 \nontermdef{type-specifier-seq}\br
-    type-specifier attribute-specifier-seq\opt{}\br
+    type-specifier \opt{attribute-specifier-seq}\br
     type-specifier type-specifier-seq
 \end{bnf}
 
@@ -1048,7 +1048,7 @@ The type-specifiers are
 
 \begin{bnf}
 \nontermdef{defining-type-specifier-seq}\br
-  defining-type-specifier attribute-specifier-seq\opt{}\br
+  defining-type-specifier \opt{attribute-specifier-seq}\br
   defining-type-specifier defining-type-specifier-seq
 \end{bnf}
 
@@ -1225,9 +1225,9 @@ The simple type specifiers are
 
 \begin{bnf}
 \nontermdef{simple-type-specifier}\br
-    nested-name-specifier\opt{} type-name\br
+    \opt{nested-name-specifier} type-name\br
     nested-name-specifier \terminal{template} simple-template-id\br
-    nested-name-specifier\opt{} template-name\br
+    \opt{nested-name-specifier} template-name\br
     \terminal{char}\br
     \terminal{char16_t}\br
     \terminal{char32_t}\br
@@ -1458,10 +1458,10 @@ void r() {
 
 \begin{bnf}
 \nontermdef{elaborated-type-specifier}\br
-    class-key attribute-specifier-seq\opt{} nested-name-specifier\opt{} identifier\br
+    class-key \opt{attribute-specifier-seq} \opt{nested-name-specifier} identifier\br
     class-key simple-template-id\br
-    class-key nested-name-specifier \terminal{template}\opt{} simple-template-id\br
-    \terminal{enum} nested-name-specifier\opt{} identifier
+    class-key nested-name-specifier \opt{\terminal{template}} simple-template-id\br
+    \terminal{enum} \opt{nested-name-specifier} identifier
 \end{bnf}
 
 \pnum
@@ -1476,11 +1476,11 @@ instantiation~(\ref{temp.explicit}) or it has one of the following
 forms:
 
 \begin{ncsimplebnf}
-class-key attribute-specifier-seq\opt{} identifier \terminal{;}\br
-\terminal{friend} class-key \terminal{::\opt{}} identifier \terminal{;}\br
-\terminal{friend} class-key \terminal{::\opt{}} simple-template-id \terminal{;}\br
+class-key \opt{attribute-specifier-seq} identifier \terminal{;}\br
+\terminal{friend} class-key \terminal{\opt{::}} identifier \terminal{;}\br
+\terminal{friend} class-key \terminal{\opt{::}} simple-template-id \terminal{;}\br
 \terminal{friend} class-key nested-name-specifier identifier \terminal{;}\br
-\terminal{friend} class-key nested-name-specifier \terminal{template\opt{}} simple-template-id \terminal{;}
+\terminal{friend} class-key nested-name-specifier \terminal{\opt{template}} simple-template-id \terminal{;}
 \end{ncsimplebnf}
 
 In the first case, the \grammarterm{attribute-specifier-seq}, if any, appertains
@@ -1916,23 +1916,23 @@ constants. Its name becomes an \grammarterm{enum-name} within its scope.
 
 \begin{bnf}
 \nontermdef{enum-specifier}\br
-    enum-head \terminal{\{} enumerator-list\opt{} \terminal{\}}\br
+    enum-head \terminal{\{} \opt{enumerator-list} \terminal{\}}\br
     enum-head \terminal{\{} enumerator-list \terminal{, \}}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{enum-head}\br
-    enum-key attribute-specifier-seq\opt{} enum-head-name\opt{} enum-base\opt{}
+    enum-key \opt{attribute-specifier-seq} \opt{enum-head-name} \opt{enum-base}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{enum-head-name}\br
-    nested-name-specifier\opt{} identifier
+    \opt{nested-name-specifier} identifier
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{opaque-enum-declaration}\br
-    enum-key attribute-specifier-seq\opt{} nested-name-specifier\opt{} identifier enum-base\opt{} \terminal{;}
+    enum-key \opt{attribute-specifier-seq} \opt{nested-name-specifier} identifier \opt{enum-base} \terminal{;}
 \end{bnf}
 
 \begin{bnf}
@@ -1961,7 +1961,7 @@ constants. Its name becomes an \grammarterm{enum-name} within its scope.
 
 \begin{bnf}
 \nontermdef{enumerator}\br
-    identifier attribute-specifier-seq\opt{}
+    identifier \opt{attribute-specifier-seq}
 \end{bnf}
 
 The optional \grammarterm{attribute-specifier-seq} in the \grammarterm{enum-head} and
@@ -1969,7 +1969,7 @@ the \grammarterm{opaque-enum-declaration} appertains to the enumeration; the att
 in that \grammarterm{attribute-specifier-seq} are thereafter considered attributes of the
 enumeration whenever it is named.
 A \tcode{:} following
-``\tcode{enum} \grammarterm{nested-name-specifier}\opt{} \grammarterm{identifier}''
+``\tcode{enum} \opt{\grammarterm{nested-name-specifier}} \grammarterm{identifier}''
 within the \grammarterm{decl-specifier-seq} of a \grammarterm{member-declaration}
 is parsed as part of an \grammarterm{enum-base}.
 \begin{note} This resolves a potential ambiguity between the declaration of an enumeration
@@ -2270,12 +2270,12 @@ see~\ref{basic.scope.namespace}.
 
 \begin{bnf}
 \nontermdef{named-namespace-definition}\br
-        \terminal{inline\opt{}} \terminal{namespace} attribute-specifier-seq\opt{} identifier \terminal{\{} namespace-body \terminal{\}}
+        \terminal{\opt{inline}} \terminal{namespace} \opt{attribute-specifier-seq} identifier \terminal{\{} namespace-body \terminal{\}}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{unnamed-namespace-definition}\br
-        \terminal{inline\opt{}} \terminal{namespace} attribute-specifier-seq\opt{} \terminal{\{} namespace-body \terminal{\}}
+        \terminal{\opt{inline}} \terminal{namespace} \opt{attribute-specifier-seq} \terminal{\{} namespace-body \terminal{\}}
 \end{bnf}
 
 \begin{bnf}
@@ -2291,7 +2291,7 @@ see~\ref{basic.scope.namespace}.
 
 \begin{bnf}
 \nontermdef{namespace-body}\br
-        declaration-seq\opt{}
+        \opt{declaration-seq}
 \end{bnf}
 
 \pnum
@@ -2428,7 +2428,7 @@ An \grammarterm{unnamed-namespace-definition} behaves as if it were
 replaced by
 
 \begin{ncsimplebnf}
-\terminal{inline}\opt{} \terminal{namespace} \terminal{\uniquens} \terminal{\{ /* empty body */ \}}\br
+\opt{\terminal{inline}} \terminal{namespace} \terminal{\uniquens} \terminal{\{ /* empty body */ \}}\br
 \terminal{using namespace} \terminal{\uniquens} \terminal{;}\br
 \terminal{namespace} \terminal{\uniquens} \terminal{\{} namespace-body \terminal{\}}
 \end{ncsimplebnf}
@@ -2473,7 +2473,7 @@ whose \grammarterm{declarator-id} is an \grammarterm{unqualified-id}~(\ref{dcl.m
 whose \grammarterm{class-head-name} (Clause \ref{class}) or
 \grammarterm{enum-head-name}~(\ref{dcl.enum}) is an \grammarterm{identifier}, or
 whose \grammarterm{elaborated-type-specifier} is of the form \grammarterm{class-key}
-\grammarterm{attribute-specifier-seq}\opt{} \grammarterm{identifier}~(\ref{dcl.type.elab}), or
+\opt{\grammarterm{attribute-specifier-seq}} \grammarterm{identifier}~(\ref{dcl.type.elab}), or
 that is an \grammarterm{opaque-enum-declaration},
 declares (or redeclares) its \grammarterm{unqualified-id} or
 \grammarterm{identifier} as a member of \tcode{N}.
@@ -2602,7 +2602,7 @@ namespace according to the following grammar:
 
 \begin{bnf}
 \nontermdef{qualified-namespace-specifier}\br
-    nested-name-specifier\opt{} namespace-name
+    \opt{nested-name-specifier} namespace-name
 \end{bnf}
 
 \pnum
@@ -2642,13 +2642,13 @@ namespace CWVLN = CWVLN;
 
 \begin{bnf}
 \nontermdef{using-declarator-list}\br
-    using-declarator \terminal{...}\opt{}\br
-    using-declarator-list \terminal{,} using-declarator \terminal{...}\opt{}
+    using-declarator \opt{\terminal{...}}\br
+    using-declarator-list \terminal{,} using-declarator \opt{\terminal{...}}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{using-declarator}\br
-    \terminal{typename\opt{}} nested-name-specifier unqualified-id
+    \terminal{\opt{typename}} nested-name-specifier unqualified-id
 \end{bnf}
 
 \pnum
@@ -3117,7 +3117,7 @@ specifies a dependent name~(\ref{temp.dep}), the name introduced by the
 
 \begin{bnf}
 \nontermdef{using-directive}\br
-    attribute-specifier-seq\opt{} \terminal{using  namespace} nested-name-specifier\opt{} namespace-name \terminal{;}
+    \opt{attribute-specifier-seq} \terminal{using  namespace} \opt{nested-name-specifier} namespace-name \terminal{;}
 \end{bnf}
 
 \pnum
@@ -3372,7 +3372,7 @@ be achieved using a \grammarterm{linkage-specification}:
 %
 \begin{bnf}
 \nontermdef{linkage-specification}\br
-    \terminal{extern} string-literal \terminal{\{} declaration-seq\opt{} \terminal{\}}\br
+    \terminal{extern} string-literal \terminal{\{} \opt{declaration-seq} \terminal{\}}\br
     \terminal{extern} string-literal declaration
 \end{bnf}
 
@@ -3592,19 +3592,19 @@ such as types, variables, names, blocks, or translation units.
 
 \begin{bnf}
 \nontermdef{attribute-specifier-seq}\br
-  attribute-specifier-seq\opt{} attribute-specifier
+  \opt{attribute-specifier-seq} attribute-specifier
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{attribute-specifier}\br
-  \terminal{[} \terminal{[} attribute-using-prefix\opt{} attribute-list \terminal{]} \terminal{]}\br
+  \terminal{[} \terminal{[} \opt{attribute-using-prefix} attribute-list \terminal{]} \terminal{]}\br
   alignment-specifier
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{alignment-specifier}\br
-  \terminal{alignas (} type-id \terminal{...}\opt{} \terminal{)}\br
-  \terminal{alignas (} constant-expression \terminal{...}\opt{} \terminal{)}
+  \terminal{alignas (} type-id \opt{\terminal{...}} \terminal{)}\br
+  \terminal{alignas (} constant-expression \opt{\terminal{...}} \terminal{)}
 \end{bnf}
 
 \begin{bnf}
@@ -3614,15 +3614,15 @@ such as types, variables, names, blocks, or translation units.
 
 \begin{bnf}
 \nontermdef{attribute-list}\br
-  attribute\opt{}\br
-  attribute-list \terminal{,} attribute\opt{}\br
+  \opt{attribute}\br
+  attribute-list \terminal{,} \opt{attribute}\br
   attribute \terminal{...}\br
   attribute-list \terminal{,} attribute \terminal{...}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{attribute}\br
-    attribute-token attribute-argument-clause\opt{}
+    attribute-token \opt{attribute-argument-clause}
 \end{bnf}
 
 \begin{bnf}
@@ -3643,7 +3643,7 @@ such as types, variables, names, blocks, or translation units.
 
 \begin{bnf}
 \nontermdef{attribute-argument-clause}\br
-    \terminal{(} balanced-token-seq\opt{} \terminal{)}
+    \terminal{(} \opt{balanced-token-seq} \terminal{)}
 \end{bnf}
 
 \begin{bnf}
@@ -3654,9 +3654,9 @@ such as types, variables, names, blocks, or translation units.
 
 \begin{bnf}
 \nontermdef{balanced-token}\br
-    \terminal{(} balanced-token-seq\opt{} \terminal{)}\br
-    \terminal{[} balanced-token-seq\opt{} \terminal{]}\br
-    \terminal{\{} balanced-token-seq\opt{} \terminal{\}}\br
+    \terminal{(} \opt{balanced-token-seq} \terminal{)}\br
+    \terminal{[} \opt{balanced-token-seq} \terminal{]}\br
+    \terminal{\{} \opt{balanced-token-seq} \terminal{\}}\br
     \textnormal{any \grammarterm{token} other than a parenthesis, a bracket, or a brace}
 \end{bnf}
 
diff --git a/source/declarators.tex b/source/declarators.tex
index d530155..831fabd 100644
--- a/source/declarators.tex
+++ b/source/declarators.tex
@@ -27,7 +27,7 @@ each of which can have an initializer.
 
 \begin{bnf}
 \nontermdef{init-declarator}\br
-    declarator initializer\opt{}
+    declarator \opt{initializer}
 \end{bnf}
 
 \pnum
@@ -112,16 +112,16 @@ Declarators have the syntax
 
 \begin{bnf}
 \nontermdef{noptr-declarator}\br
-    declarator-id attribute-specifier-seq\opt{}\br
+    declarator-id \opt{attribute-specifier-seq}\br
     noptr-declarator parameters-and-qualifiers\br
-    noptr-declarator \terminal{[} constant-expression\opt{} \terminal{]} attribute-specifier-seq\opt{}\br
+    noptr-declarator \terminal{[} \opt{constant-expression} \terminal{]} \opt{attribute-specifier-seq}\br
     \terminal{(} ptr-declarator \terminal{)}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{parameters-and-qualifiers}\br
-    \terminal{(} parameter-declaration-clause \terminal{)} cv-qualifier-seq\opt{}\br
-\hspace*{\bnfindentinc}ref-qualifier\opt{} noexcept-specifier\opt{} attribute-specifier-seq\opt{}
+    \terminal{(} parameter-declaration-clause \terminal{)} \opt{cv-qualifier-seq}\br
+\hspace*{\bnfindentinc}\opt{ref-qualifier} \opt{noexcept-specifier} \opt{attribute-specifier-seq}
 \end{bnf}
 
 \begin{bnf}
@@ -131,15 +131,15 @@ Declarators have the syntax
 
 \begin{bnf}
 \nontermdef{ptr-operator}\br
-    \terminal{*} attribute-specifier-seq\opt{} cv-qualifier-seq\opt{}\br
-    \terminal{\&} attribute-specifier-seq\opt{}\br
-    \terminal{\&\&} attribute-specifier-seq\opt{}\br
-    nested-name-specifier \terminal{*} attribute-specifier-seq\opt{} cv-qualifier-seq\opt{}
+    \terminal{*} \opt{attribute-specifier-seq} \opt{cv-qualifier-seq}\br
+    \terminal{\&} \opt{attribute-specifier-seq}\br
+    \terminal{\&\&} \opt{attribute-specifier-seq}\br
+    nested-name-specifier \terminal{*} \opt{attribute-specifier-seq} \opt{cv-qualifier-seq}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{cv-qualifier-seq}\br
-    cv-qualifier cv-qualifier-seq\opt{}
+    cv-qualifier \opt{cv-qualifier-seq}
 \end{bnf}
 
 \begin{bnf}
@@ -156,7 +156,7 @@ Declarators have the syntax
 
 \begin{bnf}
 \nontermdef{declarator-id}\br
-    \terminal{...}\opt{} id-expression
+    \opt{\terminal{...}} id-expression
 \end{bnf}
 
 \rSec1[dcl.name]{Type names}
@@ -179,31 +179,31 @@ of that type that omits the name of the entity.
 
 \begin{bnf}
 \nontermdef{type-id}\br
-    type-specifier-seq abstract-declarator\opt{}
+    type-specifier-seq \opt{abstract-declarator}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{defining-type-id}\br
-    defining-type-specifier-seq abstract-declarator\opt{}
+    defining-type-specifier-seq \opt{abstract-declarator}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{abstract-declarator}\br
     ptr-abstract-declarator\br
-    noptr-abstract-declarator\opt{} parameters-and-qualifiers trailing-return-type\br
+    \opt{noptr-abstract-declarator} parameters-and-qualifiers trailing-return-type\br
     abstract-pack-declarator
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{ptr-abstract-declarator}\br
     noptr-abstract-declarator\br
-    ptr-operator ptr-abstract-declarator\opt{}
+    ptr-operator \opt{ptr-abstract-declarator}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{noptr-abstract-declarator}\br
-    noptr-abstract-declarator\opt{} parameters-and-qualifiers\br
-    noptr-abstract-declarator\opt{} \terminal{[} constant-expression\opt{} \terminal{]} attribute-specifier-seq\opt{}\br
+    \opt{noptr-abstract-declarator} parameters-and-qualifiers\br
+    \opt{noptr-abstract-declarator} \terminal{[} \opt{constant-expression} \terminal{]} \opt{attribute-specifier-seq}\br
     \terminal{(} ptr-abstract-declarator \terminal{)}
 \end{bnf}
 
@@ -216,7 +216,7 @@ of that type that omits the name of the entity.
 \begin{bnf}
 \nontermdef{noptr-abstract-pack-declarator}\br
     noptr-abstract-pack-declarator parameters-and-qualifiers\br
-    noptr-abstract-pack-declarator \terminal{[} constant-expression\opt{} \terminal{]} attribute-specifier-seq\opt{}\br
+    noptr-abstract-pack-declarator \terminal{[} \opt{constant-expression} \terminal{]} \opt{attribute-specifier-seq}\br
     \terminal{...}
 \end{bnf}
 
@@ -432,7 +432,7 @@ T D
 
 where
 \tcode{T}
-is of the form \grammarterm{attribute-specifier-seq}\opt{}
+is of the form \opt{\grammarterm{attribute-specifier-seq}}
 \grammarterm{decl-specifier-seq}
 and
 \tcode{D}
@@ -474,7 +474,7 @@ determine the type
 
 \pnum
 In a declaration
-\grammarterm{attribute-specifier-seq}\opt{}
+\opt{\grammarterm{attribute-specifier-seq}}
 \tcode{T}
 \tcode{D}
 where
@@ -519,7 +519,7 @@ where
 has the form
 
 \begin{ncsimplebnf}
-\terminal{*} attribute-specifier-seq\opt{} cv-qualifier-seq\opt{} \terminal{D1}
+\terminal{*} \opt{attribute-specifier-seq} \opt{cv-qualifier-seq} \terminal{D1}
 \end{ncsimplebnf}
 
 and the type of the identifier in the declaration
@@ -632,8 +632,8 @@ where
 has either of the forms
 
 \begin{ncsimplebnf}
-\terminal{\&} attribute-specifier-seq\opt{} \terminal{D1}\br
-\terminal{\&\&} attribute-specifier-seq\opt{} \terminal{D1}
+\terminal{\&} \opt{attribute-specifier-seq} \terminal{D1}\br
+\terminal{\&\&} \opt{attribute-specifier-seq} \terminal{D1}
 \end{ncsimplebnf}
 
 and the type of the identifier in the declaration
@@ -827,7 +827,7 @@ where
 has the form
 
 \begin{ncsimplebnf}
-nested-name-specifier \terminal{*} attribute-specifier-seq\opt{} cv-qualifier-seq\opt{} \terminal{D1}
+nested-name-specifier \terminal{*} \opt{attribute-specifier-seq} \opt{cv-qualifier-seq} \terminal{D1}
 \end{ncsimplebnf}
 
 and the
@@ -936,7 +936,7 @@ where
 has the form
 
 \begin{ncsimplebnf}
-\terminal{D1 [} constant-expression\opt{} \terminal{]} attribute-specifier-seq\opt{}
+\terminal{D1 [} \opt{constant-expression} \terminal{]} \opt{attribute-specifier-seq}
 \end{ncsimplebnf}
 
 and the type of the identifier in the declaration
@@ -1236,8 +1236,8 @@ where
 \tcode{D}
 has the form
 \begin{ncsimplebnf}
-\terminal{D1 (} parameter-declaration-clause \terminal{)} cv-qualifier-seq\opt{}\br
-\hspace*{\bnfindentinc}ref-qualifier\opt{} noexcept-specifier\opt{} attribute-specifier-seq\opt{}
+\terminal{D1 (} parameter-declaration-clause \terminal{)} \opt{cv-qualifier-seq}\br
+\hspace*{\bnfindentinc}\opt{ref-qualifier} \opt{noexcept-specifier} \opt{attribute-specifier-seq}
 \end{ncsimplebnf}
 and the type of the contained
 \grammarterm{declarator-id}
@@ -1256,7 +1256,7 @@ is
 \tcode{noexcept}\opt{}
 function of
 (\grammarterm{parameter-declaration-clause})
-\grammarterm{cv-qualifier-seq}\opt{} \grammarterm{ref-qualifier}\opt{}
+\opt{\grammarterm{cv-qualifier-seq}} \opt{\grammarterm{ref-qualifier}}
 returning \tcode{T}'',
 where the optional \tcode{noexcept} is present
 if and only if
@@ -1273,8 +1273,8 @@ where
 has the form
 
 \begin{ncsimplebnf}
-\terminal{D1 (} parameter-declaration-clause \terminal{)} cv-qualifier-seq\opt{}\br
-\hspace*{\bnfindentinc}ref-qualifier\opt{} noexcept-specifier\opt{} attribute-specifier-seq\opt{} trailing-return-type
+\terminal{D1 (} parameter-declaration-clause \terminal{)} \opt{cv-qualifier-seq}\br
+\hspace*{\bnfindentinc}\opt{ref-qualifier} \opt{noexcept-specifier} \opt{attribute-specifier-seq} trailing-return-type
 \end{ncsimplebnf}
 
 and the type of the contained
@@ -1310,7 +1310,7 @@ A type of either form is a \term{function type}.\footnote{As indicated by syntax
 \indextext{declaration!function}%
 \begin{bnf}
 \nontermdef{parameter-declaration-clause}\br
-    parameter-declaration-list\opt{} \terminal{...}\opt{}\br
+    \opt{parameter-declaration-list} \opt{\terminal{...}}\br
     parameter-declaration-list \terminal{, ...}
 \end{bnf}
 
@@ -1322,10 +1322,10 @@ A type of either form is a \term{function type}.\footnote{As indicated by syntax
 
 \begin{bnf}
 \nontermdef{parameter-declaration}\br
-    attribute-specifier-seq\opt{} decl-specifier-seq declarator\br
-    attribute-specifier-seq\opt{} decl-specifier-seq declarator \terminal{=} initializer-clause\br
-    attribute-specifier-seq\opt{} decl-specifier-seq abstract-declarator\opt{}\br
-    attribute-specifier-seq\opt{} decl-specifier-seq abstract-declarator\opt{} \terminal{=} initializer-clause
+    \opt{attribute-specifier-seq} decl-specifier-seq declarator\br
+    \opt{attribute-specifier-seq} decl-specifier-seq declarator \terminal{=} initializer-clause\br
+    \opt{attribute-specifier-seq} decl-specifier-seq \opt{abstract-declarator}\br
+    \opt{attribute-specifier-seq} decl-specifier-seq \opt{abstract-declarator} \terminal{=} initializer-clause
 \end{bnf}
 
 The optional \grammarterm{attribute-specifier-seq} in a \grammarterm{parameter-declaration}
@@ -1990,12 +1990,12 @@ Function definitions have the form
 %
 \begin{bnf}
 \nontermdef{function-definition}\br
-    attribute-specifier-seq\opt{} decl-specifier-seq\opt{} declarator virt-specifier-seq\opt{} function-body
+    \opt{attribute-specifier-seq} \opt{decl-specifier-seq} declarator \opt{virt-specifier-seq} function-body
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{function-body}\br
-    ctor-initializer\opt{} compound-statement\br
+    \opt{ctor-initializer} compound-statement\br
     function-try-block\br
     \terminal{= default ;}\br
     \terminal{= delete ;}
@@ -2107,7 +2107,7 @@ void f(const char* s = __func__);   // error: \tcode{__func__} is undeclared
 A function definition of the form:
 
 \begin{ncbnf}
-    attribute-specifier-seq\opt{} decl-specifier-seq\opt{} declarator virt-specifier-seq\opt{} \terminal{ = default ;}
+    \opt{attribute-specifier-seq} \opt{decl-specifier-seq} declarator \opt{virt-specifier-seq} \terminal{ = default ;}
 \end{ncbnf}
 
 is called an \grammarterm{explicitly-defaulted} definition.
@@ -2205,7 +2205,7 @@ nontrivial1::nontrivial1() = default;   // not first declaration
 A function definition of the form:
 
 \begin{ncbnf}
-    attribute-specifier-seq\opt{} decl-specifier-seq\opt{} declarator virt-specifier-seq\opt{} \terminal{ = delete ;}
+    \opt{attribute-specifier-seq} \opt{decl-specifier-seq} declarator \opt{virt-specifier-seq} \terminal{ = delete ;}
 \end{ncbnf}
 
 is called a \term{deleted definition}. A function with a
@@ -2305,7 +2305,7 @@ Otherwise, \tcode{e}
 is defined as-if by
 
 \begin{ncbnf}
-attribute-specifier-seq\opt{} decl-specifier-seq ref-qualifier\opt{} \terminal{e} initializer \terminal{;}
+\opt{attribute-specifier-seq} decl-specifier-seq \opt{ref-qualifier} \terminal{e} initializer \terminal{;}
 \end{ncbnf}
 
 where
@@ -2418,8 +2418,8 @@ the initialization of return values (\ref{stmt.return}).
 
 \begin{bnf}
 \nontermdef{initializer-list}\br
-    initializer-clause \terminal{...}\opt{}\br
-    initializer-list \terminal{,} initializer-clause \terminal{...}\opt{}
+    initializer-clause \opt{\terminal{...}}\br
+    initializer-list \terminal{,} initializer-clause \opt{\terminal{...}}
 \end{bnf}
 
 \begin{bnf}
diff --git a/source/derived.tex b/source/derived.tex
index 803ff91..8fd5e72 100644
--- a/source/derived.tex
+++ b/source/derived.tex
@@ -23,20 +23,20 @@ the notation:
 
 \begin{bnf}
 \nontermdef{base-specifier-list}\br
-    base-specifier \terminal{...}\opt{}\br
-    base-specifier-list \terminal{,} base-specifier \terminal{...}\opt{}
+    base-specifier \opt{\terminal{...}}\br
+    base-specifier-list \terminal{,} base-specifier \opt{\terminal{...}}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{base-specifier}\br
-    attribute-specifier-seq\opt{} class-or-decltype\br
-    attribute-specifier-seq\opt{} \terminal{virtual} access-specifier\opt{} class-or-decltype\br
-    attribute-specifier-seq\opt{} access-specifier \terminal{virtual}\opt{} class-or-decltype
+    \opt{attribute-specifier-seq} class-or-decltype\br
+    \opt{attribute-specifier-seq} \terminal{virtual} \opt{access-specifier} class-or-decltype\br
+    \opt{attribute-specifier-seq} access-specifier \opt{\terminal{virtual}} class-or-decltype
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{class-or-decltype}\br
-    nested-name-specifier\opt{} class-name\br
+    \opt{nested-name-specifier} class-name\br
     nested-name-specifier \terminal{template} simple-template-id\br
     decltype-specifier
 \end{bnf}
diff --git a/source/exceptions.tex b/source/exceptions.tex
index 93e49d9..17ba5c2 100644
--- a/source/exceptions.tex
+++ b/source/exceptions.tex
@@ -26,12 +26,12 @@ or in functions called from the handler's try block.
 %
 \begin{bnf}
 \nontermdef{function-try-block}\br
-    \terminal{try} ctor-initializer\opt{} compound-statement handler-seq
+    \terminal{try} \opt{ctor-initializer} compound-statement handler-seq
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{handler-seq}\br
-    handler handler-seq\opt{}
+    handler \opt{handler-seq}
 \end{bnf}
 
 \indextext{\idxcode{catch}}%
@@ -43,8 +43,8 @@ or in functions called from the handler's try block.
 
 \begin{bnf}
 \nontermdef{exception-declaration}\br
-    attribute-specifier-seq\opt{} type-specifier-seq declarator\br
-    attribute-specifier-seq\opt{} type-specifier-seq abstract-declarator\opt{}\br
+    \opt{attribute-specifier-seq} type-specifier-seq declarator\br
+    \opt{attribute-specifier-seq} type-specifier-seq \opt{abstract-declarator}\br
     \terminal{...}
 \end{bnf}
 
diff --git a/source/expressions.tex b/source/expressions.tex
index d19c061..f1de2cb 100644
--- a/source/expressions.tex
+++ b/source/expressions.tex
@@ -513,7 +513,7 @@ it is a bit-field if the identifier designates a bit-field~(\ref{dcl.struct.bind
 %
 \begin{bnf}
 \nontermdef{qualified-id}\br
-    nested-name-specifier \terminal{template}\opt{} unqualified-id
+    nested-name-specifier \opt{\terminal{template}} unqualified-id
 \end{bnf}
 
 \indextext{operator!scope resolution}%
@@ -526,7 +526,7 @@ it is a bit-field if the identifier designates a bit-field~(\ref{dcl.struct.bind
     namespace-name \terminal{::}\br
     decltype-specifier \terminal{::}\br
     nested-name-specifier identifier \terminal{::}\br
-    nested-name-specifier \terminal{template}\opt{} simple-template-id \terminal{::}
+    nested-name-specifier \opt{\terminal{template}} simple-template-id \terminal{::}
 \end{bnf}
 
 \pnum
@@ -594,18 +594,18 @@ by the \grammarterm{nested-name-specifier}.
 
 \begin{bnf}
 \nontermdef{lambda-expression}\br
-    lambda-introducer lambda-declarator\opt{} compound-statement
+    lambda-introducer \opt{lambda-declarator} compound-statement
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{lambda-introducer}\br
-    \terminal{[} lambda-capture\opt{} \terminal{]}
+    \terminal{[} \opt{lambda-capture} \terminal{]}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{lambda-declarator}\br
-    \terminal{(} parameter-declaration-clause \terminal{)} decl-specifier-seq\opt{}\br
-    \hspace*{\bnfindentinc}noexcept-specifier\opt{} attribute-specifier-seq\opt{} trailing-return-type\opt{}
+    \terminal{(} parameter-declaration-clause \terminal{)} \opt{decl-specifier-seq}\br
+    \hspace*{\bnfindentinc}\opt{noexcept-specifier} \opt{attribute-specifier-seq} \opt{trailing-return-type}
 \end{bnf}
 
 \pnum
@@ -1444,13 +1444,13 @@ Postfix expressions group left-to-right.
 \nontermdef{postfix-expression}\br
     primary-expression\br
     postfix-expression \terminal{[} expr-or-braced-init-list \terminal{]}\br
-    postfix-expression \terminal{(} expression-list\opt{} \terminal{)}\br
-    simple-type-specifier \terminal{(} expression-list\opt{} \terminal{)}\br
-    typename-specifier \terminal{(} expression-list\opt{} \terminal{)}\br
+    postfix-expression \terminal{(} \opt{expression-list} \terminal{)}\br
+    simple-type-specifier \terminal{(} \opt{expression-list} \terminal{)}\br
+    typename-specifier \terminal{(} \opt{expression-list} \terminal{)}\br
     simple-type-specifier braced-init-list\br
     typename-specifier braced-init-list\br
-    postfix-expression \terminal{. template}\opt{} id-expression\br
-    postfix-expression \terminal{-> template}\opt{} id-expression\br
+    postfix-expression \opt{\terminal{. template}} id-expression\br
+    postfix-expression \opt{\terminal{-> template}} id-expression\br
     postfix-expression \terminal{.} pseudo-destructor-name\br
     postfix-expression \terminal{->} pseudo-destructor-name\br
     postfix-expression \terminal{++}\br
@@ -1472,7 +1472,7 @@ Postfix expressions group left-to-right.
 
 \begin{bnf}
 \nontermdef{pseudo-destructor-name}\br
-    nested-name-specifier\opt{} type-name \terminal{::\,\tilde} type-name\br
+    \opt{nested-name-specifier} type-name \terminal{::\,\tilde} type-name\br
     nested-name-specifier \terminal{template} simple-template-id \terminal{::\,\tilde} type-name\br
     \terminal{\tilde} type-name\br
     \terminal{\tilde} decltype-specifier
@@ -1809,7 +1809,7 @@ the two \grammarterm{type-name}{s} in a \grammarterm{pseudo-destructor-name} of
 the form
 
 \begin{ncbnf}
-nested-name-specifier\opt{} type-name \terminal{::\,\tilde} type-name
+\opt{nested-name-specifier} type-name \terminal{::\,\tilde} type-name
 \end{ncbnf}
 
 shall designate the same scalar type (ignoring cv-qualification).
@@ -1916,7 +1916,7 @@ member function. The type of \tcode{E1.E2} is the same type as that of
 
 \item Otherwise, if \tcode{E1.E2} refers to a non-static member
 function and the type of \tcode{E2} is ``function of
-parameter-type-list \cvqual{cv} \grammarterm{ref-qualifier}\opt{} returning \tcode{T}'', then
+parameter-type-list \cvqual{cv} \opt{\grammarterm{ref-qualifier}} returning \tcode{T}'', then
 \tcode{E1.E2} is a prvalue. The expression designates a
 non-static member function. The expression can be used only as the
 left-hand operand of a member function call~(\ref{class.mfct}).
@@ -3030,8 +3030,8 @@ object created by the \grammarterm{new-expression} has a cv-qualified type.
 
 \begin{bnf}
 \nontermdef{new-expression}\br
-    \terminal{::}\opt{} \terminal{new} new-placement\opt{} new-type-id new-initializer\opt{} \br
-    \terminal{::}\opt{} \terminal{new} new-placement\opt{} \terminal{(} type-id \terminal{)} new-initializer\opt{}
+    \opt{\terminal{::}} \terminal{new} \opt{new-placement} new-type-id \opt{new-initializer} \br
+    \opt{\terminal{::}} \terminal{new} \opt{new-placement} \terminal{(} type-id \terminal{)} \opt{new-initializer}
 \end{bnf}
 
 \indextext{\idxcode{new}!storage allocation}%
@@ -3043,24 +3043,24 @@ object created by the \grammarterm{new-expression} has a cv-qualified type.
 
 \begin{bnf}
 \nontermdef{new-type-id}\br
-    type-specifier-seq new-declarator\opt{}
+    type-specifier-seq \opt{new-declarator}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{new-declarator}\br
-    ptr-operator new-declarator\opt{} \br
+    ptr-operator \opt{new-declarator} \br
     noptr-new-declarator
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{noptr-new-declarator}\br
-    \terminal{[} expression \terminal{]} attribute-specifier-seq\opt{}\br
-    noptr-new-declarator \terminal{[} constant-expression \terminal{]} attribute-specifier-seq\opt{}
+    \terminal{[} expression \terminal{]} \opt{attribute-specifier-seq}\br
+    noptr-new-declarator \terminal{[} constant-expression \terminal{]} \opt{attribute-specifier-seq}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{new-initializer}\br
-    \terminal{(} expression-list\opt{} \terminal{)}\br
+    \terminal{(} \opt{expression-list} \terminal{)}\br
     braced-init-list
 \end{bnf}
 
@@ -3568,8 +3568,8 @@ object~(\ref{intro.object}) or array created by a
 
 \begin{bnf}
 \nontermdef{delete-expression}\br
-    \terminal{::}\opt{} \terminal{delete} cast-expression\br
-    \terminal{::}\opt{} \terminal{delete [ ]} cast-expression
+    \opt{\terminal{::}} \terminal{delete} cast-expression\br
+    \opt{\terminal{::}} \terminal{delete [ ]} cast-expression
 \end{bnf}
 
 The first alternative is for non-array objects, and the second is for arrays. Whenever
@@ -4702,7 +4702,7 @@ that type and the other is a null pointer constant. The result is of type
 %
 \begin{bnf}
 \nontermdef{throw-expression}\br
-    \terminal{throw}  assignment-expression\opt{}
+    \terminal{throw}  \opt{assignment-expression}
 \end{bnf}
 
 \pnum
diff --git a/source/intro.tex b/source/intro.tex
index b93febc..5bce180 100644
--- a/source/intro.tex
+++ b/source/intro.tex
@@ -463,7 +463,7 @@ An optional terminal or non-terminal symbol is indicated by the subscript
 ``\opt{}'', so
 
 \begin{ncbnf}
-\terminal{\{} expression\opt{} \terminal{\}}
+\terminal{\{} \opt{expression} \terminal{\}}
 \end{ncbnf}
 
 indicates an optional expression enclosed in braces.%
diff --git a/source/iostreams.tex b/source/iostreams.tex
index c64be54..4bbee20 100644
--- a/source/iostreams.tex
+++ b/source/iostreams.tex
@@ -10113,8 +10113,8 @@ entry for the file under discussion.
 A sequence of elements that identify
 the location of a file within a filesystem.
 The elements are the
-\grammarterm{root-name}\opt{},
-\grammarterm{root-directory}\opt{},
+\opt{\grammarterm{root-name}},
+\opt{\grammarterm{root-directory}},
 and an optional sequence of filenames.
 The maximum number of elements in the sequence is operating system dependent.
 
@@ -10651,7 +10651,7 @@ any operating system dependent \grammarterm{root-name}{s}}}
 
 \begin{ncbnf}
 \nontermdef{pathname}\br
-    root-name\opt{} root-directory\opt{} relative-path
+    \opt{root-name} \opt{root-directory} relative-path
 \end{ncbnf}
 
 \begin{ncbnf}
@@ -10679,8 +10679,8 @@ any operating system dependent \grammarterm{root-name}{s}}}
 
 \begin{ncbnf}
 \nontermdef{directory-separator}\br
-    preferred-separator directory-separator\opt\br
-    fallback-separator directory-separator\opt
+    preferred-separator \opt{directory-separator}\br
+    fallback-separator \opt{directory-separator}
 \end{ncbnf}
 
 \begin{ncbnf}
diff --git a/source/lex.tex b/source/lex.tex
index 3fd1fd0..2f46bd9 100644
--- a/source/lex.tex
+++ b/source/lex.tex
@@ -302,7 +302,7 @@ parenthesis is identified. The raw string literal is defined as the shortest seq
 of characters that matches the raw-string pattern
 
 \begin{ncbnf}
-encoding-prefix\opt{} \terminal{R} raw-string
+\opt{encoding-prefix} \terminal{R} raw-string
 \end{ncbnf}
 
 \item Otherwise, if the next three characters are \tcode{<::} and the subsequent character
@@ -836,29 +836,29 @@ ISO C. }
 \indextext{literal!integer}%
 \begin{bnf}
 \nontermdef{integer-literal}\br
-    binary-literal integer-suffix\opt{}\br
-    octal-literal integer-suffix\opt{}\br
-    decimal-literal integer-suffix\opt{}\br
-    hexadecimal-literal integer-suffix\opt{}
+    binary-literal \opt{integer-suffix}\br
+    octal-literal \opt{integer-suffix}\br
+    decimal-literal \opt{integer-suffix}\br
+    hexadecimal-literal \opt{integer-suffix}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{binary-literal}\br
     \terminal{0b} binary-digit\br
     \terminal{0B} binary-digit\br
-    binary-literal \terminal{'}\opt{} binary-digit
+    binary-literal \opt{\terminal{'}} binary-digit
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{octal-literal}\br
     \terminal{0}\br
-    octal-literal \terminal{'}\opt{} octal-digit
+    octal-literal \opt{\terminal{'}} octal-digit
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{decimal-literal}\br
     nonzero-digit\br
-    decimal-literal \terminal{'}\opt{} digit
+    decimal-literal \opt{\terminal{'}} digit
 \end{bnf}
 
 \begin{bnf}
@@ -890,7 +890,7 @@ ISO C. }
 \begin{bnf}
 \nontermdef{hexadecimal-digit-sequence}\br
     hexadecimal-digit\br
-    hexadecimal-digit-sequence \terminal{'}\opt{} hexadecimal-digit
+    hexadecimal-digit-sequence \opt{\terminal{'}} hexadecimal-digit
 \end{bnf}
 
 \begin{bnf}
@@ -902,10 +902,10 @@ ISO C. }
 
 \begin{bnf}
 \nontermdef{integer-suffix}\br
-    unsigned-suffix long-suffix\opt{} \br
-    unsigned-suffix long-long-suffix\opt{} \br
-    long-suffix unsigned-suffix\opt{} \br
-    long-long-suffix unsigned-suffix\opt{}
+    unsigned-suffix \opt{long-suffix} \br
+    unsigned-suffix \opt{long-long-suffix} \br
+    long-suffix \opt{unsigned-suffix} \br
+    long-long-suffix \opt{unsigned-suffix}
 \end{bnf}
 
 \begin{bnf}
@@ -1049,7 +1049,7 @@ that cannot be represented by any of the allowed types.
 \indextext{literal!character}%
 \begin{bnf}
 \nontermdef{character-literal}\br
-    encoding-prefix\opt{} \terminal{'} c-char-sequence \terminal{'}
+    \opt{encoding-prefix} \terminal{'} c-char-sequence \terminal{'}
 \end{bnf}
 
 \begin{bnf}
@@ -1283,38 +1283,38 @@ so long as the same results are obtained. \end{note}
 
 \begin{bnf}
 \nontermdef{decimal-floating-literal}\br
-    fractional-constant exponent-part\opt{} floating-suffix\opt{}\br
-    digit-sequence exponent-part floating-suffix\opt{}
+    fractional-constant \opt{exponent-part} \opt{floating-suffix}\br
+    digit-sequence exponent-part \opt{floating-suffix}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{hexadecimal-floating-literal}\br
-    hexadecimal-prefix hexadecimal-fractional-constant binary-exponent-part floating-suffix\opt{}\br
-    hexadecimal-prefix hexadecimal-digit-sequence binary-exponent-part floating-suffix\opt{}
+    hexadecimal-prefix hexadecimal-fractional-constant binary-exponent-part \opt{floating-suffix}\br
+    hexadecimal-prefix hexadecimal-digit-sequence binary-exponent-part \opt{floating-suffix}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{fractional-constant}\br
-    digit-sequence\opt{} \terminal{.} digit-sequence\br
+    \opt{digit-sequence} \terminal{.} digit-sequence\br
     digit-sequence \terminal{.}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{hexadecimal-fractional-constant}\br
-    hexadecimal-digit-sequence\opt{} \terminal{.} hexadecimal-digit-sequence\br
+    \opt{hexadecimal-digit-sequence} \terminal{.} hexadecimal-digit-sequence\br
     hexadecimal-digit-sequence \terminal{.}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{exponent-part}\br
-    \terminal{e} sign\opt{} digit-sequence\br
-    \terminal{E} sign\opt{} digit-sequence
+    \terminal{e} \opt{sign} digit-sequence\br
+    \terminal{E} \opt{sign} digit-sequence
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{binary-exponent-part}\br
-    \terminal{p} sign\opt{} digit-sequence\br
-    \terminal{P} sign\opt{} digit-sequence
+    \terminal{p} \opt{sign} digit-sequence\br
+    \terminal{P} \opt{sign} digit-sequence
 \end{bnf}
 
 \begin{bnf}
@@ -1325,7 +1325,7 @@ so long as the same results are obtained. \end{note}
 \begin{bnf}
 \nontermdef{digit-sequence}\br
     digit\br
-    digit-sequence \terminal{'}\opt{} digit
+    digit-sequence \opt{\terminal{'}} digit
 \end{bnf}
 
 \begin{bnf}
@@ -1396,8 +1396,8 @@ values for its type, the program is ill-formed.
 \indextext{literal!string}%
 \begin{bnf}
 \nontermdef{string-literal}\br
-    encoding-prefix\opt{} \terminal{"} s-char-sequence\opt{} \terminal{"}\br
-    encoding-prefix\opt{} \terminal{R} raw-string
+    \opt{encoding-prefix} \terminal{"} \opt{s-char-sequence} \terminal{"}\br
+    \opt{encoding-prefix} \terminal{R} raw-string
 \end{bnf}
 
 \begin{bnf}
@@ -1416,7 +1416,7 @@ values for its type, the program is ill-formed.
 
 \begin{bnf}
 \nontermdef{raw-string}\br
-    \terminal{"} d-char-sequence\opt{} \terminal{(} r-char-sequence\opt{} \terminal{)} d-char-sequence\opt{} \terminal{"}
+    \terminal{"} \opt{d-char-sequence} \terminal{(} \opt{r-char-sequence} \terminal{)} \opt{d-char-sequence} \terminal{"}
 \end{bnf}
 
 \begin{bnf}
@@ -1744,7 +1744,7 @@ and~\ref{conv.mem}.
 
 \begin{bnf}
 \nontermdef{user-defined-floating-literal}\br
-    fractional-constant exponent-part\opt{} ud-suffix\br
+    fractional-constant \opt{exponent-part} ud-suffix\br
     digit-sequence exponent-part ud-suffix\br
     hexadecimal-prefix hexadecimal-fractional-constant binary-exponent-part ud-suffix\br
     hexadecimal-prefix hexadecimal-digit-sequence binary-exponent-part ud-suffix
diff --git a/source/macros.tex b/source/macros.tex
index 35098e0..2bed94c 100644
--- a/source/macros.tex
+++ b/source/macros.tex
@@ -182,7 +182,7 @@
 \newcommand{\CppIII}{\Cpp{} 2003}
 \newcommand{\CppXI}{\Cpp{} 2011}
 \newcommand{\CppXIV}{\Cpp{} 2014}
-\newcommand{\opt}{{\ensuremath{_\mathit{opt}}}}
+\newcommand{\opt}[1]{#1{\ensuremath{_\mathit{opt}}}}
 \newcommand{\dcr}{-{-}}
 \newcommand{\bigoh}[1]{\ensuremath{\mathscr{O}(#1)}}
 
diff --git a/source/overloading.tex b/source/overloading.tex
index 86365ab..20c4386 100644
--- a/source/overloading.tex
+++ b/source/overloading.tex
@@ -645,7 +645,7 @@ contexts.
 In a function call~(\ref{expr.call})
 
 \begin{ncsimplebnf}
-postfix-expression \terminal{(} expression-list\opt{} \terminal{)}
+postfix-expression \terminal{(} \opt{expression-list} \terminal{)}
 \end{ncsimplebnf}
 
 if the \grammarterm{postfix-expression} denotes a set of overloaded functions and/or
@@ -814,7 +814,7 @@ In addition, for each non-explicit conversion function declared in \tcode{T} of
 form
 
 \begin{ncsimplebnf}
-\terminal{operator} conversion-type-id \terminal{(\,)} cv-qualifier ref-qualifier\opt{} noexcept-specifier\opt{} attribute-specifier-seq\opt{} \terminal{;}
+\terminal{operator} conversion-type-id \terminal{(\,)} cv-qualifier \opt{ref-qualifier} \opt{noexcept-specifier} \opt{attribute-specifier-seq} \terminal{;}
 \end{ncsimplebnf}
 
 where
@@ -3159,7 +3159,7 @@ It can have default arguments.
 It implements the function call syntax
 
 \begin{ncsimplebnf}
-postfix-expression \terminal{(} expression-list\opt{} \terminal{)}
+postfix-expression \terminal{(} \opt{expression-list} \terminal{)}
 \end{ncsimplebnf}
 
 where the
@@ -3232,7 +3232,7 @@ It implements the class member access syntax that
 uses \tcode{->}.
 
 \begin{ncsimplebnf}
-postfix-expression \terminal{->} \terminal{template\opt{}} id-expression\\
+postfix-expression \terminal{->} \terminal{\opt{template}} id-expression\\
 postfix-expression \terminal{->} pseudo-destructor-name
 \end{ncsimplebnf}
 
diff --git a/source/preprocessor.tex b/source/preprocessor.tex
index b669f5b..a5fb356 100644
--- a/source/preprocessor.tex
+++ b/source/preprocessor.tex
@@ -30,7 +30,7 @@ within what would otherwise be an invocation of a function-like macro.
 
 \begin{bnf}
 \nontermdef{preprocessing-file}\br
-    group\opt{}
+    \opt{group}
 \end{bnf}
 
 \begin{bnf}
@@ -51,26 +51,26 @@ within what would otherwise be an invocation of a function-like macro.
 \nontermdef{control-line}\br
 \>\terminal{\# include}\>\>pp-tokens new-line\br
 \>\terminal{\# define}\>\>identifier replacement-list new-line\br
-\>\terminal{\# define}\>\>identifier lparen identifier-list\opt{} \terminal{)} replacement-list new-line\br
+\>\terminal{\# define}\>\>identifier lparen \opt{identifier-list} \terminal{)} replacement-list new-line\br
 \>\terminal{\# define}\>\>identifier lparen \terminal{... )} replacement-list new-line\br
 \>\terminal{\# define}\>\>identifier lparen identifier-list \terminal{, ... )} replacement-list new-line\br
 \>\terminal{\# undef}\>\>identifier new-line\br
 \>\terminal{\# line}\>\>pp-tokens new-line\br
-\>\terminal{\# error}\>\>pp-tokens\opt{} new-line\br
-\>\terminal{\# pragma}\>\>pp-tokens\opt{} new-line\br
+\>\terminal{\# error}\>\>\opt{pp-tokens} new-line\br
+\>\terminal{\# pragma}\>\>\opt{pp-tokens} new-line\br
 \>\terminal{\# }new-line
 \end{bnftab}
 
 \begin{bnf}
 \nontermdef{if-section}\br
-    if-group elif-groups\opt{} else-group\opt{} endif-line
+    if-group \opt{elif-groups} \opt{else-group} endif-line
 \end{bnf}
 
 \begin{bnftab}
 \nontermdef{if-group}\br
-\>\terminal{\# if}\>\>constant-expression new-line group\opt{}\br
-\>\terminal{\# ifdef}\>\>identifier new-line group\opt{}\br
-\>\terminal{\# ifndef}\>\>identifier new-line group\opt{}
+\>\terminal{\# if}\>\>constant-expression new-line \opt{group}\br
+\>\terminal{\# ifdef}\>\>identifier new-line \opt{group}\br
+\>\terminal{\# ifndef}\>\>identifier new-line \opt{group}
 \end{bnftab}
 
 \begin{bnf}
@@ -81,12 +81,12 @@ within what would otherwise be an invocation of a function-like macro.
 
 \begin{bnftab}
 \nontermdef{elif-group}\br
-\>\terminal{\# elif}\>\>constant-expression new-line group\opt{}
+\>\terminal{\# elif}\>\>constant-expression new-line \opt{group}
 \end{bnftab}
 
 \begin{bnftab}
 \nontermdef{else-group}\br
-\>\terminal{\# else}\>\>new-line group\opt{}
+\>\terminal{\# else}\>\>new-line \opt{group}
 \end{bnftab}
 
 \begin{bnftab}
@@ -96,7 +96,7 @@ within what would otherwise be an invocation of a function-like macro.
 
 \begin{bnf}
 \nontermdef{text-line}\br
-    pp-tokens\opt{} new-line
+    \opt{pp-tokens} new-line
 \end{bnf}
 
 \begin{bnf}
@@ -117,7 +117,7 @@ within what would otherwise be an invocation of a function-like macro.
 
 \begin{bnf}
 \nontermdef{replacement-list}\br
-    pp-tokens\opt{}
+    \opt{pp-tokens}
 \end{bnf}
 
 \begin{bnf}
@@ -274,9 +274,9 @@ Preprocessing directives of the forms
 
 \begin{ncbnftab}
 \indextext{\idxcode{\#if}}%
-\terminal{\# if}\>\>constant-expression new-line group\opt{}\br
+\terminal{\# if}\>\>constant-expression new-line \opt{group}\br
 \indextext{\idxcode{\#elif}}%
-\terminal{\# elif}\>\>constant-expression new-line group\opt{}
+\terminal{\# elif}\>\>constant-expression new-line \opt{group}
 \end{ncbnftab}
 
 check whether the controlling constant expression evaluates to nonzero.
@@ -369,9 +369,9 @@ is subjected to integral promotion before processing continues.
 Preprocessing directives of the forms
 
 \begin{ncbnftab}
-\terminal{\# ifdef}\>\>identifier new-line group\opt{}\br
+\terminal{\# ifdef}\>\>identifier new-line \opt{group}\br
 \indextext{\idxcode{\#ifdef}}%
-\terminal{\# ifndef}\>\>identifier new-line group\opt{}
+\terminal{\# ifndef}\>\>identifier new-line \opt{group}
 \indextext{\idxcode{\#ifndef}}%
 \end{ncbnftab}
 
@@ -685,7 +685,7 @@ specified below.
 \pnum
 A preprocessing directive of the form
 \begin{ncsimplebnf}
-\terminal{\# define} identifier lparen identifier-list\opt{} \terminal{)} replacement-list new-line\br
+\terminal{\# define} identifier lparen \opt{identifier-list} \terminal{)} replacement-list new-line\br
 \terminal{\# define} identifier lparen \terminal{...} \terminal{)} replacement-list new-line\br
 \terminal{\# define} identifier lparen identifier-list \terminal{, ...} \terminal{)} replacement-list new-line
 \end{ncsimplebnf}
@@ -1159,7 +1159,7 @@ the behavior is undefined.
 A preprocessing directive of the form
 
 \begin{ncsimplebnf}
-\terminal{\# line} digit-sequence \terminal{"} s-char-sequence\opt{} \terminal{"} new-line
+\terminal{\# line} digit-sequence \terminal{"} \opt{s-char-sequence} \terminal{"} new-line
 \end{ncsimplebnf}
 
 sets the presumed line number similarly and changes the
@@ -1192,7 +1192,7 @@ otherwise, the result is processed as appropriate.
 A preprocessing directive of the form
 
 \begin{ncsimplebnf}
-\terminal{\# error} pp-tokens\opt{} new-line
+\terminal{\# error} \opt{pp-tokens} new-line
 \end{ncsimplebnf}
 
 causes the implementation to produce
@@ -1207,7 +1207,7 @@ and renders the program ill-formed.
 A preprocessing directive of the form
 
 \begin{ncsimplebnf}
-\terminal{\# pragma} pp-tokens\opt{} new-line
+\terminal{\# pragma} \opt{pp-tokens} new-line
 \end{ncsimplebnf}
 
 causes the implementation to behave
diff --git a/source/special.tex b/source/special.tex
index ab0139f..e69126b 100644
--- a/source/special.tex
+++ b/source/special.tex
@@ -77,7 +77,7 @@ In a declaration of a constructor, the \grammarterm{declarator} is a
 function declarator~(\ref{dcl.fct}) of the form
 
 \begin{ncbnf}
-ptr-declarator \terminal{(} parameter-declaration-clause \terminal{)} noexcept-specifier\opt{} attribute-specifier-seq\opt{}
+ptr-declarator \terminal{(} parameter-declaration-clause \terminal{)} \opt{noexcept-specifier} \opt{attribute-specifier-seq}
 \end{ncbnf}
 
 where the \grammarterm{ptr-declarator} consists solely of an
@@ -812,12 +812,12 @@ A member function of a class \tcode{X} having no parameters with a name of the f
 
 \begin{bnf}
 \nontermdef{conversion-type-id}\br
-    type-specifier-seq conversion-declarator\opt{}
+    type-specifier-seq \opt{conversion-declarator}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{conversion-declarator}\br
-    ptr-operator conversion-declarator\opt{}
+    ptr-operator \opt{conversion-declarator}
 \end{bnf}
 
 specifies a conversion from
@@ -941,7 +941,7 @@ In a declaration of a destructor, the \grammarterm{declarator} is a
 function declarator~(\ref{dcl.fct}) of the form
 
 \begin{ncbnf}
-ptr-declarator \terminal{(} parameter-declaration-clause \terminal{)} noexcept-specifier\opt{} attribute-specifier-seq\opt{}
+ptr-declarator \terminal{(} parameter-declaration-clause \terminal{)} \opt{noexcept-specifier} \opt{attribute-specifier-seq}
 \end{ncbnf}
 
 where the \grammarterm{ptr-declarator} consists solely of an
@@ -1592,13 +1592,13 @@ which has the form
 
 \begin{bnf}
 \nontermdef{mem-initializer-list}\br
-    mem-initializer \terminal{...}\opt{}\br
-    mem-initializer-list \terminal{,} mem-initializer \terminal{...}\opt{}
+    mem-initializer \opt{\terminal{...}}\br
+    mem-initializer-list \terminal{,} mem-initializer \opt{\terminal{...}}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{mem-initializer}\br
-    mem-initializer-id \terminal{(} expression-list\opt{} \terminal{)}\br
+    mem-initializer-id \terminal{(} \opt{expression-list} \terminal{)}\br
     mem-initializer-id braced-init-list
 \end{bnf}
 
diff --git a/source/statements.tex b/source/statements.tex
index 45f5fb2..5586e1a 100644
--- a/source/statements.tex
+++ b/source/statements.tex
@@ -12,13 +12,13 @@ Except as indicated, statements are executed in sequence.
 \begin{bnf}
 \nontermdef{statement}\br
     labeled-statement\br
-    attribute-specifier-seq\opt{} expression-statement\br
-    attribute-specifier-seq\opt{} compound-statement\br
-    attribute-specifier-seq\opt{} selection-statement\br
-    attribute-specifier-seq\opt{} iteration-statement\br
-    attribute-specifier-seq\opt{} jump-statement\br
+    \opt{attribute-specifier-seq} expression-statement\br
+    \opt{attribute-specifier-seq} compound-statement\br
+    \opt{attribute-specifier-seq} selection-statement\br
+    \opt{attribute-specifier-seq} iteration-statement\br
+    \opt{attribute-specifier-seq} jump-statement\br
     declaration-statement\br
-    attribute-specifier-seq\opt{} try-block
+    \opt{attribute-specifier-seq} try-block
 
 \nontermdef{init-statement}\br
     expression-statement\br
@@ -26,7 +26,7 @@ Except as indicated, statements are executed in sequence.
 
 \nontermdef{condition}\br
     expression\br
-    attribute-specifier-seq\opt{} decl-specifier-seq declarator brace-or-equal-initializer
+    \opt{attribute-specifier-seq} decl-specifier-seq declarator brace-or-equal-initializer
 \end{bnf}
 
 The optional \grammarterm{attribute-specifier-seq} appertains to the respective statement.
@@ -102,9 +102,9 @@ A statement can be labeled.
 
 \begin{bnf}
 \nontermdef{labeled-statement}\br
-    attribute-specifier-seq\opt{} identifier \terminal{:} statement\br
-    attribute-specifier-seq\opt{} \terminal{case} constant-expression \terminal{:} statement\br
-    attribute-specifier-seq\opt{} \terminal{default :} statement
+    \opt{attribute-specifier-seq} identifier \terminal{:} statement\br
+    \opt{attribute-specifier-seq} \terminal{case} constant-expression \terminal{:} statement\br
+    \opt{attribute-specifier-seq} \terminal{default :} statement
 \end{bnf}
 
 The optional \grammarterm{attribute-specifier-seq} appertains to the label. An
@@ -139,7 +139,7 @@ Expression statements have the form
 
 \begin{bnf}
 \nontermdef{expression-statement}\br
-    expression\opt{} \terminal{;}
+    \opt{expression} \terminal{;}
 \end{bnf}
 
 The expression is
@@ -171,7 +171,7 @@ provided.
 
 \begin{bnf}
 \nontermdef{compound-statement}\br
-    \terminal{\{} statement-seq\opt{} \terminal{\}}
+    \terminal{\{} \opt{statement-seq} \terminal{\}}
 \end{bnf}
 
 \begin{bnf}
@@ -196,9 +196,9 @@ Selection statements choose one of several flows of control.
 %
 \begin{bnf}
 \nontermdef{selection-statement}\br
-    \terminal{if constexpr\opt{} (} init-statement\opt{} condition \terminal{)} statement\br
-    \terminal{if constexpr\opt{} (} init-statement\opt{} condition \terminal{)} statement \terminal{else} statement\br
-    \terminal{switch (} init-statement\opt{} condition \terminal{)} statement
+    \terminal{if \opt{constexpr} (} \opt{init-statement} condition \terminal{)} statement\br
+    \terminal{if \opt{constexpr} (} \opt{init-statement} condition \terminal{)} statement \terminal{else} statement\br
+    \terminal{switch (} \opt{init-statement} condition \terminal{)} statement
 \end{bnf}
 
 See~\ref{dcl.meaning} for the optional \grammarterm{attribute-specifier-seq} in a condition.
@@ -295,7 +295,7 @@ int f() {
 An \tcode{if} statement of the form
 
 \begin{ncbnf}
-\terminal{if constexpr\opt{} (} init-statement condition \terminal{)} statement
+\terminal{if \opt{constexpr} (} init-statement condition \terminal{)} statement
 \end{ncbnf}
 
 is equivalent to
@@ -303,14 +303,14 @@ is equivalent to
 \begin{ncbnftab}
 \terminal{\{}\br
 \>init-statement\br
-\>\terminal{if constexpr\opt{} (} condition \terminal{)} statement\br
+\>\terminal{if \opt{constexpr} (} condition \terminal{)} statement\br
 \terminal{\}}
 \end{ncbnftab}
 
 and an \tcode{if} statement of the form
 
 \begin{ncbnf}
-\terminal{if constexpr\opt{} (} init-statement condition \terminal{)} statement \terminal{else} statement
+\terminal{if \opt{constexpr} (} init-statement condition \terminal{)} statement \terminal{else} statement
 \end{ncbnf}
 
 is equivalent to
@@ -318,7 +318,7 @@ is equivalent to
 \begin{ncbnftab}
 \terminal{\{}\br
 \>init-statement\br
-\>\terminal{if constexpr\opt{} (} condition \terminal{)} statement \terminal{else} statement\br
+\>\terminal{if \opt{constexpr} (} condition \terminal{)} statement \terminal{else} statement\br
 \terminal{\}}
 \end{ncbnftab}
 
@@ -430,14 +430,14 @@ Iteration statements specify looping.
 \nontermdef{iteration-statement}\br
     \terminal{while (} condition \terminal{)} statement\br
     \terminal{do} statement \terminal{while (} expression \terminal{) ;}\br
-    \terminal{for (} init-statement condition\opt{} \terminal{;} expression\opt{} \terminal{)} statement\br
+    \terminal{for (} init-statement \opt{condition} \terminal{;} \opt{expression} \terminal{)} statement\br
     \terminal{for (} for-range-declaration \terminal{:} for-range-initializer \terminal{)} statement
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{for-range-declaration}\br
-    attribute-specifier-seq\opt{} decl-specifier-seq declarator\br
-    attribute-specifier-seq\opt{} decl-specifier-seq ref-qualifier\opt{} \terminal{[} identifier-list \terminal{]}
+    \opt{attribute-specifier-seq} decl-specifier-seq declarator\br
+    \opt{attribute-specifier-seq} decl-specifier-seq \opt{ref-qualifier} \terminal{[} identifier-list \terminal{]}
 \end{bnf}
 
 \begin{bnf}
@@ -568,7 +568,7 @@ place after each execution of the statement.
 The \tcode{for} statement
 
 \begin{ncbnf}
-\terminal{for (} init-statement condition\opt{} \terminal{;} expression\opt{} \terminal{)} statement
+\terminal{for (} init-statement \opt{condition} \terminal{;} \opt{expression} \terminal{)} statement
 \end{ncbnf}
 
 is equivalent to
@@ -716,7 +716,7 @@ Jump statements unconditionally transfer control.
 \nontermdef{jump-statement}\br
     \terminal{break ;}\br
     \terminal{continue ;}\br
-    \terminal{return} expr-or-braced-init-list\opt{} \terminal{;}\br
+    \terminal{return} \opt{expr-or-braced-init-list} \terminal{;}\br
     \terminal{goto} identifier \terminal{;}
 \end{bnf}
 
diff --git a/source/templates.tex b/source/templates.tex
index 5abe7a5..d6ff7bf 100644
--- a/source/templates.tex
+++ b/source/templates.tex
@@ -178,10 +178,10 @@ is:
 
 \begin{bnf}
 \nontermdef{type-parameter}\br
-  type-parameter-key \terminal{...}\opt{} identifier\opt{}\br
-  type-parameter-key identifier\opt{} \terminal{=} type-id\br
-  \terminal{template <} template-parameter-list \terminal{>} type-parameter-key \terminal{...}\opt{} identifier\opt{}\br
-  \terminal{template <} template-parameter-list \terminal{>} type-parameter-key identifier\opt{} \terminal{=} id-expression
+  type-parameter-key \opt{\terminal{...}} \opt{identifier}\br
+  type-parameter-key \opt{identifier} \terminal{=} type-id\br
+  \terminal{template <} template-parameter-list \terminal{>} type-parameter-key \opt{\terminal{...}} \opt{identifier}\br
+  \terminal{template <} template-parameter-list \terminal{>} type-parameter-key \opt{identifier} \terminal{=} id-expression
 \end{bnf}
 
 \begin{bnf}
@@ -555,14 +555,14 @@ A template specialization~(\ref{temp.spec}) can be referred to by a
 
 \begin{bnf}
 \nontermdef{simple-template-id}\br
-  template-name \terminal{<} template-argument-list\opt{} \terminal{>}
+  template-name \terminal{<} \opt{template-argument-list} \terminal{>}
 \end{bnf}
 
 \begin{bnf}
 \nontermdef{template-id}\br
   simple-template-id\br
-  operator-function-id \terminal{<} template-argument-list\opt{} \terminal{>}\br
-  literal-operator-id \terminal{<} template-argument-list\opt{} \terminal{>}
+  operator-function-id \terminal{<} \opt{template-argument-list} \terminal{>}\br
+  literal-operator-id \terminal{<} \opt{template-argument-list} \terminal{>}
 \end{bnf}
 
 \begin{bnf}
@@ -572,8 +572,8 @@ A template specialization~(\ref{temp.spec}) can be referred to by a
 
 \begin{bnf}
 \nontermdef{template-argument-list}\br
-  template-argument \terminal{...}\opt{}\br
-  template-argument-list \terminal{,} template-argument \terminal{...}\opt{}
+  template-argument \opt{\terminal{...}}\br
+  template-argument-list \terminal{,} template-argument \opt{\terminal{...}}
 \end{bnf}
 
 \begin{bnf}
@@ -3040,7 +3040,7 @@ the program is ill-formed.
 \begin{bnf}
 \nontermdef{typename-specifier}\br
   \terminal{typename} nested-name-specifier identifier\br
-  \terminal{typename} nested-name-specifier \terminal{template\opt{}} simple-template-id
+  \terminal{typename} nested-name-specifier \terminal{\opt{template}} simple-template-id
 \end{bnf}
 
 \pnum
@@ -3563,7 +3563,7 @@ as described in this subclause.
 In an expression of the form:
 
 \begin{ncbnftab}
-postfix-expression \terminal{(} expression-list\opt{} \terminal{)}
+postfix-expression \terminal{(} \opt{expression-list} \terminal{)}
 \end{ncbnftab}
 
 where the
@@ -4061,9 +4061,9 @@ or
 is dependent, even if any subexpression is type-dependent:
 
 \begin{ncbnftab}
-simple-type-specifier \terminal{(} expression-list\opt{} \terminal{)}\br
-\terminal{::\opt{} new} new-placement\opt{} new-type-id new-initializer\opt{}\br
-\terminal{::\opt{} new} new-placement\opt{} \terminal{(} type-id \terminal{)} new-initializer\opt{}\br
+simple-type-specifier \terminal{(} \opt{expression-list} \terminal{)}\br
+\terminal{\opt{::} new} \opt{new-placement} new-type-id \opt{new-initializer}\br
+\terminal{\opt{::} new} \opt{new-placement} \terminal{(} type-id \terminal{)} \opt{new-initializer}\br
 \terminal{dynamic_cast <} type-id \terminal{> (} expression \terminal{)}\br
 \terminal{static_cast <} type-id \terminal{> (} expression \terminal{)}\br
 \terminal{const_cast <} type-id \terminal{> (} expression \terminal{)}\br
@@ -4085,9 +4085,9 @@ postfix-expression \terminal{->} pseudo-destructor-name\br
 \terminal{alignof (} type-id \terminal{)}\br
 \terminal{typeid (} expression \terminal{)}\br
 \terminal{typeid (} type-id \terminal{)}\br
-\terminal{::\opt{} delete} cast-expression\br
-\terminal{::\opt{} delete [ ]} cast-expression\br
-\terminal{throw} assignment-expression\opt{}\br
+\terminal{\opt{::} delete} cast-expression\br
+\terminal{\opt{::} delete [ ]} cast-expression\br
+\terminal{throw} \opt{assignment-expression}\br
 \terminal{noexcept} \terminal{(} expression \terminal{)}
 \end{ncbnftab}
 
@@ -4192,7 +4192,7 @@ or
 is value-dependent:
 
 \begin{ncbnftab}
-simple-type-specifier \terminal{(} expression-list\opt{} \terminal{)}\br
+simple-type-specifier \terminal{(} \opt{expression-list} \terminal{)}\br
 \terminal{static_cast <} type-id \terminal{> (} expression \terminal{)}\br
 \terminal{const_cast <} type-id \terminal{> (} expression \terminal{)}\br
 \terminal{reinterpret_cast <} type-id \terminal{> (} expression \terminal{)}\br
@@ -4880,7 +4880,7 @@ The syntax for explicit instantiation is:
 
 \begin{bnf}
 \nontermdef{explicit-instantiation}\br
-  \terminal{extern\opt{}} \terminal{template} declaration
+  \terminal{\opt{extern}} \terminal{template} declaration
 \end{bnf}
 
 There are two forms of explicit instantiation: an explicit instantiation
@@ -7600,7 +7600,7 @@ any deduction guides declared for the class template are considered.
 
 \begin{bnf}
 \nontermdef{deduction-guide}\br
-    \terminal{explicit}\opt{} template-name \terminal{(} parameter-declaration-clause \terminal{) ->} simple-template-id \terminal{;}
+    \opt{\terminal{explicit}} template-name \terminal{(} parameter-declaration-clause \terminal{) ->} simple-template-id \terminal{;}
 \end{bnf}
 
 \pnum
diff --git a/source/utilities.tex b/source/utilities.tex
index d2c3e4e..f32ccec 100644
--- a/source/utilities.tex
+++ b/source/utilities.tex
@@ -14676,7 +14676,7 @@ template<class F> function(F) -> function<@\seebelow@>;
 \remarks This deduction guide participates in overload resolution only if
 \tcode{\&F::operator()} is well-formed when treated as an unevaluated operand.
 In that case, if \tcode{decltype(\&F::operator())} is of the form
-\tcode{R(G::*)(A...)}~\cv{}~\tcode{\&\opt{}~noexcept\opt}
+\tcode{R(G::*)(A...)}~\cv{}~\tcode{\&\opt{}~\opt{noexcept}}
 for a class type \tcode{G}, then the deduced type is \tcode{function<R(A...)>}.
 
 \pnum
-- 
2.7.4


From 35a7491a91bade1eb8652289db0a49c256b42bab Mon Sep 17 00:00:00 2001
From: Jens Maurer <Jens.Maurer@gmx.net>
Date: Tue, 7 Feb 2017 10:46:43 +0100
Subject: [PATCH 14/45] manual fixes for \opt{} removal

---
 source/declarations.tex | 2 +-
 source/declarators.tex  | 8 ++++----
 source/expressions.tex  | 4 ++--
 3 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/source/declarations.tex b/source/declarations.tex
index 07e70e1..c234e89 100644
--- a/source/declarations.tex
+++ b/source/declarations.tex
@@ -1282,7 +1282,7 @@ is a placeholder for
 a type to be deduced~(\ref{dcl.spec.auto}).
 \indextext{deduction!class template arguments}%
 A \grammarterm{type-specifier} of the form
-\tcode{typename}\opt{} \grammarterm{nested-name-specifier}\opt{} \grammarterm{template-name}
+\opt{\tcode{typename}} \opt{\grammarterm{nested-name-specifier}} \grammarterm{template-name}
 is a placeholder for
 a deduced class type~(\ref{dcl.type.class.deduct}).
 The \grammarterm{template-name} shall name a class template
diff --git a/source/declarators.tex b/source/declarators.tex
index 831fabd..5beb8cc 100644
--- a/source/declarators.tex
+++ b/source/declarators.tex
@@ -1253,7 +1253,7 @@ in
 \tcode{D}
 is
 ``\placeholder{derived-declarator-type-list}
-\tcode{noexcept}\opt{}
+\opt{\tcode{noexcept}}
 function of
 (\grammarterm{parameter-declaration-clause})
 \opt{\grammarterm{cv-qualifier-seq}} \opt{\grammarterm{ref-qualifier}}
@@ -1291,10 +1291,10 @@ in
 \tcode{D}
 is
 ``\placeholder{derived-declarator-type-list}
-\tcode{noexcept}\opt{}
+\opt{\tcode{noexcept}}
 function of
 (\grammarterm{parameter-declaration-clause})
-\grammarterm{cv-qualifier-seq}\opt{} \grammarterm{ref-qualifier}\opt{}
+\opt{\grammarterm{cv-qualifier-seq}} \opt{\grammarterm{ref-qualifier}}
 returning \tcode{U}'',
 where \tcode{U} is the type specified by
 the \grammarterm{trailing-return-type}, and
@@ -2424,7 +2424,7 @@ the initialization of return values (\ref{stmt.return}).
 
 \begin{bnf}
 \nontermdef{braced-init-list}\br
-    \terminal{\{} initializer-list \terminal{,\opt{}} \terminal{\}}\br
+    \terminal{\{} initializer-list \opt{\terminal{,}} \terminal{\}}\br
     \terminal{\{} \terminal{\}}
 \end{bnf}
 
diff --git a/source/expressions.tex b/source/expressions.tex
index f1de2cb..3ef1aaa 100644
--- a/source/expressions.tex
+++ b/source/expressions.tex
@@ -960,8 +960,8 @@ named in a \tcode{friend} declaration~(\ref{class.friend}).
 
 \begin{bnf}
 \nontermdef{capture-list}\br
-    capture \terminal{...\opt{}}\br
-    capture-list \terminal{,} capture \terminal{...\opt{}}
+    capture \opt{\terminal{...}}\br
+    capture-list \terminal{,} capture \opt{\terminal{...}}
 \end{bnf}
 
 \begin{bnf}
-- 
2.7.4


From 5955b02214e32fd817c59725fdd682444523e0ec Mon Sep 17 00:00:00 2001
From: Jens Maurer <Jens.Maurer@gmx.net>
Date: Tue, 7 Feb 2017 11:12:22 +0100
Subject: [PATCH 15/45] [rand] Remove non-macro use of \xspace

---
 source/numerics.tex | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/source/numerics.tex b/source/numerics.tex
index 0a21712..2664fcc 100644
--- a/source/numerics.tex
+++ b/source/numerics.tex
@@ -1452,7 +1452,7 @@ Further:
 
 \begin{enumeratea}
  \item
-   the operator \rightshift\xspace
+   the operator \rightshift{}
    denotes a bitwise right shift
    with zero-valued bits appearing in the high bits of the result,
  and
-- 
2.7.4


From 9a4ab6c32ce9a027666b7888dfe33b67278a1b42 Mon Sep 17 00:00:00 2001
From: Jens Maurer <Jens.Maurer@gmx.net>
Date: Tue, 7 Feb 2017 11:10:48 +0100
Subject: [PATCH 16/45] [structure.specifications] Do not use library
 description macros in running text

This avoids colons in running text and some bad spacing.
---
 source/lib-intro.tex | 18 +++++++++---------
 1 file changed, 9 insertions(+), 9 deletions(-)

diff --git a/source/lib-intro.tex b/source/lib-intro.tex
index 5ba9e45..2a09e79 100644
--- a/source/lib-intro.tex
+++ b/source/lib-intro.tex
@@ -492,18 +492,18 @@ preconditions, there will be no \requires paragraph.}
 \end{itemize}
 
 \pnum
-Whenever the \effects element specifies that the semantics of some function
+Whenever the \Fundescx{Effects} element specifies that the semantics of some function
 \tcode{F} are \techterm{Equivalent to} some code sequence, then the various elements are
-interpreted as follows. If \tcode{F}'s semantics specifies a \requires element, then
+interpreted as follows. If \tcode{F}'s semantics specifies a \Fundescx{Requires} element, then
 that requirement is logically imposed prior to the \techterm{equivalent-to} semantics.
-Next, the semantics of the code sequence are determined by the \requires, \effects,
-\sync, \postconditions, \returns, \throws, \complexity, \remarks, and \errors
+Next, the semantics of the code sequence are determined by the \Fundescx{Requires}, \Fundescx{Effects},
+\Fundescx{Synchronization}, \Fundescx{Postconditions}, \Fundescx{Returns}, \Fundescx{Throws}, \Fundescx{Complexity}, \Fundescx{Remarks}, and \Fundescx{Error conditions}
 specified for the function invocations contained in the code sequence. The value
-returned from \tcode{F} is specified by \tcode{F}'s \returns element, or if \tcode{F}
-has no \returns element, a non-\tcode{void} return from \tcode{F} is specified by the
+returned from \tcode{F} is specified by \tcode{F}'s \Fundescx{Returns} element, or if \tcode{F}
+has no \Fundescx{Returns} element, a non-\tcode{void} return from \tcode{F} is specified by the
 \tcode{return} statements in the code sequence.
-If \tcode{F}'s semantics contains a \throws,
-\postconditions, or \complexity element, then that supersedes any occurrences of that
+If \tcode{F}'s semantics contains a \Fundescx{Throws},
+\Fundescx{Postconditions}, or \Fundescx{Complexity} element, then that supersedes any occurrences of that
 element in the code sequence.
 
 \pnum
@@ -540,7 +540,7 @@ constants~(\ref{syserr}).
 \rSec3[structure.see.also]{C library}
 
 \pnum
-Paragraphs labeled ``\xref'' contain cross-references to the relevant portions
+Paragraphs labeled ``\textsc{See also}'' contain cross-references to the relevant portions
 of this International Standard and the ISO C standard.
 
 \rSec2[conventions]{Other conventions}
-- 
2.7.4


From 7c8b7dd5a6fea3d0414c55c56cfefd5a042b8f38 Mon Sep 17 00:00:00 2001
From: Jens Maurer <Jens.Maurer@gmx.net>
Date: Tue, 7 Feb 2017 11:13:32 +0100
Subject: [PATCH 17/45] [macros] Replace \xspace with \space in library
 description macros

---
 source/macros.tex | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/source/macros.tex b/source/macros.tex
index 2bed94c..829021a 100644
--- a/source/macros.tex
+++ b/source/macros.tex
@@ -211,7 +211,7 @@
 
 %% Library function descriptions
 \newcommand{\Fundescx}[1]{\textit{#1}}
-\newcommand{\Fundesc}[1]{\Fundescx{#1:}\xspace}
+\newcommand{\Fundesc}[1]{\Fundescx{#1:}\space}
 \newcommand{\required}{\Fundesc{Required behavior}}
 \newcommand{\requires}{\Fundesc{Requires}}
 \newcommand{\effects}{\Fundesc{Effects}}
@@ -234,7 +234,7 @@
 \newcommand{\templalias}{\Fundesc{Alias template}}
 
 %% Cross reference
-\newcommand{\xref}{\textsc{See also:}\xspace}
+\newcommand{\xref}{\textsc{See also:}\space}
 
 %% NTBS, etc.
 \newcommand{\NTS}[1]{\textsc{#1}}
-- 
2.7.4


From d2e83b160819972477692de30c8c369f3b901566 Mon Sep 17 00:00:00 2001
From: Jens Maurer <Jens.Maurer@gmx.net>
Date: Tue, 7 Feb 2017 11:14:01 +0100
Subject: [PATCH 18/45] [std] Remove unused package 'xspace'

Fixes #1433.
---
 source/std.tex | 1 -
 1 file changed, 1 deletion(-)

diff --git a/source/std.tex b/source/std.tex
index e77b5a1..96c8af3 100644
--- a/source/std.tex
+++ b/source/std.tex
@@ -27,7 +27,6 @@
 \usepackage{mathrsfs}     % mathscr font
 \usepackage[final]{microtype}
 \usepackage{multicol}
-\usepackage{xspace}
 \usepackage{lmodern}
 \usepackage[T1]{fontenc}
 \usepackage[pdftex, final]{graphicx}
-- 
2.7.4


From 48829045afe29d8b3cee9e1210f0723a8c0955a6 Mon Sep 17 00:00:00 2001
From: Jens Maurer <Jens.Maurer@gmx.net>
Date: Wed, 8 Feb 2017 09:17:46 +0100
Subject: [PATCH 19/45] [alg.merge] Add a linebreak hint

to avoid an overfull hbox.
---
 source/algorithms.tex | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/source/algorithms.tex b/source/algorithms.tex
index 2bf8128..21469db 100644
--- a/source/algorithms.tex
+++ b/source/algorithms.tex
@@ -4394,10 +4394,10 @@ sorted with respect to \tcode{oper\-ator<} or \tcode{comp}.
 The resulting range shall not overlap with either of the original ranges.
 
 \pnum
-\effects\ Copies all the elements of the two ranges \range{first1}{last1} and
+\effects Copies all the elements of the two ranges \range{first1}{last1} and
 \range{first2}{last2} into the range \range{result}{result_last}, where \tcode{result_last}
 is \tcode{result + (last1 - first1) + (last2 - first2)}, such that the resulting range satisfies
-\tcode{is_sorted(result, result_last)} or \tcode{is_sorted(result, result_last, comp)}, respectively.
+\tcode{is_sorted(result, result_last)} or \tcode{is_sorted(\brk{}result, result_last, comp)}, respectively.
 
 \pnum
 \returns
-- 
2.7.4


From 3e74e2e0e32fbd2be26af3fb8954ca1b6f1959df Mon Sep 17 00:00:00 2001
From: Jens Maurer <Jens.Maurer@gmx.net>
Date: Wed, 8 Feb 2017 09:18:12 +0100
Subject: [PATCH 20/45] [macros] For references to earlier revisions of C++,
 use \Cpp~2003 etc.

This avoids linebreaks in an unpleaseant location.
---
 source/macros.tex | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/source/macros.tex b/source/macros.tex
index 829021a..a69a162 100644
--- a/source/macros.tex
+++ b/source/macros.tex
@@ -179,9 +179,9 @@
 %%--------------------------------------------------
 %% Macros for funky text
 \newcommand{\Cpp}{\texorpdfstring{C\kern-0.05em\protect\raisebox{.35ex}{\textsmaller[2]{+\kern-0.05em+}}}{C++}}
-\newcommand{\CppIII}{\Cpp{} 2003}
-\newcommand{\CppXI}{\Cpp{} 2011}
-\newcommand{\CppXIV}{\Cpp{} 2014}
+\newcommand{\CppIII}{\Cpp~2003}
+\newcommand{\CppXI}{\Cpp~2011}
+\newcommand{\CppXIV}{\Cpp~2014}
 \newcommand{\opt}[1]{#1{\ensuremath{_\mathit{opt}}}}
 \newcommand{\dcr}{-{-}}
 \newcommand{\bigoh}[1]{\ensuremath{\mathscr{O}(#1)}}
-- 
2.7.4


From 453922e1eea150d7ab0c353a9bde1ffd2ddd19b9 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Tue, 7 Feb 2017 01:08:05 +0100
Subject: [PATCH 21/45] Merge \term+\indextext pairs into \defn(x)s.

---
 source/declarators.tex |  9 +++------
 source/derived.tex     | 19 ++++++-------------
 source/expressions.tex |  9 +++------
 source/lib-intro.tex   | 26 ++++++++------------------
 source/special.tex     | 22 ++++++++--------------
 source/strings.tex     |  4 ++--
 source/threads.tex     |  6 +++---
 source/utilities.tex   | 26 +++++++++-----------------
 8 files changed, 42 insertions(+), 79 deletions(-)

diff --git a/source/declarators.tex b/source/declarators.tex
index 5beb8cc..79826ed 100644
--- a/source/declarators.tex
+++ b/source/declarators.tex
@@ -673,12 +673,10 @@ is ill-formed.
 
 
 \pnum
-\indextext{lvalue reference}%
-\indextext{rvalue reference}%
 A reference type that is declared using \tcode{\&} is called an
-\term{lvalue reference}, and a reference type that
+\defn{lvalue reference}, and a reference type that
 is declared using \tcode{\&\&} is called an
-\term{rvalue reference}. Lvalue references and
+\defn{rvalue reference}. Lvalue references and
 rvalue references are distinct types. Except where explicitly noted, they are
 semantically equivalent and commonly referred to as references.
 
@@ -2943,8 +2941,7 @@ protected and private base class' members or constructors.
 \end{note}
 
 \pnum
-\indextext{aggregate!elements}%
-The \term{elements} of an aggregate are:
+The \defnx{elements}{aggregate!elements} of an aggregate are:
 \begin{itemize}
 \item
 for an array, the array elements in increasing subscript order, or
diff --git a/source/derived.tex b/source/derived.tex
index 8fd5e72..0cf8b7d 100644
--- a/source/derived.tex
+++ b/source/derived.tex
@@ -59,8 +59,7 @@ a class type that is not
 an incompletely defined class (Clause~\ref{class}).
 The class denoted by the \grammarterm{class-or-decltype} of
 a \grammarterm{base-specifier} is called a
-\indextext{base class!direct}%
-\term{direct base class}
+\defnx{direct base class}{base class!direct}
 for the class being defined.
 \indextext{base class}%
 \indextext{derivation|see{inheritance}}%
@@ -69,8 +68,7 @@ ignored~(\ref{basic.scope.hiding}). If the name found is not a
 \grammarterm{class-name}, the program is ill-formed. A class \tcode{B} is a
 base class of a class \tcode{D} if it is a direct base class of
 \tcode{D} or a direct base class of one of \tcode{D}'s base classes.
-\indextext{base class!indirect}%
-A class is an \term{indirect} base class of another if it is a base
+A class is an \defnx{indirect}{base class!indirect} base class of another if it is a base
 class but not a direct base class. A class is said to be (directly or
 indirectly) \term{derived} from its (direct or indirect) base
 classes.
@@ -82,8 +80,7 @@ See Clause~\ref{class.access} for the meaning of
 Unless redeclared in the derived class, members of a base class are also
 considered to be members of the derived class.
 Members of a base class other than constructors are said to be
-\indextext{inheritance}%
-\term{inherited}
+\defnx{inherited}{inheritance}
 by the derived class. Constructors of a base class
 can also be inherited as described in~\ref{namespace.udecl}.
 Inherited members can be referred to in
@@ -226,7 +223,6 @@ class D : public A, public L { void f(); @\commentellip@ };   // well-formed
 \end{example}
 
 \pnum
-\indextext{base class!virtual}%
 A base class specifier that does not contain the keyword
 \tcode{virtual} specifies a \defnx{non-virtual base class}{base class!non-virtual}. A base
 class specifier that contains the keyword \tcode{virtual} specifies a
@@ -577,13 +573,12 @@ struct D: I1, I2, B2 {
 \rSec1[class.virtual]{Virtual functions}%
 \indextext{virtual function|(}%
 \indextext{type!polymorphic}%
-\indextext{class!polymorphic}
 
 \pnum
 \begin{note}
 Virtual functions support dynamic binding and object-oriented
 programming. \end{note} A class that declares or inherits a virtual function is
-called a \term{polymorphic class}.
+called a \defnx{polymorphic class}{class!polymorphic}.
 
 \pnum
 If a virtual member function \tcode{vf} is declared in a class
@@ -910,7 +905,6 @@ function with a deleted definition.%
 \indextext{virtual function|)}
 
 \rSec1[class.abstract]{Abstract classes}%
-\indextext{class!abstract}
 
 \pnum
 \begin{note}
@@ -922,15 +916,14 @@ provide a variety of implementations.
 \end{note}
 
 \pnum
-An \term{abstract class} is a class that can be used only
+An \defnx{abstract class}{class!abstract} is a class that can be used only
 as a base class of some other class; no objects of an abstract class can
 be created except as subobjects of a class derived from it. A class is
 abstract if it has at least one \term{pure virtual function}.
 \begin{note}
 Such a function might be inherited: see below.
 \end{note}
-\indextext{virtual function!pure}%
-A virtual function is specified \term{pure} by using a
+A virtual function is specified \defnx{pure}{virtual function!pure} by using a
 \grammarterm{pure-specifier}~(\ref{class.mem}) in the function declaration
 in the class definition.
 \indextext{definition!pure virtual function}%
diff --git a/source/expressions.tex b/source/expressions.tex
index 3ef1aaa..b70f393 100644
--- a/source/expressions.tex
+++ b/source/expressions.tex
@@ -3593,17 +3593,15 @@ If the operand has a class type, the operand is converted to a pointer
 type by calling the above-mentioned conversion function, and the
 converted operand is used in place of the original operand for the
 remainder of this section.
-\indextext{object!delete}%
 In the first alternative
-(\term{delete object}), the value of the operand of \tcode{delete} may
+(\defnx{delete object}{object!delete}), the value of the operand of \tcode{delete} may
 be a null pointer value, a pointer to a non-array object
 created by a previous \grammarterm{new-expression},
 or a pointer to a
 subobject~(\ref{intro.object}) representing a base class of such an
 object (Clause~\ref{class.derived}). If not, the behavior is undefined.
 \indextext{array!\idxcode{delete}}%
-\indextext{\idxcode{delete}!array}%
-In the second alternative (\term{delete array}), the value of the
+In the second alternative (\defnx{delete array}{\idxcode{delete}!array}), the value of the
 operand of \tcode{delete}
 may be a null pointer value or a pointer value
 that resulted from
@@ -5197,8 +5195,7 @@ where the converted expression is a constant expression and
 the conversion sequence contains only the conversions above.
 
 \pnum
-\indextext{expression!constant}%
-A \term{constant expression} is either
+A \defnx{constant expression}{expression!constant} is either
 a glvalue core constant expression that refers to
 an entity that is a permitted result of a constant expression (as defined below), or
 a prvalue core constant expression whose value
diff --git a/source/lib-intro.tex b/source/lib-intro.tex
index 2a09e79..a36a50b 100644
--- a/source/lib-intro.tex
+++ b/source/lib-intro.tex
@@ -510,14 +510,10 @@ element in the code sequence.
 For non-reserved replacement and handler functions,
 Clause~\ref{language.support} specifies two behaviors for the functions in question:
 their required and default behavior.
-The
-\term{default behavior}
+The \defnx{default behavior}{behavior!default}
 describes a function definition provided by the implementation.
-\indextext{behavior!default}%
-The
-\term{required behavior}
+The \defnx{required behavior}{behavior!required}
 describes the semantics of a function definition provided by
-\indextext{behavior!required}%
 either the implementation or a \Cpp{} program.
 Where no distinction is explicitly made in the description, the
 behavior described is the required behavior.
@@ -630,8 +626,7 @@ All such elements have distinct values.
 \pnum
 Several types defined in Clauses~\ref{\firstlibchapter} through~\ref{\lastlibchapter}
 and Annex~\ref{depr} are
-\term{bitmask types}.
-\indextext{type!bitmask}%
+\defnx{bitmask types}{type!bitmask}.
 Each bitmask type can be implemented as an
 enumerated type that overloads certain operators, as an integer type,
 or as a
@@ -731,9 +726,8 @@ is any of the 26 lowercase or 26
 uppercase letters in the basic execution character set.
 \item
 The
-\term{decimal-point character}
+\defnx{decimal-point character}{character!decimal-point}
 is the
-\indextext{character!decimal-point}%
 (single-byte) character used by functions that convert between a (single-byte)
 character sequence and a value of one of the floating-point types.
 It is used
@@ -781,9 +775,8 @@ A character sequence can be designated by a pointer value
 
 \pnum
 A
-\indextext{string!null-terminated byte}%
 \indextext{NTBS}%
-\term{null-terminated byte string},
+\defnx{null-terminated byte string}{string!null-terminated byte},
 or \ntbs{},
 is a character sequence whose highest-addressed element
 with defined content has the value zero
@@ -820,8 +813,7 @@ elements up to and including the terminating null character.
 \pnum
 A
 \indextext{NTBS}%
-\indextext{NTBS!static}%
-\term{static} \ntbs{}
+\defnx{static}{NTBS!static} \ntbs{}
 is an \ntbs{} with
 static storage duration.\footnote{A string literal, such as
 \tcode{"abc"},
@@ -843,9 +835,8 @@ consists of a single byte.}
 
 \pnum
 A
-\term{static} \ntmbs{}
+\defnx{static}{NTMBS!static} \ntmbs{}
 is an \ntmbs{} with static storage duration.
-\indextext{NTMBS!static}%
 \indextext{NTMBS}%
 
 \rSec3[functions.within.classes]{Functions within classes}
@@ -1269,11 +1260,10 @@ These names are also subject to the restrictions of~\ref{macro.names}.
 
 \pnum
 Two kinds of implementations are defined:
-\term{hosted}
+\defnx{hosted}{implementation!hosted}
 and
 \term{freestanding}~(\ref{intro.compliance}).
 For a hosted implementation, this International Standard
-\indextext{implementation!hosted}%
 describes the set of available headers.
 
 \pnum
diff --git a/source/special.tex b/source/special.tex
index e69126b..e83afe3 100644
--- a/source/special.tex
+++ b/source/special.tex
@@ -150,10 +150,9 @@ most derived object~(\ref{intro.object}) ends.
 
 \pnum
 \indextext{constructor!inheritance of}%
-\indextext{constructor!default}%
 \indextext{constructor!non-trivial}%
 A
-\term{default}
+\defnx{default}{constructor!default}
 constructor for a class
 \tcode{X}
 is a constructor of class
@@ -236,11 +235,10 @@ Otherwise, the default constructor is
 \defnx{non-trivial}{constructor!default!non-trivial}.
 
 \pnum
-\indextext{constructor!implicitly defined}%
 A default constructor
 that is defaulted and not defined as deleted
 is
-\term{implicitly defined}
+\defnx{implicitly defined}{constructor!implicitly defined}
 when it is odr-used~(\ref{basic.def.odr})
 to create an object of its class type~(\ref{intro.object})
 or when it is explicitly defaulted after its first declaration.
@@ -657,14 +655,13 @@ shall be destroyed before
 
 \pnum
 \indextext{conversion!class}%
-\indextext{conversion!user-defined}%
 \indextext{constructor, conversion by|see{conversion, user-defined}}%
 \indextext{conversion function|see{conversion, user-defined}}%
 \indextext{conversion!implicit}%
 Type conversions of class objects can be specified by constructors and
 by conversion functions.
 These conversions are called
-\term{user-defined conversions}
+\defnx{user-defined conversions}{conversion!user-defined}
 and are used for implicit type conversions (Clause~\ref{conv}),
 for initialization~(\ref{dcl.init}),
 and for explicit type conversions~(\ref{expr.cast}, \ref{expr.static.cast}).
@@ -735,8 +732,7 @@ specifies a conversion from
 the types of its parameters (if any)
 to the type of its class.
 Such a constructor is called a
-\indexdefn{constructor!converting}%
-\term{converting constructor}.
+\defnx{converting constructor}{constructor!converting}.
 \begin{example}
 
 \indextext{Jessie}%
@@ -1047,11 +1043,10 @@ Otherwise, the destructor is
 \defnx{non-trivial}{destructor!non-trivial}.
 
 \pnum
-\indextext{destructor!implicitly defined}%
 A destructor
 that is defaulted and not defined as deleted
 is
-\term{implicitly defined}
+\defnx{implicitly defined}{destructor!implicitly defined}
 when it is odr-used~(\ref{basic.def.odr})
 or when it is explicitly defaulted after its first declaration.
 
@@ -2543,9 +2538,8 @@ void h() {
 \end{example}
 
 \pnum
-\indextext{constructor!copy!implicitly declared}%
 If the class definition does not explicitly declare a copy constructor,
-a non-explicit one is declared \term{implicitly}.
+a non-explicit one is declared \defnx{implicitly}{constructor!copy!implicitly declared}.
 If the class definition declares a move
 constructor or move assignment operator, the implicitly declared copy
 constructor is defined as deleted; otherwise, it is defined as
@@ -2792,9 +2786,9 @@ void f() {
 \end{note}
 
 \pnum
-\indextext{assignment operator!copy!implicitly declared}%
 If the class definition does not explicitly declare a copy assignment operator,
-one is declared \term{implicitly}. If the class definition declares a move
+one is declared \defnx{implicitly}{assignment operator!copy!implicitly declared}.
+If the class definition declares a move
 constructor or move assignment operator, the implicitly declared copy
 assignment operator is defined as deleted; otherwise, it is defined as
 defaulted~(\ref{dcl.fct.def}).
diff --git a/source/strings.tex b/source/strings.tex
index 063bfc2..7a1be68 100644
--- a/source/strings.tex
+++ b/source/strings.tex
@@ -6,9 +6,9 @@
 \pnum
 This Clause describes components for manipulating sequences of
 any non-array POD~(\ref{basic.types}) type.
-Such types are called \term{char-like types},\indextext{char-like type}
+Such types are called \defnx{char-like types}{char-like type},
 and objects of
-char-like types are called \term{char-like objects}\indextext{char-like object} or
+char-like types are called \defnx{char-like objects}{char-like object} or
 simply \term{characters}.
 
 \pnum
diff --git a/source/threads.tex b/source/threads.tex
index 3f4ca7f..349bd42 100644
--- a/source/threads.tex
+++ b/source/threads.tex
@@ -4261,7 +4261,7 @@ future() noexcept;
 
 \begin{itemdescr}
 \pnum
-\effects Constructs an \indexdefn{empty \tcode{future} object}\term{empty}
+\effects Constructs an \defnx{empty}{empty \tcode{future} object}
 \tcode{future} object that does not refer to a
 shared state.
 
@@ -4547,8 +4547,8 @@ shared_future() noexcept;
 
 \begin{itemdescr}
 \pnum
-\effects Constructs an \indexdefn{empty \tcode{shared_future}
-object}\term{empty} \tcode{shared_future} object that does not refer to a
+\effects Constructs an \defnx{empty}{empty \tcode{shared_future} object}
+\tcode{shared_future} object that does not refer to a
 shared state.
 
 \pnum
diff --git a/source/utilities.tex b/source/utilities.tex
index f32ccec..e6d2df0 100644
--- a/source/utilities.tex
+++ b/source/utilities.tex
@@ -12887,7 +12887,7 @@ template <class OuterA1, class OuterA2, class... InnerAllocs>
 \rSec1[function.objects]{Function objects}
 
 \pnum
-A \indexdefn{function object!type}\term{function object type} is an object
+A \defnx{function object type}{function object!type} is an object
 type~(\ref{basic.types}) that can be the type of the
 \grammarterm{postfix-expression} in a function call
 (\ref{expr.call},~\ref{over.match.call}).\footnote{Such a type is a function
@@ -13065,30 +13065,24 @@ transform(a.begin(), a.end(), a.begin(), negate<double>());
 The following definitions apply to this Clause:
 
 \pnum
-\indexdefn{call signature}%
-A \term{call signature} is the name of a return type followed by a
+A \defn{call signature} is the name of a return type followed by a
 parenthesized comma-separated list of zero or more argument types.
 
 \pnum
-\indexdefn{callable type}%
-A \term{callable type} is a function object type~(\ref{function.objects}) or a pointer to member.
+A \defn{callable type} is a function object type~(\ref{function.objects}) or a pointer to member.
 
 \pnum
-\indexdefn{callable object}%
-A \term{callable object} is an object of a callable type.
+A \defn{callable object} is an object of a callable type.
 
 \pnum
-\indexdefn{call wrapper!type}%
-A \term{call wrapper type} is a type that holds a callable object
+A \defnx{call wrapper type}{call wrapper!type} is a type that holds a callable object
 and supports a call operation that forwards to that object.
 
 \pnum
-\indexdefn{call wrapper}%
-A \term{call wrapper} is an object of a call wrapper type.
+A \defn{call wrapper} is an object of a call wrapper type.
 
 \pnum
-\indexdefn{target object}%
-A \term{target object} is the callable object held by a call wrapper.
+A \defn{target object} is the callable object held by a call wrapper.
 
 \rSec2[func.require]{Requirements}
 
@@ -13136,16 +13130,14 @@ to \tcode{R}.
 \indextext{call wrapper}%
 \indextext{call wrapper!simple}%
 \indextext{call wrapper!forwarding}%
-\indextext{simple call wrapper}%
-\indextext{forwarding call wrapper}%
 Every call wrapper~(\ref{func.def}) shall be
 \tcode{MoveConstructible}.
-A \term{forwarding call wrapper} is a
+A \defn{forwarding call wrapper} is a
 call wrapper that can be called with an arbitrary argument list
 and delivers the arguments to the wrapped callable object as references.
 This forwarding step shall ensure that rvalue arguments are delivered as rvalue references
 and lvalue arguments are delivered as lvalue references.
-A \term{simple call wrapper} is a forwarding call wrapper that is
+A \defn{simple call wrapper} is a forwarding call wrapper that is
 \tcode{CopyConstructible} and \tcode{CopyAssignable} and
 whose copy constructor, move constructor, and assignment operator
 do not throw exceptions.
-- 
2.7.4


From 55e0a77d61f792150097595fdf46a24eb629603a Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sat, 4 Feb 2017 09:29:18 +0100
Subject: [PATCH 22/45] [intro.defs] Consistently hyphenate
 parameter-type-list.

---
 source/intro.tex | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/source/intro.tex b/source/intro.tex
index 5bce180..7fb3505 100644
--- a/source/intro.tex
+++ b/source/intro.tex
@@ -219,13 +219,13 @@ following the macro name
 
 \indexdefn{signature}%
 \definition{signature}{defns.signature}
-\defncontext{function} name, parameter type list~(\ref{dcl.fct}), and enclosing namespace (if any)\\
+\defncontext{function} name, parameter-type-list~(\ref{dcl.fct}), and enclosing namespace (if any)\\
 \begin{note} Signatures are used as a basis for
 name mangling and linking.\end{note}
 
 \indexdefn{signature}%
 \definition{signature}{defns.signature.templ}
-\defncontext{function template} name, parameter type list~(\ref{dcl.fct}), enclosing namespace (if any),
+\defncontext{function template} name, parameter-type-list~(\ref{dcl.fct}), enclosing namespace (if any),
 return type, and template parameter list
 
 \indexdefn{signature}%
@@ -235,13 +235,13 @@ and its template arguments (whether explicitly specified or deduced)
 
 \indexdefn{signature}%
 \definition{signature}{defns.signature.member}
-\defncontext{class member function} name, parameter type list~(\ref{dcl.fct}), class of which the
+\defncontext{class member function} name, parameter-type-list~(\ref{dcl.fct}), class of which the
 function is a member, \cv-qualifiers (if any),
 and \grammarterm{ref-qualifier} (if any)
 
 \indexdefn{signature}%
 \definition{signature}{defns.signature.member.templ}
-\defncontext{class member function template} name, parameter type list~(\ref{dcl.fct}), class of which the
+\defncontext{class member function template} name, parameter-type-list~(\ref{dcl.fct}), class of which the
 function is a member, \cv-qualifiers (if any),
 \grammarterm{ref-qualifier} (if any), return type (if any), and template parameter list
 
-- 
2.7.4


From 4719ddab79ab1900bb67895cde36b994e4817dad Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Fri, 3 Feb 2017 08:15:11 +0100
Subject: [PATCH 23/45] Add index entry for 'active handler'.

---
 source/exceptions.tex | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/source/exceptions.tex b/source/exceptions.tex
index 17ba5c2..969cd93 100644
--- a/source/exceptions.tex
+++ b/source/exceptions.tex
@@ -586,8 +586,8 @@ handler continues in a dynamically surrounding try block
 of the same thread.
 
 \pnum
-A handler is considered active when initialization is complete for
-the parameter (if any) of the catch clause.
+A handler is considered \defnx{active}{exception handling!handler!active} when
+initialization is complete for the parameter (if any) of the catch clause.
 \begin{note}
 The stack will have been unwound at that point.
 \end{note}
-- 
2.7.4


From ff4a1ec71e4b56ff4f14123e54634e395d5359ad Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sat, 4 Feb 2017 08:53:36 +0100
Subject: [PATCH 24/45] [alg.sorting] Index 'partitioned with respect to'.

---
 source/algorithms.tex | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/source/algorithms.tex b/source/algorithms.tex
index 21469db..7aa1a26 100644
--- a/source/algorithms.tex
+++ b/source/algorithms.tex
@@ -3559,7 +3559,7 @@ is a valid iterator pointing to an element of the sequence,
 A sequence
 \range{start}{finish}
 is
-\techterm{partitioned with respect to an expression}
+\defnx{partitioned with respect to}{sequence!partitioned with respect to} an expression
 \tcode{f(e)}
 if there exists an integer
 \tcode{n}
-- 
2.7.4


From 1e161a1ae545de415e5293255a2bee4bf5e2c7dc Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Tue, 7 Feb 2017 21:42:14 +0100
Subject: [PATCH 25/45] [dcl.enum] Add index entry for 'fixed' underlying type.

---
 source/declarations.tex | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/source/declarations.tex b/source/declarations.tex
index c234e89..ae111df 100644
--- a/source/declarations.tex
+++ b/source/declarations.tex
@@ -2058,7 +2058,7 @@ Each enumeration also has an \defnx{underlying type}{type!underlying!enumeration
 The underlying type can be explicitly specified using an \grammarterm{enum-base}.
 For a scoped enumeration type, the underlying type is \tcode{int} if it is not
 explicitly specified. In both of these cases, the underlying type is said to be
-\term{fixed}.
+\defnx{fixed}{type!underlying!fixed}.
 Following the closing brace of an \grammarterm{enum-specifier}, each
 enumerator has the type of its enumeration.
 If the underlying type is fixed, the type of each enumerator
-- 
2.7.4


From 460eaedd7ae5289812ab9b97317c34b358ad6fd1 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Wed, 1 Feb 2017 03:09:50 +0100
Subject: [PATCH 26/45] Don't abuse \grammarterm for things that are not
 grammar terms.

---
 source/declarators.tex | 4 ++--
 source/intro.tex       | 2 +-
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/source/declarators.tex b/source/declarators.tex
index 79826ed..8f7b768 100644
--- a/source/declarators.tex
+++ b/source/declarators.tex
@@ -2072,7 +2072,7 @@ void print(int a, int) {
 
 \pnum
 In the \grammarterm{function-body}, a
-\grammarterm{function-local predefined variable} denotes a block-scope object of static
+\techterm{function-local predefined variable} denotes a block-scope object of static
 storage duration that is implicitly defined (see~\ref{basic.scope.block}).
 
 \pnum
@@ -2108,7 +2108,7 @@ A function definition of the form:
     \opt{attribute-specifier-seq} \opt{decl-specifier-seq} declarator \opt{virt-specifier-seq} \terminal{ = default ;}
 \end{ncbnf}
 
-is called an \grammarterm{explicitly-defaulted} definition.
+is called an \techterm{explicitly-defaulted} definition.
 A function that is explicitly defaulted shall
 
 \begin{itemize}
diff --git a/source/intro.tex b/source/intro.tex
index 7fb3505..d60a5cd 100644
--- a/source/intro.tex
+++ b/source/intro.tex
@@ -455,7 +455,7 @@ and notes may be nested.%
 \pnum
 \indextext{notation!syntax|(}%
 In the syntax notation used in this document, syntactic
-categories are indicated by \grammarterm{italic} type, and literal words
+categories are indicated by \textit{italic} type, and literal words
 and characters in \tcode{constant} \tcode{width} type. Alternatives are
 listed on separate lines except in a few cases where a long set of
 alternatives is marked by the phrase ``one of''. If the text of an alternative is too long to fit on a line, the text is continued on subsequent lines indented from the first one.
-- 
2.7.4


From 1245cb70c7c71e63c2e9d778fd90687e7f5f7118 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Wed, 1 Feb 2017 03:39:27 +0100
Subject: [PATCH 27/45] Make references more precise.

---
 source/basic.tex        | 2 +-
 source/classes.tex      | 6 +++---
 source/declarations.tex | 2 +-
 source/statements.tex   | 2 +-
 source/strings.tex      | 2 +-
 5 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/source/basic.tex b/source/basic.tex
index 58c4a71..5e9c369 100644
--- a/source/basic.tex
+++ b/source/basic.tex
@@ -96,7 +96,7 @@ A declaration may also have effects including:
 \item a static assertion (Clause~\ref{dcl.dcl}),
 \item controlling template instantiation~(\ref{temp.explicit}),
 \item guiding template argument deduction for constructors~(\ref{temp.deduct.guide}),
-\item use of attributes (Clause~\ref{dcl.dcl}), and
+\item use of attributes (Clause~\ref{dcl.attr}), and
 \item nothing (in the case of an \grammarterm{empty-declaration}).
 \end{itemize}
 
diff --git a/source/classes.tex b/source/classes.tex
index 4347990..e3e4644 100644
--- a/source/classes.tex
+++ b/source/classes.tex
@@ -923,7 +923,7 @@ object that is not of type \tcode{X}, or of a type derived from
 \tcode{X}, the behavior is undefined.
 
 \pnum
-When an \grammarterm{id-expression}~(\ref{expr.prim}) that is not part of a
+When an \grammarterm{id-expression}~(\ref{expr.prim.id}) that is not part of a
 class member access syntax~(\ref{expr.ref}) and not used to form a
 pointer to member~(\ref{expr.unary.op}) is used in
 a member of class \tcode{X} in a context where \tcode{this} can be
@@ -943,11 +943,11 @@ If \tcode{C} is not \tcode{X} or a base class of \tcode{X}, the class
 member access expression is ill-formed.
 \end{note}
 Similarly during name lookup, when an
-\grammarterm{unqualified-id}~(\ref{expr.prim}) used in the definition of a
+\grammarterm{unqualified-id}~(\ref{expr.prim.id.unqual}) used in the definition of a
 member function for class \tcode{X} resolves to a static member,
 an enumerator or a nested type of class \tcode{X} or of a base class of
 \tcode{X}, the \grammarterm{unqualified-id} is transformed into a
-\grammarterm{qualified-id}~(\ref{expr.prim}) in which the
+\grammarterm{qualified-id}~(\ref{expr.prim.id.qual}) in which the
 \grammarterm{nested-name-specifier} names the class of the member function.
 These transformations do not apply in the
 template definition context~(\ref{temp.dep.type}).
diff --git a/source/declarations.tex b/source/declarations.tex
index ae111df..806753c 100644
--- a/source/declarations.tex
+++ b/source/declarations.tex
@@ -3412,7 +3412,7 @@ extern "C" {
 Linkage specifications nest. When linkage specifications nest, the
 innermost one determines the language linkage. A linkage specification
 does not establish a scope. A \grammarterm{linkage-specification} shall
-occur only in namespace scope~(\ref{basic.scope}). In a
+occur only in namespace scope~(\ref{basic.scope.namespace}). In a
 \grammarterm{linkage-specification}, the specified language linkage applies
 to the function types of all function declarators, function names with
 external linkage, and variable names with external linkage declared
diff --git a/source/statements.tex b/source/statements.tex
index 5586e1a..8bfbd2b 100644
--- a/source/statements.tex
+++ b/source/statements.tex
@@ -982,7 +982,7 @@ to determine whether this is the case. This resolves the meaning
 of many examples.
 \begin{example}
 Assuming \tcode{T} is a
-\grammarterm{simple-type-specifier}~(\ref{dcl.type}),
+\grammarterm{simple-type-specifier}~(\ref{dcl.type.simple}),
 
 \begin{codeblock}
 T(a)->m = 7;        // expression-statement
diff --git a/source/strings.tex b/source/strings.tex
index 7a1be68..e7fd4e2 100644
--- a/source/strings.tex
+++ b/source/strings.tex
@@ -1541,7 +1541,7 @@ basic_string& operator=(basic_string&& str)
 \begin{itemdescr}
 \pnum
 \effects
-Move assigns as a sequence container~(\ref{container.requirements}),
+Move assigns as a sequence container~(\ref{sequence.reqmts}),
 except that iterators, pointers and references may be invalidated.
 
 \pnum
-- 
2.7.4


From d328033bef75e3e767eb78a005e8067217d9c5cd Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sat, 7 Jan 2017 01:59:05 +0100
Subject: [PATCH 28/45] [rand.req.eng] Omit superfluous dollar-math wrapping
 inside \bigoh.

---
 source/numerics.tex | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

diff --git a/source/numerics.tex b/source/numerics.tex
index 2664fcc..6ecfd11 100644
--- a/source/numerics.tex
+++ b/source/numerics.tex
@@ -1905,21 +1905,21 @@ according to Clause~\ref{strings} and Clause~\ref{input.output}.
     with the same initial state
     as all other default-constructed engines
     of type \tcode{E}.
-  & \bigoh{$\mbox{size of state}$}
+  & \bigoh{\mbox{size of state}}
   \\ \rowsep
 \tcode{E(x)}
 \indextext{copy constructor!random number engine requirement}
   &
   & Creates an engine
     that compares equal to \tcode{x}.
-  & \bigoh{$\mbox{size of state}$}
+  & \bigoh{\mbox{size of state}}
   \\ \rowsep
 \tcode{E(s)}%
 \indextext{constructor!random number engine requirement}
   &
   & Creates an engine
       with initial state determined by \tcode{s}.
-  & \bigoh{$\mbox{size of state}$}
+  & \bigoh{\mbox{size of state}}
   \\ \rowsep
 \tcode{E(q)}%
 \indextext{constructor!random number engine requirement}\footnote{  This constructor
@@ -1998,13 +1998,13 @@ according to Clause~\ref{strings} and Clause~\ref{input.output}.
     returns \tcode{true}
       if $ S_x = S_y $;
     else returns \tcode{false}.
-  & \bigoh{$\mbox{size of state}$}
+  & \bigoh{\mbox{size of state}}
   \\ \rowsep
 \tcode{x != y}%
 \indextext{\idxcode{operator"!=}!random number engine requirement}
   & \tcode{bool}
   & \tcode{!(x == y)}.
-  & \bigoh{$\mbox{size of state}$}
+  & \bigoh{\mbox{size of state}}
   \\ \rowsep
 \tcode{os << x}%
 \indextext{\idxcode{operator<<}!random number engine requirement}
@@ -2020,7 +2020,7 @@ according to Clause~\ref{strings} and Clause~\ref{input.output}.
     by one or more space characters.
 
     \postconditions The \tcode{os.}\textit{fmtflags} and fill character are unchanged.
-  & \bigoh{$\mbox{size of state}$}
+  & \bigoh{\mbox{size of state}}
   \\ \rowsep
 \tcode{is >> v}%
 \indextext{\idxcode{operator>>}!random number engine requirement}
@@ -2051,7 +2051,7 @@ according to Clause~\ref{strings} and Clause~\ref{input.output}.
     were respectively the same as those of \tcode{is}.
 
     \postconditions The \tcode{is.}\textit{fmtflags} are unchanged.
-  & \bigoh{$\mbox{size of state}$}
+  & \bigoh{\mbox{size of state}}
   \\
 \end{libreqtab4d}
 
-- 
2.7.4


From cbab84cc266ce8149f6762da72aaff5f140da80a Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Thu, 5 Jan 2017 23:06:32 +0100
Subject: [PATCH 29/45] Move index entries for first item in enumeration into
 item.

---
 source/lex.tex | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/source/lex.tex b/source/lex.tex
index 2f46bd9..28ffe65 100644
--- a/source/lex.tex
+++ b/source/lex.tex
@@ -58,9 +58,10 @@ following phases.\footnote{Implementations must behave as if these separate phas
 occur, although in practice different phases might be folded together.}
 
 \begin{enumerate}
+\item
 \indextext{character!source file}%
 \indextext{character set!basic source}%
-\item Physical source file characters are mapped, in an
+Physical source file characters are mapped, in an
 \impldef{mapping physical source file characters to basic source character set} manner,
 to the basic source character set (introducing new-line characters for end-of-line
 indicators) if necessary.
-- 
2.7.4


From 1aa6f8d7c1773c652c1413e2d29190f2292bfe53 Mon Sep 17 00:00:00 2001
From: timsong-cpp <rs2740@gmail.com>
Date: Sun, 1 Jan 2017 16:12:50 +0100
Subject: [PATCH 30/45] Use floattable for [optional] tables.

---
 source/tables.tex | 31 ++++---------------------------
 1 file changed, 4 insertions(+), 27 deletions(-)

diff --git a/source/tables.tex b/source/tables.tex
index 5dc258e..d6b070e 100644
--- a/source/tables.tex
+++ b/source/tables.tex
@@ -529,36 +529,13 @@
 % tables.
 \newenvironment{lib2dtab2base}[7]
 {
- %% no lines in the top-left cell, and leave a gap around the headers
- %% FIXME: I tried to use hhline here, but it doesn't appear to support
- %% the join between the leftmost top header and the topmost left header,
- %% so we fake it with an empty row and column.
- \newcommand{\topline}{\cline{3-4}}
- \newcommand{\rowsep}{\cline{1-1}\cline{3-4}}
- \newcommand{\capsep}{
-  \topline
-  \multicolumn{4}{c}{}\\[-0.8\normalbaselineskip]
-  \rowsep
- }
- \newcommand{\bottomline}{\rowsep}
- \newcommand{\hdstyle}[1]{\textbf{##1}}
- \newcommand{\rowhdr}[1]{\hdstyle{##1}&}
- \newcommand{\colhdr}[1]{\multicolumn{1}{|>{\centering}m{#6}|}{\hdstyle{##1}}}
- %% FIXME: figure out a way to reuse floattable here
- \begin{table}[htbp]
- \caption{\label{#2}#1}
- \begin{center}
- \begin{tabular}{|>{\centering}m{#5}|@{}p{0.2\normalbaselineskip}@{}|m{#6}|m{#7}|}
- %% table header
+ \newcommand{\rowhdr}[1]{\textbf{##1}}
+ \begin{floattable}{#1}{#2}{p{#5}|p{#6}|p{#7}}
  \topline
- \multicolumn{1}{c}{}&&\colhdr{#3}&\colhdr{#4}\\
- \capsep
+  & \chdr{#3} & \rhdr{#4} \\ \rowsep
 }
 {
- \bottomline
- \end{tabular}
- \end{center}
- \end{table}
+ \end{floattable}
 }
 
 \newenvironment{lib2dtab2}[4]{
-- 
2.7.4


From fca8ea9e9d4eeac99465d2edc75f75aa97374144 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Thu, 5 Jan 2017 01:13:49 +0100
Subject: [PATCH 31/45] Avoid \, inside \mbox inside math, because MathJax does
 not support it. See https://github.com/mathjax/MathJax/issues/569

---
 source/numerics.tex | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/source/numerics.tex b/source/numerics.tex
index 6ecfd11..f31d8ee 100644
--- a/source/numerics.tex
+++ b/source/numerics.tex
@@ -10752,7 +10752,7 @@ of their respective arguments
   \mathsf{B}(x, y) =
   \frac{ \Gamma(x) \, \Gamma(y) }
        { \Gamma(x+y) },
-       \quad \mbox{for $x > 0$,\, $y > 0$}
+       \quad \mbox{for }x > 0,\, y > 0
 \]
 where
 $x$ is \tcode{x} and
-- 
2.7.4


From 87c35a590c0e40afd944b98c8080898217f46fbb Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Mon, 23 Jan 2017 06:58:26 +0100
Subject: [PATCH 32/45] Reduce excessive indentation of comments. Helps layout
 on smaller (e.g. half-screen) window sizes.

---
 source/basic.tex       | 30 +++++++++++++++---------------
 source/expressions.tex | 18 +++++++++---------
 source/special.tex     | 16 ++++++++--------
 source/templates.tex   | 16 ++++++++--------
 4 files changed, 40 insertions(+), 40 deletions(-)

diff --git a/source/basic.tex b/source/basic.tex
index 5e9c369..98c816a 100644
--- a/source/basic.tex
+++ b/source/basic.tex
@@ -219,7 +219,7 @@ or destructor~(\ref{class.dtor}) member functions. \end{note}
 #include <string>
 
 struct C {
-  std::string s;              // \tcode{std::string} is the standard library class (Clause~\ref{strings})
+  std::string s;    // \tcode{std::string} is the standard library class (Clause~\ref{strings})
 };
 
 int main() {
@@ -1457,8 +1457,8 @@ namespace N {
 
 void g() {
   N::S s;
-  f(s);             // OK: calls \tcode{N::f}
-  (f)(s);           // error: \tcode{N::f} not considered; parentheses prevent argument-dependent lookup
+  f(s);     // OK: calls \tcode{N::f}
+  (f)(s);   // error: \tcode{N::f} not considered; parentheses prevent argument-dependent lookup
 }
 \end{codeblock}
 \end{example}
@@ -1825,23 +1825,23 @@ namespace AB {
 
 void h()
 {
-  AB::g();          // \tcode{g} is declared directly in \tcode{AB}, therefore \tcode{S} is $\{ \tcode{AB::g()} \}$ and \tcode{AB::g()} is chosen
+  AB::g();      // \tcode{g} is declared directly in \tcode{AB}, therefore \tcode{S} is $\{ \tcode{AB::g()} \}$ and \tcode{AB::g()} is chosen
 
-  AB::f(1);         // \tcode{f} is not declared directly in \tcode{AB} so the rules are applied recursively to \tcode{A} and \tcode{B};
-                    // namespace \tcode{Y} is not searched and \tcode{Y::f(float)} is not considered;
-                    // \tcode{S} is $\{ \tcode{A::f(int)}, \tcode{B::f(char)} \}$ and overload resolution chooses \tcode{A::f(int)}
+  AB::f(1);     // \tcode{f} is not declared directly in \tcode{AB} so the rules are applied recursively to \tcode{A} and \tcode{B};
+                // namespace \tcode{Y} is not searched and \tcode{Y::f(float)} is not considered;
+                // \tcode{S} is $\{ \tcode{A::f(int)}, \tcode{B::f(char)} \}$ and overload resolution chooses \tcode{A::f(int)}
 
-  AB::f('c');       // as above but resolution chooses \tcode{B::f(char)}
+  AB::f('c');   // as above but resolution chooses \tcode{B::f(char)}
 
-  AB::x++;          // \tcode{x} is not declared directly in \tcode{AB}, and is not declared in \tcode{A} or \tcode{B}, so the rules
-                    // are applied recursively to \tcode{Y} and \tcode{Z}, \tcode{S} is $\{ \}$ so the program is ill-formed
+  AB::x++;      // \tcode{x} is not declared directly in \tcode{AB}, and is not declared in \tcode{A} or \tcode{B}, so the rules
+                // are applied recursively to \tcode{Y} and \tcode{Z}, \tcode{S} is $\{ \}$ so the program is ill-formed
 
-  AB::i++;          // \tcode{i} is not declared directly in \tcode{AB} so the rules are applied recursively to \tcode{A} and \tcode{B},
-                    // \tcode{S} is $\{ \tcode{A::i}, \tcode{B::i} \}$ so the use is ambiguous and the program is ill-formed
+  AB::i++;      // \tcode{i} is not declared directly in \tcode{AB} so the rules are applied recursively to \tcode{A} and \tcode{B},
+                // \tcode{S} is $\{ \tcode{A::i}, \tcode{B::i} \}$ so the use is ambiguous and the program is ill-formed
 
-  AB::h(16.8);      // \tcode{h} is not declared directly in \tcode{AB} and not declared directly in \tcode{A} or \tcode{B} so the rules
-                    // are applied recursively to \tcode{Y} and \tcode{Z}, \tcode{S} is $\{ \tcode{Y::h(int)}, \tcode{Z::h(double)} \}$ and
-                    // overload resolution chooses \tcode{Z::h(double)}
+  AB::h(16.8);  // \tcode{h} is not declared directly in \tcode{AB} and not declared directly in \tcode{A} or \tcode{B} so the rules
+                // are applied recursively to \tcode{Y} and \tcode{Z}, \tcode{S} is $\{ \tcode{Y::h(int)}, \tcode{Z::h(double)} \}$ and
+                // overload resolution chooses \tcode{Z::h(double)}
 }
 \end{codeblock}
 \end{example}
diff --git a/source/expressions.tex b/source/expressions.tex
index b70f393..58b5d76 100644
--- a/source/expressions.tex
+++ b/source/expressions.tex
@@ -1145,8 +1145,8 @@ void f1(int i) {
   auto m1 = [=]{
     int const M = 30;
     auto m2 = [i]{
-      int x[N][M];              // OK: \tcode{N} and \tcode{M} are not odr-used
-      x[0][0] = i;              // OK: \tcode{i} is explicitly captured by \tcode{m2} and implicitly captured by \tcode{m1}
+      int x[N][M];          // OK: \tcode{N} and \tcode{M} are not odr-used
+      x[0][0] = i;          // OK: \tcode{i} is explicitly captured by \tcode{m2} and implicitly captured by \tcode{m1}
     };
   };
   struct s1 {
@@ -1155,11 +1155,11 @@ void f1(int i) {
       int m = n*n;
       int j = 40;
       auto m3 = [this,m] {
-        auto m4 = [&,j] {       // error: \tcode{j} not captured by \tcode{m3}
-          int x = n;            // error: \tcode{n} implicitly captured by \tcode{m4} but not captured by \tcode{m3}
-          x += m;               // OK: \tcode{m} implicitly captured by \tcode{m4} and explicitly captured by \tcode{m3}
-          x += i;               // error: \tcode{i} is outside of the reaching scope
-          x += f;               // OK: \tcode{this} captured implicitly by \tcode{m4} and explicitly by \tcode{m3}
+        auto m4 = [&,j] {   // error: \tcode{j} not captured by \tcode{m3}
+          int x = n;        // error: \tcode{n} implicitly captured by \tcode{m4} but not captured by \tcode{m3}
+          x += m;           // OK: \tcode{m} implicitly captured by \tcode{m4} and explicitly captured by \tcode{m3}
+          x += i;           // error: \tcode{i} is outside of the reaching scope
+          x += f;           // OK: \tcode{this} captured implicitly by \tcode{m4} and explicitly by \tcode{m3}
         };
       };
     }
@@ -1171,13 +1171,13 @@ struct s2 {
   auto f() {
     return [this] {
       return [*this] {
-          return ohseven;       // OK
+          return ohseven;   // OK
       }
     }();
   }
   auto g() {
     return [] {
-      return [*this] { };       // error: \tcode{*this} not captured by outer \grammarterm{lambda-expression}
+      return [*this] { };   // error: \tcode{*this} not captured by outer \grammarterm{lambda-expression}
     }();
   }
 };
diff --git a/source/special.tex b/source/special.tex
index e83afe3..002631b 100644
--- a/source/special.tex
+++ b/source/special.tex
@@ -2148,9 +2148,9 @@ struct D2 : V1, V2 {
   using V2::V2;
 };
 
-D1 d1(0);           // ill-formed: ambiguous
-D2 d2(0);           // OK: initializes virtual \tcode{B} base class, which initializes the \tcode{A} base class
-                    // then initializes the \tcode{V1} and \tcode{V2} base classes as if by a defaulted default constructor
+D1 d1(0);       // ill-formed: ambiguous
+D2 d2(0);       // OK: initializes virtual \tcode{B} base class, which initializes the \tcode{A} base class
+                // then initializes the \tcode{V1} and \tcode{V2} base classes as if by a defaulted default constructor
 
 struct M { M(); M(int); };
 struct N : M { using M::M; };
@@ -2377,11 +2377,11 @@ struct D : A, B {
 };
 
 B::B(V* v, A* a) {
-  typeid(*this);                // \tcode{type_info} for \tcode{B}
-  typeid(*v);                   // well-defined: \tcode{*v} has type \tcode{V}, a base of \tcode{B} yields \tcode{type_info} for \tcode{B}
-  typeid(*a);                   // undefined behavior: type \tcode{A} not a base of \tcode{B}
-  dynamic_cast<B*>(v);          // well-defined: \tcode{v} of type \tcode{V*}, \tcode{V} base of \tcode{B} results in \tcode{B*}
-  dynamic_cast<B*>(a);          // undefined behavior, \tcode{a} has type \tcode{A*}, \tcode{A} not a base of \tcode{B}
+  typeid(*this);        // \tcode{type_info} for \tcode{B}
+  typeid(*v);           // well-defined: \tcode{*v} has type \tcode{V}, a base of \tcode{B} yields \tcode{type_info} for \tcode{B}
+  typeid(*a);           // undefined behavior: type \tcode{A} not a base of \tcode{B}
+  dynamic_cast<B*>(v);  // well-defined: \tcode{v} of type \tcode{V*}, \tcode{V} base of \tcode{B} results in \tcode{B*}
+  dynamic_cast<B*>(a);  // undefined behavior, \tcode{a} has type \tcode{A*}, \tcode{A} not a base of \tcode{B}
 }
 \end{codeblock}
 \end{example}
diff --git a/source/templates.tex b/source/templates.tex
index d6ff7bf..8c5e231 100644
--- a/source/templates.tex
+++ b/source/templates.tex
@@ -1193,11 +1193,11 @@ template <int N> struct C;
 template <class T1, int N> struct D;
 template <class T1, class T2, int N = 17> struct E;
 
-eval<A<int>> eA;                // OK: matches partial specialization of \tcode{eval}
-eval<B<int, float>> eB;         // OK: matches partial specialization of \tcode{eval}
-eval<C<17>> eC;                 // error: \tcode{C} does not match \tcode{TT} in partial specialization
-eval<D<int, 17>> eD;            // error: \tcode{D} does not match \tcode{TT} in partial specialization
-eval<E<int, float>> eE;         // error: \tcode{E} does not match \tcode{TT} in partial specialization
+eval<A<int>> eA;            // OK: matches partial specialization of \tcode{eval}
+eval<B<int, float>> eB;     // OK: matches partial specialization of \tcode{eval}
+eval<C<17>> eC;             // error: \tcode{C} does not match \tcode{TT} in partial specialization
+eval<D<int, 17>> eD;        // error: \tcode{D} does not match \tcode{TT} in partial specialization
+eval<E<int, float>> eE;     // error: \tcode{E} does not match \tcode{TT} in partial specialization
 \end{codeblock}
 \end{example}
 
@@ -3937,9 +3937,9 @@ struct C : A, T {
   int g() { return m; }         // finds \tcode{A::m} in the template definition context
 };
 
-template int C<B>::f();         // error: finds both \tcode{A::m} and \tcode{B::m}
-template int C<B>::g();         // OK: transformation to class member access syntax
-                                // does not occur in the template definition context; see~\ref{class.mfct.non-static}
+template int C<B>::f();     // error: finds both \tcode{A::m} and \tcode{B::m}
+template int C<B>::g();     // OK: transformation to class member access syntax
+                            // does not occur in the template definition context; see~\ref{class.mfct.non-static}
 \end{codeblock}
 \end{example}
 
-- 
2.7.4


From daa88af1fb6596e0e7ff61c9f41cb9a9b7c4b21f Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sun, 29 Jan 2017 05:44:06 +0100
Subject: [PATCH 33/45] [expr] Where appropriate, replace \term with
 \grammarterm, \placeholder, or math.

---
 source/expressions.tex | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/source/expressions.tex b/source/expressions.tex
index 58b5d76..1df89d7 100644
--- a/source/expressions.tex
+++ b/source/expressions.tex
@@ -1864,7 +1864,7 @@ member of that class.
 \end{note}
 
 \pnum
-Abbreviating \term{postfix-expression.id-expression}
+Abbreviating \grammarterm{postfix-expression}\tcode{.}\grammarterm{id-expression}
 as \tcode{E1.E2},
 \tcode{E1} is called the \defn{object expression}.
 If \tcode{E2} is a bit-field, \tcode{E1.E2} is a bit-field. The
@@ -2962,8 +2962,8 @@ applying \tcode{sizeof} to the subobject, due to virtual base classes
 and less strict padding requirements on base class subobjects.}
 \indextext{array!\idxcode{sizeof}}%
 When applied to an array, the result is the total number of bytes in the
-array. This implies that the size of an array of \term{n} elements is
-\term{n} times the size of an element.
+array. This implies that the size of an array of $n$ elements is
+$n$ times the size of an element.
 
 \pnum
 The \tcode{sizeof} operator can be applied to a pointer to a function,
@@ -3945,7 +3945,7 @@ The expression \tcode{E1->*E2} is converted into the equivalent form
 \tcode{(*(E1)).*E2}.
 
 \pnum
-Abbreviating \term{pm-expression}{}\tcode{.*}\term{cast-expression} as \tcode{E1.*E2}, \tcode{E1}
+Abbreviating \grammarterm{pm-expression}\tcode{.*}\grammarterm{cast-expression} as \tcode{E1.*E2}, \tcode{E1}
 is called the \term{object expression}.
 If the dynamic type of \tcode{E1} does not
 contain the member to which
@@ -4826,8 +4826,8 @@ resulting value of the bit-field is
 \impldefplain{value of bit-field that cannot represent!assigned value}.
 
 \pnum
-The behavior of an expression of the form \tcode{E1} \term{op}\tcode{=}
-\tcode{E2} is equivalent to \tcode{E1 = E1} \term{op} \tcode{E2} except
+The behavior of an expression of the form \tcode{E1} \placeholder{op}\tcode{=}
+\tcode{E2} is equivalent to \tcode{E1 = E1} \placeholder{op} \tcode{E2} except
 that \tcode{E1} is evaluated only once. In \tcode{+=} and \tcode{-=},
 \tcode{E1} shall either have arithmetic type or be a pointer to a
 possibly cv-qualified completely-defined object type. In all other
-- 
2.7.4


From 67a336a2a5de1e64c2763b82e02c5db716b34314 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Mon, 30 Jan 2017 17:49:16 +0100
Subject: [PATCH 34/45] [rand] Don't needlessly escape underscores.

The 'underscore' package already makes '_' in text behave as \_.
---
 source/numerics.tex | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/source/numerics.tex b/source/numerics.tex
index f31d8ee..cf14ba6 100644
--- a/source/numerics.tex
+++ b/source/numerics.tex
@@ -1435,7 +1435,7 @@ that entity is characterized:
 If integer-valued,
 an entity may optionally be further characterized as
 \techterm{signed} or \techterm{unsigned},
-according to \tcode{numeric\_limits<T>::is\_signed}.
+according to \tcode{numeric_limits<T>::is_signed}.
 
 \pnum
 Unless otherwise specified,
-- 
2.7.4


From 524e0312bc87ce39fbe94197a1653ff7bd914f27 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sun, 12 Feb 2017 10:32:17 +0100
Subject: [PATCH 35/45] Use \placeholder for a placeholder.

---
 source/regex.tex | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/source/regex.tex b/source/regex.tex
index 9c8c266..fcd496b 100644
--- a/source/regex.tex
+++ b/source/regex.tex
@@ -1020,7 +1020,7 @@ namespace std {
       using char_type       = charT;
       using string_type     = basic_string<char_type>;
       using locale_type     = locale;
-      using char_class_type = @{\itshape bitmask_type}@;
+      using char_class_type = @\placeholder{bitmask_type}@;
 
       regex_traits();
       static size_t length(const char_type* p);
-- 
2.7.4


From ceea998a10dd0bfe16e47ca0ee6ba5090dd2c343 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Mon, 20 Feb 2017 16:41:40 +0100
Subject: [PATCH 36/45] Annotate and index 'move/copy constructor' as defined
 terms.

Necessary to nicely linkify opening sentence in [special]/1.
---
 source/special.tex | 5 ++---
 1 file changed, 2 insertions(+), 3 deletions(-)

diff --git a/source/special.tex b/source/special.tex
index 002631b..8caa612 100644
--- a/source/special.tex
+++ b/source/special.tex
@@ -2423,8 +2423,7 @@ A non-template constructor for class
 \tcode{X}
 is
 a
-copy
-constructor if its first parameter is of type
+\defnx{copy constructor}{constructor!copy} if its first parameter is of type
 \tcode{X\&},
 \tcode{const X\&},
 \tcode{volatile X\&}
@@ -2450,7 +2449,7 @@ X c = b;            // calls \tcode{X(const X\&, int);}
 \end{example}
 
 \pnum
-A non-template constructor for class \tcode{X} is a move constructor if its
+A non-template constructor for class \tcode{X} is a \defnx{move constructor}{constructor!move} if its
 first parameter is of type \tcode{X\&\&}, \tcode{const X\&\&},
 \tcode{volatile X\&\&}, or \tcode{const volatile X\&\&}, and either there are
 no other parameters or else all other parameters have default
-- 
2.7.4


From 75bbfff4aa1c278a5131bcd7a8625e9b6fd2f541 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Wed, 1 Feb 2017 03:24:29 +0100
Subject: [PATCH 37/45] Add and use new link macros.

---
 source/access.tex        |  22 +-
 source/algorithms.tex    | 190 +++++++-------
 source/atomics.tex       |  10 +-
 source/basic.tex         | 482 +++++++++++++++++------------------
 source/classes.tex       | 192 +++++++-------
 source/compatibility.tex |  55 ++--
 source/containers.tex    | 185 +++++++-------
 source/conversions.tex   |  78 +++---
 source/declarations.tex  | 203 ++++++++-------
 source/declarators.tex   | 200 +++++++--------
 source/derived.tex       |  33 +--
 source/diagnostics.tex   |  12 +-
 source/exceptions.tex    |  94 +++----
 source/expressions.tex   | 635 ++++++++++++++++++++++++-----------------------
 source/future.tex        |  24 +-
 source/grammar.tex       |   8 +-
 source/intro.tex         | 128 +++++-----
 source/iostreams.tex     | 235 ++++++++++--------
 source/iterators.tex     |  43 ++--
 source/lex.tex           |  84 ++++---
 source/lib-intro.tex     | 181 +++++++-------
 source/locales.tex       |  20 +-
 source/macros.tex        |  44 ++++
 source/numerics.tex      | 135 +++++-----
 source/overloading.tex   | 124 ++++-----
 source/preprocessor.tex  |  22 +-
 source/regex.tex         |  34 +--
 source/special.tex       | 248 +++++++++---------
 source/statements.tex    |  82 +++---
 source/strings.tex       |  61 ++---
 source/support.tex       | 165 ++++++------
 source/templates.tex     | 269 ++++++++++----------
 source/threads.tex       | 172 ++++++-------
 source/utilities.tex     | 473 ++++++++++++++++++-----------------
 34 files changed, 2536 insertions(+), 2407 deletions(-)

diff --git a/source/access.tex b/source/access.tex
index 93e88ef..96b22d4 100644
--- a/source/access.tex
+++ b/source/access.tex
@@ -68,8 +68,8 @@ Access control is applied uniformly to all names, whether the names are
 referred to from declarations or expressions.
 \begin{note}
 Access control applies to names nominated by
-\tcode{friend}
-declarations~(\ref{class.friend}) and
+\link{\tcode{friend}
+declarations}{\ref{class.friend}} and
 \grammarterm{using-declaration}{s}~(\ref{namespace.udecl}).
 \end{note}
 In the case of overloaded function names, access control is applied to
@@ -167,7 +167,7 @@ must be deferred until the entire \grammarterm{base-specifier-list} has been see
 \pnum
 \indextext{argument!access checking and default}%
 \indextext{access control!default argument}%
-The names in a default argument~(\ref{dcl.fct.default}) are
+The names in a \link{default argument}{\ref{dcl.fct.default}} are
 bound at the point of declaration, and access is checked at that
 point rather than at any points of use of the default argument.
 Access checking for default arguments in function templates and in
@@ -286,7 +286,7 @@ class C : public B {
 \indextext{base class!\idxcode{public}}
 
 \pnum
-If a class is declared to be a base class (Clause~\ref{class.derived}) for another class using the
+If a class is declared to be a \link{base class}{Clause~\ref{class.derived}} for another class using the
 \tcode{public}
 access specifier, the
 \tcode{public}
@@ -369,7 +369,7 @@ and
 \begin{note}
 A member of a private base class might be inaccessible as an inherited
 member name, but accessible directly.
-Because of the rules on pointer conversions~(\ref{conv.ptr}) and explicit casts~(\ref{expr.cast}), a conversion from a pointer to a derived class to a pointer
+Because of the rules on \link{pointer conversions}{\ref{conv.ptr}} and \link{explicit casts}{\ref{expr.cast}}, a conversion from a pointer to a derived class to a pointer
 to an inaccessible base class might be ill-formed if an implicit conversion
 is used, but well-formed if an explicit cast is used.
 For example,
@@ -491,7 +491,7 @@ up and found.
 \begin{note}
 This class can be explicit, e.g., when a
 \grammarterm{qualified-id}
-is used, or implicit, e.g., when a class member access operator~(\ref{expr.ref}) is used (including cases where an implicit
+is used, or implicit, e.g., when a \link{class member access}{\ref{expr.ref}} operator is used (including cases where an implicit
 ``\tcode{this->}''
 is
 added).
@@ -757,7 +757,7 @@ class M {
 \end{example}
 
 \pnum
-Such a function is implicitly an inline function~(\ref{dcl.inline}).
+Such a function is implicitly an \deflink{inline function}{\ref{dcl.inline}}.
 A
 \tcode{friend}
 function defined in a class is in the (lexical) scope of the class in which it is defined.
@@ -815,7 +815,7 @@ class D : public B  {
 \pnum
 \indextext{local class!friend}%
 \indextext{friend!local class and}%
-If a friend declaration appears in a local class~(\ref{class.local}) and the
+If a friend declaration appears in a \deflink{local class}{\ref{class.local}} and the
 name specified is an unqualified name, a prior declaration is looked
 up without considering scopes that are outside the innermost enclosing
 non-class scope.
@@ -862,8 +862,8 @@ As described earlier, access to a protected member is granted because the
 reference occurs in a friend or member of some class \tcode{C}. If the access is
 to form a pointer to member~(\ref{expr.unary.op}), the
 \grammarterm{nested-name-specifier} shall denote \tcode{C} or a class derived from
-\tcode{C}. All other accesses involve a (possibly implicit) object
-expression~(\ref{expr.ref}). In this case, the class of the object expression shall be
+\tcode{C}. All other accesses involve a (possibly implicit)
+\deflink{object expression}{\ref{expr.ref}}. In this case, the class of the object expression shall be
 \tcode{C} or a class derived from \tcode{C}.
 \begin{example}
 
@@ -984,7 +984,7 @@ access is allowed.
 \pnum
 A nested class is a member and as such has the same access rights as any other member.
 The members of an enclosing class have no special access to members of a nested
-class; the usual access rules (Clause~\ref{class.access}) shall be obeyed.
+class; the usual \link{access rules}{Clause~\ref{class.access}} shall be obeyed.
 \begin{example}
 \indextext{example!nested class definition}%
 
diff --git a/source/algorithms.tex b/source/algorithms.tex
index 7aa1a26..f8cb40a 100644
--- a/source/algorithms.tex
+++ b/source/algorithms.tex
@@ -5,7 +5,7 @@
 
 \pnum
 This Clause describes components that \Cpp{} programs may use to perform
-algorithmic operations on containers (Clause~\ref{containers}) and other sequences.
+algorithmic operations on \link{containers}{Clause~\ref{containers}} and other sequences.
 
 \pnum
 The following subclauses describe components for
@@ -1074,7 +1074,7 @@ If an algorithm's template parameter is named
 or
 \tcode{Input\-Iterator2},
 the template argument shall satisfy the
-requirements of an input iterator~(\ref{input.iterators}).
+requirements of an \link{input iterator}{\ref{input.iterators}}.
 \item
 If an algorithm's template parameter is named
 \tcode{OutputIterator},
@@ -1082,7 +1082,7 @@ If an algorithm's template parameter is named
 or
 \tcode{Output\-Iterator2},
 the template argument shall satisfy the requirements
-of an output iterator~(\ref{output.iterators}).
+of an \link{output iterator}{\ref{output.iterators}}.
 \item
 If an algorithm's template parameter is named
 \tcode{ForwardIterator},
@@ -1090,7 +1090,7 @@ If an algorithm's template parameter is named
 or
 \tcode{Forward\-Iterator2},
 the template argument shall satisfy the requirements
-of a forward iterator~(\ref{forward.iterators}).
+of a \link{forward iterator}{\ref{forward.iterators}}.
 \item
 If an algorithm's template parameter is named
 \tcode{BidirectionalIterator},
@@ -1098,7 +1098,7 @@ If an algorithm's template parameter is named
 or
 \tcode{BidirectionalIterator2},
 the template argument shall satisfy the requirements
-of a bidirectional iterator~(\ref{bidirectional.iterators}).
+of a \link{bidirectional iterator}{\ref{bidirectional.iterators}}.
 \item
 If an algorithm's template parameter is named
 \tcode{RandomAccessIterator},
@@ -1106,7 +1106,7 @@ If an algorithm's template parameter is named
 or
 \tcode{RandomAccessIterator2},
 the template argument shall satisfy the requirements
-of a random-access iterator~(\ref{random.access.iterators}).
+of a \link{random-access iterator}{\ref{random.access.iterators}}.
 \end{itemize}
 
 \pnum
@@ -1116,7 +1116,7 @@ section says that a value pointed to by any iterator passed
 as an argument is modified, then that algorithm has an additional
 type requirement:
 The type of that argument shall satisfy the requirements
-of a mutable iterator~(\ref{iterator.requirements}).
+of a \link{mutable iterator}{\ref{iterator.requirements}}.
 \begin{note}
 This requirement does not affect arguments that are named
 \tcode{OutputIterator},
@@ -1140,7 +1140,7 @@ suffix \tcode{_if} (which follows the suffix \tcode{_copy}).
 \pnum
 The
 \tcode{Predicate}
-parameter is used whenever an algorithm expects a function object~(\ref{function.objects})
+parameter is used whenever an algorithm expects a \deflink{function object}{\ref{function.objects}}
 that, when applied to the result
 of dereferencing the corresponding iterator, returns a value testable as
 \tcode{true}.
@@ -1189,7 +1189,7 @@ apply any non-constant function through the dereferenced iterators.
 Unless otherwise specified, algorithms that take function objects as arguments
 are permitted to copy those function objects freely. Programmers for whom object
 identity is important should consider using a wrapper class that points to a
-noncopied implementation object such as \tcode{reference_wrapper<T>}~(\ref{refwrap}), or some equivalent solution.
+noncopied implementation object such as \link{\tcode{reference_wrapper<T>}}{\ref{refwrap}}, or some equivalent solution.
 \end{note}
 
 \pnum
@@ -1290,7 +1290,7 @@ identity of the provided objects..
 
 \pnum
 Parallel algorithms have template parameters
-named \tcode{ExecutionPolicy}~(\ref{execpol})
+named \link{\tcode{ExecutionPolicy}}{\ref{execpol}}
 which describe the manner in which the execution of these algorithms may be
 parallelized and the manner in which they apply the element access functions.
 
@@ -1321,8 +1321,8 @@ an execution policy object of type \tcode{execution::parallel_policy} are
 permitted to execute in either the invoking thread of execution or in a
 thread of execution implicitly
 created by the library to support parallel algorithm execution.
-If the threads of execution created by \tcode{thread}~(\ref{thread.thread.class}) provide concurrent
-forward progress guarantees~(\ref{intro.progress}), then a thread of execution
+If the threads of execution created by \link{\tcode{thread}}{\ref{thread.thread.class}} provide
+\deflink{concurrent forward progress guarantees}{\ref{intro.progress}}, then a thread of execution
 implicitly created by the library will provide parallel forward progress guarantees;
 otherwise, the provided forward progress guarantee is
 \impldef{forward progress guarantees for implicit threads of parallel algorithms (if not defined for \tcode{thread})}.
@@ -1491,7 +1491,7 @@ Parallel algorithms shall not participate in overload resolution unless
 
 \rSec2[alg.all_of]{All of}
 
-\indexlibrary{\idxcode{all_of}}%
+\begin{indexed}{\indexlibrary{\idxcode{all_of}}}
 \begin{itemdecl}
 template <class InputIterator, class Predicate>
   bool all_of(InputIterator first, InputIterator last, Predicate pred);
@@ -1499,6 +1499,7 @@ template <class ExecutionPolicy, class ForwardIterator, class Predicate>
   bool all_of(ExecutionPolicy&& exec, ForwardIterator first, ForwardIterator last,
               Predicate pred);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1512,7 +1513,7 @@ template <class ExecutionPolicy, class ForwardIterator, class Predicate>
 
 \rSec2[alg.any_of]{Any of}
 
-\indexlibrary{\idxcode{any_of}}%
+\begin{indexed}{\indexlibrary{\idxcode{any_of}}}
 \begin{itemdecl}
 template <class InputIterator, class Predicate>
   bool any_of(InputIterator first, InputIterator last, Predicate pred);
@@ -1520,6 +1521,7 @@ template <class ExecutionPolicy, class ForwardIterator, class Predicate>
   bool any_of(ExecutionPolicy&& exec, ForwardIterator first, ForwardIterator last,
               Predicate pred);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1533,7 +1535,7 @@ if there is no iterator \tcode{i} in the range
 
 \rSec2[alg.none_of]{None of}
 
-\indexlibrary{\idxcode{none_of}}%
+\begin{indexed}{\indexlibrary{\idxcode{none_of}}}
 \begin{itemdecl}
 template <class InputIterator, class Predicate>
   bool none_of(InputIterator first, InputIterator last, Predicate pred);
@@ -1541,6 +1543,7 @@ template <class ExecutionPolicy, class ForwardIterator, class Predicate>
   bool none_of(ExecutionPolicy&& exec, ForwardIterator first, ForwardIterator last,
                Predicate pred);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1554,18 +1557,19 @@ template <class ExecutionPolicy, class ForwardIterator, class Predicate>
 
 \rSec2[alg.foreach]{For each}
 
-\indexlibrary{\idxcode{for_each}}%
+\begin{indexed}{\indexlibrary{\idxcode{for_each}}}
 \begin{itemdecl}
 template<class InputIterator, class Function>
   Function for_each(InputIterator first, InputIterator last, Function f);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
 \requires \tcode{Function} shall meet the requirements of
-\tcode{MoveConstructible} (Table~\ref{tab:moveconstructible}).
+\link{\tcode{MoveConstructible}}{Table~\ref{tab:moveconstructible}}.
 \begin{note} \tcode{Function} need not meet the requirements of
-\tcode{CopyConstructible} (Table~\ref{tab:copyconstructible}). \end{note}
+\link{\tcode{CopyConstructible}}{Table~\ref{tab:copyconstructible}}. \end{note}
 
 \pnum
 \effects
@@ -2418,7 +2422,7 @@ for which \tcode{pred(*i)} is \tcode{true}.
 \complexity Exactly \tcode{last - first} applications of the corresponding predicate.
 
 \pnum
-\remarks Stable~(\ref{algorithm.stable}).
+\remarks \link{Stable}{\ref{algorithm.stable}}.
 \end{itemdescr}
 
 \indexlibrary{\idxcode{copy_backward}}%
@@ -2593,7 +2597,7 @@ The two ranges \range{first1}{last1}
 and
 \range{first2}{first2 + (last1 - first1)}
 shall not overlap.
-\tcode{*(first1 + n)} shall be swappable with~(\ref{swappable.requirements})
+\tcode{*(first1 + n)} shall be \deflink{swappable with}{\ref{swappable.requirements}}
 \tcode{*(first2 + n)}.
 
 \pnum
@@ -2624,7 +2628,7 @@ template<class ForwardIterator1, class ForwardIterator2>
 \pnum
 \requires
 \tcode{a} and \tcode{b} shall be dereferenceable. \tcode{*a} shall be
-swappable with~(\ref{swappable.requirements}) \tcode{*b}.
+\deflink{swappable with}{\ref{swappable.requirements}} \tcode{*b}.
 
 \pnum
 \effects
@@ -2787,7 +2791,7 @@ The results of the expressions
 \tcode{*first}
 and
 \tcode{new_value}
-shall be writable~(\ref{iterator.requirements.general}) to the
+shall be \deflink{writable}{\ref{iterator.requirements.general}} to the
 \tcode{result}
 output iterator.
 The ranges
@@ -2849,7 +2853,7 @@ template<class ExecutionPolicy, class ForwardIterator, class Size, class T>
 \requires
 The expression
 \tcode{value}
-shall be writable~(\ref{iterator.requirements.general}) to the output iterator. The type
+shall be \deflink{writable}{\ref{iterator.requirements.general}} to the output iterator. The type
 \tcode{Size}
 shall be convertible to an integral type~(\ref{conv.integral}, \ref{class.conv}).
 
@@ -2946,8 +2950,8 @@ template<class ExecutionPolicy, class ForwardIterator, class Predicate>
 \requires
 The type of
 \tcode{*first}
-shall satisfy the \tcode{MoveAssignable}
-requirements (Table~\ref{tab:moveassignable}).
+shall satisfy the \link{\tcode{MoveAssignable}
+requirements}{Table~\ref{tab:moveassignable}}.
 
 \pnum
 \effects
@@ -2962,7 +2966,7 @@ for which the following corresponding conditions hold:
 The end of the resulting range.
 
 \pnum
-\remarks Stable~(\ref{algorithm.stable}).
+\remarks \link{Stable}{\ref{algorithm.stable}}.
 
 \pnum
 \complexity
@@ -3037,7 +3041,7 @@ Exactly
 applications of the corresponding predicate.
 
 \pnum
-\remarks Stable~(\ref{algorithm.stable}).
+\remarks \link{Stable}{\ref{algorithm.stable}}.
 \end{itemdescr}
 
 \rSec2[alg.unique]{Unique}
@@ -3064,7 +3068,7 @@ template<class ExecutionPolicy, class ForwardIterator, class BinaryPredicate>
 \requires
 The comparison function shall be an equivalence relation.
 The type of \tcode{*first} shall satisfy the
-\tcode{MoveAssignable} requirements (Table~\ref{tab:moveassignable}).
+\link{\tcode{MoveAssignable} requirements}{Table~\ref{tab:moveassignable}}.
 
 \pnum
 \effects
@@ -3141,9 +3145,9 @@ If \tcode{InputIterator} meets the forward iterator requirements,
 then there are no additional requirements for \tcode{T}.
 Otherwise, if \tcode{OutputIterator} meets the forward iterator
 requirements and its value type is the same as \tcode{T},
-then \tcode{T} shall be \tcode{CopyAssignable} (Table~\ref{tab:copyassignable}).
+then \tcode{T} shall be \link{\tcode{CopyAssignable}}{Table~\ref{tab:copyassignable}}.
 Otherwise, \tcode{T} shall be both
-\tcode{CopyConstructible} (Table~\ref{tab:copyconstructible}) and \tcode{CopyAssignable}.
+\link{\tcode{CopyConstructible}}{Table~\ref{tab:copyconstructible}} and \tcode{CopyAssignable}.
 \begin{note}
 For the overloads with an \tcode{ExecutionPolicy}, there may be a performance
 cost if the value type of \tcode{ForwardIterator1} is not both
@@ -3188,7 +3192,7 @@ template<class ExecutionPolicy, class BidirectionalIterator>
 \begin{itemdescr}
 \pnum
 \requires
-\tcode{*first} shall be swappable~(\ref{swappable.requirements}).
+\tcode{*first} shall be \link{swappable}{\ref{swappable.requirements}}.
 
 \pnum
 \effects
@@ -3202,7 +3206,7 @@ to all pairs of iterators
 \pnum
 \requires
 \tcode{BidirectionalIterator} shall satisfy the requirements of
-\tcode{ValueSwappable}~(\ref{swappable.requirements}).
+\link{\tcode{ValueSwappable}}{\ref{swappable.requirements}}.
 
 \pnum
 \complexity
@@ -3277,12 +3281,10 @@ and
 \range{middle}{last}
 shall be valid ranges.
 \tcode{ForwardIterator} shall satisfy the requirements of
-\tcode{ValueSwappable}~(\ref{swappable.requirements}). The type of \tcode{*first} shall satisfy
-the requirements of \tcode{MoveConstructible}
-(Table~\ref{tab:moveconstructible}) and the
+\link{\tcode{ValueSwappable}}{\ref{swappable.requirements}}. The type of \tcode{*first} shall satisfy
+the requirements of \link{\tcode{MoveConstructible}}{Table~\ref{tab:moveconstructible}} and the
 requirements of
-\tcode{MoveAssignable}
-(Table~\ref{tab:moveassignable}).
+\link{\tcode{MoveAssignable}}{Table~\ref{tab:moveassignable}}.
 
 \pnum
 \effects
@@ -3368,19 +3370,19 @@ template<class PopulationIterator, class SampleIterator,
 \requires
 \begin{itemize}
 \item
-\tcode{PopulationIterator} shall satisfy the requirements of an input iterator~(\ref{input.iterators}).
+\tcode{PopulationIterator} shall satisfy the requirements of an \link{input iterator}{\ref{input.iterators}}.
 \item
-\tcode{SampleIterator} shall satisfy the requirements of an output iterator~(\ref{output.iterators}).
+\tcode{SampleIterator} shall satisfy the requirements of an \link{output iterator}{\ref{output.iterators}}.
 \item
-\tcode{SampleIterator} shall satisfy the additional requirements of a random access iterator~(\ref{random.access.iterators})
-unless \tcode{PopulationIterator} satisfies the additional requirements of a forward iterator~(\ref{forward.iterators}).
+\tcode{SampleIterator} shall satisfy the additional requirements of a \link{random access iterator}{\ref{random.access.iterators}}
+unless \tcode{PopulationIterator} satisfies the additional requirements of a \link{forward iterator}{\ref{forward.iterators}}.
 \item
-\tcode{PopulationIterator}'s value type shall be writable~(\ref{iterator.requirements.general}) to \tcode{out}.
+\tcode{PopulationIterator}'s value type shall be \deflink{writable}{\ref{iterator.requirements.general}} to \tcode{out}.
 \item
 \tcode{Distance} shall be an integer type.
 \item
 \tcode{remove_reference_t<UniformRandomBitGenerator>}
-shall meet the requirements of a uniform random bit generator type (\ref{rand.req.urng})
+shall meet the requirements of a \link{uniform random bit generator}{\ref{rand.req.urng}} type
 whose return type is convertible to \tcode{Distance}.
 \item
 \tcode{out} shall not be in the range \range{first}{last}.
@@ -3431,11 +3433,11 @@ template<class RandomAccessIterator, class UniformRandomBitGenerator>
 \pnum
 \requires
 \tcode{RandomAccessIterator} shall satisfy the requirements of
-\tcode{ValueSwappable}~(\ref{swappable.requirements}).
+\link{\tcode{ValueSwappable}}{\ref{swappable.requirements}}.
 The type
 \tcode{remove_reference_t<UniformRandomBitGenerator>}
 shall meet the requirements of a
-uniform random bit generator~(\ref{rand.req.urng}) type whose return type is
+\link{uniform random bit generator}{\ref{rand.req.urng}} type whose return type is
 convertible to
 \tcode{iterator_traits<Random\-Access\-Itera\-tor>::difference_type}.
 
@@ -3469,10 +3471,10 @@ and one that uses an
 
 \pnum
 \tcode{Compare}
-is a function object
-type~(\ref{function.objects}). The return value of the function call operation applied to
-an object of type \tcode{Compare}, when contextually converted to
-\tcode{bool} (Clause~\ref{conv}),
+is a \deflinkx{function object type}{function object!type}{\ref{function.objects}}.
+The return value of the function call operation applied to
+an object of type \tcode{Compare}, when \deflinkx{contextually converted to
+\tcode{bool}}{conversion!contextual to bool}{Clause~\ref{conv}},
 yields \tcode{true} if the first argument of the call
 is less than the second, and
 \tcode{false}
@@ -3607,10 +3609,10 @@ template<class ExecutionPolicy, class RandomAccessIterator, class Compare>
 \pnum
 \requires
 \tcode{RandomAccessIterator} shall satisfy the requirements of
-\tcode{ValueSwappable}~(\ref{swappable.requirements}). The type
+\link{\tcode{ValueSwappable}}{\ref{swappable.requirements}}. The type
 of \tcode{*first} shall satisfy the requirements of
-\tcode{MoveConstructible} (Table~\ref{tab:moveconstructible}) and of
-\tcode{MoveAssignable} (Table~\ref{tab:moveassignable}).
+\link{\tcode{MoveConstructible}}{Table~\ref{tab:moveconstructible}} and of
+\link{\tcode{MoveAssignable}}{Table~\ref{tab:moveassignable}}.
 
 \pnum
 \effects
@@ -3645,10 +3647,10 @@ template<class ExecutionPolicy, class RandomAccessIterator, class Compare>
 \pnum
 \requires
 \tcode{RandomAccessIterator} shall satisfy the requirements of
-\tcode{ValueSwappable}~(\ref{swappable.requirements}). The type
+\link{\tcode{ValueSwappable}}{\ref{swappable.requirements}}. The type
 of \tcode{*first} shall satisfy the requirements of
-\tcode{MoveConstructible} (Table~\ref{tab:moveconstructible}) and of
-\tcode{MoveAssignable} (Table~\ref{tab:moveassignable}).
+\link{\tcode{MoveConstructible}}{Table~\ref{tab:moveconstructible}} and of
+\link{\tcode{MoveAssignable}}{Table~\ref{tab:moveassignable}}.
 
 \pnum
 \effects
@@ -3661,7 +3663,7 @@ comparisons, where
 $N = \tcode{last - first}$, but only $N \log N$ comparisons if there is enough extra memory.
 
 \pnum
-\remarks Stable~(\ref{algorithm.stable}).
+\remarks \link{Stable}{\ref{algorithm.stable}}.
 \end{itemdescr}
 
 \rSec3[partial.sort]{\tcode{partial_sort}}
@@ -3696,10 +3698,10 @@ template<class ExecutionPolicy, class RandomAccessIterator, class Compare>
 \pnum
 \requires
 \tcode{RandomAccessIterator} shall satisfy the requirements of
-\tcode{ValueSwappable}~(\ref{swappable.requirements}). The type
+\link{\tcode{ValueSwappable}}{\ref{swappable.requirements}}. The type
 of \tcode{*first} shall satisfy the requirements of
-\tcode{MoveConstructible} (Table~\ref{tab:moveconstructible}) and of
-\tcode{MoveAssignable} (Table~\ref{tab:moveassignable}).
+\link{\tcode{MoveConstructible}}{Table~\ref{tab:moveconstructible}} and of
+\link{\tcode{MoveAssignable}}{Table~\ref{tab:moveassignable}}.
 
 \pnum
 \effects
@@ -3758,10 +3760,10 @@ template<class ExecutionPolicy, class ForwardIterator, class RandomAccessIterato
 \pnum
 \requires
 \tcode{RandomAccessIterator} shall satisfy the requirements of
-\tcode{ValueSwappable}~(\ref{swappable.requirements}). The type
+\link{\tcode{ValueSwappable}}{\ref{swappable.requirements}}. The type
 of \tcode{*result_first} shall satisfy the requirements of
-\tcode{MoveConstructible} (Table~\ref{tab:moveconstructible}) and of
-\tcode{Move\-Assignable} (Table~\ref{tab:moveassignable}).
+\link{\tcode{MoveConstructible}}{Table~\ref{tab:moveconstructible}} and of
+\link{\tcode{Move\-Assignable}}{Table~\ref{tab:moveassignable}}.
 
 \pnum
 \effects
@@ -3893,10 +3895,10 @@ template<class ExecutionPolicy, class RandomAccessIterator, class Compare>
 \pnum
 \requires
 \tcode{RandomAccessIterator} shall satisfy the requirements of
-\tcode{ValueSwappable}~(\ref{swappable.requirements}). The type
+\link{\tcode{ValueSwappable}}{\ref{swappable.requirements}}. The type
 of \tcode{*first} shall satisfy the requirements of
-\tcode{MoveConstructible} (Table~\ref{tab:moveconstructible}) and of
-\tcode{MoveAssignable} (Table~\ref{tab:moveassignable}).
+\link{\tcode{MoveConstructible}}{Table~\ref{tab:moveconstructible}} and of
+\link{\tcode{MoveAssignable}}{Table~\ref{tab:moveassignable}}.
 
 \pnum
 \effects
@@ -4201,7 +4203,7 @@ template<class ExecutionPolicy, class ForwardIterator, class Predicate>
 \pnum
 \requires
 \tcode{ForwardIterator} shall satisfy the requirements of
-\tcode{ValueSwappable}~(\ref{swappable.requirements}).
+\link{\tcode{ValueSwappable}}{\ref{swappable.requirements}}.
 
 \pnum
 \effects Places all the elements in the range \range{first}{last} that satisfy \tcode{pred} before all the elements that do not satisfy it.
@@ -4240,10 +4242,10 @@ template<class ExecutionPolicy, class BidirectionalIterator, class Predicate>
 \pnum
 \requires
 \tcode{BidirectionalIterator} shall satisfy the requirements of
-\tcode{ValueSwappable}~(\ref{swappable.requirements}). The type
+\link{\tcode{ValueSwappable}}{\ref{swappable.requirements}}. The type
 of \tcode{*first} shall satisfy the requirements of
-\tcode{MoveConstructible} (Table~\ref{tab:moveconstructible}) and of
-\tcode{MoveAssignable} (Table~\ref{tab:moveassignable}).
+\link{\tcode{MoveConstructible}}{Table~\ref{tab:moveconstructible}} and of
+\link{\tcode{MoveAssignable}}{Table~\ref{tab:moveassignable}}.
 
 \pnum
 \effects
@@ -4411,7 +4413,7 @@ is \tcode{result + (last1 - first1) + (last2 - first2)}, such that the resulting
 \end{itemize}
 
 \pnum
-\remarks Stable~(\ref{algorithm.stable}).
+\remarks \link{Stable}{\ref{algorithm.stable}}.
 \end{itemdescr}
 
 \indexlibrary{\idxcode{inplace_merge}}%
@@ -4443,10 +4445,10 @@ template<class ExecutionPolicy, class BidirectionalIterator, class Compare>
 The ranges \range{first}{middle} and \range{middle}{last} shall be
 sorted with respect to \tcode{operator<} or \tcode{comp}.
 \tcode{BidirectionalIterator} shall satisfy the requirements of
-\tcode{ValueSwappable}~(\ref{swappable.requirements}). The type
+\link{\tcode{ValueSwappable}}{\ref{swappable.requirements}}. The type
 of \tcode{*first} shall satisfy the requirements of
-\tcode{MoveConstructible} (Table~\ref{tab:moveconstructible}) and of
-\tcode{MoveAssignable} (Table~\ref{tab:moveassignable}).
+\link{\tcode{MoveConstructible}}{Table~\ref{tab:moveconstructible}} and of
+\link{\tcode{MoveAssignable}}{Table~\ref{tab:moveassignable}}.
 
 \pnum
 \effects
@@ -4481,7 +4483,7 @@ memory is available,  \bigoh{N \log N} comparisons.
 
 
 \pnum
-\remarks Stable~(\ref{algorithm.stable}).
+\remarks \link{Stable}{\ref{algorithm.stable}}.
 \end{itemdescr}
 
 \rSec2[alg.set.operations]{Set operations on sorted structures}
@@ -4489,7 +4491,7 @@ memory is available,  \bigoh{N \log N} comparisons.
 \pnum
 This section defines all the basic set operations on sorted structures.
 They also work with
-\tcode{multiset}s~(\ref{multiset})
+\link{\tcode{multiset}s}{\ref{multiset}}
 containing multiple copies of equivalent elements.
 The semantics of the set operations are generalized to
 \tcode{multiset}s
@@ -4857,10 +4859,8 @@ The range
 \range{first}{last - 1}
 shall be a valid heap.
 The type of \tcode{*first} shall satisfy
-the \tcode{MoveConstructible} requirements
-(Table~\ref{tab:moveconstructible}) and the
-\tcode{MoveAssignable} requirements
-(Table~\ref{tab:moveassignable}).
+the \link{\tcode{MoveConstructible} requirements}{Table~\ref{tab:moveconstructible}} and the
+\link{\tcode{MoveAssignable} requirements}{Table~\ref{tab:moveassignable}}.
 
 \pnum
 \effects
@@ -4895,10 +4895,10 @@ The range
 \range{first}{last}
 shall be a valid non-empty heap.
 \tcode{RandomAccessIterator} shall satisfy the requirements of
-\tcode{ValueSwappable}~(\ref{swappable.requirements}). The type
+\link{\tcode{ValueSwappable}}{\ref{swappable.requirements}}. The type
 of \tcode{*first} shall satisfy the requirements of
-\tcode{MoveConstructible} (Table~\ref{tab:moveconstructible}) and of
-\tcode{MoveAssignable} (Table~\ref{tab:moveassignable}).
+\link{\tcode{MoveConstructible}}{Table~\ref{tab:moveconstructible}} and of
+\link{\tcode{MoveAssignable}}{Table~\ref{tab:moveassignable}}.
 
 
 \pnum
@@ -4932,10 +4932,8 @@ template<class RandomAccessIterator, class Compare>
 \begin{itemdescr}
 \pnum
 \requires The type of \tcode{*first} shall satisfy
-the \tcode{MoveConstructible} requirements
-(Table~\ref{tab:moveconstructible}) and the
-\tcode{MoveAssignable} requirements
-(Table~\ref{tab:moveassignable}).
+the \link{\tcode{MoveConstructible} requirements}{Table~\ref{tab:moveconstructible}} and the
+\link{\tcode{MoveAssignable} requirements}{Table~\ref{tab:moveassignable}}.
 
 \pnum
 \effects
@@ -4965,10 +4963,10 @@ template<class RandomAccessIterator, class Compare>
 \pnum
 \requires The range \range{first}{last} shall be a valid heap.
 \tcode{RandomAccessIterator} shall satisfy the requirements of
-\tcode{ValueSwappable}~(\ref{swappable.requirements}). The type
+\link{\tcode{ValueSwappable}}{\ref{swappable.requirements}}. The type
 of \tcode{*first} shall satisfy the requirements of
-\tcode{MoveConstructible} (Table~\ref{tab:moveconstructible}) and of
-\tcode{MoveAssignable} (Table~\ref{tab:moveassignable}).
+\link{\tcode{MoveConstructible}}{Table~\ref{tab:moveconstructible}} and of
+\link{\tcode{MoveAssignable}}{Table~\ref{tab:moveassignable}}.
 
 \pnum
 \effects
@@ -5080,7 +5078,7 @@ template<class T, class Compare>
 \pnum
 \requires
 For the first form, type \tcode{T} shall be
-\tcode{LessThanComparable} (Table~\ref{tab:lessthancomparable}).
+\link{\tcode{LessThanComparable}}{Table~\ref{tab:lessthancomparable}}.
 
 \pnum
 \returns
@@ -5130,7 +5128,7 @@ template<class T, class Compare>
 \pnum
 \requires
 For the first form, type \tcode{T} shall be
-\tcode{LessThanComparable} (Table~\ref{tab:lessthancomparable}).
+\link{\tcode{LessThanComparable}}{Table~\ref{tab:lessthancomparable}}.
 
 \pnum
 \returns
@@ -5181,7 +5179,7 @@ template<class T, class Compare>
 \pnum
 \requires
 For the first form, type \tcode{T} shall be
-\tcode{LessThanComparable} (Table~\ref{tab:lessthancomparable}).
+\link{\tcode{LessThanComparable}}{Table~\ref{tab:lessthancomparable}}.
 
 \pnum
 \returns
@@ -5365,7 +5363,7 @@ template<class T, class Compare>
 \requires
 The value of \tcode{lo} shall be no greater than \tcode{hi}.
 For the first form, type \tcode{T}
-shall be \tcode{LessThan\-Comparable} (Table~\ref{tab:lessthancomparable}).
+shall be \link{\tcode{LessThan\-Comparable}}{Table~\ref{tab:lessthancomparable}}.
 
 \pnum
 \returns
@@ -5474,7 +5472,7 @@ template<class BidirectionalIterator, class Compare>
 \pnum
 \requires
 \tcode{BidirectionalIterator} shall satisfy the requirements of
-\tcode{ValueSwappable}~(\ref{swappable.requirements}).
+\link{\tcode{ValueSwappable}}{\ref{swappable.requirements}}.
 
 \pnum
 \effects
@@ -5516,7 +5514,7 @@ template<class BidirectionalIterator, class Compare>
 \pnum
 \requires
 \tcode{BidirectionalIterator} shall satisfy the requirements of
-\tcode{ValueSwappable}~(\ref{swappable.requirements}).
+\link{\tcode{ValueSwappable}}{\ref{swappable.requirements}}.
 
 \pnum
 \effects
@@ -5549,7 +5547,7 @@ swaps.
 \indextext{\idxhdr{cstdlib}}%
 \indexlibrary{\idxhdr{cstdlib}}%
 \begin{note}
-The header \tcode{<cstdlib>}~(\ref{cstdlib.syn})
+The header \link{\tcode{<cstdlib>}}{\ref{cstdlib.syn}}
 declares the functions described in this subclause.
 \end{note}
 
diff --git a/source/atomics.tex b/source/atomics.tex
index 0f55b41..06bc92c 100644
--- a/source/atomics.tex
+++ b/source/atomics.tex
@@ -474,16 +474,18 @@ the read-modify-write operation.
 Implementations should make atomic stores visible to atomic loads within a reasonable
 amount of time.
 
-\indexlibrary{\idxcode{kill_dependency}}%
+\begin{indexed}{\indexlibrary{\idxcode{kill_dependency}}}
 \begin{itemdecl}
 template <class T>
   T kill_dependency(T y) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
-\effects The argument does not carry a dependency to the return
-value~(\ref{intro.multithread}).
+\effects The argument does not
+\deflinkx{carry a dependency}{carries a dependency}{\ref{intro.multithread}}
+to the return value.
 
 \pnum
 \returns \tcode{y}.
@@ -525,7 +527,7 @@ lock-free. A value of 1 indicates that the types are sometimes lock-free. A
 value of 2 indicates that the types are always lock-free.
 
 \pnum
-The function \tcode{atomic_is_lock_free}~(\ref{atomics.types.operations})
+The function \linkx{\tcode{atomic_is_lock_free}}{\idxcode{atomic_is_lock_free}}{\ref{atomics.types.operations}}
 indicates whether the object is lock-free. In any given program execution, the
 result of the lock-free query shall be consistent for all pointers of the same
 type.
diff --git a/source/basic.tex b/source/basic.tex
index 98c816a..832cd73 100644
--- a/source/basic.tex
+++ b/source/basic.tex
@@ -42,7 +42,7 @@ label~(\ref{stmt.goto}, \ref{stmt.label}).
 \pnum
 Every name that denotes an entity is introduced by a
 \defn{declaration}. Every name that denotes a label is introduced
-either by a \tcode{goto} statement~(\ref{stmt.goto}) or a
+either by a \link{\tcode{goto} statement}{\ref{stmt.goto}} or a
 \grammarterm{labeled-statement}~(\ref{stmt.label}).
 
 \pnum
@@ -68,7 +68,7 @@ the same operator, or
 with the same type, or
 \item they are \grammarterm{template-id}{s} that refer to the same class,
 function, or variable~(\ref{temp.type}), or
-\item they are the names of literal operators~(\ref{over.literal}) formed with
+\item they are the names of \link{literal operators}{\ref{over.literal}} formed with
 the same literal suffix identifier.
 \end{itemize}
 
@@ -77,7 +77,7 @@ the same literal suffix identifier.
 \indextext{linkage}%
 A name used in more than one translation unit can potentially
 refer to the same entity in these translation units depending on the
-linkage~(\ref{basic.link}) of the name specified in each
+\link{linkage}{\ref{basic.link}} of the name specified in each
 translation unit.
 
 \rSec1[basic.def]{Declarations and definitions}
@@ -86,17 +86,17 @@ translation unit.
 \indextext{declaration!definition versus}%
 \indextext{declaration}%
 \indextext{declaration!name}%
-A declaration (Clause~\ref{dcl.dcl}) may introduce
+A \link{declaration}{Clause~\ref{dcl.dcl}} may introduce
 one or more names into a translation
 unit or redeclare names introduced by previous declarations.
 If so, the
 declaration specifies the interpretation and attributes of these names.
 A declaration may also have effects including:
 \begin{itemize}
-\item a static assertion (Clause~\ref{dcl.dcl}),
-\item controlling template instantiation~(\ref{temp.explicit}),
+\item a \linkx{static assertion}{\idxgram{static_assert}}{Clause~\ref{dcl.dcl}},
+\item controlling \link{template instantiation}{\ref{temp.explicit}},
 \item guiding template argument deduction for constructors~(\ref{temp.deduct.guide}),
-\item use of attributes (Clause~\ref{dcl.attr}), and
+\item use of \link{attributes}{Clause~\ref{dcl.attr}}, and
 \item nothing (in the case of an \grammarterm{empty-declaration}).
 \end{itemize}
 
@@ -112,11 +112,11 @@ without specifying the function's body~(\ref{dcl.fct.def}),
 it contains
 the
 \indextext{declaration!\idxcode{extern}}%
-\tcode{extern} specifier~(\ref{dcl.stc}) or a
+\linkx{\tcode{extern}}{\idxcode{extern}}{\ref{dcl.stc}} specifier or a
 \grammarterm{linkage-specification}\footnote{Appearing inside the braced-enclosed
 \grammarterm{declaration-seq} in a \grammarterm{linkage-specification} does
 not affect whether a declaration is a definition.}
-(\ref{dcl.link}) and neither an \grammarterm{initializer} nor a
+and neither an \grammarterm{initializer} nor a
 \grammarterm{function-body},
 \item
 \indextext{declaration!static member@\tcode{static} member}%
@@ -128,7 +128,7 @@ and the variable was defined within the class with the \tcode{constexpr}
 specifier (this usage is deprecated; see \ref{depr.static_constexpr}),
 \item
 \indextext{declaration!class name}%
-it is a class name declaration~(\ref{class.name}),
+it is a \link{class name}{\ref{class.name}} declaration,
 \item
 it is an
 \indextext{declaration!opaque enum}%
@@ -147,7 +147,7 @@ declarator that is not the \grammarterm{declarator} of a
 \item
 it is a
 \indextext{declaration!\idxcode{typedef}}%
-\tcode{typedef} declaration~(\ref{dcl.typedef}),
+\link{\tcode{typedef}}{\ref{dcl.typedef}} declaration,
 \item it is
 an \grammarterm{alias-declaration}~(\ref{dcl.typedef}),
 \item it is
@@ -166,9 +166,9 @@ it is an
 \item it is
 a \grammarterm{using-directive}~(\ref{namespace.udir}),
 \item it is
-an explicit instantiation declaration~(\ref{temp.explicit}), or
+an \link{explicit instantiation}{\ref{temp.explicit}} declaration, or
 \item it is
-an explicit specialization~(\ref{temp.expl.spec}) whose
+an \link{explicit specialization}{\ref{temp.expl.spec}} whose
 \grammarterm{declaration} is not a definition.
 \end{itemize}
 \begin{example} All but one of the following are definitions:
@@ -207,12 +207,12 @@ using N::d;                     // declares \tcode{d}
 \begin{note}
 \indextext{implementation-generated}%
 In some circumstances, \Cpp{} implementations implicitly define the
-default constructor~(\ref{class.ctor}),
-copy constructor~(\ref{class.copy}),
-move constructor~(\ref{class.copy}),
-copy assignment operator~(\ref{class.copy}),
-move assignment operator~(\ref{class.copy}),
-or destructor~(\ref{class.dtor}) member functions. \end{note}
+\deflinkx{default constructor}{constructor!default}{\ref{class.ctor}},
+\deflinkx{copy constructor}{constructor!copy}{\ref{class.copy}},
+\deflinkx{move constructor}{constructor!move}{\ref{class.copy}},
+\deflinkx{copy assignment operator}{assignment operator!copy}{\ref{class.copy}},
+\deflinkx{move assignment operator}{assignment operator!move}{\ref{class.copy}},
+or \link{destructor}{\ref{class.dtor}} member functions. \end{note}
 \begin{example} Given
 
 \begin{codeblock}
@@ -255,7 +255,7 @@ struct C {
 \pnum
 \indextext{type!incomplete}%
 A program is ill-formed if the definition of any object gives the object
-an incomplete type~(\ref{basic.types}).
+an \deflinkx{incomplete type}{type!incomplete}{\ref{basic.types}}.
 
 \indextext{object!definition}%
 \indextext{function!definition}%
@@ -270,28 +270,28 @@ variable, function, class type, enumeration type, or template.
 
 \pnum
 An expression is \defn{potentially evaluated} unless it is an
-unevaluated operand (Clause~\ref{expr}) or a subexpression thereof.
+\deflink{unevaluated operand}{Clause~\ref{expr}} or a subexpression thereof.
 The set of \defn{potential results} of an expression \tcode{e} is
 defined as follows:
 \begin{itemize}
 \item If \tcode{e} is an
 \grammarterm{id-expression}~(\ref{expr.prim.id}), the set
 contains only \tcode{e}.
-\item If \tcode{e} is a subscripting operation~(\ref{expr.sub}) with
+\item If \tcode{e} is a \link{subscripting operation}{\ref{expr.sub}} with
 an array operand, the set contains the potential results of that operand.
-\item If \tcode{e} is a class member access
-expression~(\ref{expr.ref}), the set contains the potential results of
+\item If \tcode{e} is a \link{class member access}{\ref{expr.ref}} expression,
+the set contains the potential results of
 the object expression.
-\item If \tcode{e} is a pointer-to-member
-expression~(\ref{expr.mptr.oper}) whose second operand is a constant
+\item If \tcode{e} is a \link{pointer-to-member}{\ref{expr.mptr.oper}}
+expression whose second operand is a constant
 expression, the set contains the potential results of the object
 expression.
 \item If \tcode{e} has the form \tcode{(e1)}, the set contains the
 potential results of \tcode{e1}.
-\item If \tcode{e} is a glvalue conditional
-expression~(\ref{expr.cond}), the set is the union of the sets of
+\item If \tcode{e} is a glvalue \link{conditional}{\ref{expr.cond}}
+expression, the set is the union of the sets of
 potential results of the second and third operands.
-\item If \tcode{e} is a comma expression~(\ref{expr.comma}), the set
+\item If \tcode{e} is a \link{comma expression}{\ref{expr.comma}}, the set
 contains the potential results of the right operand.
 \item Otherwise, the set is empty.
 \end{itemize}
@@ -314,16 +314,16 @@ int n = b ? (1, S::x)  // \tcode{S::x} is not odr-used here
 \pnum
 A variable \tcode{x} whose name appears as a
 potentially-evaluated expression \tcode{ex} is \defn{odr-used} by \tcode{ex} unless
-applying the lvalue-to-rvalue conversion (\ref{conv.lval}) to \tcode{x} yields
-a constant expression~(\ref{expr.const}) that does not invoke any non-trivial
+applying the \link{lvalue-to-rvalue conversion}{\ref{conv.lval}} to \tcode{x} yields
+a \link{constant expression}{\ref{expr.const}} that does not invoke any non-trivial
 functions
 and, if \tcode{x} is an object, \tcode{ex} is an element of
-the set of potential results of an expression \tcode{e}, where either the lvalue-to-rvalue
-conversion~(\ref{conv.lval}) is applied to \tcode{e}, or \tcode{e} is
-a discarded-value expression~(Clause \ref{expr}).
+the set of potential results of an expression \tcode{e}, where either the \link{lvalue-to-rvalue
+conversion}{\ref{conv.lval}} is applied to \tcode{e}, or \tcode{e} is
+a \deflink{discarded-value expression}{Clause \ref{expr}}.
 \tcode{this} is odr-used if it appears as a potentially-evaluated expression
-(including as the result of the implicit transformation in the body of a non-static
-member function~(\ref{class.mfct.non-static})).
+(including as the result of the implicit transformation in the body of a \link{non-static
+member function}{\ref{class.mfct.non-static}}).
 A virtual member
 function is odr-used if it is not pure.
 A function whose name appears as a potentially-evaluated
@@ -332,9 +332,9 @@ member of a set of overloaded functions~(\ref{basic.lookup}, \ref{over.match}, \
 unless it is a pure virtual function and either
 its name is not explicitly qualified or
 the expression forms a pointer to member~(\ref{expr.unary.op}).
-\begin{note} This covers calls to named
-functions~(\ref{expr.call}), operator overloading (Clause~\ref{over}),
-user-defined conversions~(\ref{class.conv.fct}), allocation functions for
+\begin{note} This covers \link{calls to named
+functions}{\ref{expr.call}}, \link{operator overloading}{Clause~\ref{over}},
+\link{user-defined conversions}{\ref{class.conv.fct}}, allocation functions for
 placement \grammarterm{new-expression}{s}~(\ref{expr.new}), as well as non-default
 initialization~(\ref{dcl.init}). A constructor selected to copy or move an
 object of class type is odr-used even if the
@@ -358,13 +358,13 @@ implicitly-defined
 copy-assignment or move-assignment function for another class as specified
 in~\ref{class.copy}.
 A constructor for a class is odr-used as specified
-in~\ref{dcl.init}. A destructor for a class is odr-used if it is potentially
-invoked~(\ref{class.dtor}).
+in~\ref{dcl.init}. A destructor for a class is odr-used if it is
+\deflink{potentially invoked}{\ref{class.dtor}}.
 
 \pnum
 Every program shall contain exactly one definition of every non-inline
 function or variable that is odr-used in that program
-outside of a discarded statement~(\ref{stmt.if}); no diagnostic required.
+outside of a \deflink{discarded statement}{\ref{stmt.if}}; no diagnostic required.
 The definition can appear explicitly in the program, it can be found in
 the standard or a user-defined library, or (when appropriate) it is
 implicitly defined (see~\ref{class.ctor}, \ref{class.dtor} and
@@ -388,9 +388,9 @@ X* x2;                          // use \tcode{X} in pointer formation
 describe in which contexts complete class types are required. A class
 type \tcode{T} must be complete if:
 \begin{itemize}
-\item an object of type \tcode{T} is defined~(\ref{basic.def}), or
-\item a non-static class data member of type \tcode{T} is
-declared~(\ref{class.mem}), or
+\item an object of type \tcode{T} is \link{defined}{\ref{basic.def}}, or
+\item a non-static class \deflink{data member}{\ref{class.mem}} of
+type \tcode{T} is declared, or
 \item \tcode{T} is used as the allocated type or array element type in a
 \grammarterm{new-expression}~(\ref{expr.new}), or
 \item an lvalue-to-rvalue conversion is applied to
@@ -401,34 +401,34 @@ type \tcode{T} (Clause~\ref{conv}, \ref{expr.type.conv},
 \ref{expr.dynamic.cast}, \ref{expr.static.cast}, \ref{expr.cast}), or
 \item an expression that is not a null pointer constant, and has type
 other than \cv{}~\tcode{void*}, is converted to the type pointer to \tcode{T}
-or reference to \tcode{T} using a standard conversion
-(Clause~\ref{conv}), a \tcode{dynamic_cast}~(\ref{expr.dynamic.cast}) or
-a \tcode{static_cast}~(\ref{expr.static.cast}), or
-\item a class member access operator is applied to an expression of type
-\tcode{T}~(\ref{expr.ref}), or
-\item the \tcode{typeid} operator~(\ref{expr.typeid}) or the
-\tcode{sizeof} operator~(\ref{expr.sizeof}) is applied to an operand of
+or reference to \tcode{T} using a \link{standard conversion}{Clause~\ref{conv}},
+a \link{\tcode{dynamic_cast}}{\ref{expr.dynamic.cast}} or
+a \link{\tcode{static_cast}}{\ref{expr.static.cast}}, or
+\item a \link{class member access}{\ref{expr.ref}} operator is applied to an expression of type
+\tcode{T}, or
+\item the \link{\tcode{typeid} operator}{\ref{expr.typeid}} or the
+\link{\tcode{sizeof} operator}{\ref{expr.sizeof}} is applied to an operand of
 type \tcode{T}, or
 \item a function with a return type or argument type of type \tcode{T}
-is defined~(\ref{basic.def}) or called~(\ref{expr.call}), or
+is defined~(\ref{basic.def}) or \link{called}{\ref{expr.call}}, or
 \item a class with a base class of type \tcode{T} is
 defined (Clause~\ref{class.derived}), or
-\item an lvalue of type \tcode{T} is assigned to~(\ref{expr.ass}), or
+\item an lvalue of type \tcode{T} is \link{assigned to}{\ref{expr.ass}}, or
 \item the type \tcode{T} is the subject of an
-\tcode{alignof} expression~(\ref{expr.alignof}), or
+\link{\tcode{alignof} expression}{\ref{expr.alignof}}, or
 \item an \grammarterm{exception-declaration} has type \tcode{T}, reference to
 \tcode{T}, or pointer to \tcode{T}~(\ref{except.handle}).
 \end{itemize}
 \end{note}
 
 \pnum
-There can be more than one definition of a class type
-(Clause~\ref{class}), enumeration type~(\ref{dcl.enum}), inline function
+There can be more than one definition of a \link{class type}{Clause~\ref{class}},
+\link{enumeration type}{\ref{dcl.enum}}, inline function
 with external linkage~(\ref{dcl.inline}), inline variable with external
-linkage~(\ref{dcl.inline}), class template
-(Clause~\ref{temp}), non-static function template~(\ref{temp.fct}),
-static data member of a class template~(\ref{temp.static}), member
-function of a class template~(\ref{temp.mem.func}), or template
+linkage~(\ref{dcl.inline}), \link{class template}{Clause~\ref{temp}},
+non-static \link{function template}{\ref{temp.fct}},
+\link{static data member of a class template}{\ref{temp.static}}, \link{member
+function of a class template}{\ref{temp.mem.func}}, or template
 specialization for which some template parameters are not
 specified~(\ref{temp.spec}, \ref{temp.class.spec}) in a program provided
 that each definition appears in a different translation unit, and
@@ -441,14 +441,14 @@ tokens; and
 \item in each definition of \tcode{D}, corresponding names, looked up
 according to~\ref{basic.lookup}, shall refer to an entity defined within
 the definition of \tcode{D}, or shall refer to the same entity, after
-overload resolution~(\ref{over.match}) and after matching of partial
+\link{overload resolution}{\ref{over.match}} and after matching of partial
 template specialization~(\ref{temp.over}), except that a name can refer to
 \begin{itemize}
 \item
 a non-volatile \tcode{const} object with internal or no linkage if the object
 \begin{itemize}
 \item has the same literal type in all definitions of \tcode{D},
-\item is initialized with a constant expression~(\ref{expr.const}),
+\item is initialized with a \link{constant expression}{\ref{expr.const}},
 \item is not odr-used in any definition of \tcode{D}, and
 \item has the same value in all definitions of \tcode{D},
 \end{itemize}
@@ -478,7 +478,7 @@ requirement applies recursively).\footnote{\ref{dcl.fct.default}
 describes how default argument names are looked up.}
 
 \item if \tcode{D} is a class with an implicitly-declared
-constructor~(\ref{class.ctor}), it is as if the constructor was
+\link{constructor}{\ref{class.ctor}}, it is as if the constructor was
 implicitly defined in every translation unit where it is odr-used, and the
 implicit definition in every translation unit shall call the same
 constructor for a subobject of \tcode{D}.
@@ -572,7 +572,7 @@ declaration of \tcode{j} is the same as its potential scope.
 \pnum
 The names declared by a declaration are introduced into the scope in
 which the declaration occurs, except that the presence of a
-\tcode{friend} specifier~(\ref{class.friend}), certain uses of the
+\link{\tcode{friend} specifier}{\ref{class.friend}}, certain uses of the
 \grammarterm{elaborated-type-specifier}~(\ref{dcl.type.elab}), and
 \grammarterm{using-directive}{s}~(\ref{namespace.udir}) alter this general
 behavior.
@@ -588,7 +588,7 @@ name that is not a typedef name and the other declarations shall
 all refer to the same variable, non-static data member, or enumerator,
 or all refer to functions and function templates;
 in this case the class name or enumeration name is
-hidden~(\ref{basic.scope.hiding}). \begin{note} A namespace name or a
+\link{hidden}{\ref{basic.scope.hiding}}. \begin{note} A namespace name or a
 class template name must be unique in its declarative
 region~(\ref{namespace.alias}, Clause~\ref{temp}). \end{note}
 \end{itemize}
@@ -596,7 +596,7 @@ region~(\ref{namespace.alias}, Clause~\ref{temp}). \end{note}
 a name is introduced, which is not necessarily the same as the region in
 which the declaration occurs. In particular,
 \grammarterm{elaborated-type-specifier}{s}~(\ref{dcl.type.elab}) and
-friend declarations~(\ref{class.friend}) may introduce a (possibly not
+\link{friend declarations}{\ref{class.friend}} may introduce a (possibly not
 visible) name into an enclosing namespace; these restrictions apply to
 that region. Local extern declarations~(\ref{basic.link}) may introduce
 a name into the declarative region where the declaration appears and
@@ -612,7 +612,7 @@ namespace; these restrictions apply to both regions. \end{note}
 \pnum
 \indextext{name!point of declaration}%
 The \defn{point of declaration} for a name is immediately after its
-complete declarator (Clause~\ref{dcl.decl}) and before its
+complete \link{declarator}{Clause~\ref{dcl.decl}} and before its
 \grammarterm{initializer} (if any), except as noted below. \begin{example}
 
 \begin{codeblock}
@@ -714,7 +714,7 @@ See~\ref{basic.lookup.elab} and~\ref{dcl.type.elab}. \end{note}
 
 \pnum
 The point of declaration for an
-\grammarterm{injected-class-name} (Clause~\ref{class}) is immediately following
+\deflink{\textit{injected-class-name}}{Clause~\ref{class}} is immediately following
 the opening brace of the class definition.
 
 \pnum
@@ -755,10 +755,10 @@ see~\ref{temp.point}.\end{note}%
 \pnum
 \indextext{scope!block}%
 \indextext{local scope|see{block scope}}%
-A name declared in a block~(\ref{stmt.block}) is local to that block; it has
+A name declared in a \link{block}{\ref{stmt.block}} is local to that block; it has
 \defn{block scope}.
-Its potential scope begins at its point of
-declaration~(\ref{basic.scope.pdecl}) and ends at the end of its block.
+Its potential scope begins at its \link{point of
+declaration}{\ref{basic.scope.pdecl}} and ends at the end of its block.
 A variable declared at block scope is a \defn{local variable}.
 
 \pnum
@@ -767,8 +767,8 @@ The potential scope of a function parameter name
 (including one appearing in a
 \grammarterm{lambda-declarator})
 or of a function-local predefined variable
-in a function
-definition~(\ref{dcl.fct.def}) begins at its point of declaration. If
+in a \link{function
+definition}{\ref{dcl.fct.def}} begins at its point of declaration. If
 the function has a \grammarterm{function-try-block} the potential scope of
 a parameter
 or of a function-local predefined variable
@@ -801,7 +801,7 @@ see~\ref{stmt.select}.
 \indextext{scope!function prototype}%
 \indextext{function prototype}%
 In a function declaration, or in any function declarator except the
-declarator of a function definition~(\ref{dcl.fct.def}), names of
+declarator of a \link{function definition}{\ref{dcl.fct.def}}, names of
 parameters (if supplied) have function prototype scope, which terminates
 at the end of the nearest enclosing function declarator.
 
@@ -809,7 +809,7 @@ at the end of the nearest enclosing function declarator.
 
 \pnum
 \indextext{label!scope of}%
-Labels~(\ref{stmt.label}) have \defnx{function scope}{scope!function} and
+\link{Labels}{\ref{stmt.label}} have \defnx{function scope}{scope!function} and
 may be used anywhere in the function in which they are declared. Only
 labels have function scope.
 
@@ -823,8 +823,8 @@ The declarative region of a \grammarterm{namespace-definition} is its
 namespace, and names introduced by these declarations into the
 declarative region of the namespace are said to be \defn{member
 names} of the namespace. A namespace member name has namespace scope.
-Its potential scope includes its namespace from the name's point of
-declaration~(\ref{basic.scope.pdecl}) onwards; and for each
+Its potential scope includes its namespace from the name's \link{point of
+declaration}{\ref{basic.scope.pdecl}} onwards; and for each
 \grammarterm{using-directive}~(\ref{namespace.udir}) that nominates the
 member's namespace, the member's potential scope includes that portion
 of the potential scope of the \grammarterm{using-directive} that follows
@@ -869,7 +869,7 @@ The outermost declarative region of a translation unit is also a
 namespace, called the \defn{global namespace}. A name declared in
 the global namespace has \defn{global namespace scope} (also called
 \defn{global scope}). The potential scope of such a name begins at
-its point of declaration~(\ref{basic.scope.pdecl}) and ends at the end
+its \link{point of declaration}{\ref{basic.scope.pdecl}} and ends at the end
 of the translation unit that is its declarative region.
 \indextext{name!global}%
 A name with global namespace scope is said to be a
@@ -905,8 +905,8 @@ the class (this includes static data member definitions, nested class
 definitions, and member function definitions, including the member function
 body and any portion of the
 declarator part of such definitions which follows the \grammarterm{declarator-id},
-including a \grammarterm{parameter-declaration-clause} and any default
-arguments~(\ref{dcl.fct.default})).
+including a \grammarterm{parameter-declaration-clause} and any \link{default
+arguments}{\ref{dcl.fct.default}}).
 
 \pnum
 \begin{example}
@@ -938,8 +938,8 @@ class D {
 \pnum
 The name of a class member shall only be used as follows:
 \begin{itemize}
-\item in the scope of its class (as described above) or a class derived
-(Clause~\ref{class.derived}) from its class,
+\item in the scope of its class (as described above) or a class
+\link{derived}{Clause~\ref{class.derived}} from its class,
 \item after the \tcode{.} operator applied to an expression of the type
 of its class~(\ref{expr.ref}) or a class derived from its class,
 \item after the \tcode{->} operator applied to a pointer to an object of
@@ -953,7 +953,7 @@ applied to the name of its class or a class derived from its class.
 \indextext{scope!enumeration}
 
 \pnum
-The name of a scoped enumerator~(\ref{dcl.enum}) has
+The name of a \deflinkx{scoped enumerator}{scoped enumerators}{\ref{dcl.enum}} has
 \defn{enumeration scope}. Its potential scope begins at
 its point of declaration and terminates at the end of the
 \grammarterm{enum-specifier}.
@@ -994,8 +994,8 @@ being hidden during qualified and unqualified name lookup.)
 \end{example}
 
 \pnum
-The potential scope of a template parameter name begins at its point of
-declaration~(\ref{basic.scope.pdecl}) and ends at the end of its declarative region.
+The potential scope of a template parameter name begins at its \deflink{point of
+declaration}{\ref{basic.scope.pdecl}} and ends at the end of its declarative region.
 \begin{note} This implies that a \grammarterm{template-parameter} can be used in the
 declaration of subsequent \grammarterm{template-parameter}{s} and their default
 arguments but cannot be used in preceding \grammarterm{template-parameter}{s} or their
@@ -1021,8 +1021,8 @@ argument must be defined and not just declared when the class template is instan
 \pnum
 The declarative region of the name of a template parameter is nested within the
 immediately-enclosing declarative region. \begin{note} As a result, a
-\grammarterm{template-parameter} hides any entity with the same name in an enclosing
-scope~(\ref{basic.scope.hiding}). \begin{example}
+\grammarterm{template-parameter} \link{hides}{\ref{basic.scope.hiding}} any entity with the same name in an enclosing
+scope. \begin{example}
 
 \begin{codeblock}
 typedef int N;
@@ -1050,7 +1050,7 @@ nested declarative region or derived class~(\ref{class.member.lookup}).
 
 \pnum
 \indextext{name hiding}%
-A class name~(\ref{class.name}) or enumeration name~(\ref{dcl.enum}) can
+A \link{class name}{\ref{class.name}} or \link{enumeration name}{\ref{dcl.enum}} can
 be hidden by the name of a variable, data member, function, or enumerator declared in
 the same scope. If a class or enumeration name and a variable, data member, function,
 or enumerator are declared in the same scope (in any order) with the
@@ -1062,8 +1062,8 @@ In a member function definition, the declaration of a name
 at block scope
 hides
 the declaration of a member of the class with the same name;
-see~\ref{basic.scope.class}. The declaration of a member in a derived
-class (Clause~\ref{class.derived}) hides the declaration of a member of
+see~\ref{basic.scope.class}. The declaration of a member in a \link{derived
+class}{Clause~\ref{class.derived}} hides the declaration of a member of
 a base class of the same name; see~\ref{class.member.lookup}.
 
 \pnum
@@ -1093,9 +1093,9 @@ The declarations found by name lookup shall either all declare the same entity o
 shall all declare functions;
 in the latter case,
 the declarations are said to form a set of overloaded
-functions~(\ref{over.load}). Overload resolution~(\ref{over.match})
-takes place after name lookup has succeeded. The access rules
-(Clause~\ref{class.access}) are considered only once name lookup and
+functions~(\ref{over.load}). \link{Overload resolution}{\ref{over.match}}
+takes place after name lookup has succeeded. The
+\link{access rules}{Clause~\ref{class.access}} are considered only once name lookup and
 function overload resolution (if applicable) have succeeded. Only after
 name lookup, function overload resolution (if applicable) and access
 checking have succeeded are the attributes introduced by the name's
@@ -1106,7 +1106,7 @@ A name ``looked up in the context of an expression'' is looked up as an
 unqualified name in the scope where the expression is found.
 
 \pnum
-The injected-class-name of a class (Clause~\ref{class}) is also
+The \deflink{injected-class-name}{Clause~\ref{class}} of a class is also
 considered to be a member of that class for the purposes of name hiding
 and lookup.
 
@@ -1156,8 +1156,8 @@ namespace N {
 }
 \end{codeblock}
 
-Because the expression is not a function call, the argument-dependent
-name lookup~(\ref{basic.lookup.argdep}) does not apply and the friend
+Because the expression is not a function call, the \link{argument-dependent
+name lookup}{\ref{basic.lookup.argdep}} does not apply and the friend
 function \tcode{f} is not found. \end{note}
 
 \pnum
@@ -1212,8 +1212,8 @@ shall be declared in one of the following ways:
 \begin{itemize}
 \item before its use in class \tcode{X} or be a member of a base class
 of \tcode{X}~(\ref{class.member.lookup}), or
-\item if \tcode{X} is a nested class of class
-\tcode{Y}~(\ref{class.nest}), before the definition of \tcode{X} in
+\item if \tcode{X} is a \deflink{nested class}{\ref{class.nest}} of class
+\tcode{Y}, before the definition of \tcode{X} in
 \tcode{Y}, or shall be a member of a base class of \tcode{Y} (this
 lookup applies in turn to \tcode{Y}'s enclosing classes, starting with
 the innermost enclosing class),\footnote{This lookup applies whether the
@@ -1222,7 +1222,7 @@ nested within \tcode{Y}'s definition or whether \tcode{X}'s definition
 appears in a namespace scope enclosing \tcode{Y}'s
 definition~(\ref{class.nest}).}
 or
-\item if \tcode{X} is a local class~(\ref{class.local}) or is a nested
+\item if \tcode{X} is a \link{local class}{\ref{class.local}} or is a nested
 class of a local class, before the definition of class \tcode{X} in a
 block enclosing the definition of class \tcode{X}, or
 \item if \tcode{X} is a member of namespace \tcode{N}, or is a nested
@@ -1270,8 +1270,8 @@ definitions.
 \pnum
 For the members of a class \tcode{X}, a name used in a member function
 body, in a default argument, in a \grammarterm{noexcept-specifier}, in the
-\grammarterm{brace-or-equal-initializer} of a non-static data
-member~(\ref{class.mem}), or in the definition of a class member
+\grammarterm{brace-or-equal-initializer} of a \deflink{non-static data member}{\ref{class.mem}},
+or in the definition of a class member
 outside of the definition of \tcode{X}, following the
 member's
 \grammarterm{declarator-id}\footnote{That is, an unqualified name that occurs,
@@ -1288,7 +1288,7 @@ block~(\ref{stmt.block}), or
 class of \tcode{X}~(\ref{class.member.lookup}), or
 
 \item if \tcode{X}
-is a nested class of class \tcode{Y}~(\ref{class.nest}), shall be a
+is a \deflink{nested class}{\ref{class.nest}} of class \tcode{Y}, shall be a
 member of \tcode{Y}, or shall be a member of a base class of \tcode{Y}
 (this lookup applies in turn to \tcode{Y}'s enclosing classes, starting
 with the innermost enclosing class),\footnote{This lookup applies whether
@@ -1297,7 +1297,7 @@ within the definition of class \tcode{X} or whether the member function
 is defined in a namespace scope enclosing \tcode{X}'s definition.}
 or
 
-\item if \tcode{X} is a local class~(\ref{class.local}) or is a nested
+\item if \tcode{X} is a \link{local class}{\ref{class.local}} or is a nested
 class of a local class, before the definition of class \tcode{X} in a
 block enclosing the definition of class \tcode{X}, or
 
@@ -1337,8 +1337,8 @@ describes the restrictions on the use of names in local class
 definitions. \end{note}
 
 \pnum
-Name lookup for a name used in the definition of a \tcode{friend}
-function~(\ref{class.friend}) defined inline in the class granting
+Name lookup for a name used in the definition of a \link{\tcode{friend}
+function}{\ref{class.friend}} defined inline in the class granting
 friendship shall proceed as described for lookup in member function
 definitions. If the \tcode{friend} function is not defined in the class
 granting friendship, name lookup in the \tcode{friend} function
@@ -1374,8 +1374,8 @@ struct B {
 \end{example}
 
 \pnum
-During the lookup for a name used as a default
-argument~(\ref{dcl.fct.default}) in a function
+During the lookup for a name used as a \link{default
+argument}{\ref{dcl.fct.default}} in a function
 \grammarterm{parameter-declaration-clause} or used in the
 \grammarterm{expression} of a \grammarterm{mem-initializer} for a
 constructor~(\ref{class.base.init}), the function parameter names are
@@ -1394,8 +1394,8 @@ and hide the names of entities declared in the block, class, or namespace
 scopes containing the \grammarterm{enum-specifier}.
 
 \pnum
-A name used in the definition of a \tcode{static} data member of class
-\tcode{X}~(\ref{class.static.data}) (after the \grammarterm{qualified-id}
+A name used in the definition of a \link{\tcode{static} data member}{\ref{class.static.data}}
+of class \tcode{X} (after the \grammarterm{qualified-id}
 of the static member) is looked up as if the name was used in a member
 function of \tcode{X}. \begin{note} \ref{class.static.data} further
 describes the restrictions on the use of names in the definition of a
@@ -1440,8 +1440,8 @@ described in~\ref{temp.res}. \end{note}
 
 \pnum
 When the \grammarterm{postfix-expression} in
-a function call~(\ref{expr.call}) is an \grammarterm{unqualified-id}, other namespaces not considered
-during the usual unqualified lookup~(\ref{basic.lookup.unqual}) may be
+a \link{function call}{\ref{expr.call}} is an \grammarterm{unqualified-id}, other namespaces not considered
+during the usual \link{unqualified lookup}{\ref{basic.lookup.unqual}} may be
 searched, and in those namespaces, namespace-scope friend function or
 function template declarations~(\ref{class.friend}) not otherwise
 visible may be found.
@@ -1511,7 +1511,7 @@ associated with \tcode{X}.
 associated namespaces and classes are those associated with the member
 type together with those associated with \tcode{X}.
 \end{itemize}
-If an associated namespace is an inline namespace~(\ref{namespace.def}), its
+If an associated namespace is an \deflink{inline namespace}{\ref{namespace.def}}, its
 enclosing namespace is also included in the set. If an associated namespace
 directly contains inline namespaces, those inline namespaces are also included
 in the set.
@@ -1526,8 +1526,8 @@ those of its type \grammarterm{template-argument}{s} and its template
 \grammarterm{template-argument}{s}.
 
 \pnum
-Let \placeholder{X} be the lookup set produced by unqualified
-lookup~(\ref{basic.lookup.unqual}) and let \placeholder{Y} be the lookup set produced
+Let \placeholder{X} be the lookup set produced by \link{unqualified
+lookup}{\ref{basic.lookup.unqual}} and let \placeholder{Y} be the lookup set produced
 by argument dependent lookup (defined as follows). If \placeholder{X} contains
 \begin{itemize}
 \item a declaration of a class member, or
@@ -1642,7 +1642,7 @@ The name shall be declared in global namespace scope or shall be a name
 whose declaration is visible in global scope because of a
 \grammarterm{using-directive}~(\ref{namespace.qual}). The use of \tcode{::}
 allows a global name to be referred to even if its identifier has been
-hidden~(\ref{basic.scope.hiding}).
+\link{hidden}{\ref{basic.scope.hiding}}.
 
 \pnum
 A name prefixed by a \grammarterm{nested-name-specifier} that
@@ -1713,8 +1713,8 @@ access (see~\ref{basic.lookup.classref});
 
 \item the lookup for a name specified in a
 \grammarterm{using-declaration}~(\ref{namespace.udecl}) also finds class or
-enumeration names hidden within the same
-scope~(\ref{basic.scope.hiding}).
+enumeration names \link{hidden}{\ref{basic.scope.hiding}} within the same
+scope.
 \end{itemize}
 
 \pnum
@@ -1776,8 +1776,9 @@ entire \grammarterm{postfix-expression} occurs.
 \pnum
 For a namespace \tcode{X} and name \tcode{m}, the namespace-qualified lookup set
 $S(X, m)$ is defined as follows: Let $S'(X, m)$ be the set of all
-declarations of \tcode{m} in \tcode{X} and the inline namespace set of
-\tcode{X}~(\ref{namespace.def}). If $S'(X, m)$ is not empty, $S(X, m)$
+declarations of \tcode{m} in \tcode{X} and the
+\deflink{inline namespace set}{\ref{namespace.def}} of
+\tcode{X}. If $S'(X, m)$ is not empty, $S(X, m)$
 is $S'(X, m)$; otherwise, $S(X, m)$ is the union of $S(N_i, m)$ for
 all namespaces $N_i$ nominated by \grammarterm{using-directive}{s} in
 \tcode{X} and its inline namespace set.
@@ -1962,7 +1963,7 @@ nested-name-specifier unqualified-id
 the
 \grammarterm{unqualified-id} shall name a member of the namespace
 designated by the \grammarterm{nested-name-specifier}
-or of an element of the inline namespace set~(\ref{namespace.def}) of that namespace.
+or of an element of the \deflink{inline namespace set}{\ref{namespace.def}} of that namespace.
 \begin{example}
 
 \begin{codeblock}
@@ -2007,8 +2008,9 @@ void B::f1(int){ }  // OK, defines \tcode{A::B::f1(int)}
 \pnum
 An \grammarterm{elaborated-type-specifier}~(\ref{dcl.type.elab}) may be
 used to refer to a previously declared \grammarterm{class-name} or
-\grammarterm{enum-name} even though the name has been hidden by a non-type
-declaration~(\ref{basic.scope.hiding}).
+\grammarterm{enum-name} even though the name has been
+\link{hidden}{\ref{basic.scope.hiding}} by a non-type
+declaration.
 
 \pnum
 If the \grammarterm{elaborated-type-specifier} has no
@@ -2083,7 +2085,7 @@ struct Base::Data* pBase;       // OK: refers to nested \tcode{Data}
 
 \pnum
 \indextext{lookup!class member}%
-In a class member access expression~(\ref{expr.ref}), if the \tcode{.}
+In a \link{class member access}{\ref{expr.ref}} expression, if the \tcode{.}
 or \tcode{->} token is immediately followed by an \grammarterm{identifier}
 followed by a \tcode{<}, the identifier must be looked up to determine
 whether the \tcode{<} is the beginning of a template argument
@@ -2093,11 +2095,11 @@ not found, it is then looked up in the context of the entire
 \grammarterm{postfix-expression} and shall name a class template.
 
 \pnum
-If the \grammarterm{id-expression} in a class member
-access~(\ref{expr.ref}) is an \grammarterm{unqualified-id}, and the type of
+If the \grammarterm{id-expression} in a \link{class member
+access}{\ref{expr.ref}} is an \grammarterm{unqualified-id}, and the type of
 the object expression is of a class type \tcode{C}, the
 \grammarterm{unqualified-id} is looked up in the scope of class \tcode{C}.
-For a pseudo-destructor call~(\ref{expr.pseudo}),
+For a \link{pseudo-destructor call}{\ref{expr.pseudo}},
 the \grammarterm{unqualified-id} is looked up in the context of the complete
 \grammarterm{postfix-expression}.
 
@@ -2192,9 +2194,9 @@ only namespace names are considered.%
 
 \pnum
 \indextext{program}%
-A \defn{program} consists of one or more \defnx{translation units}{translation unit}
-(Clause~\ref{lex}) linked together. A translation unit consists
-of a sequence of declarations.
+A \defn{program} consists of one or more
+\deflinkx{translation units}{translation unit}{Clause~\ref{lex}} linked together.
+A translation unit consists of a sequence of declarations.
 
 \begin{bnf}
 \nontermdef{translation-unit}\br
@@ -2231,7 +2233,7 @@ cannot be referred to by names from other scopes.
 \indextext{\idxcode{const}!linkage of}%
 \indextext{linkage!\idxcode{inline} and}%
 \indextext{\idxcode{inline}!linkage of}%
-A name having namespace scope~(\ref{basic.scope.namespace}) has internal
+A name having \link{namespace scope}{\ref{basic.scope.namespace}} has internal
 linkage if it is the name of
 \begin{itemize}
 \item
@@ -2259,7 +2261,7 @@ a named class (Clause~\ref{class}), or an unnamed class defined in a
 typedef declaration in which the class has the typedef name for linkage
 purposes~(\ref{dcl.typedef}); or
 \item \indextext{enumeration!linkage of}%
-a named enumeration~(\ref{dcl.enum}), or an unnamed enumeration defined
+a named \link{enumeration}{\ref{dcl.enum}}, or an unnamed enumeration defined
 in a typedef declaration in which the enumeration has the typedef name
 for linkage purposes~(\ref{dcl.typedef}); or
 \item a template.
@@ -2330,7 +2332,7 @@ void q() { @\commentellip@ }          // some other, unrelated \tcode{q}
 \pnum
 \indextext{linkage!no}%
 Names not covered by these rules have no linkage. Moreover, except as
-noted, a name declared at block scope~(\ref{basic.scope.block}) has no
+noted, a name declared at \deflink{block scope}{\ref{basic.scope.block}} has no
 linkage. A type is said to have linkage if and only if:
 \begin{itemize}
 \item it is a class or enumeration type that is named (or has a name for
@@ -2344,23 +2346,23 @@ template has the linkage of the innermost enclosing class or namespace in which
 it is declared.};
 or
 
-\item it is a fundamental type~(\ref{basic.fundamental}); or
+\item it is a \link{fundamental type}{\ref{basic.fundamental}}; or
 
-\item it is a compound type~(\ref{basic.compound}) other than a class or
+\item it is a \link{compound type}{\ref{basic.compound}} other than a class or
 enumeration, compounded exclusively from types that have linkage; or
 
-\item it is a cv-qualified~(\ref{basic.type.qualifier}) version of a
+\item it is a \link{cv-qualified}{\ref{basic.type.qualifier}} version of a
 type that has linkage.
 \end{itemize}
 A type without linkage shall not be used as the type of a variable or
 function with external linkage unless
 \begin{itemize}
-\item the entity has C language linkage~(\ref{dcl.link}), or
+\item the entity has C language \link{linkage}{\ref{dcl.link}}, or
 
-\item the entity is declared within an unnamed
-namespace~(\ref{namespace.def}), or
+\item the entity is declared within an \link{unnamed
+namespace}{\ref{namespace.unnamed}}, or
 
-\item the entity is not odr-used~(\ref{basic.def.odr}) or is defined in
+\item the entity is not \link{odr-used}{\ref{basic.def.odr}} or is defined in
 the same translation unit.
 \end{itemize}
 \begin{note}
@@ -2393,7 +2395,7 @@ void f() {
 \end{example}
 
 \pnum
-Two names that are the same (Clause~\ref{basic}) and that are declared
+Two names that are \deflinkx{the same}{name!same}{Clause~\ref{basic}} and that are declared
 in different scopes shall denote the same variable, function,
 type, template or namespace if
 \begin{itemize}
@@ -2414,7 +2416,7 @@ signatures~(\ref{temp.over.link}) are the same.
 \indextext{consistency!type declaration}%
 \indextext{declaration!multiple}%
 After all adjustments of types (during which
-typedefs~(\ref{dcl.typedef}) are replaced by their definitions), the
+\link{typedefs}{\ref{dcl.typedef}} are replaced by their definitions), the
 types specified by all declarations referring to a given variable or
 function shall be identical, except that declarations for an array
 object can specify array types that differ by the presence or absence of
@@ -2482,7 +2484,7 @@ is recommended that any further (optional) parameters be added after
 The function \tcode{main} shall not be used within
 a program.
 \indextext{\idxcode{main} function!implementation-defined linkage of}%
-The linkage~(\ref{basic.link}) of \tcode{main} is
+The \link{linkage}{\ref{basic.link}} of \tcode{main} is
 \impldef{linkage of \tcode{main}}. A program that defines \tcode{main} as
 deleted or that declares \tcode{main} to be
 \tcode{inline}, \tcode{static}, or \tcode{constexpr} is ill-formed.
@@ -2501,7 +2503,7 @@ namespaces. \end{example}
 \indextext{termination!program}%
 Terminating the program
 without leaving the current block (e.g., by calling the function
-\tcode{std::exit(int)} (\ref{support.start.term})) does not destroy any
+\liblinkx{\tcode{std::exit(int)}}{exit}{\ref{support.start.term}}) does not destroy any
 objects with automatic storage duration~(\ref{class.dtor}). If
 \tcode{std::exit} is called to end a program during the destruction of
 an object with static or thread storage duration, the program has undefined
@@ -2542,9 +2544,9 @@ types. \begin{note} Such a class may have a non-trivial destructor. \end{note}
 if a variable or temporary object with static or thread storage duration
 is initialized by a constant initializer for the entity.
 \indextext{initialization!runtime}%
-If constant initialization is not performed, a variable with static
-storage duration~(\ref{basic.stc.static}) or thread storage
-duration~(\ref{basic.stc.thread}) is zero-initialized~(\ref{dcl.init}).
+If constant initialization is not performed, a variable with \deflink{static
+storage duration}{\ref{basic.stc.static}} or \deflink{thread storage
+duration}{\ref{basic.stc.thread}} is \deflinkx{zero-initialized}{zero-initialization}{\ref{dcl.init}}.
 Together, zero-initialization and constant initialization are called
 \indextext{initialization!dynamic}%
 \defn{static initialization};
@@ -2736,7 +2738,7 @@ in which threads and at which points in the program such deferred dynamic initia
 \pnum
 If the initialization of a non-local variable with static or thread storage duration
 exits via
-an exception, \tcode{std::terminate} is called~(\ref{except.terminate}).%
+an exception, \link{\tcode{std::terminate}}{\ref{except.terminate}} is called.%
 \indextext{program!start|)}
 
 \rSec2[basic.start.term]{Termination}
@@ -2745,14 +2747,14 @@ an exception, \tcode{std::terminate} is called~(\ref{except.terminate}).%
 \indextext{program!termination|(}%
 \indextext{object!destructor static}%
 \indextext{\idxcode{main} function!return from}%
-Destructors~(\ref{class.dtor}) for initialized objects
-(that is, objects whose lifetime~(\ref{basic.life}) has begun)
+\link{Destructors}{\ref{class.dtor}} for initialized objects
+(that is, objects whose \deflink{lifetime}{\ref{basic.life}} has begun)
 with static storage duration,
 and functions registered with \tcode{std::atexit},
 are called as part of a call to
 \indextext{\idxcode{exit}}%
 \indexlibrary{\idxcode{exit}}%
-\tcode{std::exit}~(\ref{support.start.term}).
+\liblinkx{\tcode{std::exit}}{exit}{\ref{support.start.term}}.
 The call to \tcode{std::exit} is sequenced before
 the invocations of the destructors and the registered functions.
 \begin{note}
@@ -2782,7 +2784,7 @@ object with static storage duration initialized during the construction
 of the subobjects is destroyed.
 If the destruction of an object with static or thread storage duration
 exits via an exception,
-\tcode{std::terminate} is called~(\ref{except.terminate}).
+\link{\tcode{std::terminate}}{\ref{except.terminate}} is called.
 
 \pnum
 If a function contains a block-scope object of static or thread storage duration that has been
@@ -2808,7 +2810,8 @@ the call to the function passed to the first \tcode{std::atexit} call.
 
 \pnum
 If there is a use of a standard library object or function not permitted within signal
-handlers~(\ref{support.runtime}) that does not happen before~(\ref{intro.multithread})
+handlers~(\ref{support.runtime}) that does not
+\deflinkx{happen before}{happens before}{\ref{intro.multithread}}
 completion of destruction of objects with static storage duration and execution of
 \tcode{std::atexit} registered functions~(\ref{support.start.term}), the program has
 undefined behavior. \begin{note} If there is a use of an object with static storage
@@ -2850,8 +2853,8 @@ one of the following:
 \indextext{storage duration!automatic}%
 \indextext{storage duration!dynamic}%
 Static, thread, and automatic storage durations are associated with objects
-introduced by declarations~(\ref{basic.def}) and implicitly created by
-the implementation~(\ref{class.temporary}). The dynamic storage duration
+introduced by declarations~(\ref{basic.def}) and \link{implicitly created by
+the implementation}{\ref{class.temporary}}. The dynamic storage duration
 is associated with objects created by a
 \grammarterm{new-expression}~(\ref{expr.new}).
 
@@ -2862,7 +2865,7 @@ The storage duration categories apply to references as well.
 When the end of the duration of a region of storage is reached,
 the values of all pointers
 representing the address of any part of that region of storage
-become invalid pointer values~(\ref{basic.compound}).
+become \deflinkx{invalid pointer values}{invalid pointer value}{\ref{basic.compound}}.
 Indirection through an invalid pointer value and
 passing an invalid pointer value to a deallocation function
 have undefined behavior.
@@ -2912,7 +2915,7 @@ the current thread.
 
 \pnum
 A variable with thread storage duration shall be initialized before
-its first odr-use~(\ref{basic.def.odr}) and, if constructed, shall be destroyed on thread exit.
+its first \link{odr-use}{\ref{basic.def.odr}} and, if constructed, shall be destroyed on thread exit.
 
 \rSec2[basic.stc.auto]{Automatic storage duration}
 
@@ -2940,8 +2943,8 @@ specified in~\ref{class.copy}.
 \indextext{storage duration!dynamic|(}
 
 \pnum
-Objects can be created dynamically during program
-execution~(\ref{intro.execution}), using
+Objects can be created dynamically during \link{program
+execution}{\ref{intro.execution}}, using
 \indextext{\idxcode{new}}%
 \grammarterm{new-expression}{s}~(\ref{expr.new}), and destroyed using
 \indextext{\idxcode{delete}}%
@@ -3018,8 +3021,8 @@ function; a program is ill-formed if an allocation function is declared
 in a namespace scope other than global scope or declared static in
 global scope. The return type shall be \tcode{void*}. The first
 parameter shall have type \tcode{std::size_t}~(\ref{support.types}). The
-first parameter shall not have an associated default
-argument~(\ref{dcl.fct.default}). The value of the first parameter shall
+first parameter shall not have an associated \link{default
+argument}{\ref{dcl.fct.default}}. The value of the first parameter shall
 be interpreted as the requested size of the allocation. An allocation
 function can be a function template. Such a template shall declare its
 return type and first parameter as specified above (that is, template
@@ -3064,23 +3067,23 @@ A program-supplied allocation function can obtain the address of the
 currently installed \tcode{new_handler} using the
 \tcode{std::get_new_handler} function~(\ref{set.new.handler}). \end{note}
 If an allocation function that has a non-throwing
-exception specification~(\ref{except.spec})
+\link{exception specification}{\ref{except.spec}}
 fails to allocate storage, it shall return a null pointer. Any other
 allocation function that fails to allocate storage shall indicate
-failure only by throwing an exception~(\ref{except.throw}) of a type
-that would match a handler~(\ref{except.handle}) of type
-\tcode{std::bad_alloc}~(\ref{bad.alloc}).
+failure only by \link{throwing an exception}{\ref{except.throw}} of a type
+that would match a \link{handler}{\ref{except.handle}} of type
+\link{\tcode{std::bad_alloc}}{\ref{bad.alloc}}.
 
 \pnum
-A global allocation function is only called as the result of a new
-expression~(\ref{expr.new}), or called directly using the function call
-syntax~(\ref{expr.call}), or called indirectly through calls to the
+A global allocation function is only called as the result of a \link{new
+expression}{\ref{expr.new}}, or called directly using the \link{function call}{\ref{expr.call}}
+syntax, or called indirectly through calls to the
 functions in the \Cpp{} standard library. \begin{note} In particular, a
 global allocation function is not called to allocate storage for objects
-with static storage duration~(\ref{basic.stc.static}), for objects or references
-with thread storage duration~(\ref{basic.stc.thread}), for objects of
-type \tcode{std::type_info}~(\ref{expr.typeid}), or for an
-exception object~(\ref{except.throw}).
+with \link{static storage duration}{\ref{basic.stc.static}}, for objects or references
+with \link{thread storage duration}{\ref{basic.stc.thread}}, for objects of
+type \link{\tcode{std::type_info}}{\ref{expr.typeid}}, or for an
+\link{exception object}{\ref{except.throw}}.
 \end{note}
 
 \rSec3[basic.stc.dynamic.deallocation]{Deallocation functions}
@@ -3134,7 +3137,7 @@ supplied in the standard library, the call has no effect.
 
 \pnum
 If the argument given to a deallocation function in the standard library
-is a pointer that is not the null pointer value~(\ref{conv.ptr}), the
+is a pointer that is not the \deflink{null pointer value}{\ref{conv.ptr}}, the
 deallocation function shall deallocate the storage referenced by the
 pointer, ending the duration of the region of storage.
 
@@ -3145,12 +3148,11 @@ pointer, ending the duration of the region of storage.
 \indextext{pointer!to traceable object}%
 A \defn{traceable pointer object} is
 \begin{itemize}
-\item an object of an object pointer
-type~(\ref{basic.compound}), or
+\item an object of an \deflink{object pointer type}{\ref{basic.compound}}, or
 \item an object of an integral type that is at least as large as \tcode{std::intptr_t},
 or
-\item a sequence of elements in an array of narrow character
-type~(\ref{basic.fundamental}), where the size and alignment of the sequence
+\item a sequence of elements in an array of
+\deflinkx{narrow character type}{type!narrow character}{\ref{basic.fundamental}}, where the size and alignment of the sequence
 match those of some object pointer type.
 \end{itemize}
 
@@ -3325,7 +3327,7 @@ program has undefined behavior if:
   to a virtual base class, or
 \item
   the pointer is used as the operand of a
-  \tcode{static_cast}~(\ref{expr.static.cast}), except when the conversion
+  \link{\tcode{static_cast}}{\ref{expr.static.cast}}, except when the conversion
   is to pointer to \cv{}~\tcode{void}, or to pointer to \cv{}~\tcode{void}
   and subsequently to pointer to
   \cv{}~\tcode{char},
@@ -3333,7 +3335,7 @@ program has undefined behavior if:
   \cv{}~\tcode{std::byte}~(\ref{cstddef.syn}), or
 \item
   the pointer is used as the operand of a
-  \tcode{dynamic_cast}~(\ref{expr.dynamic.cast}).
+  \link{\tcode{dynamic_cast}}{\ref{expr.dynamic.cast}}.
 \end{itemize}
 \begin{example}
 \begin{codeblock}
@@ -3382,7 +3384,7 @@ well-defined. The program has undefined behavior if:
 \item the glvalue is used to call a non-static member function of the object, or
 \item the glvalue is bound to a reference to a virtual base class~(\ref{dcl.init.ref}), or
 \item the glvalue is used as the operand of a
-\tcode{dynamic_cast}~(\ref{expr.dynamic.cast}) or as the operand of
+\link{\tcode{dynamic_cast}}{\ref{expr.dynamic.cast}} or as the operand of
 \tcode{typeid}.
 \end{itemize}
 
@@ -3405,7 +3407,7 @@ location which the original object occupied, and
 class type, does not contain any non-static data member whose type is
 const-qualified or a reference type, and
 
-\item the original object was a most derived object~(\ref{intro.object})
+\item the original object was a \deflink{most derived object}{\ref{intro.object}}
 of type \tcode{T} and the new object is a most derived object of type
 \tcode{T} (that is, they are not base class subobjects).
 \end{itemize}
@@ -3441,9 +3443,10 @@ by calling \tcode{std::launder}~(\ref{support.dynamic}).
 
 \pnum
 If a program ends the lifetime of an object of type \tcode{T} with
-static~(\ref{basic.stc.static}), thread~(\ref{basic.stc.thread}),
-or automatic~(\ref{basic.stc.auto})
-storage duration and if \tcode{T} has a non-trivial destructor,\footnote{That
+\deflinkx{static}{static storage duration}{\ref{basic.stc.static}},
+\deflinkx{thread}{thread storage duration}{\ref{basic.stc.thread}}, or
+\deflink{automatic storage duration}{\ref{basic.stc.auto}}
+and if \tcode{T} has a non-trivial destructor,\footnote{That
 is, an object for which a destructor will be called
 implicitly---upon exit from the block for an object with
 automatic storage duration, upon exit from the thread for an object with
@@ -3489,8 +3492,8 @@ void h() {
 \end{example}
 
 \pnum
-In this section, ``before'' and ``after'' refer to the ``happens before''
-relation~(\ref{intro.multithread}). \begin{note} Therefore, undefined behavior results
+In this section, ``before'' and ``after'' refer to the ``\deflink{happens before}{\ref{intro.multithread}}''
+relation. \begin{note} Therefore, undefined behavior results
 if an object that is being constructed in one thread is referenced from another
 thread without adequate synchronization. \end{note}%
 \indextext{object lifetime|)}
@@ -3504,9 +3507,9 @@ thread without adequate synchronization. \end{note}%
 impose requirements on implementations regarding the representation
 of types.
 There are two kinds of types: fundamental types and compound types.
-Types describe objects (\ref{intro.object}),
-references (\ref{dcl.ref}),
-or functions (\ref{dcl.fct}).
+Types describe \link{objects}{\ref{intro.object}},
+\link{references}{\ref{dcl.ref}},
+or \link{functions}{\ref{dcl.fct}}.
 \end{note}
 
 \pnum
@@ -3636,26 +3639,26 @@ An \defn{object type} is a (possibly cv-qualified) type that is not
 a function type, not a reference type, and not \cv{}~\tcode{void}.
 
 \pnum
-Arithmetic types~(\ref{basic.fundamental}), enumeration types, pointer
+\link{Arithmetic types}{\ref{basic.fundamental}}, enumeration types, pointer
 types, pointer to member types~(\ref{basic.compound}),
 \tcode{std::nullptr_t},
 and
-cv-qualified~(\ref{basic.type.qualifier}) versions of these
+\link{cv-qualified}{\ref{basic.type.qualifier}} versions of these
 types are collectively called
 \defnx{scalar types}{scalar type}. Scalar types,
-POD classes (Clause~\ref{class}), arrays of such types and
+\deflinkx{POD classes}{POD class}{Clause~\ref{class}}, arrays of such types and
 cv-qualified versions of these
 types are collectively called
 \defnx{POD types}{type!POD}.
-Cv-unqualified scalar types, trivially copyable class types (Clause~\ref{class}), arrays of
+Cv-unqualified scalar types, \deflink{trivially copyable class}{Clause~\ref{class}} types, arrays of
 such types, and cv-qualified versions of these
 types are collectively called \defn{trivially
 copyable types}.
-Scalar types, trivial class types (Clause~\ref{class}),
+Scalar types, \deflink{trivial class}{\ref{class}} types,
 arrays of such types and cv-qualified versions of these
 types are collectively called
-\defn{trivial types}. Scalar types, standard-layout class
-types (Clause~\ref{class}), arrays of such types and
+\defn{trivial types}. Scalar types, \deflink{standard-layout class}{Clause~\ref{class}}
+types, arrays of such types and
 cv-qualified versions of these types
 are collectively called \defn{standard-layout types}.
 
@@ -3666,14 +3669,14 @@ A type is a \defn{literal type} if it is:
 \item a scalar type; or
 \item a reference type; or
 \item an array of literal type; or
-\item a possibly cv-qualified class type (Clause~\ref{class}) that
+\item a possibly cv-qualified \link{class type}{Clause~\ref{class}} that
 has all of the following properties:
 \begin{itemize}
 \item it has a trivial destructor,
-\item it is either a closure type~(\ref{expr.prim.lambda.closure}),
-an aggregate type~(\ref{dcl.init.aggr}), or
+\item it is either a \deflink{closure type}{\ref{expr.prim.lambda.closure}},
+an \link{aggregate type}{\ref{dcl.init.aggr}}, or
 has at least one constexpr constructor or constructor template
-(possibly inherited~(\ref{namespace.udecl}) from a base class)
+(possibly \deflinkx{inherited}{inherits}{\ref{namespace.udecl}} from a base class)
 that is not a copy or move constructor,
 \item if it is a union, at least one of its non-static data members is
 of non-volatile literal type, and
@@ -3695,8 +3698,8 @@ will usable in a constant expression.
 Two types \cvqual{cv1} \tcode{T1} and \cvqual{cv2} \tcode{T2} are
 \defn{layout-compatible} types
 if \tcode{T1} and \tcode{T2} are the same type,
-layout-compatible enumerations~(\ref{dcl.enum}), or
-layout-compatible standard-layout class types~(\ref{class.mem}).
+\deflinkx{layout-compatible enumerations}{layout-compatible!enumeration}{\ref{dcl.enum}}, or
+\deflinkx{layout-compatible standard-layout class types}{layout-compatible!class}{\ref{class.mem}}.
 
 \rSec2[basic.fundamental]{Fundamental types}
 
@@ -3725,7 +3728,7 @@ three distinct types, collectively called
 \defnx{narrow character types}{type!narrow character}.
 A \tcode{char}, a \tcode{signed char}, and an
 \tcode{unsigned char} occupy the same amount of storage and have the
-same alignment requirements~(\ref{basic.align}); that is, they have the
+same \link{alignment requirements}{\ref{basic.align}}; that is, they have the
 same object representation. For narrow character types, all bits of the object
 representation participate in the value representation.
 \begin{note}
@@ -3741,8 +3744,8 @@ either the same values as a \tcode{signed char} or an \tcode{unsigned
 char}; which one is \impldef{representation of \tcode{char}}.
 For each value \placeholder{i} of type \tcode{unsigned char} in the range
 0 to 255 inclusive, there exists a value \placeholder{j} of type
-\tcode{char} such that the result of an integral
-conversion~(\ref{conv.integral}) from \placeholder{i} to \tcode{char} is
+\tcode{char} such that the result of an \link{integral
+conversion}{\ref{conv.integral}} from \placeholder{i} to \tcode{char} is
 \placeholder{j}, and the result of an integral conversion from
 \placeholder{j} to \tcode{unsigned char} is \placeholder{i}.
 
@@ -3789,8 +3792,8 @@ there exists a corresponding (but different)
 ``\tcode{unsigned char}'', ``\tcode{unsigned short int}'',
 ``\tcode{unsigned int}'', ``\tcode{unsigned long int}'', and
 ``\tcode{unsigned long long int}'', each of
-which occupies the same amount of storage and has the same alignment
-requirements~(\ref{basic.align}) as the corresponding signed integer
+which occupies the same amount of storage and has the same \link{alignment
+requirements}{\ref{basic.align}} as the corresponding signed integer
 type\footnote{See~\ref{dcl.type.simple} regarding the correspondence between types and
 the sequences of \grammarterm{type-specifier}{s} that designate them.};
 that is, each signed integer type has the same object representation as
@@ -3838,9 +3841,9 @@ that can be represented by the resulting unsigned integer type.}
 \indextext{type!underlying!\idxcode{char32_t}}%
 Type \tcode{wchar_t} is a distinct type whose values can represent
 distinct codes for all members of the largest extended character set
-specified among the supported locales~(\ref{locale}). Type
-\tcode{wchar_t} shall have the same size, signedness, and alignment
-requirements~(\ref{basic.align}) as one of the other integral types,
+specified among the supported \link{locales}{\ref{locale}}. Type
+\tcode{wchar_t} shall have the same size, signedness, and \link{alignment
+requirements}{\ref{basic.align}} as one of the other integral types,
 called its \defnx{underlying type}{type!underlying!\idxcode{wchar_t}}. Types \tcode{char16_t} and
 \tcode{char32_t} denote distinct types with the same size, signedness,
 and alignment as \tcode{uint_least16_t} and \tcode{uint_least32_t},
@@ -3855,13 +3858,13 @@ uninitialized automatic object, might cause it to behave as if it is
 neither \tcode{true} nor \tcode{false}.}
 \begin{note} There are no \tcode{signed}, \tcode{unsigned}, \tcode{short},
 or \tcode{long bool} types or values. \end{note} Values of type
-\tcode{bool} participate in integral promotions~(\ref{conv.prom}).
+\tcode{bool} participate in \deflink{integral promotions}{\ref{conv.prom}}.
 
 \pnum
 Types \tcode{bool}, \tcode{char}, \tcode{char16_t}, \tcode{char32_t},
 \tcode{wchar_t}, and the signed and unsigned integer types are
 collectively called
-\defnx{integral}{integral type} types.\footnote{Therefore, enumerations~(\ref{dcl.enum}) are not integral; however,
+\defnx{integral}{integral type} types.\footnote{Therefore, \link{enumerations}{\ref{dcl.enum}} are not integral; however,
 enumerations can be promoted to integral types as specified
 in~\ref{conv.prom}.}
 A synonym for integral type is
@@ -3904,7 +3907,7 @@ Integral and floating types are collectively
 called \defnx{arithmetic}{type!arithmetic} types.
 \indextext{\idxcode{numeric_limits}!specializations for arithmetic types}%
 Specializations of the standard library template
-\tcode{std::numeric_limits}~(\ref{support.limits}) shall specify the
+\link{\tcode{std::numeric_limits}}{\ref{numeric.limits}} shall specify the
 maximum and minimum values of each arithmetic type for an
 implementation.
 
@@ -3914,19 +3917,19 @@ A type \cv{}~\tcode{void}
 is an incomplete type that cannot be completed; such a type has
 an empty set of values. It is used as the return
 type for functions that do not return a value. Any expression can be
-explicitly converted to type \cv{}~\tcode{void}~(\ref{expr.cast}).
+\link{explicitly converted}{\ref{expr.cast}} to type \cv{}~\tcode{void}.
 An expression of type \cv{}~\tcode{void} shall
-be used only as an expression statement~(\ref{stmt.expr}), as an operand
-of a comma expression~(\ref{expr.comma}), as a second or third operand
+be used only as an \link{expression statement}{\ref{stmt.expr}}, as an operand
+of a \link{comma expression}{\ref{expr.comma}}, as a second or third operand
 of \tcode{?:}~(\ref{expr.cond}), as the operand of
 \tcode{typeid}, \tcode{noexcept}, or \tcode{decltype}, as
-the expression in a return statement~(\ref{stmt.return}) for a function
+the expression in a \link{return statement}{\ref{stmt.return}} for a function
 with the return type \cv{}~\tcode{void}, or as the operand of an explicit conversion
 to type \cv{}~\tcode{void}.
 
 \pnum
-A value of type \tcode{std::nullptr_t} is a null pointer
-constant~(\ref{conv.ptr}). Such values participate in the pointer and the
+A value of type \tcode{std::nullptr_t} is a \link{null pointer
+constant}{\ref{conv.ptr}}. Such values participate in the pointer and the
 pointer to member conversions~(\ref{conv.ptr}, \ref{conv.mem}).
 \tcode{sizeof(std::nullptr_t)} shall be equal to \tcode{sizeof(void*)}.
 
@@ -4038,7 +4041,7 @@ when the storage it denotes
 reaches the end of its storage duration;
 see \ref{basic.stc}.
 \end{note}
-For purposes of pointer arithmetic~(\ref{expr.add})
+For purposes of \link{pointer arithmetic}{\ref{expr.add}}
 and comparison~(\ref{expr.rel}, \ref{expr.eq}),
 a pointer past the end of the last element of
 an array \tcode{x} of $n$ elements
@@ -4047,9 +4050,10 @@ a pointer to a hypothetical element \tcode{x[$n$]}.
 The value representation of
 pointer types is \impldef{value representation of pointer types}. Pointers to
 layout-compatible types shall
-have the same value representation and alignment
-requirements~(\ref{basic.align}).
-\begin{note} Pointers to over-aligned types~(\ref{basic.align}) have no special
+have the same value representation and \link{alignment
+requirements}{\ref{basic.align}}.
+\begin{note} Pointers to
+\deflinkx{over-aligned types}{over-aligned type}{\ref{basic.align}} have no special
 representation, but their range of valid values is restricted by the extended
 alignment requirement.\end{note}
 
@@ -4075,7 +4079,7 @@ If two objects are pointer-interconvertible,
 then they have the same address,
 and it is possible to obtain a pointer to one
 from a pointer to the other
-via a \tcode{reinterpret_cast}~(\ref{expr.reinterpret.cast}).
+via a \link{\tcode{reinterpret_cast}}{\ref{expr.reinterpret.cast}}.
 \begin{note}
 An array object and its first element are not pointer-interconvertible,
 even though they have the same address.
@@ -4084,7 +4088,7 @@ even though they have the same address.
 \pnum
 \indextext{pointer|seealso{\tcode{void*}}}%
 \indextext{\idxcode{void*}!type}%
-A pointer to \cv-qualified~(\ref{basic.type.qualifier}) or \cv-unqualified
+A pointer to \link{\cv-qualified}{\ref{basic.type.qualifier}} or \cv-unqualified
 \tcode{void}
 can be used to point to objects of
 unknown type. Such a pointer shall be able to hold any object pointer.
@@ -4126,14 +4130,14 @@ specified in the \grammarterm{decl-specifier-seq}~(\ref{dcl.spec}),
 The cv-qualified or
 cv-unqualified versions of a type
 are distinct types; however, they shall have the same representation and
-alignment requirements~(\ref{basic.align}).\footnote{The same representation
+\link{alignment requirements}{\ref{basic.align}}.\footnote{The same representation
 and alignment requirements are meant to imply
 interchangeability as arguments to functions, return values from
 functions, and non-static data members of unions.}
 
 \pnum
 \indextext{array!\idxcode{const}}%
-A compound type~(\ref{basic.compound}) is not cv-qualified by the
+A \link{compound type}{\ref{basic.compound}} is not cv-qualified by the
 cv-qualifiers (if any) of the types from which it is compounded. Any
 cv-qualifiers applied to an array type
 affect the array element type~(\ref{dcl.array}).
@@ -4216,7 +4220,8 @@ or computes the value of the operand of an operator,
 as specified by the context in which it appears.
 \item An \defn{xvalue} is a glvalue that denotes an object or bit-field whose resources can be reused (usually because it is near the end of its lifetime).
 \begin{example}
-Certain kinds of expressions involving rvalue references~(\ref{dcl.ref}) yield xvalues,
+Certain kinds of expressions involving
+\deflinkx{rvalue references}{rvalue reference}{\ref{dcl.ref}} yield xvalues,
 such as a call to a function whose return type is an rvalue reference
 or a cast to an rvalue reference type.
 \end{example}
@@ -4267,9 +4272,9 @@ and~\ref{conv.func}.
 An attempt to bind an rvalue reference to an lvalue is not such a context; see~\ref{dcl.init.ref}.
 \end{note}
 \begin{note}
-There are no prvalue bit-fields; if a bit-field is converted to a
-prvalue~(\ref{conv.lval}), a prvalue of the type of the bit-field is
-created, which might then be promoted~(\ref{conv.prom}).
+There are no prvalue bit-fields; if a bit-field is \link{converted to a
+prvalue}{\ref{conv.lval}}, a prvalue of the type of the bit-field is
+created, which might then be \link{promoted}{\ref{conv.prom}}.
 \end{note}
 
 \pnum
@@ -4312,7 +4317,7 @@ object may or may not be aliased.}
 
 \item a cv-qualified version of the dynamic type of the object,
 
-\item a type similar (as defined in~\ref{conv.qual}) to the dynamic type
+\item a type \deflinkx{similar}{similar types}{\ref{conv.qual}} to the dynamic type
 of the object,
 
 \item a type that is the signed or unsigned type corresponding to the
@@ -4340,7 +4345,7 @@ may be allocated. An \defn{alignment} is an \impldef{alignment}
 integer value representing the number of bytes between successive addresses
 at which a given object can be allocated. An object type imposes an alignment
 requirement on every object of that type; stricter alignment can be requested
-using the alignment specifier~(\ref{dcl.align}).
+using the \link{alignment specifier}{\ref{dcl.align}}.
 
 \pnum
 \indextext{alignment!fundamental}%
@@ -4376,7 +4381,8 @@ Every over-aligned type is or contains a class type
 to which extended alignment applies (possibly through a non-static data member).
 \end{note}
 A \defn{new-extended alignment} is represented by
-an alignment greater than \mname{STDCPP_DEFAULT_NEW_ALIGNMENT}~(\ref{cpp.predefined}).
+an alignment greater than
+\linkx{\tcode{__STDCPP_DEFAULT_NEW_ALIGNMENT__}}{\idxcode{__STDCPP_DEFAULT_NEW_ALIGNMENT__}}{\ref{cpp.predefined}}.
 
 \pnum
 Alignments are represented as values of the type \tcode{std::size_t}.
@@ -4394,9 +4400,9 @@ requirement also satisfies any weaker valid alignment requirement.
 
 \pnum
 The alignment requirement of a complete type can be queried using an
-\tcode{alignof} expression~(\ref{expr.alignof}). Furthermore,
-the narrow character types~(\ref{basic.fundamental}) shall have the weakest
-alignment requirement.
+\link{\tcode{alignof} expression}{\ref{expr.alignof}}. Furthermore,
+the \deflinkx{narrow character types}{type!narrow character}{\ref{basic.fundamental}}
+shall have the weakest alignment requirement.
 \begin{note} This enables the narrow character types to be used as the
 underlying type for an aligned memory area~(\ref{dcl.align}).\end{note}
 
@@ -4410,7 +4416,7 @@ Comparing alignments is meaningful and provides the obvious results:
 \end{itemize}
 
 \pnum
-\begin{note} The runtime pointer alignment function~(\ref{ptr.align})
+\begin{note} The runtime \link{pointer alignment function}{\ref{ptr.align}}
 can be used to obtain an aligned pointer within a buffer; the aligned-storage templates
 in the library~(\ref{meta.trans.other}) can be used to obtain aligned storage.
 \end{note}
diff --git a/source/classes.tex b/source/classes.tex
index e3e4644..9961464 100644
--- a/source/classes.tex
+++ b/source/classes.tex
@@ -64,7 +64,7 @@ be \tcode{final}. \end{note}
 A \grammarterm{class-name} is inserted into the scope in which it is
 declared immediately after the \grammarterm{class-name} is seen. The
 \grammarterm{class-name} is also inserted into the scope of the class
-itself; this is known as the \grammarterm{injected-class-name}.
+itself; this is known as the \defn{injected-class-name}.
 \indextext{\idxgram{injected-class-name}}%
 For purposes of access checking, the injected-class-name is treated as
 if it were a public member name.
@@ -133,11 +133,11 @@ and move assignment operator~(\ref{class.copy}, \ref{over.ass})
 is either deleted or trivial,
 \item that has at least one non-deleted copy constructor, move constructor,
 copy assignment operator, or move assignment operator, and
-\item that has a trivial, non-deleted destructor~(\ref{class.dtor}).
+\item that has a trivial, non-deleted \link{destructor}{\ref{class.dtor}}.
 \end{itemize}
 
 A \term{trivial class} is a class that is trivially copyable and
-has one or more default constructors~(\ref{class.ctor}),
+has one or more \deflinkx{default constructors}{constructor!default}{\ref{class.ctor}},
 all of which are either trivial or deleted and
 at least one of which is not deleted.
 \begin{note} In particular, a trivially copyable or trivial class does not have
@@ -150,10 +150,10 @@ A class \tcode{S} is a \defn{standard-layout class} if it:
 \item has no non-static data members of type non-standard-layout class
 (or array of such types) or reference,
 
-\item has no virtual functions~(\ref{class.virtual}) and no
-virtual base classes~(\ref{class.mi}),
+\item has no \link{virtual functions}{\ref{class.virtual}} and no
+\link{virtual base classes}{\ref{class.mi}},
 
-\item has the same access control (Clause~\ref{class.access})
+\item has the same \link{access control}{Clause~\ref{class.access}}
 for all non-static data members,
 
 \item has no non-standard-layout base classes,
@@ -173,7 +173,7 @@ address~(\ref{expr.eq}).}
 $M(\mathtt{X})$ is defined as follows:
 \begin{itemize}
 \item If \tcode{X} is a non-union class type with no (possibly
-inherited (Clause~\ref{class.derived})) non-static data members, the set
+\link{inherited}{Clause~\ref{class.derived}}) non-static data members, the set
 $M(\mathtt{X})$ is empty.
 
 \item If \tcode{X} is a non-union class type whose first non-static data
@@ -269,7 +269,7 @@ If a \grammarterm{class-head-name} contains a \grammarterm{nested-name-specifier
 the \grammarterm{class-specifier} shall refer to a class that was
 previously declared directly in the class or namespace to which the
 \grammarterm{nested-name-specifier} refers,
-or in an element of the inline namespace set~(\ref{namespace.def}) of that namespace
+or in an element of the \deflink{inline namespace set}{\ref{namespace.def}} of that namespace
 (i.e., not merely inherited or
 introduced by a \grammarterm{using-declaration}), and the
 \grammarterm{class-specifier} shall appear in a namespace enclosing the
@@ -310,7 +310,7 @@ int f(Y);
 \end{codeblock}
 
 \indextext{overloading}%
-declare an overloaded (Clause~\ref{over}) function \tcode{f()} and not
+declare an \link{overloaded}{Clause~\ref{over}} function \tcode{f()} and not
 simply a single function \tcode{f()} twice. For the same reason,
 
 \begin{codeblock}
@@ -328,7 +328,7 @@ A class declaration introduces the class name into the scope where
 \indextext{name hiding!class definition}%
 it is declared and hides any
 class, variable, function, or other declaration of that name in an
-enclosing scope~(\ref{basic.scope}). If a class name is declared in a
+enclosing \link{scope}{\ref{basic.scope}}. If a class name is declared in a
 scope where a variable, function, or enumerator of the same name is also
 declared, then when both declarations are in scope, the class can be
 referred to only using an
@@ -495,9 +495,9 @@ full set of members of the class; no member can be added elsewhere.
 A \defn{direct member} of a class \tcode{X} is a member of \tcode{X}
 that was first declared within the \grammarterm{member-specification} of \tcode{X},
 including anonymous union objects~(\ref{class.union.anon}) and direct members thereof.
-Members of a class are data members, member
-functions~(\ref{class.mfct}), nested types, enumerators,
-and member templates~(\ref{temp.mem}) and specializations thereof.
+Members of a class are data members, \link{member functions}{\ref{class.mfct}},
+nested types, enumerators,
+and \link{member templates}{\ref{temp.mem}} and specializations thereof.
 \begin{note}
 A specialization of a static data member template is a static data member.
 A specialization of a member function template is a member function.
@@ -508,14 +508,14 @@ A specialization of a member class template is a nested class.
 A \grammarterm{member-declaration} does not declare new members of the class
 if it is
 \begin{itemize}
-\item a friend declaration~(\ref{class.friend}),
+\item a \link{friend declaration}{\ref{class.friend}},
 \item a \grammarterm{static_assert-declaration},
 \item a \grammarterm{using-declaration}~(\ref{namespace.udecl}), or
 \item an \grammarterm{empty-declaration}.
 \end{itemize}
 For any other \grammarterm{member-declaration},
 each declared entity
-that is not an unnamed bit-field~(\ref{class.bit})
+that is not an \deflinkx{unnamed bit-field}{bit-field!unnamed}{\ref{class.bit}}
 is a member of the class,
 and each such \grammarterm{member-declaration}
 shall either
@@ -527,10 +527,10 @@ A \defn{data member} is a non-function member introduced by a
 \grammarterm{member-declarator}.
 A \defn{member function} is a member that is a function.
 Nested types are classes~(\ref{class.name},~\ref{class.nest}) and
-enumerations~(\ref{dcl.enum}) declared in the class and arbitrary types
-declared as members by use of a typedef declaration~(\ref{dcl.typedef})
+\link{enumerations}{\ref{dcl.enum}} declared in the class and arbitrary types
+declared as members by use of a \link{typedef declaration}{\ref{dcl.typedef}}
 or \grammarterm{alias-declaration}.
-The enumerators of an unscoped enumeration~(\ref{dcl.enum}) defined in the class
+The enumerators of an \link{unscoped enumeration}{\ref{dcl.enum}} defined in the class
 are members of the class.
 
 \indextext{member!static}%
@@ -619,9 +619,9 @@ shall contain a \grammarterm{type-specifier} that is not a \grammarterm{cv-quali
 The
 \grammarterm{member-declarator-list} can be omitted only after a
 \grammarterm{class-specifier} or an \grammarterm{enum-specifier} or in a
-\tcode{friend} declaration~(\ref{class.friend}). A
+\link{\tcode{friend} declaration}{\ref{class.friend}}. A
 \grammarterm{pure-specifier} shall be used only in the declaration of a
-virtual function~(\ref{class.virtual})
+\link{virtual function}{\ref{class.virtual}}
 that is not a \tcode{friend} declaration.
 
 \pnum
@@ -633,8 +633,8 @@ it shall not appear if the optional \grammarterm{member-declarator-list} is omit
 A \grammarterm{virt-specifier-seq} shall contain at most one of each
 \grammarterm{virt-specifier}.
 A \grammarterm{virt-specifier-seq}
-shall appear only in the declaration of a virtual member
-function~(\ref{class.virtual}).
+shall appear only in the declaration of a \link{virtual member
+function}{\ref{class.virtual}}.
 
 \pnum
 \indextext{class object!member}%
@@ -689,17 +689,17 @@ of the \tcode{tword} member of the \tcode{right} subtree of \tcode{s}.
 \pnum
 \indextext{layout!class object}%
 Non-static data members of a (non-union) class
-with the same access control (Clause~\ref{class.access})
+with the same \link{access control}{Clause~\ref{class.access}}
 are allocated so that later
 members have higher addresses within a class object.
 \indextext{allocation!unspecified}%
 The order of allocation of non-static data members
-with different access control
-is unspecified (Clause~\ref{class.access}).
+with different \link{access control}{Clause~\ref{class.access}}
+is unspecified.
 Implementation alignment requirements might cause two adjacent members
 not to be allocated immediately after each other; so might requirements
-for space for managing virtual functions~(\ref{class.virtual}) and
-virtual base classes~(\ref{class.mi}).
+for space for managing \link{virtual functions}{\ref{class.virtual}} and
+virtual \link{base classes}{\ref{class.mi}}.
 
 \pnum
 If \tcode{T} is the name of a class, then each of the following shall
@@ -710,8 +710,8 @@ have a name different from \tcode{T}:
 
 \item every member function of class \tcode{T}
 \begin{note}
-This restriction does not apply to constructors, which do not have
-names~(\ref{class.ctor})
+This restriction does not apply to \link{constructors}{\ref{class.ctor}},
+which do not have names
 \end{note};
 
 \item every member of class \tcode{T} that is itself a type;
@@ -727,11 +727,12 @@ unscoped enumerated type; and
 
 \pnum
 In addition, if class \tcode{T} has a user-declared
-constructor~(\ref{class.ctor}), every non-static data member of class
+\link{constructor}{\ref{class.ctor}}, every non-static data member of class
 \tcode{T} shall have a name different from \tcode{T}.
 
 \pnum
-The \defn{common initial sequence} of two standard-layout struct (Clause~\ref{class})
+The \defn{common initial sequence} of two
+\deflink{standard-layout struct}{Clause~\ref{class}}
 types is the longest sequence of non-static data
 members and bit-fields in declaration order, starting with the first
 such entity in each of the structs, such that corresponding entities
@@ -752,7 +753,7 @@ The common initial sequence of \tcode{A} and \tcode{E} is empty.
 \end{example}
 
 \pnum
-Two standard-layout struct (Clause~\ref{class}) types are
+Two \deflink{standard-layout struct}{Clause~\ref{class}} types are
 \defnx{layout-compatible classes}{layout-compatible!class} if
 their common initial sequence comprises all members and bit-fields of
 both classes~(\ref{basic.types}).
@@ -760,11 +761,11 @@ both classes~(\ref{basic.types}).
 \pnum
 Two standard-layout unions are layout-compatible if they
 have the same number of non-static data members and corresponding
-non-static data members (in any order) have layout-compatible
-types~(\ref{basic.types}).
+non-static data members (in any order) have \deflinkx{layout-compatible
+types}{layout-compatible}{\ref{basic.types}}.
 
 \pnum
-In a standard-layout union with an active member~(\ref{class.union})
+In a standard-layout union with an \deflinkx{active member}{active!union member}{\ref{class.union}}
 of struct type \tcode{T1}, it is permitted to read a non-static
 data member \tcode{m} of another union member of struct type \tcode{T2}
 provided \tcode{m} is part of the common initial sequence of \tcode{T1} and \tcode{T2};
@@ -804,9 +805,9 @@ pointer-interconvertible~(\ref{basic.compound}, \ref{expr.static.cast}).
 \pnum
 \indextext{member function!inline}%
 \indextext{definition!member function}%
-A member function may be defined~(\ref{dcl.fct.def}) in its class
-definition, in which case it is an \term{inline} member
-function~(\ref{dcl.inline}), or it may be defined outside of its class
+A member function may be \link{defined}{\ref{dcl.fct.def}} in its class
+definition, in which case it is an \deflinkx{inline}{inline function}{\ref{dcl.inline}} member
+function, or it may be defined outside of its class
 definition if it has already been declared but not defined in its class
 definition. A member function definition that appears outside of the
 class definition shall appear in a namespace scope enclosing the class
@@ -823,7 +824,7 @@ declaration in the class definition or its definition outside of the
 class definition declares the function as \tcode{inline} or \tcode{constexpr}.
 \begin{note}
 Member functions of a class in namespace scope have the linkage of that class.
-Member functions of a local class~(\ref{class.local}) have no linkage.
+Member functions of a \link{local class}{\ref{class.local}} have no linkage.
 See~\ref{basic.link}.
 \end{note}
 
@@ -842,8 +843,8 @@ definition, the member function name shall be qualified by its class
 name using the \tcode{::} operator.
 \begin{note}
 A name used in a member function definition (that is, in the
-\grammarterm{parameter-declaration-clause} including the default
-arguments~(\ref{dcl.fct.default}) or in the member function body) is looked up
+\grammarterm{parameter-declaration-clause} including the \link{default
+arguments}{\ref{dcl.fct.default}} or in the member function body) is looked up
 as described in~\ref{basic.lookup}.
 \end{note}
 \begin{example}
@@ -908,9 +909,9 @@ Also see~\ref{temp.arg}.
 
 \pnum
 A non-static member function may be called for an object of
-its class type, or for an object of a class derived
-(Clause~\ref{class.derived}) from its class type, using the class member
-access syntax~(\ref{expr.ref},~\ref{over.match.call}). A non-static
+its class type, or for an object of a class
+\link{derived}{Clause~\ref{class.derived}} from its class type, using the
+\link{class member access}{\ref{expr.ref}} syntax~(\ref{over.match.call}). A non-static
 member function may also be called directly using the function call
 syntax~(\ref{expr.call},~\ref{over.match.call}) from within
 the body of a member function of its class or of a class derived from
@@ -924,19 +925,18 @@ object that is not of type \tcode{X}, or of a type derived from
 
 \pnum
 When an \grammarterm{id-expression}~(\ref{expr.prim.id}) that is not part of a
-class member access syntax~(\ref{expr.ref}) and not used to form a
+\link{class member access}{\ref{expr.ref}} syntax and not used to form a
 pointer to member~(\ref{expr.unary.op}) is used in
-a member of class \tcode{X} in a context where \tcode{this} can be
-used~(\ref{expr.prim.this}),
-if name
-lookup~(\ref{basic.lookup}) resolves the name in the
+a member of class \tcode{X} in a context where
+\link{\tcode{this}}{\ref{expr.prim.this}} can be used,
+if \link{name lookup}{\ref{basic.lookup}} resolves the name in the
 \grammarterm{id-expression} to a non-static non-type member of some class
 \tcode{C},
 and if either the \grammarterm{id-expression} is potentially evaluated or
 \tcode{C} is \tcode{X} or a base class of \tcode{X},
-the \grammarterm{id-expression} is transformed into a class
-member access expression~(\ref{expr.ref}) using
-\tcode{(*this)}~(\ref{class.this}) as the \grammarterm{postfix-expression}
+the \grammarterm{id-expression} is transformed into a
+\link{class member access}{\ref{expr.ref}} expression using
+\link{\tcode{(*this)}}{\ref{class.this}} as the \grammarterm{postfix-expression}
 to the left of the \tcode{.} operator.
 \begin{note}
 If \tcode{C} is not \tcode{X} or a base class of \tcode{X}, the class
@@ -991,9 +991,9 @@ declared elsewhere.\footnote{See, for example, \tcode{<cstring>}~(\ref{c.strings
 \pnum
 A non-static member function may be declared \tcode{const},
 \tcode{volatile}, or \tcode{const} \tcode{volatile}. These
-\grammarterm{cv-qualifier}{s} affect the type of the \tcode{this}
-pointer~(\ref{class.this}). They also affect the function
-type~(\ref{dcl.fct}) of the member function; a member function declared
+\grammarterm{cv-qualifier}{s} affect the type of the \link{\tcode{this}
+pointer}{\ref{class.this}}. They also affect the \link{function
+type}{\ref{dcl.fct}} of the member function; a member function declared
 \tcode{const} is a \term{const} member function, a member function
 declared \tcode{volatile} is a \term{volatile} member function and a
 member function declared \tcode{const} \tcode{volatile} is a
@@ -1024,7 +1024,7 @@ A non-static member function may be declared
 
 \pnum
 \indextext{this pointer@\tcode{this} pointer|see{\tcode{this}}}%
-In the body of a non-static~(\ref{class.mfct}) member function, the
+In the body of a non-static \link{member function}{\ref{class.mfct}}, the
 keyword \tcode{this} is a prvalue expression whose value is the
 address of the object for which the function is called.
 \indextext{\idxcode{this}!type of}%
@@ -1062,13 +1062,13 @@ called. This is not allowed in a \tcode{const} member function because
 \end{example}
 
 \pnum
-Similarly, \tcode{volatile} semantics~(\ref{dcl.type.cv}) apply in
+Similarly, \link{\tcode{volatile}}{\ref{dcl.type.cv}} semantics apply in
 \tcode{volatile} member functions when accessing the object and its
 non-static data members.
 
 \pnum
 A cv-qualified member function can be called on an
-object-expression~(\ref{expr.ref}) only if the object-expression is as
+\link{object-expression}{\ref{expr.ref}} only if the object-expression is as
 cv-qualified or less-cv-qualified than the member function.
 \begin{example}
 
@@ -1091,7 +1091,7 @@ and \tcode{s::g()} is a non-\tcode{const} member function, that is,
 \indextext{\idxcode{const}!destructor and}%
 \indextext{\idxcode{volatile}!constructor and}%
 \indextext{\idxcode{volatile}!destructor and}%
-Constructors~(\ref{class.ctor}) and destructors~(\ref{class.dtor}) shall
+\link{Constructors}{\ref{class.ctor}} and \link{destructors}{\ref{class.dtor}} shall
 not be declared \tcode{const}, \tcode{volatile} or \tcode{const}
 \tcode{volatile}. \begin{note} However, these functions can be invoked to
 create and destroy objects with cv-qualified types,
@@ -1104,7 +1104,7 @@ see~\ref{class.ctor} and~\ref{class.dtor}.
 \pnum
 A static member \tcode{s} of class \tcode{X} may be referred to
 using the \grammarterm{qualified-id} expression \tcode{X::s}; it is not
-necessary to use the class member access syntax~(\ref{expr.ref}) to
+necessary to use the \link{class member access}{\ref{expr.ref}} syntax to
 refer to a static member. A static member may be
 referred to using the class member access syntax, in which case the
 object expression is evaluated.
@@ -1125,7 +1125,7 @@ void f() {
 
 \pnum
 A static member may be referred to directly in the scope of its
-class or in the scope of a class derived (Clause~\ref{class.derived})
+class or in the scope of a class \link{derived}{Clause~\ref{class.derived}}
 from its class; in this case, the static member is referred to
 as if a \grammarterm{qualified-id} expression was used, with the
 \grammarterm{nested-name-specifier} of the \grammarterm{qualified-id} naming
@@ -1145,9 +1145,9 @@ int Y::i = g();                 // equivalent to \tcode{Y::g();}
 \end{example}
 
 \pnum
-If an \grammarterm{unqualified-id}~(\ref{expr.prim}) is used in the
+If an \grammarterm{unqualified-id}~(\ref{expr.prim.id.unqual}) is used in the
 definition of a static member following the member's
-\grammarterm{declarator-id}, and name lookup~(\ref{basic.lookup.unqual})
+\grammarterm{declarator-id}, and \link{name lookup}{\ref{basic.lookup.unqual}}
 finds that the \grammarterm{unqualified-id} refers to a static
 member, enumerator, or nested type of the member's class (or of a base
 class of the member's class), the \grammarterm{unqualified-id} is
@@ -1161,8 +1161,8 @@ members and non-static member functions.
 
 
 \pnum
-Static members obey the usual class member access rules
-(Clause~\ref{class.access}). When used in the declaration of a class
+Static members obey the usual class \link{member access rules}{Clause~\ref{class.access}}.
+When used in the declaration of a class
 member, the \tcode{static} specifier shall only be used in the member
 declarations that appear within the \grammarterm{member-specification} of
 the class definition.
@@ -1181,8 +1181,7 @@ functions.
 
 \pnum
 \begin{note}
-A static member function does not have a \tcode{this}
-pointer~(\ref{class.this}).
+A static member function does not have a \link{\tcode{this} pointer}{\ref{class.this}}.
 \end{note}
 A static member function shall not be \tcode{virtual}. There
 shall not be a static and a non-static member function with the
@@ -1255,7 +1254,7 @@ its declaration in the class definition can specify a
 \grammarterm{initializer-clause} that is an \grammarterm{assignment-expression}
 is a constant expression~(\ref{expr.const}).
 The member shall still be defined in a namespace scope if
-it is odr-used~(\ref{basic.def.odr}) in the program and the
+it is \link{odr-used}{\ref{basic.def.odr}} in the program and the
 namespace scope definition shall not contain an \grammarterm{initializer}.
 An inline static data member may be defined in the class definition
 and may specify a \grammarterm{brace-or-equal-initializer}. If the
@@ -1267,7 +1266,7 @@ static data members shall not specify a \grammarterm{brace-or-equal-initializer}
 \pnum
 \begin{note}
 There shall be exactly one definition of a static data member
-that is odr-used~(\ref{basic.def.odr}) in a program; no diagnostic is required.
+that is \link{odr-used}{\ref{basic.def.odr}} in a program; no diagnostic is required.
 \end{note}
 Unnamed classes and classes contained directly
 or indirectly within unnamed classes shall not contain static
@@ -1275,7 +1274,8 @@ data members.
 
 \pnum
 \begin{note}
-Static data members of a class in namespace scope have the linkage of that class~(\ref{basic.link}). A local class cannot have static data members~(\ref{class.local}).
+Static data members of a class in namespace scope have the \link{linkage}{\ref{basic.link}} of that class.
+A \link{local class}{\ref{class.local}} cannot have static data members.
 \end{note}
 
 \pnum
@@ -1285,7 +1285,7 @@ non-local variables~(\ref{basic.start.static}, \ref{basic.start.dynamic},
 
 \pnum
 A static data member shall not be
-\tcode{mutable}~(\ref{dcl.stc}).
+\linkx{\tcode{mutable}}{mutable}{\ref{dcl.stc}}.
 
 \rSec2[class.bit]{Bit-fields}%
 \indextext{bit-field}
@@ -1305,10 +1305,10 @@ attribute is not part of the type of the class member. The
 \grammarterm{constant-expression} shall be an integral constant expression
 with a value greater than or equal to zero. The
 value of the integral constant expression may
-be larger than the number of bits in the object
-representation~(\ref{basic.types}) of the bit-field's type; in such
+be larger than the number of bits in the \deflink{object
+representation}{\ref{basic.types}} of the bit-field's type; in such
 cases the extra bits are used as padding bits and do not participate in
-the value representation~(\ref{basic.types}) of the bit-field.
+the \deflink{value representation}{\ref{basic.types}} of the bit-field.
 \indextext{allocation!implementation-defined bit-field}%
 Allocation of bit-fields within a class object is
 \impldef{allocation of bit-fields within a class object}.
@@ -1366,7 +1366,7 @@ type \tcode{bool} of any size (including a one bit bit-field), the
 original \tcode{bool} value and the value of the bit-field shall compare
 equal. If the value of an enumerator is stored into a bit-field of the
 same enumeration type and the number of bits in the bit-field is large
-enough to hold all the values of that enumeration type~(\ref{dcl.enum}),
+enough to hold all the values of that \link{enumeration type}{\ref{dcl.enum}},
 the original enumerator value and the value of the bit-field shall
 compare equal.
 \begin{example}
@@ -1469,10 +1469,10 @@ class E::I2 { };                // definition of nested class
 
 \pnum
 \indextext{friend function!nested class}%
-Like a member function, a friend function~(\ref{class.friend}) defined
+Like a member function, a \link{friend function}{\ref{class.friend}} defined
 within a nested class is in the lexical scope of that class; it obeys
-the same rules for name binding as a static member function of that
-class~(\ref{class.static}), but it has no special access rights to
+the same rules for name binding as a \link{static member function}{\ref{class.static}}
+of that class, but it has no special access rights to
 members of an enclosing class.
 
 \rSec2[class.nested.type]{Nested type names}
@@ -1508,13 +1508,13 @@ X::I e;                         // OK
 In a union,
 a non-static data member is \defnx{active}{active!union member}
 if its name refers to an object
-whose lifetime has begun and has not ended~(\ref{basic.life}).
+whose \link{lifetime}{\ref{basic.life}} has begun and has not ended.
 At most one of the non-static data members of an object of union type
 can be active at any
 time, that is, the value of at most one of the non-static data members can be
 stored in a union at any time. \begin{note} One special guarantee is made in order to
 simplify the use of unions: If a standard-layout union contains several standard-layout
-structs that share a common initial sequence~(\ref{class.mem}), and
+structs that share a \deflink{common initial sequence}{\ref{class.mem}}, and
 if a non-static data member of an object of this standard-layout union type
 is active and is one of the standard-layout structs,
 it is permitted to inspect the common initial sequence
@@ -1528,7 +1528,7 @@ of its non-static data members. Each non-static data member is allocated
 as if it were the sole member of a struct.
 \begin{note}
 A union object and its non-static data members are
-pointer-interconvertible~(\ref{basic.compound}, \ref{expr.static.cast}).
+\deflink{pointer-interconvertible}{\ref{basic.compound}}~(\ref{expr.static.cast}).
 As a consequence, all non-static data members of a
 union object have the same address.
 \end{note}
@@ -1539,21 +1539,21 @@ union object have the same address.
 \indextext{destructor!\idxcode{union}}%
 A union can have member functions (including constructors and destructors),
 \indextext{restriction!\idxcode{union}}%
-but it shall not have virtual~(\ref{class.virtual}) functions. A union shall not have
+but it shall not have \link{virtual}{\ref{class.virtual}} functions. A union shall not have
 base classes. A union shall not be used as a base class.
 \indextext{restriction!\idxcode{union}}%
 If a union contains a non-static data member of
 reference type the program is ill-formed.
-\begin{note} Absent default member initializers~(\ref{class.mem}),
+\begin{note} Absent \deflink{default member initializers}{\ref{class.mem}},
 if any non-static data member of a union has a non-trivial
 default constructor~(\ref{class.ctor}),
-copy constructor~(\ref{class.copy}),
+\link{copy constructor}{\ref{class.copy}},
 move constructor~(\ref{class.copy}),
-copy assignment operator~(\ref{class.copy}),
-move assignment operator~(\ref{class.copy}),
-or destructor~(\ref{class.dtor}), the corresponding member function
+\link{copy assignment operator}{\ref{class.copy}},
+\link{move assignment operator}{\ref{class.copy}},
+or \link{destructor}{\ref{class.dtor}}, the corresponding member function
 of the union must be user-provided or it will
-be implicitly deleted~(\ref{dcl.fct.def.delete}) for the union. \end{note}
+be implicitly \link{deleted}{\ref{dcl.fct.def.delete}} for the union. \end{note}
 
 \pnum
 \begin{example} Consider the following union:
@@ -1566,7 +1566,7 @@ union U {
 };
 \end{codeblock}
 
-Since \tcode{std::string}~(\ref{string.classes}) declares non-trivial versions of all of the special
+Since \link{\tcode{std::string}}{\ref{string.classes}} declares non-trivial versions of all of the special
 member functions, \tcode{U} will have an implicitly deleted default constructor,
 copy/move constructor,
 copy/move assignment operator, and destructor.
@@ -1575,7 +1575,7 @@ must be user-provided.\end{example}
 
 \pnum
 When the left operand of an assignment operator
-involves a member access expression~(\ref{expr.ref})
+involves a \link{member access expression}{\ref{expr.ref}}
 that nominates a union member,
 it may begin the lifetime of that union member,
 as described below.
@@ -1601,8 +1601,8 @@ and empty otherwise.
 Otherwise, $S(\mathtt{E})$ is empty.
 \end{itemize}
 In an assignment expression of the form \tcode{E1 = E2}
-that uses either the built-in assignment operator~(\ref{expr.ass})
-or a trivial assignment operator~(\ref{class.copy}),
+that uses either the \link{built-in assignment operator}{\ref{expr.ass}}
+or a \link{trivial assignment operator}{\ref{class.copy}},
 for each element \tcode{X} of $S($\tcode{E1}$)$,
 if modification of \tcode{X} would have undefined behavior under~\ref{basic.life},
 an object of the type of \tcode{X} is implicitly created
@@ -1612,8 +1612,8 @@ the beginning of its lifetime is sequenced after
 the value computation of the left and right operands
 and before the assignment.
 \begin{note}
-This ends the lifetime of the previously-active
-member of the union, if any~(\ref{basic.life}).
+This ends the \deflink{lifetime}{\ref{basic.life}} of the previously-active
+member of the union, if any.
 \end{note}
 \begin{example}
 \begin{codeblock}
@@ -1767,7 +1767,7 @@ its enclosing scope.
 The local class is in the scope of the enclosing scope, and has the same
 access to names outside the function as does the enclosing function.
 Declarations in a local class
-shall not odr-use~(\ref{basic.def.odr}) a variable with automatic storage
+shall not \link{odr-use}{\ref{basic.def.odr}} a variable with automatic storage
 duration from an
 enclosing scope.
 \begin{example}
@@ -1796,7 +1796,7 @@ local* p = 0;                   // error: \tcode{local} not in scope
 
 \pnum
 An enclosing function has no special access to members of the local
-class; it obeys the usual access rules (Clause~\ref{class.access}).
+class; it obeys the usual \link{access rules}{Clause~\ref{class.access}}.
 \indextext{member function!local class}%
 Member functions of a local class shall be defined within their class
 definition, if they are defined at all.
diff --git a/source/compatibility.tex b/source/compatibility.tex
index 3e4b5ff..6d4e2a2 100644
--- a/source/compatibility.tex
+++ b/source/compatibility.tex
@@ -1375,8 +1375,8 @@ deallocation functions~(\ref{expr.new}).
 \ref{expr.cond}
 \change A conditional expression with a throw expression as its second or third
 operand keeps the type and value category of the other operand.
-\rationale Formerly mandated conversions (lvalue-to-rvalue (\ref{conv.lval}),
-array-to-pointer (\ref{conv.array}), and function-to-pointer (\ref{conv.func})
+\rationale Formerly mandated conversions (\link{lvalue-to-rvalue}{\ref{conv.lval}},
+\link{array-to-pointer}{\ref{conv.array}}, and \link{function-to-pointer}{\ref{conv.func}}
 standard conversions), especially the creation of the temporary due to
 lvalue-to-rvalue conversion, were considered gratuitous and surprising.
 \effect Valid \CppXI{} code that relies on the conversions may behave differently
@@ -1811,9 +1811,10 @@ and \tcode{<ctgmath>} is deprecated~(\ref{depr.c.headers}).
 The types \tcode{char16_t} and \tcode{char32_t}
 are distinct types rather than typedefs to existing integral types.
 The tokens \tcode{char16_t} and \tcode{char32_t}
-are keywords in this International Standard (\ref{lex.key}).
+are \link{keywords}{\ref{lex.key}} in this International Standard.
 They do not appear as macro names defined in
-\tcode{<cuchar>}\indexlibrary{\idxhdr{cuchar}}~(\ref{cuchar.syn}).
+\indexlibrary{\idxhdr{cuchar}}
+\link{\tcode{<cuchar>}}{\ref{cuchar.syn}}.
 
 \rSec3[diff.wchar.t]{Type \tcode{wchar_t}}
 
@@ -1821,19 +1822,19 @@ They do not appear as macro names defined in
 The type \tcode{wchar_t} is a distinct type rather than a typedef to an
 existing integral type.
 The token \tcode{wchar_t}
-is a keyword in this International Standard (\ref{lex.key}).
+is a \link{keyword}{\ref{lex.key}} in this International Standard.
 It does not appear as a type name defined in any of
-\tcode{<cstddef>}~(\ref{cstddef.syn})\indexlibrary{\idxhdr{cstddef}},
-\tcode{<cstdlib>}~(\ref{cstdlib.syn})\indexlibrary{\idxhdr{cstdlib}},
-or \tcode{<cwchar>}~(\ref{cwchar.syn})\indexlibrary{\idxhdr{cwchar}}.
+\link{\tcode{<cstddef>}}{\ref{cstddef.syn}}\indexlibrary{\idxhdr{cstddef}},
+\link{\tcode{<cstdlib>}}{\ref{cstdlib.syn}}\indexlibrary{\idxhdr{cstdlib}},
+or \link{\tcode{<cwchar>}}{\ref{cwchar.syn}}\indexlibrary{\idxhdr{cwchar}}.
 
 \rSec3[diff.header.assert.h]{Header \tcode{<assert.h>}}
 \indexlibrary{\idxhdr{assert.h}}%
 
 \pnum
-The token \tcode{static_assert} is a keyword in this International
-Standard (\ref{lex.key}). It does not appear as a macro name defined
-in \tcode{<cassert>}\indexlibrary{\idxhdr{cassert}}~(\ref{cassert.syn}).
+The token \tcode{static_assert} is a \link{keyword}{\ref{lex.key}} in this International
+Standard. It does not appear as a macro name defined
+in \indexlibrary{\idxhdr{cassert}}\link{\tcode{<cassert>}}{\ref{cassert.syn}}.
 
 \rSec3[diff.header.iso646.h]{Header \tcode{<iso646.h>}}
 \indexlibrary{\idxhdr{iso646.h}}%
@@ -1852,8 +1853,8 @@ The tokens
 \tcode{xor},
 and
 \tcode{xor_eq}
-are keywords in this International
-Standard (\ref{lex.key}).
+are \link{keywords}{\ref{lex.key}} in this International
+Standard.
 They do not appear as macro names defined in
 \tcode{<ciso646>}.
 \indexlibrary{\idxhdr{ciso646}}%
@@ -1871,7 +1872,7 @@ in \tcode{<cstdalign>}\indexlibrary{\idxhdr{cstdalign}}~(\ref{depr.cstdalign.syn
 
 \pnum
 The tokens \tcode{bool}, \tcode{true}, and \tcode{false}
-are keywords in this International Standard (\ref{lex.key}).
+are \link{keywords}{\ref{lex.key}} in this International Standard.
 They do not appear as macro names defined in
 \tcode{<cstdbool>}\indexlibrary{\idxhdr{cstdbool}}~(\ref{depr.cstdbool.syn}).
 
@@ -1881,20 +1882,20 @@ They do not appear as macro names defined in
 The macro
 \tcode{NULL},
 defined in any of
-\tcode{<clocale>}~(\ref{c.locales})\indexlibrary{\idxhdr{clocale}},
-\tcode{<cstddef>}~(\ref{cstddef.syn})\indexlibrary{\idxhdr{cstddef}},
-\tcode{<cstdio>}~(\ref{cstdio.syn})\indexlibrary{\idxhdr{cstdio}},
-\tcode{<cstdlib>} (\ref{cstdlib.syn})\indexlibrary{\idxhdr{cstdlib}},
-\tcode{<cstring>}~(\ref{cstring.syn})\indexlibrary{\idxhdr{cstring}},
-\tcode{<ctime>}~(\ref{ctime.syn})\indexlibrary{\idxhdr{ctime}},
-or \tcode{<cwchar>}~(\ref{cwchar.syn})\indexlibrary{\idxhdr{cwchar}},
+\link{\tcode{<clocale>}}{\ref{c.locales}}\indexlibrary{\idxhdr{clocale}},
+\link{\tcode{<cstddef>}}{\ref{cstddef.syn}}\indexlibrary{\idxhdr{cstddef}},
+\link{\tcode{<cstdio>}}{\ref{cstdio.syn}}\indexlibrary{\idxhdr{cstdio}},
+\link{\tcode{<cstdlib>}}{\ref{cstdlib.syn}}\indexlibrary{\idxhdr{cstdlib}},
+\link{\tcode{<cstring>}}{\ref{cstring.syn}}\indexlibrary{\idxhdr{cstring}},
+\link{\tcode{<ctime>}}{\ref{ctime.syn}}\indexlibrary{\idxhdr{ctime}},
+or \link{\tcode{<cwchar>}}{\ref{cwchar.syn}}\indexlibrary{\idxhdr{cwchar}},
 is an \impldef{definition of \tcode{NULL}} \Cpp{} null pointer constant in
 this International Standard (\ref{support.types}).
 
 \rSec2[diff.mods.to.declarations]{Modifications to declarations}
 
 \pnum
-Header \tcode{<cstring>}~(\ref{cstring.syn})\indexlibrary{\idxhdr{cstring}}:
+Header \link{\tcode{<cstring>}}{\ref{cstring.syn}}\indexlibrary{\idxhdr{cstring}}:
 The following functions have different declarations:
 
 \begin{itemize}
@@ -1908,7 +1909,7 @@ The following functions have different declarations:
 Subclause \ref{cstring.syn} describes the changes.
 
 \pnum
-Header \tcode{<cwchar>}~(\ref{cwchar.syn})\indexlibrary{\idxhdr{cwchar}}:
+Header \link{\tcode{<cwchar>}}{\ref{cwchar.syn}}\indexlibrary{\idxhdr{cwchar}}:
 The following functions have different declarations:
 
 \begin{itemize}
@@ -1922,14 +1923,14 @@ The following functions have different declarations:
 Subclause \ref{cwchar.syn} describes the changes.
 
 \pnum
-Header \tcode{<cstddef>}~(\ref{cstddef.syn})\indexlibrary{\idxhdr{cstddef}}
+Header \link{\tcode{<cstddef>}}{\ref{cstddef.syn}}\indexlibrary{\idxhdr{cstddef}}
 declares the name \tcode{nullptr_t} in addition to the names declared in
 \tcode{<stddef.h>} in the C standard library.
 
 \rSec2[diff.mods.to.behavior]{Modifications to behavior}
 
 \pnum
-Header \tcode{<cstdlib>}~(\ref{cstdlib.syn})\indexlibrary{\idxhdr{cstdlib}}:
+Header \link{\tcode{<cstdlib>}}{\ref{cstdlib.syn}}\indexlibrary{\idxhdr{cstdlib}}:
 The following functions have different behavior:
 
 \begin{itemize}
@@ -1941,7 +1942,7 @@ The following functions have different behavior:
 Subclause \ref{support.start.term} describes the changes.
 
 \pnum
-Header \tcode{<csetjmp>}~(\ref{csetjmp.syn})\indexlibrary{\idxhdr{csetjmp}}:
+Header \link{\tcode{<csetjmp>}}{\ref{csetjmp.syn}}\indexlibrary{\idxhdr{csetjmp}}:
 The following functions have different behavior:
 
 \begin{itemize}
@@ -1955,7 +1956,7 @@ Subclause \ref{csetjmp.syn} describes the changes.
 
 \pnum
 The macro \tcode{offsetof}, defined in
-\tcode{<cstddef>}~(\ref{cstddef.syn})\indexlibrary{\idxhdr{cstddef}},
+\link{\tcode{<cstddef>}}{\ref{cstddef.syn}}\indexlibrary{\idxhdr{cstddef}},
 accepts a restricted set of \tcode{\placeholder{type}} arguments in this International Standard.
 Subclause \ref{support.types.layout} describes the change.
 
diff --git a/source/containers.tex b/source/containers.tex
index 515e3b0..889e583 100644
--- a/source/containers.tex
+++ b/source/containers.tex
@@ -57,9 +57,9 @@ is itself linear.
 \pnum
 For the components affected by this subclause that declare an \tcode{allocator_type},
 objects stored in these components shall be constructed using the function
-\tcode{allocator_traits<allocator_type>::rebind_traits<U>::\brk{}construct}
+\linkx{\tcode{allocator_traits<allocator_type>::rebind_traits<U>::\brk{}construct}}{allocator_traits!construct}{\ref{allocator.traits.members}}
 and destroyed using the function
-\tcode{allocator_traits<allocator_type>::rebind_traits<U>::\brk{}destroy}~(\ref{allocator.traits.members}),
+\linkx{\tcode{allocator_traits<allocator_type>::rebind_traits<U>::\brk{}destroy}}{allocator_traits!destroy}{\ref{allocator.traits.members}},
 where \tcode{U} is either \tcode{allocator_type::value_type} or
 an internal type used by the container.
 These functions are called only for the
@@ -356,7 +356,7 @@ swap.
 
 \pnum
 If the iterator type of a container belongs to the bidirectional or
-random access iterator categories~(\ref{iterator.requirements}),
+random access \link{iterator categories}{\ref{iterator.requirements}},
 the container is called
 \term{reversible}
 and satisfies the additional requirements
@@ -453,9 +453,9 @@ within that container.
 \pnum
 \indextext{container!contiguous}%
 A \defn{contiguous container}
-is a container that supports random access iterators~(\ref{random.access.iterators})
+is a container that supports \link{random access iterators}{\ref{random.access.iterators}}
 and whose member types \tcode{iterator} and \tcode{const_iterator}
-are contiguous iterators~(\ref{iterator.requirements.general}).
+are \deflink{contiguous iterators}{\ref{iterator.requirements.general}}.
 
 \pnum
 Table~\ref{tab:containers.optional.operations} lists operations that are provided
@@ -721,7 +721,7 @@ is well-formed when treated as an unevaluated operand.
 \rSec2[container.requirements.dataraces]{Container data races}
 
 \pnum
-For purposes of avoiding data races~(\ref{res.on.data.races}), implementations shall
+For purposes of \link{avoiding data races}{\ref{res.on.data.races}}, implementations shall
 consider the following functions to be \tcode{const}: \tcode{begin}, \tcode{end},
 \tcode{rbegin}, \tcode{rend}, \tcode{front}, \tcode{back}, \tcode{data}, \tcode{find},
 \tcode{lower_bound}, \tcode{upper_bound}, \tcode{equal_range}, \tcode{at} and, except in
@@ -825,7 +825,7 @@ The complexities of the expressions are sequence dependent.
                     &
  \requires\ \tcode{T} shall be \tcode{EmplaceConstructible} into \tcode{X} from \tcode{*i}.
  For \tcode{vector}, if the iterator does
- not meet the forward iterator requirements~(\ref{forward.iterators}), \tcode{T}
+ not meet the \link{forward iterator requirements}{\ref{forward.iterators}}, \tcode{T}
  shall also be
  \tcode{MoveInsertable} into \tcode{X}.
  Each iterator in the range \range{i}{j} shall be dereferenced exactly once.\br
@@ -881,7 +881,7 @@ The complexities of the expressions are sequence dependent.
  \requires\ \tcode{T} shall be \tcode{EmplaceConstructible} into \tcode{X} from \tcode{*i}.
  For \tcode{vector} and \tcode{deque}, \tcode{T} shall also be
  \tcode{MoveInsertable} into \tcode{X}, \tcode{MoveConstructible}, \tcode{MoveAssignable},
- and swappable~(\ref{swappable.requirements}).
+ and \link{swappable}{\ref{swappable.requirements}}.
  Each iterator in the range \range{i}{j} shall be dereferenced exactly once.\br
  \requires \tcode{i} and \tcode{j} are not iterators into \tcode{a}.\br
  Inserts copies of elements in \tcode{[i, j)} before \tcode{p}  \\ \rowsep
@@ -913,7 +913,7 @@ The complexities of the expressions are sequence dependent.
  \tcode{void}           &
  \requires\ \tcode{T} shall be \tcode{EmplaceConstructible} into \tcode{X} from \tcode{*i}
  and assignable from \tcode{*i}. For \tcode{vector}, if the iterator does not
- meet the forward iterator requirements~(\ref{forward.iterators}), \tcode{T}
+ meet the \link{forward iterator requirements}{\ref{forward.iterators}}, \tcode{T}
  shall also be
  \tcode{MoveInsertable} into \tcode{X}.\br
  Each iterator in the range \range{i}{j} shall be dereferenced exactly once.\br
@@ -1193,8 +1193,8 @@ if
 
 \pnum
 A \term{node handle} is an object that accepts ownership of a single element
-from an associative container~(\ref{associative.reqmts}) or an unordered
-associative container~(\ref{unord.req}). It may be used to transfer that
+from an \link{associative container}{\ref{associative.reqmts}} or an \link{unordered
+associative container}{\ref{unord.req}}. It may be used to transfer that
 ownership to another container with compatible nodes.  Containers with
 compatible nodes have the same node handle type. Elements may be transferred in
 either direction between container types in the same row of
@@ -1488,7 +1488,7 @@ Each associative container is parameterized on
 \tcode{Key}
 and an ordering relation
 \tcode{Compare}
-that induces a strict weak ordering~(\ref{alg.sorting}) on
+that induces a \link{strict weak ordering}{\ref{alg.sorting}} on
 elements of
 \tcode{Key}.
 In addition,
@@ -1556,8 +1556,8 @@ are the same type.
 \begin{note} \tcode{iterator} and \tcode{const_iterator} have identical semantics in this case, and \tcode{iterator} is convertible to \tcode{const_iterator}. Users can avoid violating the one-definition rule by always using \tcode{const_iterator} in their function parameter lists. \end{note}
 
 \pnum
-The associative containers meet all the requirements of Allocator-aware
-containers~(\ref{container.requirements.general}), except that for
+The associative containers meet all the requirements of
+\link{Allocator-aware}{\ref{container.requirements.general}} containers, except that for
 \tcode{map} and \tcode{multimap}, the requirements placed on \tcode{value_type}
 in Table~\ref{tab:containers.container.requirements} apply instead to \tcode{key_type}
 and \tcode{mapped_type}. \begin{note} For example, in some cases \tcode{key_type} and \tcode{mapped_type}
@@ -1594,8 +1594,9 @@ denotes a valid range,
 \tcode{t} denotes a value of type \tcode{X::value_type},
 \tcode{k} denotes a value of type \tcode{X::key_type}
 and \tcode{c} denotes a possibly \tcode{const} value of type \tcode{X::key_compare};
-\tcode{kl} is a value such that \tcode{a} is partitioned~(\ref{alg.sorting})
-with respect to \tcode{c(r, kl)}, with \tcode{r} the key value of \tcode{e}
+\tcode{kl} is a value such that \tcode{a} is
+\deflinkx{partitioned with respect to}{sequence!partitioned with respect to}{\ref{alg.sorting}}
+\tcode{c(r, kl)}, with \tcode{r} the key value of \tcode{e}
 and \tcode{e} in \tcode{a};
 \tcode{ku} is a value such that \tcode{a} is partitioned with respect to
 \tcode{!c(ku, r)};
@@ -2085,16 +2086,16 @@ four unordered associative containers: \tcode{unordered_set},
 \indextext{unordered associative containers!lack of comparison functions}%
 \indextext{unordered associative containers!requirements}%
 \indextext{requirements!container!not required for unordered associated containers}%
-Unordered associative containers conform to the requirements for
-Containers~(\ref{container.requirements}), except that
+Unordered associative containers conform to the \link{requirements for
+Containers}{\ref{container.requirements}}, except that
 the expressions
 \tcode{a == b} and \tcode{a != b} have different semantics than for the other
 container types.
 
 \pnum
 Each unordered associative container is parameterized by \tcode{Key},
-by a function object type \tcode{Hash} that meets the \tcode{Hash}
-requirements~(\ref{hash.requirements}) and acts as a hash function for
+by a function object type \tcode{Hash} that meets the \link{\tcode{Hash}
+requirements}{\ref{hash.requirements}} and acts as a hash function for
 argument values of type \tcode{Key}, and by a binary predicate \tcode{Pred}
 that induces an equivalence relation on values of type \tcode{Key}.
 Additionally, \tcode{unordered_map} and \tcode{unordered_multimap} associate
@@ -2173,8 +2174,8 @@ references to elements. For \tcode{unordered_multiset} and
 equivalent elements.
 
 \pnum
-The unordered associative containers meet all the requirements of Allocator-aware
-containers~(\ref{container.requirements.general}), except that for
+The unordered associative containers meet all the requirements of
+\link{Allocator-aware containers}{\ref{container.requirements.general}}, except that for
 \tcode{unordered_map} and \tcode{unordered_multimap}, the requirements placed on \tcode{value_type}
 in Table~\ref{tab:containers.container.requirements} apply instead to \tcode{key_type}
 and \tcode{mapped_type}. \begin{note} For example, \tcode{key_type} and \tcode{mapped_type}
@@ -3116,14 +3117,14 @@ namespace std {
 \indextext{\idxcode{array}!contiguous storage}%
 The header \tcode{<array>} defines a class template for storing fixed-size
 sequences of objects.
-An \tcode{array} is a contiguous container~(\ref{container.requirements.general}).
+An \tcode{array} is a \deflink{contiguous container}{\ref{container.requirements.general}}.
 An instance of \tcode{array<T, N>} stores \tcode{N} elements of type \tcode{T},
 so that \tcode{size() == N} is an invariant.
 
 \pnum
 \indextext{\idxcode{array}!initialization}%
 \indextext{\idxcode{array}!as aggregate}%
-An \tcode{array} is an aggregate~(\ref{dcl.init.aggr}) that can be
+An \tcode{array} is an \deflink{aggregate}{\ref{dcl.init.aggr}} that can be
 list-initialized with up
 to \tcode{N} elements whose types are convertible to \tcode{T}.
 
@@ -3132,8 +3133,8 @@ to \tcode{N} elements whose types are convertible to \tcode{T}.
 An \tcode{array} satisfies all of the requirements of a container and
 of a reversible container~(\ref{container.requirements}), except that a default
 constructed \tcode{array} object is not empty and that \tcode{swap} does not have constant
-complexity. An \tcode{array} satisfies some of the requirements of a sequence
-container~(\ref{sequence.reqmts}).
+complexity. An \tcode{array} satisfies some of the requirements of a
+\link{sequence container}{\ref{sequence.reqmts}}.
 Descriptions are provided here
 only for operations on \tcode{array} that are not described in
 one of these tables and
@@ -3211,7 +3212,7 @@ namespace std {
 \pnum
 \indextext{\idxcode{array}!initialization}%
 \indextext{requirements!container}%
-The conditions for an aggregate~(\ref{dcl.init.aggr}) shall be
+The conditions for an \deflink{aggregate}{\ref{dcl.init.aggr}} shall be
 met. Class \tcode{array} relies on the implicitly-declared special
 member functions~(\ref{class.ctor}, \ref{class.dtor}, and \ref{class.copy}) to
 conform to the container requirements table in~\ref{container.requirements}.
@@ -3381,9 +3382,12 @@ Storage management is handled automatically.
 \pnum
 A
 \tcode{deque}
-satisfies all of the requirements of a container, of a reversible container
-(given in tables in~\ref{container.requirements}), of a sequence container,
-including the optional sequence container requirements~(\ref{sequence.reqmts}), and of an allocator-aware container (Table~\ref{tab:containers.allocatoraware}).
+satisfies all of the requirements of a
+\link{container}{Table~\ref{tab:containers.container.requirements}},
+of a \deflink{reversible}{\ref{container.requirements}} container,
+of a sequence container, including the
+\link{optional sequence container requirements}{Table~\ref{tab:containers.sequence.optional}},
+and of an \link{allocator-aware container}{Table~\ref{tab:containers.allocatoraware}}.
 Descriptions are provided here only for operations on
 \tcode{deque}
 that are not described in one of these tables
@@ -3766,14 +3770,14 @@ relative to a hand-written C-style singly linked list. Features that would confl
 that goal have been omitted.\end{note}
 
 \pnum
-A \tcode{forward_list} satisfies all of the requirements of a container
-(Table~\ref{tab:containers.container.requirements}), except that the \tcode{size()}
+A \tcode{forward_list} satisfies all of the requirements of a
+\link{container}{Table~\ref{tab:containers.container.requirements}}, except that the \tcode{size()}
 member function is not provided and \tcode{operator==} has linear complexity.
-A \tcode{forward_list} also satisfies all of the requirements for an allocator-aware
-container (Table~\ref{tab:containers.allocatoraware}). In addition, a \tcode{forward_list}
-provides the \tcode{assign} member functions
-(Table~\ref{tab:containers.sequence.requirements}) and several of the optional
-container requirements (Table~\ref{tab:containers.sequence.optional}).
+A \tcode{forward_list} also satisfies all of the requirements for an
+\link{allocator-aware container}{Table~\ref{tab:containers.allocatoraware}}.
+In addition, a \tcode{forward_list} provides the \tcode{assign} member functions
+(Table~\ref{tab:containers.sequence.requirements}) and several of the
+\link{optional container requirements}{Table~\ref{tab:containers.sequence.optional}}.
 Descriptions are provided here only for operations on
 \tcode{forward_list} that are not described in that table or for operations where there
 is additional semantic information.
@@ -3927,7 +3931,7 @@ namespace std {
 \pnum
 An incomplete type \tcode{T} may be used when instantiating \tcode{forward_list}
 if the allocator satisfies the
-allocator completeness requirements~(\ref{allocator.requirements.completeness}).
+\link{allocator completeness requirements}{\ref{allocator.requirements.completeness}}.
 \tcode{T} shall be complete before any member of the resulting specialization
 of \tcode{forward_list} is referenced.
 
@@ -4349,7 +4353,7 @@ Invalidates only the iterators and references to the erased elements.
 predicate.
 
 \pnum
-\remarks Stable~(\ref{algorithm.stable}).
+\remarks \link{Stable}{\ref{algorithm.stable}}.
 
 \pnum
 \complexity Exactly \tcode{distance(begin(), end())} applications of the corresponding
@@ -4387,7 +4391,7 @@ template <class Compare> void merge(forward_list&& x, Compare comp);
 
 \begin{itemdescr}
 \pnum
-\requires \tcode{comp} defines a strict weak ordering~(\ref{alg.sorting}), and \tcode{*this}
+\requires \tcode{comp} defines a \link{strict weak ordering}{\ref{alg.sorting}}, and \tcode{*this}
 and \tcode{x} are both sorted according to this ordering.
 \tcode{get_allocator() == x.get_allocator()}.
 
@@ -4401,7 +4405,7 @@ refer to their elements, but they now behave as iterators into \tcode{*this}, no
 \tcode{x}.
 
 \pnum
-\remarks Stable~(\ref{algorithm.stable}). The behavior is undefined if
+\remarks \link{Stable}{\ref{algorithm.stable}}. The behavior is undefined if
 \tcode{get_allocator() != x.get_allocator()}.
 
 \pnum
@@ -4418,7 +4422,7 @@ template <class Compare> void sort(Compare comp);
 \begin{itemdescr}
 \pnum
 \requires \tcode{operator<} (for the version with no arguments) or \tcode{comp} (for the
-version with a comparison argument) defines a strict weak ordering~(\ref{alg.sorting}).
+version with a comparison argument) defines a \link{strict weak ordering}{\ref{alg.sorting}}.
 
 \pnum
 \effects Sorts the list according to the \tcode{operator<} or the \tcode{comp} function object.
@@ -4426,7 +4430,7 @@ If an exception is thrown, the order of the elements in \tcode{*this} is unspeci
 Does not affect the validity of iterators and references.
 
 \pnum
-\remarks Stable~(\ref{algorithm.stable}).
+\remarks \link{Stable}{\ref{algorithm.stable}}.
 
 \pnum
 \complexity Approximately $N \log N$ comparisons, where $N$ is \tcode{distance(begin(), end())}.
@@ -4471,7 +4475,7 @@ A
 is a sequence container that supports
 bidirectional iterators and allows constant time insert and erase
 operations anywhere within the sequence, with storage management handled
-automatically. Unlike vectors~(\ref{vector}) and deques~(\ref{deque}),
+automatically. Unlike \link{vectors}{\ref{vector}} and \link{deques}{\ref{deque}},
 fast random access to list elements is not supported, but many
 algorithms only need sequential access anyway.
 
@@ -4479,9 +4483,10 @@ algorithms only need sequential access anyway.
 A \tcode{list} satisfies all of the requirements of a container, of
 a reversible container (given in two tables in
 \ref{container.requirements}), of a sequence container,
-including most of the optional sequence container
-requirements~(\ref{sequence.reqmts}), and of an allocator-aware container
-(Table~\ref{tab:containers.allocatoraware}).
+including most of the
+\link{optional sequence container requirements}{Table~\ref{tab:containers.sequence.optional}},
+and of an
+\link{allocator-aware container}{Table~\ref{tab:containers.allocatoraware}}.
 The exceptions are the
 \tcode{operator[]}
 and
@@ -4646,7 +4651,7 @@ namespace std {
 \pnum
 An incomplete type \tcode{T} may be used when instantiating \tcode{list}
 if the allocator satisfies the
-allocator completeness requirements~(\ref{allocator.requirements.completeness}).
+\link{allocator completeness requirements}{\ref{allocator.requirements.completeness}}.
 \tcode{T} shall be complete before any member of the resulting specialization
 of \tcode{list} is referenced.
 
@@ -5014,7 +5019,7 @@ or
 \tcode{pred(*i) != false}.
 
 \pnum
-\remarks Stable~(\ref{algorithm.stable}).
+\remarks \link{Stable}{\ref{algorithm.stable}}.
 
 \pnum
 \complexity
@@ -5067,7 +5072,7 @@ template <class Compare> void merge(list&& x, Compare comp);
 \begin{itemdescr}
 \pnum
 \requires
-\tcode{comp} shall define a strict weak ordering~(\ref{alg.sorting}), and both the list and the argument list shall be
+\tcode{comp} shall define a \link{strict weak ordering}{\ref{alg.sorting}}, and both the list and the argument list shall be
 sorted according to this ordering.
 
 \pnum
@@ -5083,7 +5088,7 @@ refer to their elements, but they now behave as iterators into \tcode{*this}, no
 \tcode{x}.
 
 \pnum
-\remarks Stable~(\ref{algorithm.stable}). If \tcode{(\&x != this)} the range \tcode{[x.begin(), x.end())}
+\remarks \link{Stable}{\ref{algorithm.stable}}. If \tcode{(\&x != this)} the range \tcode{[x.begin(), x.end())}
 is empty after the merge.
 No elements are copied by this operation. The behavior is undefined if
 \tcode{get_allocator() != x.get_allocator()}.
@@ -5129,7 +5134,7 @@ version)
 or
 \tcode{comp}
 (for the second version)
-shall define a strict weak ordering~(\ref{alg.sorting}).
+shall define a \link{strict weak ordering}{\ref{alg.sorting}}.
 
 \pnum
 \effects
@@ -5139,7 +5144,7 @@ the order of the elements in \tcode{*this} is unspecified.
 Does not affect the validity of iterators and references.
 
 \pnum
-\remarks Stable~(\ref{algorithm.stable}).
+\remarks \link{Stable}{\ref{algorithm.stable}}.
 
 \pnum
 \complexity
@@ -5179,13 +5184,15 @@ Storage management is handled automatically, though hints can be given
 to improve efficiency.
 
 \pnum
-A \tcode{vector} satisfies all of the requirements of a container and of a
-reversible container (given in two tables in~\ref{container.requirements}), of a
-sequence container, including most of the optional sequence container
-requirements~(\ref{sequence.reqmts}), of an allocator-aware container
-(Table~\ref{tab:containers.allocatoraware}),
+A \tcode{vector} satisfies all of the requirements of a
+\link{container}{\ref{tab:containers.container.requirements}} and of a
+\deflink{reversible}{\ref{container.requirements}} container, of a
+sequence container, including most of the
+\link{optional sequence container requirements}{Table~\ref{tab:containers.sequence.optional}},
+of an
+\link{allocator-aware container}{Table~\ref{tab:containers.allocatoraware}},
 and, for an element type other than \tcode{bool},
-of a contiguous container~(\ref{container.requirements.general}).
+of a \deflink{contiguous container}{\ref{container.requirements.general}}.
 The exceptions are the
 \tcode{push_front}, \tcode{pop_front}, and \tcode{emplace_front} member functions, which are not
 provided. Descriptions are provided here only for operations on \tcode{vector}
@@ -5325,7 +5332,7 @@ namespace std {
 \pnum
 An incomplete type \tcode{T} may be used when instantiating \tcode{vector}
 if the allocator satisfies the
-allocator completeness requirements~(\ref{allocator.requirements.completeness}).
+\link{allocator completeness requirements}{\ref{allocator.requirements.completeness}}.
 \tcode{T} shall be complete before any member of the resulting specialization
 of \tcode{vector} is referenced.
 
@@ -5791,7 +5798,7 @@ Unless described below, all operations have the same requirements and
 semantics as the primary \tcode{vector} template, except that operations
 dealing with the \tcode{bool} value type map to bit values in the
 container storage and
-\tcode{allocator_traits::construct}~(\ref{allocator.traits.members})
+\linkx{\tcode{allocator_traits::construct}}{allocator_traits!construct}{\ref{allocator.traits.members}}
 is not used to construct these values.
 
 \pnum
@@ -6031,8 +6038,8 @@ on the keys. The \tcode{map} class supports bidirectional iterators.
 \pnum
 A
 \tcode{map}
-satisfies all of the requirements of a container, of a reversible container~(\ref{container.requirements}), of
-an associative container~(\ref{associative.reqmts}), and of an allocator-aware container (Table~\ref{tab:containers.allocatoraware}).
+satisfies all of the requirements of a container, of a \deflink{reversible}{\ref{container.requirements}} container, of
+an \link{associative container}{\ref{associative.reqmts}}, and of an \link{allocator-aware container}{Table~\ref{tab:containers.allocatoraware}}.
 A
 \tcode{map}
 also provides most operations described in~\ref{associative.reqmts}
@@ -6581,9 +6588,9 @@ supports bidirectional iterators.
 \pnum
 A
 \tcode{multimap} satisfies all of the requirements of a container and of a
-reversible container~(\ref{container.requirements}), of an associative
-container~(\ref{associative.reqmts}), and of an allocator-aware container
-(Table~\ref{tab:containers.allocatoraware}).
+\deflink{reversible}{\ref{container.requirements}} container, of an \link{associative
+container}{\ref{associative.reqmts}}, and of an
+\link{allocator-aware container}{Table~\ref{tab:containers.allocatoraware}}.
 A
 \tcode{multimap}
 also provides most operations described in~\ref{associative.reqmts}
@@ -6909,10 +6916,10 @@ The
 supports bidirectional iterators.
 
 \pnum
-A \tcode{set} satisfies all of the requirements of a container, of a reversible
-container~(\ref{container.requirements}), of an associative
-container~(\ref{associative.reqmts}), and of an allocator-aware container
-(Table~\ref{tab:containers.allocatoraware}).
+A \tcode{set} satisfies all of the requirements of a container, of a
+\deflink{reversible}{\ref{container.requirements}} container, of an \link{associative
+container}{\ref{associative.reqmts}}, and of an
+\link{allocator-aware container}{Table~\ref{tab:containers.allocatoraware}}.
 A
 \tcode{set}
 also provides most operations described in~\ref{associative.reqmts}
@@ -7198,9 +7205,9 @@ supports bidirectional iterators.
 
 \pnum
 A \tcode{multiset} satisfies all of the requirements of a container, of a
-reversible container~(\ref{container.requirements}), of an associative
-container~(\ref{associative.reqmts}), and of an allocator-aware container
-(Table~\ref{tab:containers.allocatoraware}).
+\deflink{reversible}{\ref{container.requirements}} container, of an \link{associative
+container}{\ref{associative.reqmts}}, and of an
+\link{allocator-aware container}{Table~\ref{tab:containers.allocatoraware}}.
 \tcode{multiset}
 also provides most operations described in~\ref{associative.reqmts}
 for duplicate keys.
@@ -7628,7 +7635,7 @@ The \tcode{unordered_map} class
 supports forward iterators.
 
 \pnum
-An \tcode{unordered_map} satisfies all of the requirements of a container, of an unordered associative container, and of an allocator-aware container (Table~\ref{tab:containers.allocatoraware}). It provides the operations described in the preceding requirements table for unique keys; that is, an \tcode{unordered_map} supports the \tcode{a_uniq} operations in that table, not the \tcode{a_eq} operations. For an \tcode{unordered_map<Key, T>} the \tcode{key type} is \tcode{Key}, the mapped type is \tcode{T}, and the value type is \tcode{pair<const Key, T>}.
+An \tcode{unordered_map} satisfies all of the requirements of a container, of an unordered associative container, and of an \link{allocator-aware container}{Table~\ref{tab:containers.allocatoraware}}. It provides the operations described in the preceding requirements table for unique keys; that is, an \tcode{unordered_map} supports the \tcode{a_uniq} operations in that table, not the \tcode{a_eq} operations. For an \tcode{unordered_map<Key, T>} the \tcode{key type} is \tcode{Key}, the mapped type is \tcode{T}, and the value type is \tcode{pair<const Key, T>}.
 
 \pnum
 This section only describes operations on \tcode{unordered_map} that
@@ -8190,8 +8197,8 @@ supports forward iterators.
 
 \pnum
 An \tcode{unordered_multimap} satisfies all of the requirements of a container, of an
-unordered associative container, and of an allocator-aware container
-(Table~\ref{tab:containers.allocatoraware}). It provides the operations described in the
+unordered associative container, and of an
+\link{allocator-aware container}{Table~\ref{tab:containers.allocatoraware}}. It provides the operations described in the
 preceding requirements table for equivalent keys; that is, an \tcode{unordered_multimap}
 supports the \tcode{a_eq} operations in that table, not the \tcode{a_uniq} operations.
 For an \tcode{unordered_multimap<Key, T>} the \tcode{key type} is \tcode{Key}, the
@@ -8546,7 +8553,7 @@ The \tcode{unordered_set} class
 supports forward iterators.
 
 \pnum
-An \tcode{unordered_set} satisfies all of the requirements of a container, of an unordered associative container, and of an allocator-aware container (Table~\ref{tab:containers.allocatoraware}). It provides the operations described in the preceding requirements table for unique keys; that is, an \tcode{unordered_set} supports the \tcode{a_uniq} operations in that table, not the \tcode{a_eq} operations. For an \tcode{unordered_set<Key>} the \tcode{key type} and the value type are both \tcode{Key}. The \tcode{iterator} and \tcode{const_iterator} types are both constant iterator types. It is unspecified whether they are the same type.
+An \tcode{unordered_set} satisfies all of the requirements of a container, of an unordered associative container, and of an \link{allocator-aware container}{Table~\ref{tab:containers.allocatoraware}}. It provides the operations described in the preceding requirements table for unique keys; that is, an \tcode{unordered_set} supports the \tcode{a_uniq} operations in that table, not the \tcode{a_eq} operations. For an \tcode{unordered_set<Key>} the \tcode{key type} and the value type are both \tcode{Key}. The \tcode{iterator} and \tcode{const_iterator} types are both constant iterator types. It is unspecified whether they are the same type.
 
 \pnum
 This section only describes operations on \tcode{unordered_set} that
@@ -8850,8 +8857,8 @@ supports forward iterators.
 
 \pnum
 An \tcode{unordered_multiset} satisfies all of the requirements of a container, of an
-unordered associative container, and of an allocator-aware container
-(Table~\ref{tab:containers.allocatoraware}). It provides the operations described in the
+unordered associative container, and of an
+\link{allocator-aware container}{Table~\ref{tab:containers.allocatoraware}}. It provides the operations described in the
 preceding requirements table for equivalent keys; that is, an \tcode{unordered_multiset}
 supports the \tcode{a_eq} operations in that table, not the \tcode{a_uniq} operations.
 For an \tcode{unordered_multiset<Key>} the \tcode{key type} and the value type are
@@ -9248,9 +9255,9 @@ and
 can be used to instantiate
 \tcode{queue}.
 In particular,
-\tcode{list}~(\ref{list})
+\link{\tcode{list}}{\ref{list}}
 and
-\tcode{deque}~(\ref{deque})
+\link{\tcode{deque}}{\ref{deque}}
 can be used.
 
 \begin{codeblock}
@@ -9499,15 +9506,15 @@ and
 can be used to instantiate
 \tcode{priority_queue}.
 In particular,
-\tcode{vector}~(\ref{vector})
+\link{\tcode{vector}}{\ref{vector}}
 and
-\tcode{deque}~(\ref{deque})
+\link{\tcode{deque}}{\ref{deque}}
 can be used.
 Instantiating
 \tcode{priority_queue}
 also involves supplying a function or function object for making
 priority comparisons; the library assumes that the function or function
-object defines a strict weak ordering~(\ref{alg.sorting}).
+object defines a \link{strict weak ordering}{\ref{alg.sorting}}.
 
 \begin{codeblock}
 namespace std {
@@ -9591,7 +9598,7 @@ explicit priority_queue(const Compare& x = Compare(), Container&& y = Container(
 \begin{itemdescr}
 \pnum
 \requires
-\tcode{x} shall define a strict weak ordering~(\ref{alg.sorting}).
+\tcode{x} shall define a \link{strict weak ordering}{\ref{alg.sorting}}.
 
 \pnum
 \effects
@@ -9619,7 +9626,7 @@ template <class InputIterator>
 \begin{itemdescr}
 \pnum
 \requires
-\tcode{x} shall define a strict weak ordering~(\ref{alg.sorting}).
+\tcode{x} shall define a \link{strict weak ordering}{\ref{alg.sorting}}.
 
 \pnum
 \effects
@@ -9803,10 +9810,10 @@ and
 can be used to instantiate
 \tcode{stack}.
 In particular,
-\tcode{vector}~(\ref{vector}),
-\tcode{list}~(\ref{list})
+\link{\tcode{vector}}{\ref{vector}},
+\link{\tcode{list}}{\ref{list}}
 and
-\tcode{deque}~(\ref{deque})
+\link{\tcode{deque}}{\ref{deque}}
 can be used.
 
 \rSec3[stack.defn]{\tcode{stack} definition}
diff --git a/source/conversions.tex b/source/conversions.tex
index 70b02fc..528f44f 100644
--- a/source/conversions.tex
+++ b/source/conversions.tex
@@ -68,8 +68,8 @@ variable \tcode{t}~(\ref{dcl.init}).
 \pnum
 Certain language constructs require that an expression be converted to a Boolean
 value. An expression \tcode{e} appearing in such a context is said to be
-\indextext{conversion!contextual to \tcode{bool}}%
-\term{contextually converted to \tcode{bool}} and is well-formed if and only if
+\defnx{contextually converted to \tcode{bool}}{conversion!contextual to \tcode{bool}}
+and is well-formed if and only if
 the declaration \tcode{bool t(e);} is well-formed, for some invented temporary
 variable \tcode{t}~(\ref{dcl.init}).
 
@@ -100,8 +100,8 @@ is used as a glvalue if and only if the initialization uses it as a glvalue.
 \pnum
 \begin{note}
 For class types, user-defined conversions are considered as well;
-see~\ref{class.conv}. In general, an implicit conversion
-sequence~(\ref{over.best.ics}) consists of a standard conversion
+see~\ref{class.conv}. In general, an \link{implicit conversion
+sequence}{\ref{over.best.ics}} consists of a standard conversion
 sequence followed by a user-defined conversion followed by another
 standard conversion sequence.
 \end{note}
@@ -119,7 +119,7 @@ descriptions of those operators and contexts.
 \pnum
 \indextext{conversion!lvalue-to-rvalue}%
 \indextext{type!incomplete}%
-A glvalue~(\ref{basic.lval}) of a non-function, non-array type \tcode{T}
+A \deflink{glvalue}{\ref{basic.lval}} of a non-function, non-array type \tcode{T}
 can be converted to
 a prvalue.\footnote{For historical reasons, this conversion is called the ``lvalue-to-rvalue''
 conversion, even though that name does not accurately reflect the taxonomy
@@ -140,8 +140,8 @@ is applied to an expression \tcode{e}, and either
 \item \tcode{e} is not potentially evaluated, or
 \item the evaluation of \tcode{e} results in the evaluation of a member
       \tcode{ex} of the set of potential results of \tcode{e}, and \tcode{ex}
-      names a variable \tcode{x} that is not odr-used by
-      \tcode{ex}~(\ref{basic.def.odr}),
+      names a variable \tcode{x} that is not \link{odr-used}{\ref{basic.def.odr}} by
+      \tcode{ex},
 \end{itemize}
 the value contained in the referenced object is not accessed.
 \begin{example}
@@ -165,11 +165,11 @@ following rules:
 \begin{itemize}
 
 \item If \tcode{T} is \cv{}~\tcode{std::nullptr_t}, the result is a
-null pointer constant~(\ref{conv.ptr}).
+\deflink{null pointer constant}{\ref{conv.ptr}}.
 \begin{note}
 Since no value is fetched from memory,
 there is no side effect for a volatile access~(\ref{intro.execution}), and
-an inactive member of a union~(\ref{class.union}) may be accessed.
+an inactive member of a \link{union}{\ref{class.union}} may be accessed.
 \end{note}
 
 \item Otherwise, if \tcode{T} has a class
@@ -199,7 +199,7 @@ See also~\ref{basic.lval}.\end{note}
 An lvalue or rvalue of type ``array of \tcode{N} \tcode{T}'' or ``array
 of unknown bound of \tcode{T}'' can be converted to a prvalue of type
 ``pointer to \tcode{T}''.
-The temporary materialization conversion~(\ref{conv.rval}) is applied.
+The \link{temporary materialization conversion}{\ref{conv.rval}} is applied.
 The result is a pointer to the first element of the array.
 
 \rSec1[conv.func]{Function-to-pointer conversion}
@@ -222,7 +222,7 @@ is overloaded.
 
 \pnum
 A prvalue of type \tcode{T} can be converted to an xvalue of type \tcode{T}.
-This conversion initializes a temporary object~(\ref{class.temporary}) of type \tcode{T} from the prvalue
+This conversion initializes a \link{temporary object}{\ref{class.temporary}} of type \tcode{T} from the prvalue
 by evaluating the prvalue with the temporary object as its result object,
 and produces an xvalue denoting the temporary object.
 \tcode{T} shall be a complete type.
@@ -250,12 +250,12 @@ such that \tcode{T} is
 ``$cv_0$ $P_0$ $cv_1$ $P_1$ $\cdots$ $cv_{n-1}$ $P_{n-1}$ $cv_n$ \tcode{U}'' for $n > 0$,
 \end{indented}
 where
-each $cv_i$ is a set of cv-qualifiers~(\ref{basic.type.qualifier}), and
+each $cv_i$ is a set of \link{cv-qualifiers}{\ref{basic.type.qualifier}}, and
 each $P_i$ is
-``pointer to''~(\ref{dcl.ptr}),
-``pointer to member of class $C_i$ of type''~(\ref{dcl.mptr}),
+\linkx{``pointer to''}{declarator!pointer}{\ref{dcl.ptr}},
+\linkx{``pointer to member of class $C_i$ of type''}{declarator!pointer to member}{\ref{dcl.mptr}},
 ``array of $N_i$'', or
-``array of unknown bound of''~(\ref{dcl.array}).
+``\link{array of unknown bound}{\ref{dcl.array}} of''.
 If $P_i$ designates an array,
 the cv-qualifiers $cv_{i+1}$ on the element type are also taken as
 the cv-qualifiers $cv_i$ of the array.
@@ -336,8 +336,8 @@ types) are never cv-qualified (\ref{dcl.fct}).
 \pnum
 \indextext{promotion!integral}%
 A prvalue of an integer type other than \tcode{bool}, \tcode{char16_t},
-\tcode{char32_t}, or \tcode{wchar_t} whose integer conversion
-rank~(\ref{conv.rank}) is less than the rank of \tcode{int} can be
+\tcode{char32_t}, or \tcode{wchar_t} whose \link{integer conversion
+rank}{\ref{conv.rank}} is less than the rank of \tcode{int} can be
 converted to a prvalue of type \tcode{int} if \tcode{int} can represent
 all the values of the source type; otherwise, the source prvalue can be
 converted to a prvalue of type \tcode{unsigned int}.
@@ -366,7 +366,7 @@ range $b_\text{min}$ to $b_\text{max}$ as described in~\ref{dcl.enum}): \tcode{i
 \tcode{long long int}, or \tcode{unsigned long long int}. If none of the types in that
 list can represent all the values of the enumeration, a prvalue of an unscoped
 enumeration type can be converted to a prvalue of the extended integer type with lowest
-integer conversion rank~(\ref{conv.rank}) greater than the rank of \tcode{long long}
+\link{integer conversion rank}{\ref{conv.rank}} greater than the rank of \tcode{long long}
 in which all the values of the enumeration can be represented. If there are
 two such extended types, the signed one is chosen.
 
@@ -378,7 +378,7 @@ enumeration type whose underlying type is fixed can also be converted to a prval
 the promoted underlying type.
 
 \pnum
-A prvalue for an integral bit-field~(\ref{class.bit}) can be converted
+A prvalue for an integral \link{bit-field}{\ref{class.bit}} can be converted
 to a prvalue of type \tcode{int} if \tcode{int} can represent all the
 values of the bit-field; otherwise, it can be converted to
 \tcode{unsigned int} if \tcode{unsigned int} can represent all the
@@ -491,7 +491,7 @@ source type is \tcode{bool}, the value \tcode{false} is converted to zero and th
 \indextext{conversion!pointer}%
 \indextext{pointer!zero}%
 \indextext{constant!null pointer}%
-A \term{null pointer constant} is an integer literal~(\ref{lex.icon}) with
+A \term{null pointer constant} is an \link{integer literal}{\ref{lex.icon}} with
 value zero
 or a prvalue of type \tcode{std::nullptr_t}. A null pointer constant can be
 converted to a pointer type; the
@@ -503,8 +503,8 @@ Such a conversion is called a \term{null pointer conversion}.
 Two null pointer values of the same type shall compare
 equal. The conversion of a null pointer constant to a pointer to
 cv-qualified type is a single conversion, and not the sequence of a
-pointer conversion followed by a qualification
-conversion~(\ref{conv.qual}). A null pointer constant of integral type
+pointer conversion followed by a \link{qualification
+conversion}{\ref{conv.qual}}. A null pointer constant of integral type
 can be converted to a prvalue of type \tcode{std::nullptr_t}.
 \begin{note} The resulting prvalue is not a null pointer value. \end{note}
 
@@ -512,15 +512,15 @@ can be converted to a prvalue of type \tcode{std::nullptr_t}.
 A prvalue of type ``pointer to \cvqual{cv} \tcode{T}'', where \tcode{T}
 is an object type, can be converted to a prvalue of type ``pointer to
 \cvqual{cv} \tcode{void}''.
-The pointer value~(\ref{basic.compound}) is unchanged by this conversion.
+The \link{pointer value}{\ref{basic.compound}} is unchanged by this conversion.
 
 \pnum
 A prvalue of type ``pointer to \cvqual{cv} \tcode{D}'', where \tcode{D}
 is a class type, can be converted to a prvalue of type ``pointer to
-\cvqual{cv} \tcode{B}'', where \tcode{B} is a base class
-(Clause~\ref{class.derived}) of \tcode{D}. If \tcode{B} is an
-inaccessible (Clause~\ref{class.access}) or
-ambiguous~(\ref{class.member.lookup}) base class of \tcode{D}, a program
+\cvqual{cv} \tcode{B}'', where \tcode{B} is a
+\link{base class}{Clause~\ref{class.derived}} of \tcode{D}. If \tcode{B} is an
+\link{inaccessible}{Clause~\ref{class.access}} or
+\link{ambiguous}{\ref{class.member.lookup}} base class of \tcode{D}, a program
 that necessitates this conversion is ill-formed. The result of the
 conversion is a pointer to the base class subobject of the derived class
 object. The null pointer value is converted to the null pointer value of
@@ -532,7 +532,7 @@ the destination type.
 \indextext{conversion!pointer to member}%
 \indextext{constant!null pointer}%
 \indextext{value!null member pointer}%
-A null pointer constant~(\ref{conv.ptr}) can be converted to a pointer
+A \link{null pointer constant}{\ref{conv.ptr}} can be converted to a pointer
 to member type; the result is the \term{null member pointer value}
 of that type and is distinguishable from any pointer to member not
 created from a null pointer constant.
@@ -541,16 +541,16 @@ Two null member pointer values of
 the same type shall compare equal. The conversion of a null pointer
 constant to a pointer to member of cv-qualified type is a single
 conversion, and not the sequence of a pointer to member conversion
-followed by a qualification conversion~(\ref{conv.qual}).
+followed by a \link{qualification conversion}{\ref{conv.qual}}.
 
 \pnum
 A prvalue of type ``pointer to member of \tcode{B} of type \cvqual{cv}
 \tcode{T}'', where \tcode{B} is a class type, can be converted to
 a prvalue of type ``pointer to member of \tcode{D} of type \cvqual{cv}
-\tcode{T}'', where \tcode{D} is a derived class
-(Clause~\ref{class.derived}) of \tcode{B}. If \tcode{B} is an
-inaccessible (Clause~\ref{class.access}),
-ambiguous~(\ref{class.member.lookup}), or virtual~(\ref{class.mi}) base
+\tcode{T}'', where \tcode{D} is a \link{derived class}{Clause~\ref{class.derived}}
+of \tcode{B}. If \tcode{B} is an
+\link{inaccessible}{Clause~\ref{class.access}},
+\link{ambiguous}{\ref{class.member.lookup}}, or \link{virtual}{\ref{class.mi}} base
 class of \tcode{D}, or a base class of a virtual base class of
 \tcode{D}, a program that necessitates this conversion is ill-formed.
 The result of the conversion refers to the same member as the pointer to
@@ -603,7 +603,7 @@ A prvalue of arithmetic, unscoped enumeration, pointer, or pointer to member
 type can be converted to a prvalue of type \tcode{bool}. A zero value, null
 pointer value, or null member pointer value is converted to \tcode{false}; any
 other value is converted to \tcode{true}. For
-direct-initialization~(\ref{dcl.init}), a prvalue of type
+\deflink{direct-initialization}{\ref{dcl.init}}, a prvalue of type
 \tcode{std::nullptr_t} can be converted to a prvalue of type
 \tcode{bool}; the resulting value is \tcode{false}.
 
@@ -643,8 +643,8 @@ standard integer types.
 \indextext{type!\idxcode{char16_t}}%
 \indextext{type!\idxcode{char32_t}}%
 \item The ranks of \tcode{char16_t}, \tcode{char32_t}, and
-\tcode{wchar_t} shall equal the ranks of their underlying
-types~(\ref{basic.fundamental}).
+\tcode{wchar_t} shall equal the ranks of their \link{underlying
+types}{\ref{basic.fundamental}}.
 
 \item The rank of any extended signed integer type relative to another
 extended signed integer type with the same size is \impldef{rank of extended signed
@@ -658,8 +658,8 @@ rank than \tcode{T3}, then \tcode{T1} shall have greater rank than
 \end{itemize}
 
 \begin{note}
-The integer conversion rank is used in the definition of the integral
-promotions~(\ref{conv.prom}) and the usual arithmetic
-conversions (Clause~\ref{expr}).
+The integer conversion rank is used in the definition of the
+\link{integral promotions}{\ref{conv.prom}} and the
+\deflink{usual arithmetic conversions}{Clause~\ref{expr}}.
 \end{note}%
 \indextext{conversion!standard|)}
diff --git a/source/declarations.tex b/source/declarations.tex
index 806753c..362490b 100644
--- a/source/declarations.tex
+++ b/source/declarations.tex
@@ -122,7 +122,7 @@ is \impldef{meaning of attribute declaration}.
 \pnum
 \indextext{declaration}%
 \indextext{scope}%
-A declaration occurs in a scope~(\ref{basic.scope}); the scope rules are
+A declaration occurs in a \deflink{scope}{\ref{basic.scope}}; the scope rules are
 summarized in~\ref{basic.lookup}. A declaration that declares a function
 or defines a class, namespace, template, or function also has one or
 more scopes nested within it. These nested scopes, in turn, can have
@@ -137,7 +137,7 @@ the declaration.
 \indextext{declarator}%
 In a \grammarterm{simple-declaration}, the optional
 \grammarterm{init-declarator-list} can be omitted only when declaring a
-class (Clause~\ref{class}) or enumeration~(\ref{dcl.enum}), that is,
+\link{class}{Clause~\ref{class}} or \link{enumeration}{\ref{dcl.enum}}, that is,
 when the \grammarterm{decl-specifier-seq} contains either a
 \grammarterm{class-specifier}, an \grammarterm{elaborated-type-specifier} with
 a \grammarterm{class-key}~(\ref{class.name}), or an
@@ -161,15 +161,15 @@ typedef class { };  // ill-formed
 \indextext{\idxgram{static_assert}}%
 In a \grammarterm{static_assert-declaration}, the
 \grammarterm{constant-expression} shall be
-a contextually converted constant expression
-of type \tcode{bool}~(\ref{expr.const}).
+a \deflinkx{contextually converted constant expression
+of type \tcode{bool}}{contextually converted constant expression of type bool}{\ref{expr.const}}.
 If the value of the expression when
 so converted is \tcode{true}, the declaration has no
 effect. Otherwise, the program is ill-formed, and the resulting
 diagnostic message~(\ref{intro.compliance}) shall include the text of
 the \grammarterm{string-literal}, if one is supplied,
-except that characters not in the basic
-source character set~(\ref{lex.charset}) are not required to appear in
+except that characters not in the \deflinkx{basic
+source character set}{character set!basic source}{\ref{lex.charset}} are not required to appear in
 the diagnostic message.
 \begin{example}
 
@@ -184,7 +184,7 @@ An \grammarterm{empty-declaration} has no effect.
 A \grammarterm{simple-declaration} with an \grammarterm{identifier-list} is called
 a \defn{structured binding declaration}~(\ref{dcl.struct.bind}).
 The \grammarterm{decl-specifier-seq} shall
-contain only the \grammarterm{type-specifier} \tcode{auto}~(\ref{dcl.spec.auto})
+contain only the \grammarterm{type-specifier} \link{\tcode{auto}}{\ref{dcl.spec.auto}}
 and \grammarterm{cv-qualifier}{s}.
 The \grammarterm{initializer} shall be
 of the form ``\tcode{=} \grammarterm{assignment-expression}'',
@@ -320,20 +320,16 @@ void k(unsigned int Pc);        // \tcode{void k(unsigned int)}
 \rSec2[dcl.stc]{Storage class specifiers}%
 \indextext{specifier!storage class}%
 \indextext{declaration!storage class}%
-\indextext{\idxcode{static}}%
-\indextext{\idxcode{thread_local}}%
-\indextext{\idxcode{extern}}%
-\indextext{\idxcode{mutable}}
 
 \pnum
 The storage class specifiers are
 
 \begin{bnf}
 \nontermdef{storage-class-specifier}\br
-    \terminal{static}\br
-    \terminal{thread_local}\br
-    \terminal{extern}\br
-    \terminal{mutable}
+    \indexedspan{\terminal{static}}{\indextext{\idxcode{static}}}\br
+    \indexedspan{\terminal{thread_local}}{\indextext{\idxcode{thread_local}}}\br
+    \indexedspan{\terminal{extern}}{\indextext{\idxcode{extern}}}\br
+    \indexedspan{\terminal{mutable}}{\indextext{\idxcode{mutable}}}
 \end{bnf}
 
 At most one \grammarterm{storage-class-specifier} shall appear in a given
@@ -354,21 +350,20 @@ global namespace, which shall be declared
 other specifiers. A \grammarterm{storage-class-specifier}
 other than \tcode{thread_local}
 shall not be
-specified in an explicit specialization~(\ref{temp.expl.spec}) or an
-explicit instantiation~(\ref{temp.explicit}) directive.
+specified in an \link{explicit specialization}{\ref{temp.expl.spec}} or an
+\link{explicit instantiation}{\ref{temp.explicit}} directive.
 
 \pnum
 \begin{note}
 A variable declared without a \grammarterm{storage-class-specifier}
 at block scope or declared as a function parameter
-has automatic storage duration by default~(\ref{basic.stc.auto}).
+has \deflink{automatic storage duration}{\ref{basic.stc.auto}} by default.
 \end{note}
 
 \pnum
 The \tcode{thread_local} specifier
-indicates that the named entity has thread storage duration~(\ref{basic.stc.thread}). It
-shall be applied only
-to the names of variables of namespace
+indicates that the named entity has \deflink{thread storage duration}{\ref{basic.stc.thread}}.
+It shall be applied only to the names of variables of namespace
 or block scope and to the names of static data members.
 When \tcode{thread_local} is applied to a variable of block scope the
 \grammarterm{storage-class-specifier} \tcode{static} is implied if no other
@@ -378,13 +373,13 @@ When \tcode{thread_local} is applied to a variable of block scope the
 \pnum
 \indextext{restriction!\idxcode{static}}%
 The \tcode{static} specifier can be applied only to names of variables and
-functions and to anonymous unions~(\ref{class.union.anon}). There can be no
+functions and to \link{anonymous unions}{\ref{class.union.anon}}. There can be no
 \tcode{static} function declarations within a block, nor any
 \tcode{static} function parameters. A \tcode{static} specifier used in
-the declaration of a variable declares the variable to have static storage
-duration~(\ref{basic.stc.static}), unless accompanied by the
-\tcode{thread_local} specifier, which declares the variable to have thread
-storage duration~(\ref{basic.stc.thread}). A \tcode{static} specifier can be
+the declaration of a variable declares the variable to have
+\deflink{static storage duration}{\ref{basic.stc.static}}, unless accompanied by the
+\tcode{thread_local} specifier, which declares the variable to have
+\deflink{thread storage duration}{\ref{basic.stc.thread}}. A \tcode{static} specifier can be
 used in declarations of class members;~\ref{class.static} describes its
 effect.
 \indextext{\idxcode{static}!linkage of}%
@@ -471,7 +466,7 @@ void h() {
 
 \pnum
 The \tcode{mutable} specifier shall appear only in the declaration of
-a non-static data member~(\ref{class.mem})
+a \deflink{non-static data member}{\ref{class.mem}}
 whose type is neither const-qualified nor a reference type.
 \begin{example}
 \begin{codeblock}
@@ -520,7 +515,7 @@ see~\ref{class.conv.ctor} and~\ref{class.conv.fct}.
 \pnum
 Declarations containing the \grammarterm{decl-specifier} \tcode{typedef}
 declare identifiers that can be used later for naming
-fundamental~(\ref{basic.fundamental}) or compound~(\ref{basic.compound})
+\link{fundamental}{\ref{basic.fundamental}} or \link{compound}{\ref{basic.compound}}
 types. The \tcode{typedef} specifier shall not be
 combined in a \grammarterm{decl-specifier-seq} with any other kind of
 specifier except a \grammarterm{defining-type-specifier}, and it shall not be used in the
@@ -665,11 +660,12 @@ class complex { @\commentellip@ };    // error: redefinition
 \indextext{class name!\idxcode{typedef}}%
 A \grammarterm{typedef-name} that names a class type, or a cv-qualified
 version thereof, is also a \grammarterm{class-name}~(\ref{class.name}). If
-a \grammarterm{typedef-name} is used to identify the subject of an
-\grammarterm{elaborated-type-specifier}~(\ref{dcl.type.elab}), a class
-definition (Clause~\ref{class}), a constructor
-declaration~(\ref{class.ctor}), or a destructor
-declaration~(\ref{class.dtor}), the program is ill-formed.
+a \grammarterm{typedef-name} is used to identify the subject of
+an \grammarterm{elaborated-type-specifier}~(\ref{dcl.type.elab}),
+a \link{class}{\ref{class}} definition,
+a \link{constructor}{\ref{class.ctor}} declaration,
+or a \link{destructor}{\ref{class.dtor}} declaration,
+the program is ill-formed.
 \end{note}
 \begin{example}
 
@@ -767,7 +763,7 @@ requirements:
 
 \begin{itemize}
 \item
-it shall not be virtual~(\ref{class.virtual});
+it shall not be \link{virtual}{\ref{class.virtual}};
 
 \item
 its return type shall be a literal type;
@@ -784,7 +780,7 @@ that does not contain
 \begin{itemize}
 \item an \grammarterm{asm-definition},
 \item a \tcode{goto} statement,
-\item an identifier label~(\ref{stmt.label}),
+\item an \deflink{identifier label}{\ref{stmt.label}},
 \item a \grammarterm{try-block}, or
 \item a definition of a variable
 of non-literal type or
@@ -881,8 +877,8 @@ private:
 For a constexpr function or constexpr constructor
 that is neither defaulted nor a template,
 if no argument values exist such that
-an invocation of the function or constructor could be an evaluated subexpression of a core
-constant expression~(\ref{expr.const}), or,
+an invocation of the function or constructor could be an evaluated subexpression of a
+\deflinkx{core constant expression}{expression!core constant}{\ref{expr.const}}, or,
 for a constructor, a constant initializer for some object~(\ref{basic.start.static}),
 the program is ill-formed, no diagnostic required.
 \begin{example}
@@ -924,7 +920,7 @@ non-constexpr function in all respects except that
 \begin{itemize}
 \item
 a call to a constexpr
-function can appear in a constant expression~(\ref{expr.const}) and
+function can appear in a \deflink{constant expression}{\ref{expr.const}} and
 \item
 copy elision is mandatory in a constant expression~(\ref{class.copy}).
 \end{itemize}
@@ -949,7 +945,7 @@ shall have literal type and
 shall be initialized.
 In any \tcode{constexpr} variable declaration,
 the full-expression of the initialization
-shall be a constant expression~(\ref{expr.const}).
+shall be a \link{constant expression}{\ref{expr.const}}.
 \begin{example}
 \begin{codeblock}
 struct pixel {
@@ -1136,7 +1132,7 @@ these could be introduced by typedefs.\end{note}
 \pnum
 \begin{note}
 Declaring a variable \tcode{const} can affect its linkage~(\ref{dcl.stc})
-and its usability in constant expressions~(\ref{expr.const}). As
+and its usability in \link{constant expressions}{\ref{expr.const}}. As
 described in~\ref{dcl.init}, the definition of an object or subobject
 of const-qualified type must specify an initializer or be subject to
 default-initialization.
@@ -1150,14 +1146,14 @@ the object referenced is a non-const object and can be modified through
 some other access path.
 \begin{note}
 Cv-qualifiers are supported by the type system so that they cannot be
-subverted without casting~(\ref{expr.const.cast}).
+subverted without \link{casting}{\ref{expr.const.cast}}.
 \end{note}
 
 \pnum
 \indextext{const object@\tcode{const}-object!undefined change to}%
-Except that any class member declared \tcode{mutable}~(\ref{dcl.stc})
+Except that any class member declared \linkx{\tcode{mutable}}{\idxcode{mutable}}{\ref{dcl.stc}}
 can be modified, any attempt to modify a \tcode{const} object during its
-lifetime~(\ref{basic.life}) results in undefined behavior.
+\deflink{lifetime}{\ref{basic.life}} results in undefined behavior.
 \begin{example}
 \begin{codeblock}
 const int ci = 3;                       // cv-qualified (initialized as required)
@@ -1291,7 +1287,7 @@ The other
 \grammarterm{simple-type-specifier}{s}
 specify either a previously-declared type, a type determined from an
 expression, or one of the
-fundamental types~(\ref{basic.fundamental}).
+\link{fundamental types}{\ref{basic.fundamental}}.
 Table~\ref{tab:simple.type.specifiers}
  summarizes the valid combinations of
 \grammarterm{simple-type-specifier}{s}
@@ -1366,8 +1362,7 @@ the specification of the structured binding declaration;
 
 \item otherwise, if \tcode{e} is an unparenthesized \grammarterm{id-expression} or
 an unparenthesized
-class
-member access~(\ref{expr.ref}), \tcode{decltype(e)} is the
+\link{class member access}{\ref{expr.ref}}, \tcode{decltype(e)} is the
 type of the entity named by \tcode{e}. If there is no such entity, or
 if \tcode{e} names a set of overloaded functions, the program is
 ill-formed;
@@ -1382,8 +1377,8 @@ is \tcode{T\&}, where \tcode{T} is the type of \tcode{e};
 \item otherwise, \tcode{decltype(e)} is the type of \tcode{e}.
 \end{itemize}
 
-The operand of the \tcode{decltype} specifier is an unevaluated
-operand (Clause~\ref{expr}).
+The operand of the \tcode{decltype} specifier is an
+\deflink{unevaluated operand}{Clause~\ref{expr}}.
 
 \begin{example}
 \begin{codeblock}
@@ -1404,7 +1399,7 @@ in~\ref{dcl.spec.auto}.
 
 \pnum
 If the operand of a \grammarterm{decltype-specifier} is a prvalue,
-the temporary materialization conversion is not applied~(\ref{conv.rval})
+the \link{temporary materialization conversion}{\ref{conv.rval}} is not applied
 and no result object is provided for the prvalue.
 The type of the prvalue may be incomplete.
 \begin{note}
@@ -1470,9 +1465,9 @@ void r() {
 An \grammarterm{attribute-specifier-seq} shall not appear in an \grammarterm{elaborated-type-specifier}
 unless the latter is the sole constituent of a declaration.
 If an \grammarterm{elaborated-type-specifier} is the sole constituent of a
-declaration, the declaration is ill-formed unless it is an explicit
-specialization~(\ref{temp.expl.spec}), an explicit
-instantiation~(\ref{temp.explicit}) or it has one of the following
+declaration, the declaration is ill-formed unless it is an \link{explicit
+specialization}{\ref{temp.expl.spec}}, an \link{explicit
+instantiation}{\ref{temp.explicit}} or it has one of the following
 forms:
 
 \begin{ncsimplebnf}
@@ -1522,11 +1517,11 @@ the form of \grammarterm{elaborated-type-specifier} that declares a
 as referring to the definition of the class. Thus, in any
 \grammarterm{elaborated-type-specifier}, the \tcode{enum} keyword
 shall be
-used to refer to an enumeration~(\ref{dcl.enum}), the \tcode{union}
-\grammarterm{class-key} shall be used to refer to a union
-(Clause~\ref{class}), and either the \tcode{class} or \tcode{struct}
-\grammarterm{class-key} shall be used to refer to a class
-(Clause~\ref{class}) declared using the \tcode{class} or \tcode{struct}
+used to refer to an \link{enumeration}{\ref{dcl.enum}}, the \tcode{union}
+\grammarterm{class-key} shall be used to refer to a \deflink{union}{Clause~\ref{class}},
+and either the \tcode{class} or \tcode{struct}
+\grammarterm{class-key} shall be used to refer to a \link{class}{Clause~\ref{class}}
+declared using the \tcode{class} or \tcode{struct}
 \grammarterm{class-key}. \begin{example}
 
 \begin{codeblock}
@@ -1547,7 +1542,7 @@ from an initializer. The \tcode{auto}
 introduce a function type having a \grammarterm{trailing-return-type} or to
 signify that a lambda is a generic lambda (\ref{expr.prim.lambda.closure}).
 The \tcode{auto} \grammarterm{type-specifier} is also used to introduce a
-structured binding declaration (\ref{dcl.struct.bind}).
+\link{structured binding declaration}{\ref{dcl.struct.bind}}.
 
 \pnum
 The placeholder type can appear with a function declarator in the
@@ -1625,7 +1620,7 @@ explicitly allowed in this section is ill-formed.
 If the \grammarterm{init-declarator-list} contains more than one
 \grammarterm{init-declarator}, they shall all form declarations of
 variables. The type of each declared variable is determined
-by placeholder type deduction~(\ref{dcl.type.auto.deduct}),
+by \deflink{placeholder type deduction}{\ref{dcl.type.auto.deduct}},
 and if the type that replaces the placeholder type is not the
 same in each deduction, the program is ill-formed.
 
@@ -1724,10 +1719,10 @@ auto frf(int i) { return i; }                   // not a friend of \tcode{A<int>
 
 \pnum
 A function declared with a return type that uses a placeholder type shall not
-be \tcode{virtual}~(\ref{class.virtual}).
+be \link{\tcode{virtual}}{\ref{class.virtual}}.
 
 \pnum
-An explicit instantiation declaration~(\ref{temp.explicit}) does not cause the
+An \link{explicit instantiation declaration}{\ref{temp.explicit}} does not cause the
 instantiation of an entity declared using a placeholder type, but it also does
 not prevent that entity from being instantiated as needed to determine its
 type.
@@ -1800,7 +1795,7 @@ Obtain \tcode{P} from
 invented type template parameter \tcode{U} or,
 if the initialization is copy-list-initialization, with
 \tcode{std::initializer_list<U>}. Deduce a value for \tcode{U} using the rules
-of template argument deduction from a function call~(\ref{temp.deduct.call}),
+of \link{template argument deduction from a function call}{\ref{temp.deduct.call}},
 where \tcode{P} is a
 function template parameter type and
 the corresponding argument is \tcode{e}.
@@ -1987,7 +1982,7 @@ type. \begin{example}
 \end{note}
 If an \grammarterm{opaque-enum-declaration} contains
 a \grammarterm{nested-name-specifier},
-the declaration shall be an explicit specialization~(\ref{temp.expl.spec}).
+the declaration shall be an \link{explicit specialization}{\ref{temp.expl.spec}}.
 
 \pnum
 \indextext{constant!enumeration}%
@@ -2065,8 +2060,9 @@ If the underlying type is fixed, the type of each enumerator
 prior to the closing brace is the underlying
 type
 and the \grammarterm{constant-expression} in the \grammarterm{enumerator-definition}
-shall be a converted constant expression of the underlying
-type~(\ref{expr.const}).
+shall be a
+\deflinkx{converted constant expression}{expression!converted constant}{\ref{expr.const}}
+of the underlying type.
 If the underlying
 type is not fixed,
 the type of each enumerator prior to the closing brace is determined as
@@ -2075,8 +2071,9 @@ follows:
 \begin{itemize}
 \item If an
 initializer is specified for an enumerator, the
-\grammarterm{constant-expression} shall be an integral constant
-expression~(\ref{expr.const}). If the expression has
+\grammarterm{constant-expression} shall be an
+\deflinkx{integral constant expression}{expression!integral constant}{\ref{expr.const}}.
+If the expression has
 unscoped enumeration type, the enumerator has the underlying type of that
 enumeration type, otherwise it has the same type as the expression.
 
@@ -2093,7 +2090,7 @@ is ill-formed.
 
 \pnum
 An enumeration whose underlying type is fixed is an incomplete type from its
-point of declaration~(\ref{basic.scope.pdecl}) to immediately after its
+\deflink{point of declaration}{\ref{basic.scope.pdecl}} to immediately after its
 \grammarterm{enum-base} (if any), at which point it becomes a complete type.
 An enumeration whose underlying type is not fixed is an incomplete type from
 its point of declaration to immediately after the closing \tcode{\}} of its
@@ -2143,7 +2140,7 @@ if they have the same underlying type.
 
 \pnum
 The value of an enumerator or an object of an unscoped enumeration type is
-converted to an integer by integral promotion~(\ref{conv.prom}).
+converted to an integer by \deflinkx{integral promotion}{integral promotions}{\ref{conv.prom}}.
 \begin{example}
 \indextext{example!enumeration}%
 \begin{codeblock}
@@ -2371,13 +2368,13 @@ appertains to the namespace being defined or extended.
 Members of an inline namespace can be used in most respects as though they were members
 of the enclosing namespace. Specifically, the inline namespace and its enclosing
 namespace are both added to the set of associated namespaces used in
-argument-dependent lookup~(\ref{basic.lookup.argdep}) whenever one of them is,
+\link{argument-dependent lookup}{\ref{basic.lookup.argdep}} whenever one of them is,
 and a \grammarterm{using-directive}~(\ref{namespace.udir}) that names the inline
-namespace is implicitly inserted into the enclosing namespace as for an unnamed
-namespace~(\ref{namespace.unnamed}). Furthermore, each
-member of the inline namespace can subsequently be partially
-specialized~(\ref{temp.class.spec}), explicitly
-instantiated~(\ref{temp.explicit}), or explicitly specialized~(\ref{temp.expl.spec}) as
+namespace is implicitly inserted into the enclosing namespace as for an \link{unnamed
+namespace}{\ref{namespace.unnamed}}. Furthermore, each
+member of the inline namespace can subsequently be \link{partially
+specialized}{\ref{temp.class.spec}}, \link{explicitly
+instantiated}{\ref{temp.explicit}}, or \link{explicitly specialized}{\ref{temp.expl.spec}} as
 though it were a member of the enclosing namespace. Finally, looking up a name in the
 enclosing namespace via explicit qualification~(\ref{namespace.qual}) will include
 members of the inline namespace brought in by the \grammarterm{using-directive} even if
@@ -2478,8 +2475,8 @@ that is an \grammarterm{opaque-enum-declaration},
 declares (or redeclares) its \grammarterm{unqualified-id} or
 \grammarterm{identifier} as a member of \tcode{N}.
 \begin{note}
-An explicit instantiation~(\ref{temp.explicit}) or
-explicit specialization~(\ref{temp.expl.spec}) of a template
+An \link{explicit instantiation}{\ref{temp.explicit}} or
+\link{explicit specialization}{\ref{temp.expl.spec}} of a template
 does not introduce a name and thus may be declared using an
 \grammarterm{unqualified-id} in a member of the enclosing namespace set,
 if the primary template is declared in an inline namespace.
@@ -2883,8 +2880,8 @@ template is visible~(\ref{temp.class.spec}).
 
 \pnum
 Since a \grammarterm{using-declaration} is a declaration, the restrictions
-on declarations of the same name in the same declarative
-region~(\ref{basic.scope}) also apply to \grammarterm{using-declaration}{s}.
+on declarations of the same name in the same
+\deflink{declarative region}{\ref{basic.scope}} also apply to \grammarterm{using-declaration}{s}.
 \begin{example}
 
 \begin{codeblock}
@@ -2920,7 +2917,7 @@ void func() {
 
 \pnum
 If a function declaration in namespace scope or block scope has the same
-name and the same parameter-type-list~(\ref{dcl.fct}) as
+name and the same \deflink{parameter-type-list}{\ref{dcl.fct}} as
 a function introduced by a \grammarterm{using-declaration}, and the
 declarations do not declare the same function, the program is
 ill-formed. If a function template declaration in namespace scope has
@@ -2963,7 +2960,7 @@ When a \grammarterm{using-declarator} brings declarations from a base class into
 a derived class, member functions and member function templates in
 the derived class override and/or hide member functions and member
 function templates with the same name,
-parameter-type-list~(\ref{dcl.fct}), cv-qualification, and \grammarterm{ref-qualifier} (if any) in a base
+\deflink{parameter-type-list}{\ref{dcl.fct}}, cv-qualification, and \grammarterm{ref-qualifier} (if any) in a base
 class (rather than conflicting).
 Such hidden or overridden declarations are excluded from the set of
 declarations introduced by the \grammarterm{using-declarator}.
@@ -3134,7 +3131,7 @@ The optional \grammarterm{attribute-specifier-seq} appertains to the \grammarter
 A \grammarterm{using-directive} specifies that the names in the nominated
 namespace can be used in the scope in which the
 \grammarterm{using-directive} appears after the \grammarterm{using-directive}.
-During unqualified name lookup~(\ref{basic.lookup.unqual}), the names
+During \link{unqualified name lookup}{\ref{basic.lookup.unqual}}, the names
 appear as if they were declared in the nearest enclosing namespace which
 contains both the \grammarterm{using-directive} and the nominated
 namespace.
@@ -3177,7 +3174,7 @@ void f4() {
 \end{example}
 
 \pnum
-For unqualified lookup~(\ref{basic.lookup.unqual}), the
+For \link{unqualified lookup}{\ref{basic.lookup.unqual}}, the
 \grammarterm{using-directive} is transitive: if a scope contains a
 \grammarterm{using-directive} that nominates a second namespace that itself
 contains \grammarterm{using-directive}{s}, the effect is as if the
@@ -3230,7 +3227,7 @@ namespace B {
 
 
 \pnum
-If a namespace is extended~(\ref{namespace.def}) after a
+If a namespace is \deflinkx{extended}{namespace!extend}{\ref{namespace.def}} after a
 \grammarterm{using-directive} for that namespace is given, the additional
 members of the extended namespace and the members of namespaces
 nominated by \grammarterm{using-directive}{s} in the
@@ -3364,7 +3361,7 @@ different language linkages are distinct types even if they are
 otherwise identical.
 
 \pnum
-Linkage~(\ref{basic.link}) between \Cpp{} and  non-\Cpp{} code fragments can
+\link{Linkage}{\ref{basic.link}} between \Cpp{} and  non-\Cpp{} code fragments can
 be achieved using a \grammarterm{linkage-specification}:
 
 \indextext{\idxgram{linkage-specification}}%
@@ -3412,7 +3409,7 @@ extern "C" {
 Linkage specifications nest. When linkage specifications nest, the
 innermost one determines the language linkage. A linkage specification
 does not establish a scope. A \grammarterm{linkage-specification} shall
-occur only in namespace scope~(\ref{basic.scope.namespace}). In a
+occur only in \link{namespace scope}{\ref{basic.scope.namespace}}. In a
 \grammarterm{linkage-specification}, the specified language linkage applies
 to the function types of all function declarators, function names with
 external linkage, and variable names with external linkage declared
@@ -3483,7 +3480,7 @@ extern "C" {
 
 \pnum
 If two declarations declare functions with the same name and
-parameter-type-list~(\ref{dcl.fct}) to be members of the same
+\deflink{parameter-type-list}{\ref{dcl.fct}} to be members of the same
 namespace or declare objects with the same name to be members of the same
 namespace and the declarations give the names different language linkages, the
 program is ill-formed; no diagnostic is required if the declarations appear in
@@ -3546,8 +3543,8 @@ extern "C" int h() { return 97; }   // definition for the function \tcode{h} wit
 A declaration directly contained in a
 \grammarterm{linkage-specification}
 is treated as if it contains the
-\tcode{extern}
-specifier~(\ref{dcl.stc}) for the purpose of determining the linkage of the
+\linkx{\tcode{extern}
+specifier}{extern}{\ref{dcl.stc}} for the purpose of determining the linkage of the
 declared name and whether it is a definition. Such a declaration shall
 not specify a storage class.
 \begin{example}
@@ -3693,16 +3690,16 @@ affects the tokens in an \grammarterm{attribute-argument-clause}.
 \pnum
 In an \grammarterm{attribute-list}, an ellipsis may appear only if that
 \grammarterm{attribute}'s specification permits it. An \grammarterm{attribute} followed
-by an ellipsis is a pack expansion~(\ref{temp.variadic}).
+by an ellipsis is a \deflink{pack expansion}{\ref{temp.variadic}}.
 An \grammarterm{attribute-specifier} that contains no \grammarterm{attribute}{s} has no
 effect. The order in which the \grammarterm{attribute-token}{s} appear in an
 \grammarterm{attribute-list} is not significant. If a
-keyword~(\ref{lex.key})
-or an alternative token~(\ref{lex.digraph}) that satisfies the syntactic requirements
+\link{keyword}{\ref{lex.key}}
+or an \link{alternative token}{\ref{lex.digraph}} that satisfies the syntactic requirements
 of an \grammarterm{identifier}~(\ref{lex.name}) is
 contained in
-an \grammarterm{attribute-token}, it is considered an identifier. No name
-lookup~(\ref{basic.lookup}) is performed on any of the identifiers contained in an
+an \grammarterm{attribute-token}, it is considered an identifier. No
+\link{name lookup}{\ref{basic.lookup}} is performed on any of the identifiers contained in an
 \grammarterm{attribute-token}. The \grammarterm{attribute-token} determines additional
 requirements on the \grammarterm{attribute-argument-clause} (if any).
 
@@ -3714,9 +3711,9 @@ Clause~\ref{dcl.decl}). If an \grammarterm{attribute-specifier-seq} that apperta
 entity or statement contains an \grammarterm{attribute} or \grammarterm{alignment-specifier} that
 is not allowed to apply to that
 entity or statement, the program is ill-formed. If an \grammarterm{attribute-specifier-seq}
-appertains to a friend declaration~(\ref{class.friend}), that declaration shall be a
-definition. No \grammarterm{attribute-specifier-seq} shall appertain to an explicit
-instantiation~(\ref{temp.explicit}).
+appertains to a \link{friend declaration}{\ref{class.friend}}, that declaration shall be a
+definition. No \grammarterm{attribute-specifier-seq} shall appertain to an
+\link{explicit instantiation}{\ref{temp.explicit}}.
 
 \pnum
 For an \grammarterm{attribute-token}
@@ -3765,7 +3762,7 @@ definition of a class (in an
 declaration or definition of an enumeration (in an
 \grammarterm{opaque-enum-declaration} or \grammarterm{enum-head},
 respectively~(\ref{dcl.enum})).
-An \grammarterm{alignment-specifier} with an ellipsis is a pack expansion~(\ref{temp.variadic}).
+An \grammarterm{alignment-specifier} with an ellipsis is a \deflink{pack expansion}{\ref{temp.variadic}}.
 
 \pnum
 When the \grammarterm{alignment-specifier} is of the form
@@ -3861,9 +3858,9 @@ in each \grammarterm{attribute-list} and no
 \grammarterm{attribute-argument-clause} shall be present. The attribute may be
 applied to the \grammarterm{declarator-id} of a
 \grammarterm{parameter-declaration} in a function declaration or lambda, in
-which case it specifies that the initialization of the parameter carries a
-dependency to~(\ref{intro.multithread}) each lvalue-to-rvalue
-conversion~(\ref{conv.lval}) of that object. The attribute may also be applied
+which case it specifies that the initialization of the parameter
+\deflink{carries a dependency}{\ref{intro.multithread}} to each \link{lvalue-to-rvalue
+conversion}{\ref{conv.lval}} of that object. The attribute may also be applied
 to the \grammarterm{declarator-id} of a function declaration, in which case it
 specifies that the return value, if any, carries a dependency to the evaluation
 of the function call expression.
@@ -3982,14 +3979,14 @@ to the name or entity. \end{note}
 
 \pnum
 The \grammarterm{attribute-token} \tcode{fallthrough}
-may be applied to a null statement~(\ref{stmt.expr});
+may be applied to a \deflink{null statement}{\ref{stmt.expr}};
 \indextext{statement!fallthrough}
 such a statement is a fallthrough statement.
 The \grammarterm{attribute-token} \tcode{fallthrough}
 shall appear at most once in each \grammarterm{attribute-list} and
 no \grammarterm{attribute-argument-clause} shall be present.
 A fallthrough statement may only appear within
-an enclosing \tcode{switch} statement~(\ref{stmt.switch}).
+an enclosing \link{\tcode{switch} statement}{\ref{stmt.switch}}.
 The next statement that would be executed after a fallthrough statement
 shall be a labeled statement whose label is a case label or
 default label for the same \tcode{switch} statement.
diff --git a/source/declarators.tex b/source/declarators.tex
index 8f7b768..58260ad 100644
--- a/source/declarators.tex
+++ b/source/declarators.tex
@@ -34,7 +34,7 @@ each of which can have an initializer.
 The three components of a
 \grammarterm{simple-declaration}
 are the
-attributes~(\ref{dcl.attr}), the
+\link{attributes}{\ref{dcl.attr}}, the
 specifiers
 (\grammarterm{decl-specifier-seq};
 \ref{dcl.spec}) and the declarators
@@ -83,7 +83,7 @@ struct S { ... };
 S S;
 S T;                    // error
 \end{codeblock}
-Another exception is when \tcode{T} is \tcode{auto}~(\ref{dcl.spec.auto}),
+Another exception is when \tcode{T} is \link{\tcode{auto}}{\ref{dcl.spec.auto}},
 for example:
 \begin{codeblock}
 auto i = 1, j = 2.0;    // error: deduced types for \tcode{i} and \tcode{j} do not match
@@ -508,7 +508,6 @@ Parentheses do not alter the type of the embedded
 but they can alter the binding of complex declarators.
 
 \rSec2[dcl.ptr]{Pointers}%
-\indextext{declarator!pointer}%
 
 \pnum
 In a declaration
@@ -529,8 +528,8 @@ is ``\placeholder{derived-declarator-type-list}
 \tcode{T}'',
 then the type of the identifier of
 \tcode{D}
-is ``\placeholder{derived-declarator-type-list} \grammarterm{cv-qualifier-seq} pointer to
-\tcode{T}''.
+is \indexedspan{``\placeholder{derived-declarator-type-list} \grammarterm{cv-qualifier-seq} pointer to
+\tcode{T}''}{\indextext{declarator!pointer}}.
 \indextext{declaration!pointer}%
 \indextext{declaration!constant pointer}%
 The
@@ -616,7 +615,7 @@ Forming a pointer to reference type is ill-formed; see~\ref{dcl.ref}.
 Forming a function pointer type is ill-formed if the function type has
 \grammarterm{cv-qualifier}{s} or a \grammarterm{ref-qualifier};
 see~\ref{dcl.fct}.
-Since the address of a bit-field (\ref{class.bit}) cannot be taken,
+Since the address of a \link{bit-field}{\ref{class.bit}} cannot be taken,
 a pointer can never point to a bit-field.
 \end{note}
 
@@ -767,7 +766,7 @@ The declaration of a reference shall contain an
 except when the declaration contains an explicit
 \tcode{extern}
 specifier (\ref{dcl.stc}),
-is a class member (\ref{class.mem}) declaration within a class definition,
+is a \link{class member}{\ref{class.mem}} declaration within a class definition,
 or is the declaration of a parameter or a return type (\ref{dcl.fct}); see~\ref{basic.def}.
 A reference shall be initialized to refer to a valid object or function.
 \begin{note}
@@ -814,7 +813,6 @@ see~\ref{dcl.fct}.
 \end{note}
 
 \rSec2[dcl.mptr]{Pointers to members}%
-\indextext{declarator!pointer to member}
 
 \pnum
 In a declaration
@@ -838,9 +836,9 @@ is ``\placeholder{derived-declarator-type-list}
 \tcode{T}'',
 then the type of the identifier of
 \tcode{D}
-is ``\placeholder{derived-declarator-type-list} \grammarterm{cv-qualifier-seq} pointer to member of class
+is \indexedspan{``\placeholder{derived-declarator-type-list} \grammarterm{cv-qualifier-seq} pointer to member of class
 \grammarterm{nested-name-specifier} of type
-\tcode{T}''.
+\tcode{T}''}{\indextext{declarator!pointer to member}}.
 The optional \grammarterm{attribute-specifier-seq}~(\ref{dcl.attr.grammar}) appertains to the
 pointer-to-member.
 
@@ -908,8 +906,8 @@ obj.*pmi = 7;       // assign \tcode{7} to an integer member of \tcode{obj}
 \end{example}
 
 \pnum
-A pointer to member shall not point to a static member
-of a class (\ref{class.static}),
+A pointer to member shall not point to a \link{static member}{\ref{class.static}}
+of a class,
 a member with reference type,
 or
 ``\cv{}~\tcode{void}''.
@@ -1163,7 +1161,7 @@ $i \times j \times \dotsb \times k$,
 then
 \tcode{E}
 appearing in an expression
-that is subject to the array-to-pointer conversion~(\ref{conv.array})
+that is subject to the \link{array-to-pointer conversion}{\ref{conv.array}}
 is converted to
 a pointer to an $(n-1)$-dimensional
 array with rank
@@ -1258,7 +1256,7 @@ function of
 returning \tcode{T}'',
 where the optional \tcode{noexcept} is present
 if and only if
-the exception specification~(\ref{except.spec}) is non-throwing.
+the \link{exception specification}{\ref{except.spec}} is non-throwing.
 The optional \grammarterm{attribute-specifier-seq}
 appertains to the function type.
 
@@ -1358,8 +1356,9 @@ If the
 \indextext{declaration!ellipsis in function}%
 \indextext{argument list!variable}%
 \indextext{parameter list!variable}%
-terminates with an ellipsis or a function parameter
-pack~(\ref{temp.variadic}), the number of arguments shall be equal
+terminates with an ellipsis or a
+\deflink{function parameter pack}{\ref{temp.variadic}},
+the number of arguments shall be equal
 to or greater than the number of parameters that do not have a default
 argument and are not function parameter packs.
 Where syntactically correct and where ``\tcode{...}'' is not
@@ -1400,7 +1399,7 @@ contains a mechanism for accessing arguments passed using the ellipsis
 \indextext{overloading}%
 \indextext{type!function}%
 A single name can be used for several different functions in a single scope;
-this is function overloading (Clause~\ref{over}).
+this is function \link{overloading}{Clause~\ref{over}}.
 All declarations for a function shall agree exactly
 in both the return type and the parameter-type-list.
 The type of a function is determined using the following rules.
@@ -1481,7 +1480,7 @@ struct S {
 The return type, the parameter-type-list, the \grammarterm{ref-qualifier},
 the \grammarterm{cv-qualifier-seq}, and
 the exception specification,
-but not the default arguments~(\ref{dcl.fct.default}),
+but not the \link{default arguments}{\ref{dcl.fct.default}},
 are part of the function type.
 \begin{note}
 Function types are checked during the assignments and initializations of
@@ -1518,12 +1517,12 @@ definition shall not be an incomplete
 (possibly cv-qualified) class type
 in the context of the function definition
 unless the function is
-deleted~(\ref{dcl.fct.def.delete}).
+\link{deleted}{\ref{dcl.fct.def.delete}}.
 
 \pnum
 \indextext{typedef!function}%
 A typedef of function type may be used to declare a function but shall not be
-used to define a function (\ref{dcl.fct.def}).
+used to \link{define a function}{\ref{dcl.fct.def}}.
 \begin{example}
 
 \begin{codeblock}
@@ -1536,7 +1535,7 @@ void fv() { }       // OK: definition of \tcode{fv}
 
 \pnum
 An identifier can optionally be provided as a parameter name;
-if present in a function definition (\ref{dcl.fct.def}), it names a parameter.
+if present in a \link{function definition}{\ref{dcl.fct.def}}, it names a parameter.
 \begin{note}
 In particular, parameter names are also optional in function definitions
 and names used for a parameter in different declarations and the definition
@@ -1636,14 +1635,14 @@ specialization. \begin{note} A function template is not a function. \end{note}
 A \grammarterm{declarator-id} or \grammarterm{abstract-declarator}
 containing an ellipsis shall only
 be used in a \grammarterm{parameter-declaration}. Such a
-\grammarterm{parameter-declaration} is a parameter
-pack~(\ref{temp.variadic}). When it is part of a
+\grammarterm{parameter-declaration} is a \deflink{parameter pack}{\ref{temp.variadic}}.
+When it is part of a
 \grammarterm{parameter-declaration-clause}, the parameter pack is a
-function parameter pack~(\ref{temp.variadic}). \begin{note}
+\deflink{function parameter pack}{\ref{temp.variadic}}. \begin{note}
 Otherwise, the \grammarterm{parameter-declaration} is part of a
 \grammarterm{template-parameter-list} and the parameter pack is a
 template parameter pack; see~\ref{temp.param}. \end{note}
-A function parameter pack is a pack expansion~(\ref{temp.variadic}).
+A function parameter pack is a \deflink{pack expansion}{\ref{temp.variadic}}.
 \begin{example}
 
 \begin{codeblock}
@@ -1787,7 +1786,7 @@ declaration of the function or function template in the translation unit.
 The default argument has the
 same semantic constraints as the initializer in a
 declaration of a variable of the parameter type, using the
-copy-initialization semantics (\ref{dcl.init}).
+\deflink{copy-initialization}{\ref{dcl.init}} semantics.
 The names in the
 default argument are bound, and the semantic constraints are checked,
 at the point where the default argument appears.
@@ -1897,7 +1896,7 @@ int h(int a, int b = sizeof(a));    // OK, unevaluated operand
 \end{codeblock}
 \end{example}
 A non-static member shall not appear in a default argument unless it appears as
-the \grammarterm{id-expression} of a class member access expression (\ref{expr.ref}) or
+the \grammarterm{id-expression} of a \link{class member access expression}{\ref{expr.ref}} or
 unless it is used to form a pointer to member (\ref{expr.unary.op}).
 \begin{example}
 The declaration of
@@ -1949,7 +1948,7 @@ is in scope.
 
 \pnum
 \indextext{argument and virtual function!default}%
-A virtual function call (\ref{class.virtual}) uses the default
+A \link{virtual function}{\ref{class.virtual}} call uses the default
 arguments in the declaration of the virtual function determined
 by the static type of the pointer or reference denoting the
 object.
@@ -2076,7 +2075,7 @@ In the \grammarterm{function-body}, a
 storage duration that is implicitly defined (see~\ref{basic.scope.block}).
 
 \pnum
-The function-local predefined variable \tcode{__func__} is
+The function-local predefined variable \indexedspan{\tcode{__func__}}{\indextext{\idxcode{__func__}}} is
 defined as if a definition of the form
 \begin{codeblock}
 static const char __func__[] = "@\grammarterm{function-name}@";
@@ -2085,9 +2084,9 @@ had been provided, where \grammarterm{function-name} is an \impldef{string resul
 from \mname{func}} string.
 It is unspecified whether such a variable has an address
 distinct from that of any other object in the program.\footnote{Implementations are
-permitted to provide additional predefined variables with names that are reserved to the
-implementation~(\ref{lex.name}). If a predefined variable is not
-odr-used~(\ref{basic.def.odr}), its string value need not be present in the program image.}
+permitted to provide additional predefined variables with names that are
+\linkx{reserved to the implementation}{reserved identifier}{\ref{lex.name}}. If a predefined variable is not
+\link{odr-used}{\ref{basic.def.odr}}, its string value need not be present in the program image.}
 \begin{example}
 \begin{codeblock}
 struct S {
@@ -2216,7 +2215,7 @@ implicitly or explicitly and forming a pointer or pointer-to-member to the
 function. It applies even for references in expressions that are not
 potentially-evaluated. If a function is overloaded, it is referenced only if the
 function is selected by overload resolution. The implicit
-odr-use~(\ref{basic.def.odr}) of a virtual function does not, by itself,
+\link{odr-use}{\ref{basic.def.odr}} of a virtual function does not, by itself,
 constitute a reference. \end{note}
 
 \pnum
@@ -2264,8 +2263,8 @@ moveonly q(*p);                 // error, deleted copy constructor
 \end{example}
 
 \pnum
-A deleted function is implicitly an inline function~(\ref{dcl.inline}). \begin{note} The
-one-definition rule~(\ref{basic.def.odr}) applies to deleted definitions. \end{note}
+A deleted function is implicitly an \deflink{inline function}{\ref{dcl.inline}}. \begin{note} The
+\link{one-definition rule}{\ref{basic.def.odr}} applies to deleted definitions. \end{note}
 A deleted definition of a function shall be the first declaration of the function or,
 for an explicit specialization of a function template, the first declaration of that
 specialization.
@@ -2343,13 +2342,14 @@ and
 the number of elements in
 the \grammarterm{identifier-list} shall be equal to the value of that
 expression. The \grammarterm{unqualified-id} \tcode{get} is looked up
-in the scope of \tcode{E} by class member access lookup~(\ref{basic.lookup.classref}),
+in the scope of \tcode{E} by \link{class member access lookup}{\ref{basic.lookup.classref}},
 and if that finds at least one declaration, the initializer is
 \tcode{e.get<i>()}. Otherwise, the initializer is \tcode{get<i>(e)},
-where \tcode{get} is looked up in the associated namespaces~(\ref{basic.lookup.argdep}).
+where \tcode{get} is looked up in the
+\deflinkx{associated namespaces}{namespace!associated}{\ref{basic.lookup.argdep}}.
 In either case, \tcode{get<i>} is interpreted as a \grammarterm{template-id}.
 \begin{note}
-Ordinary unqualified lookup~(\ref{basic.lookup.unqual}) is not performed.
+Ordinary \link{unqualified lookup}{\ref{basic.lookup.unqual}} is not performed.
 \end{note}
 In either case, \tcode{e} is an lvalue if the type of the entity \tcode{e}
 is an lvalue reference and an xvalue otherwise. Given the type $\tcode{T}_i$
@@ -2481,7 +2481,7 @@ means:
 \item
 if
 \tcode{T}
-is a scalar type (\ref{basic.types}), the
+is a \deflink{scalar type}{\ref{basic.types}}, the
 object
 is initialized to the value obtained by converting the integer literal \tcode{0}
 (zero) to
@@ -2532,11 +2532,11 @@ means:
 \item
 If
 \tcode{T}
-is a (possibly cv-qualified) class type (Clause~\ref{class}),
+is a (possibly cv-qualified) \link{class type}{Clause~\ref{class}},
 constructors are considered. The applicable constructors are
 enumerated~(\ref{over.match.ctor}), and the best one for the
 \grammarterm{initializer} \tcode{()} is chosen through
-overload resolution~(\ref{over.match}). The constructor thus selected
+\link{overload resolution}{\ref{over.match}}. The constructor thus selected
 is called, with an empty argument list, to initialize the object.
 
 \item
@@ -2586,7 +2586,7 @@ means:
 \item
 if
 \tcode{T}
-is a (possibly cv-qualified) class type (Clause~\ref{class}) with
+is a (possibly cv-qualified) \link{class type}{Clause~\ref{class}} with
 either no default constructor~(\ref{class.ctor}) or a default
 constructor that is user-provided or deleted, then the object is default-initialized;
 
@@ -2664,18 +2664,18 @@ undefined except in the following cases:
 
 \begin{itemize}
 \item
-If an indeterminate value of
-unsigned narrow character type~(\ref{basic.fundamental})
+If an indeterminate value of unsigned
+\deflinkx{narrow character type}{type!narrow character}{\ref{basic.fundamental}}
 or \tcode{std::byte} type~(\ref{cstddef.syn})
 is produced by the evaluation of:
 \begin{itemize}
-\item the second or third operand of a conditional expression~(\ref{expr.cond}),
-\item the right operand of a comma expression~(\ref{expr.comma}),
+\item the second or third operand of a \link{conditional expression}{\ref{expr.cond}},
+\item the right operand of a \link{comma expression}{\ref{expr.comma}},
 \item the operand of a cast or conversion~(\ref{conv.integral},
 \ref{expr.type.conv}, \ref{expr.static.cast}, \ref{expr.cast}) to an
 unsigned narrow character type
 or \tcode{std::byte} type~(\ref{cstddef.syn}), or
-\item a discarded-value expression (Clause~\ref{expr}),
+\item a \deflink{discarded-value expression}{Clause~\ref{expr}},
 \end{itemize}
 then the result of the operation is an indeterminate value.
 
@@ -2684,7 +2684,7 @@ If an indeterminate value of
 unsigned narrow character type
 or \tcode{std::byte} type
 is produced by the evaluation of the right
-operand of a simple assignment operator~(\ref{expr.ass}) whose first operand
+operand of a simple \link{assignment operator}{\ref{expr.ass}} whose first operand
 is an lvalue of
 unsigned narrow character type
 or \tcode{std::byte} type,
@@ -2746,9 +2746,9 @@ The initialization that occurs in the \tcode{=} form of a
 \grammarterm{brace-or-equal-initializer} or
 \grammarterm{condition} (\ref{stmt.select}),
 as well as in argument passing, function return,
-throwing an exception (\ref{except.throw}),
-handling an exception (\ref{except.handle}),
-and aggregate member initialization~(\ref{dcl.init.aggr}),
+\link{throwing an exception}{\ref{except.throw}},
+\link{handling an exception}{\ref{except.handle}},
+and \link{aggregate member initialization}{\ref{dcl.init.aggr}},
 is called
 \defn{copy-initialization}.
 \begin{note} Copy-initialization may invoke a move~(\ref{class.copy}). \end{note}
@@ -2760,11 +2760,11 @@ T x(a);
 T x{a};
 \end{codeblock}
 as well as in
-\tcode{new}
-expressions~(\ref{expr.new}),
-\tcode{static_cast}
-expressions~(\ref{expr.static.cast}),
-functional notation type conversions~(\ref{expr.type.conv}),
+\link{\tcode{new}
+expressions}{\ref{expr.new}},
+\link{\tcode{static_cast}
+expressions}{\ref{expr.static.cast}},
+\link{functional notation type conversions}{\ref{expr.type.conv}},
 \grammarterm{mem-initializer}{s}~(\ref{class.base.init}), and
 the \grammarterm{braced-init-list} form of a \grammarterm{condition}
 is called
@@ -2784,7 +2784,7 @@ source type is not defined.
 \item
 If the initializer is a (non-parenthesized) \grammarterm{braced-init-list}
 or is \tcode{=} \grammarterm{braced-init-list}, the object or reference
-is list-initialized~(\ref{dcl.init.list}).
+is \link{list-initialized}{\ref{dcl.init.list}}.
 \item
 If the destination type is a reference type, see~\ref{dcl.init.ref}.
 \item
@@ -2816,7 +2816,7 @@ type is the same class as, or a derived class of, the class of the destination,
 constructors are considered.
 The applicable constructors
 are enumerated (\ref{over.match.ctor}), and the best one is chosen
-through overload resolution (\ref{over.match}).
+through \link{overload resolution}{\ref{over.match}}.
 The constructor so selected
 is called to initialize the object, with the initializer
 expression or \grammarterm{expression-list} as its argument(s).
@@ -2826,8 +2826,8 @@ ambiguous, the initialization is ill-formed.
 Otherwise (i.e., for the remaining copy-initialization cases),
 user-defined conversion sequences that can convert from the
 source type to the destination type or (when a conversion function
-is used) to a derived class thereof are enumerated as described in~\ref{over.match.copy}, and the best one is chosen through overload
-resolution (\ref{over.match}).  If the conversion cannot be done or
+is used) to a derived class thereof are enumerated as described in~\ref{over.match.copy}, and the best one is chosen through \link{overload
+resolution}{\ref{over.match}}.  If the conversion cannot be done or
 is ambiguous, the initialization is ill-formed.  The function
 selected is called with the initializer expression as its
 argument; if the function is a constructor, the call is a prvalue
@@ -2843,8 +2843,8 @@ Otherwise, if the source type
 is a (possibly cv-qualified) class type, conversion functions are
 considered.
 The applicable conversion functions are enumerated
-(\ref{over.match.conv}), and the best one is chosen through overload
-resolution (\ref{over.match}).
+(\ref{over.match.conv}), and the best one is chosen through \link{overload
+resolution}{\ref{over.match}}.
 The user-defined conversion so selected
 is called to convert the initializer expression into the
 object being initialized.
@@ -2853,7 +2853,7 @@ ambiguous, the initialization is ill-formed.
 \item
 Otherwise, the initial value of the object being initialized is
 the (possibly converted) value of the initializer expression.
-Standard conversions (Clause~\ref{conv}) will be used, if necessary,
+\link{Standard conversions}{Clause~\ref{conv}} will be used, if necessary,
 to convert the initializer expression to the cv-unqualified version of
 the destination type;
 no user-defined conversions are considered.
@@ -2883,12 +2883,12 @@ int c = b;
 
 \pnum
 An \grammarterm{initializer-clause} followed by an ellipsis is a
-pack expansion~(\ref{temp.variadic}).
+\deflink{pack expansion}{\ref{temp.variadic}}.
 
 \pnum
 If the initializer is a parenthesized \grammarterm{expression-list},
 the expressions are evaluated in the order
-specified for function calls~(\ref{expr.call}).
+specified for \link{function calls}{\ref{expr.call}}.
 
 \pnum
 An object whose initialization has completed
@@ -2897,8 +2897,8 @@ even if no constructor of the object's class
 is invoked for the initialization.
 \begin{note}
 Such an object might have been value-initialized
-or initialized by aggregate initialization~(\ref{dcl.init.aggr})
-or by an inherited constructor~(\ref{class.inhctor.init}).
+or initialized by \link{aggregate initialization}{\ref{dcl.init.aggr}}
+or by an \link{inherited constructor}{\ref{class.inhctor.init}}.
 \end{note}
 
 \pnum
@@ -2924,14 +2924,14 @@ and not the definition at namespace scope.
 \indextext{\idxcode{\{\}}!initializer list}
 
 \pnum
-An \defn{aggregate} is an array or a class (Clause~\ref{class}) with
+An \defn{aggregate} is an array or a \link{class}{Clause~\ref{class}} with
 \begin{itemize}
 \item
 no user-provided, \tcode{explicit}, or inherited constructors~(\ref{class.ctor}),
 \item
 no private or protected non-static data members (Clause~\ref{class.access}),
 \item
-no virtual functions~(\ref{class.virtual}), and
+no \link{virtual functions}{\ref{class.virtual}}, and
 \item
 no virtual, private, or protected base classes~(\ref{class.mi}).
 \end{itemize}
@@ -2959,7 +2959,7 @@ for the elements of the aggregate, in order.
 Each element is copy-initialized
 from the corresponding \grammarterm{initializer-clause}.
 If the \grammarterm{initializer-clause} is an expression and
-a narrowing conversion~(\ref{dcl.init.list}) is required
+a \deflink{narrowing conversion}{\ref{dcl.init.list}} is required
 to convert the expression, the program is ill-formed.
 \begin{note} If an \grammarterm{initializer-clause} is itself an initializer list,
 the element is list-initialized, which will result in a recursive application
@@ -3398,7 +3398,7 @@ union is a member of another aggregate.
 \indextext{initialization!character array}
 
 \pnum
-An array of narrow character type~(\ref{basic.fundamental}),
+An array of \deflinkx{narrow character type}{type!narrow character}{\ref{basic.fundamental}},
 \tcode{char16_t} array,
 \tcode{char32_t} array,
 or \tcode{wchar_t} array
@@ -3446,14 +3446,14 @@ is ill-formed since there is no space for the implied trailing
 
 \pnum
 If there are fewer initializers than there are array elements, each element not
-explicitly initialized shall be zero-initialized~(\ref{dcl.init}).
+explicitly initialized shall be \deflinkx{zero-initialized}{zero-initialization}{\ref{dcl.init}}.
 
 \rSec2[dcl.init.ref]{References}%
 \indextext{initialization!reference}
 
 \pnum
 A variable whose declared type is
-``reference to type \tcode{T}'' (\ref{dcl.ref})
+\link{``reference to type \tcode{T}''}{\ref{dcl.ref}}
 shall be initialized.
 \begin{example}
 
@@ -3481,9 +3481,9 @@ A reference cannot be changed to refer to another object after initialization.
 Assignment to a reference assigns to the object referred to by the reference (\ref{expr.ass}).
 \end{note}
 \indextext{argument passing!reference and}%
-Argument passing (\ref{expr.call})
+\link{Argument passing}{\ref{expr.call}}
 \indextext{\idxcode{return}!reference and}%
-and function value return (\ref{stmt.return}) are initializations.
+and \link{function value return}{\ref{stmt.return}} are initializations.
 
 \pnum
 The initializer can be omitted for a reference only in a parameter declaration
@@ -3524,7 +3524,7 @@ is a base class of
 \tcode{T2},
 a program that necessitates such a binding is ill-formed if
 \tcode{T1}
-is an inaccessible (Clause~\ref{class.access}) or ambiguous (\ref{class.member.lookup})
+is an \link{inaccessible}{Clause~\ref{class.access}} or ambiguous (\ref{class.member.lookup})
 base class of
 \tcode{T2}.
 
@@ -3549,18 +3549,18 @@ has a class type (i.e.,
 is a class type), where \tcode{T1} is not reference-related to \tcode{T2}, and can be converted
 to an lvalue of type ``\cvqual{cv3} \tcode{T3}'', where
 ``\cvqual{cv1} \tcode{T1}'' is reference-compatible with
-``\cvqual{cv3} \tcode{T3}''\footnote{This requires a conversion
-function~(\ref{class.conv.fct}) returning a reference type.}
+``\cvqual{cv3} \tcode{T3}''\footnote{This requires a \link{conversion
+function}{\ref{class.conv.fct}} returning a reference type.}
 (this conversion is selected by enumerating the applicable conversion
-functions (\ref{over.match.ref}) and choosing the best one through overload
-resolution (\ref{over.match})),
+functions (\ref{over.match.ref}) and choosing the best one through \link{overload
+resolution}{\ref{over.match}}),
 \end{itemize}
 then the reference is bound to the initializer expression lvalue in the
 first case and to the lvalue result of the conversion
 in the second case (or, in either case, to the appropriate base class subobject of the object).
 \begin{note}
-The usual lvalue-to-rvalue (\ref{conv.lval}), array-to-pointer
-(\ref{conv.array}), and function-to-pointer (\ref{conv.func}) standard
+The usual \link{lvalue-to-rvalue}{\ref{conv.lval}}, \link{array-to-pointer}{\ref{conv.array}},
+and \link{function-to-pointer}{\ref{conv.func}} standard
 conversions are not needed, and therefore are suppressed, when such
 direct bindings to lvalues are done.
 \end{note}
@@ -3617,7 +3617,7 @@ the result of the conversion in the second case
 is called the converted initializer.
 If the converted initializer is a prvalue,
 its type \tcode{T4} is adjusted to type ``\cvqual{cv1} \tcode{T4}''~(\ref{conv.qual})
-and the temporary materialization conversion~(\ref{conv.rval}) is applied.
+and the \link{temporary materialization conversion}{\ref{conv.rval}} is applied.
 In any case,
 the reference is bound to the resulting glvalue
 (or to an appropriate base class subobject).
@@ -3737,14 +3737,14 @@ List-initialization can be used
 \begin{itemize}
 \item as the initializer in a variable definition~(\ref{dcl.init})
 \item as the initializer in a \grammarterm{new-expression}~(\ref{expr.new})
-\item in a return statement~(\ref{stmt.return})
+\item in a \link{return statement}{\ref{stmt.return}}
 \item as a \grammarterm{for-range-initializer}~(\ref{stmt.iter})
 \item as a function argument~(\ref{expr.call})
-\item as a subscript~(\ref{expr.sub})
+\item as a \link{subscript}{\ref{expr.sub}}
 \item as an argument to a constructor invocation~(\ref{dcl.init},~\ref{expr.type.conv})
-\item as an initializer for a non-static data member~(\ref{class.mem})
+\item as an initializer for a \deflink{non-static data member}{\ref{class.mem}}
 \item in a \grammarterm{mem-initializer}~(\ref{class.base.init})
-\item on the right-hand side of an assignment (\ref{expr.ass})
+\item on the right-hand side of an \link{assignment}{\ref{expr.ass}}
 \end{itemize}
 
 \begin{example}
@@ -3764,7 +3764,7 @@ std::map<std::string,int> anim = { {"bear",4}, {"cassowary",2}, {"tiger",7} };
 A constructor is an \defn{initializer-list constructor} if its first parameter is
 of type \tcode{std::initializer_list<E>} or reference to possibly cv-qualified
 \tcode{std::initializer_list<E>} for some type \tcode{E}, and either there are no other
-parameters or else all other parameters have default arguments (\ref{dcl.fct.default}).
+parameters or else all other parameters have \link{default arguments}{\ref{dcl.fct.default}}.
 \begin{note} Initializer-list constructors are favored over other constructors in
 list-initialization~(\ref{over.match.list}). Passing an initializer list as the argument
 to the constructor template \tcode{template<class T> C(T)} of a class \tcode{C} does not
@@ -3773,8 +3773,8 @@ corresponding parameter to be a non-deduced context~(\ref{temp.deduct.call}). \e
 The template
 \tcode{std::initializer_list} is not predefined; if the header
 \tcode{<initializer_list>} is not included prior to a use of
-\tcode{std::initializer_list} --- even an implicit use in which the type is not
-named~(\ref{dcl.spec.auto}) --- the program is ill-formed.
+\tcode{std::initializer_list} --- even an implicit use in which the type is \link{not
+named}{\ref{dcl.spec.auto}} --- the program is ill-formed.
 
 \pnum
 List-initialization of an object or reference of type \tcode{T} is defined as follows:
@@ -3791,8 +3791,8 @@ direct-list-initialization).
 single element that is an appropriately-typed string literal~(\ref{dcl.init.string}),
 initialization is performed as described in that section.
 
-\item Otherwise, if \tcode{T} is an aggregate, aggregate initialization is
-performed~(\ref{dcl.init.aggr}).
+\item Otherwise, if \tcode{T} is an aggregate,
+\link{aggregate initialization}{\ref{dcl.init.aggr}} is performed.
 
 \begin{example}
 \begin{codeblock}
@@ -3962,8 +3962,9 @@ int k { };                          // initialize to 0
 
 \pnum
 Within the \grammarterm{initializer-list} of a \grammarterm{braced-init-list},
-the \grammarterm{initializer-clause}{s}, including any that result from pack
-expansions~(\ref{temp.variadic}), are evaluated in the order in which they
+the \grammarterm{initializer-clause}{s}, including any that result from
+\deflinkx{pack expansions}{pack expansion}{\ref{temp.variadic}},
+are evaluated in the order in which they
 appear. That is, every value computation and side effect associated with a
 given \grammarterm{initializer-clause} is sequenced before every value
 computation and side effect associated with any \grammarterm{initializer-clause}
@@ -3977,14 +3978,14 @@ arguments of a call. \end{note}
 \pnum
 An object of type \tcode{std::initializer_list<E>} is constructed from
 an initializer list as if
-the implementation generated and materialized~(\ref{conv.rval})
+the implementation generated and \link{materialized}{\ref{conv.rval}}
 a prvalue of type ``array of $N$ \tcode{const E}'',
 where $N$ is the number of elements in the
 initializer list. Each element of that array is copy-initialized with the
 corresponding element of the initializer list, and the
 \tcode{std::initializer_list<E>} object is constructed to refer to that array.
 \begin{note} A constructor or conversion function selected for the copy shall be
-accessible (Clause~\ref{class.access}) in the context of the initializer list.
+\link{accessible}{Clause~\ref{class.access}} in the context of the initializer list.
 \end{note}
 If a narrowing conversion is required to initialize any of the elements, the program is ill-formed. \begin{example}
 \begin{codeblock}
@@ -4004,8 +4005,8 @@ X x(std::initializer_list<double>(__a, __a+3));
 assuming that the implementation can construct an \tcode{initializer_list} object with a pair of pointers. \end{example}
 
 \pnum
-The array has the same lifetime as any other temporary
-object~(\ref{class.temporary}), except that initializing an
+The array has the same lifetime as any other \link{temporary
+object}{\ref{class.temporary}}, except that initializing an
 \tcode{initializer_list} object from the array extends the lifetime of
 the array exactly like binding a reference to a temporary.
 \begin{example}
@@ -4040,9 +4041,8 @@ The implementation is free to allocate the array in read-only memory if an expli
 
 \pnum
 A
-\indextext{narrowing conversion}%
 \indextext{conversion!narrowing}%
-\term{narrowing conversion} is an implicit conversion
+\defn{narrowing conversion} is an implicit conversion
 
 \begin{itemize}
 \item from a floating-point type to an integer type, or
diff --git a/source/derived.tex b/source/derived.tex
index 0cf8b7d..6d0d752 100644
--- a/source/derived.tex
+++ b/source/derived.tex
@@ -129,12 +129,12 @@ Here, an object of class \tcode{Derived2} will have a subobject of class
 \end{example}
 
 \pnum
-A \grammarterm{base-specifier} followed by an ellipsis is a pack
-expansion~(\ref{temp.variadic}).
+A \grammarterm{base-specifier} followed by an ellipsis is a
+\deflink{pack expansion}{\ref{temp.variadic}}.
 
 \pnum
-The order in which the base class subobjects are allocated in the most
-derived object~(\ref{intro.object}) is unspecified.
+The order in which the base class subobjects are allocated in the
+\deflink{most derived object}{\ref{intro.object}} is unspecified.
 \begin{note}
 \indextext{directed acyclic graph|see{DAG}}%
 \indextext{lattice|see{DAG, subobject}}%
@@ -192,7 +192,7 @@ class D : public A, public B, public C { @\commentellip@ };
 \begin{note}
 The order of derivation is not significant except as specified by the
 semantics of initialization by constructor~(\ref{class.base.init}),
-cleanup~(\ref{class.dtor}), and storage
+\link{cleanup}{\ref{class.dtor}}, and storage
 layout~(\ref{class.mem},~\ref{class.access.spec}).
 \end{note}
 
@@ -228,7 +228,7 @@ A base class specifier that does not contain the keyword
 class specifier that contains the keyword \tcode{virtual} specifies a
 \defnx{virtual base class}{base class!virtual}. For each distinct occurrence of a
 non-virtual base class in the class lattice of the most derived class,
-the most derived object~(\ref{intro.object}) shall contain a
+the \deflink{most derived object}{\ref{intro.object}} shall contain a
 corresponding distinct base class subobject of that type. For each
 distinct base class that is specified virtual, the most derived object
 shall contain a single base class subobject of that type.
@@ -256,7 +256,7 @@ void C::f() { A::next = B::next; }      // well-formed
 \end{codeblock}
 Without the \tcode{A::} or \tcode{B::} qualifiers, the definition of
 \tcode{C::f} above would be ill-formed because of
-ambiguity~(\ref{class.member.lookup}).
+\deflink{ambiguity}{\ref{class.member.lookup}}.
 \end{note}
 
 \pnum
@@ -320,13 +320,14 @@ by \tcode{X} and \tcode{Y}, as shown in Figure~\ref{fig:virtnonvirt}.
 
 \pnum
 Member name lookup determines the meaning of a name
-(\grammarterm{id-expression}) in a class scope~(\ref{basic.scope.class}).
+(\grammarterm{id-expression}) in a \link{class scope}{\ref{basic.scope.class}}.
 Name lookup can result in an \term{ambiguity}, in which case the
 program is ill-formed. For an \grammarterm{id-expression}, name lookup
 begins in the class scope of \tcode{this}; for a
 \grammarterm{qualified-id}, name lookup begins in the scope of the
-\grammarterm{nested-name-specifier}. Name lookup takes place before access
-control~(\ref{basic.lookup}, Clause~\ref{class.access}).
+\grammarterm{nested-name-specifier}.
+\link{Name lookup}{\ref{basic.lookup}} takes place before
+\link{access control}{Clause~\ref{class.access}}.
 
 \pnum
 The following steps define the result of name lookup for a member name
@@ -418,7 +419,7 @@ $S(x,D)$ is discarded in the first merge step.
 \pnum
 \indextext{access control!overload resolution and}%
 If the name of an overloaded function is unambiguously found,
-overload resolution~(\ref{over.match}) also takes place before access
+\link{overload resolution}{\ref{over.match}} also takes place before access
 control.
 \indextext{example!scope resolution operator}%
 \indextext{example!explicit qualification}%
@@ -584,20 +585,20 @@ called a \defnx{polymorphic class}{class!polymorphic}.
 If a virtual member function \tcode{vf} is declared in a class
 \tcode{Base} and in a class \tcode{Derived}, derived directly or
 indirectly from \tcode{Base}, a member function \tcode{vf} with the same
-name, parameter-type-list~(\ref{dcl.fct}), cv-qualification, and ref-qualifier
+name, \deflink{parameter-type-list}{\ref{dcl.fct}}, cv-qualification, and ref-qualifier
 (or absence of same) as
 \tcode{Base::vf} is declared, then \tcode{Derived::vf} is also virtual
 (whether or not it is so declared) and it \term{overrides}\footnote{A function with the same name but a different parameter list
 (Clause~\ref{over}) as a virtual function is not necessarily virtual and
 does not override. The use of the \tcode{virtual} specifier in the
 declaration of an overriding function is legal but redundant (has empty
-semantics). Access control (Clause~\ref{class.access}) is not considered in
+semantics). \link{Access control}{Clause~\ref{class.access}} is not considered in
 determining overriding.}
 \tcode{Base::vf}. For convenience we say that any virtual function
 overrides itself.
 \indextext{overrider!final}%
 A virtual member function \tcode{C::vf} of a class object \tcode{S} is a \defn{final
-overrider} unless the most derived class~(\ref{intro.object}) of which \tcode{S} is a
+overrider} unless the \deflink{most derived class}{\ref{intro.object}} of which \tcode{S} is a
 base class subobject (if any) declares or inherits another member function that overrides
 \tcode{vf}. In a derived class, if a virtual member function of a base class subobject
 has more than one final overrider the program is ill-formed.
@@ -788,7 +789,7 @@ another class.
 \pnum
 \indextext{definition!virtual function}%
 A virtual function declared in a class shall be defined, or declared
-pure~(\ref{class.abstract}) in that class, or both; no diagnostic is
+\deflink{pure}{\ref{class.abstract}} in that class, or both; no diagnostic is
 required~(\ref{basic.def.odr}).
 \indextext{friend!\tcode{virtual} and}%
 
@@ -1012,7 +1013,7 @@ pure.
 Member functions can be called from a constructor (or destructor) of an
 abstract class;
 \indextext{virtual function call!undefined pure}%
-the effect of making a virtual call~(\ref{class.virtual}) to a pure
+the effect of making a \link{virtual call}{\ref{class.virtual}} to a pure
 virtual function directly or indirectly for the object being created (or
 destroyed) from such a constructor (or destructor) is undefined.%
 \indextext{derived class|)}
diff --git a/source/diagnostics.tex b/source/diagnostics.tex
index 253c9a5..b30934e 100644
--- a/source/diagnostics.tex
+++ b/source/diagnostics.tex
@@ -567,13 +567,13 @@ is not defined.
 
 \pnum
 An expression \tcode{assert(E)}
-is a constant subexpression~(\ref{defns.const.subexpr}), if
+is a \link{constant subexpression}{\ref{defns.const.subexpr}}, if
 \begin{itemize}
 \item
 \tcode{NDEBUG} is defined at the point where \tcode{assert}
 is last defined or redefined, or
 \item
-\tcode{E} contextually converted to \tcode{bool}~(Clause~\ref{conv})
+\tcode{E} \deflinkx{contextually converted to \tcode{bool}}{conversion!contextual to bool}{Clause~\ref{conv}}
 is a constant subexpression that evaluates to the value \tcode{true}.
 \end{itemize}
 
@@ -769,7 +769,7 @@ the operating system or other low-level application program interfaces.
 
 \pnum
 Components described in this subclause shall not change the value of
-\tcode{errno}~(\ref{errno}).
+\link{\tcode{errno}}{\ref{errno}}.
 Implementations should leave the error states provided by other
 libraries unchanged.
 
@@ -1077,7 +1077,7 @@ bool operator<(const error_category& rhs) const noexcept;
 \pnum
 \returns \tcode{less<const error_category*>()(this, \&rhs)}.
 
-\begin{note} \tcode{less}~(\ref{comparisons}) provides a total ordering for pointers. \end{note}
+\begin{note} \link{\tcode{less}}{\ref{comparisons.less}} provides a total ordering for pointers. \end{note}
 \end{itemdescr}
 
 \rSec3[syserr.errcat.derived]{Program defined classes derived from \tcode{error_category}}
@@ -1383,7 +1383,7 @@ As if by: \tcode{os << ec.category().name() << ':' << ec.value();}
 \pnum
 The class \tcode{error_condition} describes an object used to hold values identifying
 error conditions. \begin{note} \tcode{error_condition} values are portable abstractions,
-while \tcode{error_code} values~(\ref{syserr.errcode}) are implementation specific. \end{note}
+while \link{\tcode{error_code}}{\ref{syserr.errcode}} values are implementation specific. \end{note}
 
 \indexlibrary{\idxcode{error_condition}}%
 \begin{codeblock}
@@ -1665,7 +1665,7 @@ application program interfaces.
 \pnum
 \begin{note}
 If an error represents an out-of-memory condition, implementations are
-encouraged to throw an exception object of type \tcode{bad_alloc}~(\ref{bad.alloc}) rather
+encouraged to throw an exception object of type \link{\tcode{bad_alloc}}{\ref{bad.alloc}} rather
 than \tcode{system_error}.
 \end{note}
 \indexlibrary{\idxcode{system_error}}%
diff --git a/source/exceptions.tex b/source/exceptions.tex
index 969cd93..607261f 100644
--- a/source/exceptions.tex
+++ b/source/exceptions.tex
@@ -181,7 +181,7 @@ try : i(f(ii)), d(id) {
 
 \pnum
 In this section, ``before'' and ``after'' refer to the
-``sequenced before'' relation~(\ref{intro.execution}).
+\deflinkx{``sequenced before''}{sequenced before}{\ref{intro.execution}} relation.
 
 \rSec1[except.throw]{Throwing an exception}%
 \indextext{exception handling!throwing}%
@@ -192,9 +192,9 @@ Throwing an exception transfers control to a handler.
 \begin{note}
 An exception can be thrown from one of the following contexts:
 \grammarterm{throw-expression}{s}~(\ref{expr.throw}),
-allocation functions~(\ref{basic.stc.dynamic.allocation}),
-\tcode{dynamic_cast}~(\ref{expr.dynamic.cast}),
-\tcode{typeid}~(\ref{expr.typeid}),
+\link{allocation functions}{\ref{basic.stc.dynamic.allocation}},
+\link{\tcode{dynamic_cast}}{\ref{expr.dynamic.cast}},
+\link{\tcode{typeid}}{\ref{expr.typeid}},
 \grammarterm{new-expression}{s}~(\ref{expr.new}), and standard library
 functions~(\ref{structure.specifications}).
 \end{note}
@@ -283,7 +283,7 @@ immediately after the destruction of the object (if any)
 declared in the \grammarterm{exception-declaration} in the handler;
 
 \item
-when an object of type \tcode{std::exception_ptr}~(\ref{propagation})
+when an object of type \liblinkx{\tcode{std::exception_ptr}}{\idxcode{exception_ptr}}{\ref{propagation}}
 that refers to the exception object is destroyed,
 before the destructor of \tcode{std::exception_ptr} returns.
 \end{itemize}
@@ -291,7 +291,7 @@ before the destructor of \tcode{std::exception_ptr} returns.
 Among all points of potential destruction for the exception object,
 there is an unspecified last one
 where the exception object is destroyed.
-All other points happen before that last one~(\ref{intro.races}).
+All other points \deflinkx{happen before}{happens before}{\ref{intro.races}} that last one.
 \begin{note}
 No other thread synchronization is implied in exception handling.
 \end{note}
@@ -309,14 +309,14 @@ When the thrown object is a class object, the constructor selected for
 the copy-initialization as well as the constructor selected for
 a copy-initialization considering the thrown object as an lvalue
 shall be non-deleted and accessible, even if the copy/move operation is
-elided~(\ref{class.copy}).
-The destructor is potentially invoked~(\ref{class.dtor}).
+\link{elided}{\ref{class.copy.elision}}.
+The destructor is \deflink{potentially invoked}{\ref{class.dtor}}.
 
 \pnum
 \indextext{exception handling!rethrow}%
 \indextext{rethrow|see{exception handling, rethrow}}%
 An exception is considered caught when a handler for that exception
-becomes active~(\ref{except.handle}).
+becomes \deflinkx{active}{exception handling!handler!active}{\ref{except.handle}}.
 \begin{note}
 An exception can have active handlers and still be considered uncaught if
 it is rethrown.
@@ -326,9 +326,9 @@ it is rethrown.
 \indextext{exception handling!terminate called@\tcode{terminate} called}%
 \indextext{\idxcode{terminate}!called}%
 If the exception handling mechanism
-handling an uncaught exception~(\ref{except.uncaught})
+handling an \link{uncaught exception}{\ref{except.uncaught}}
 directly invokes a function that exits via an
-exception, \tcode{std::terminate} is called~(\ref{except.terminate}).
+exception, \link{\tcode{std::terminate}}{\ref{except.terminate}} is called.
 \begin{example}
 \begin{codeblock}
 struct C {
@@ -343,7 +343,7 @@ struct C {
 int main() {
   try {
     throw C();      // calls \tcode{std::terminate()} if construction of the handler's
-                    // \grammarterm{exception-declaration} object is not elided~(\ref{class.copy})
+                    // \grammarterm{exception-declaration} object is not \link{elided}{\ref{class.copy.elision}}
   } catch(C) { }
 }
 \end{codeblock}
@@ -370,7 +370,7 @@ The destructor is invoked for each automatic object of class type constructed,
 but not yet destroyed,
 since the try block was entered.
 If an exception is thrown during the destruction of temporaries or
-local variables for a \tcode{return} statement~(\ref{stmt.return}),
+local variables for a \link{\tcode{return} statement}{\ref{stmt.return}},
 the destructor for the returned object (if any) is also invoked.
 The objects are destroyed in the reverse order of the completion
 of their construction.
@@ -428,7 +428,7 @@ Such destruction is sequenced before entering a handler of the
 \pnum
 \begin{note}
 If the object was allocated by a \grammarterm{new-expression}~(\ref{expr.new}),
-the matching deallocation function~(\ref{basic.stc.dynamic.deallocation}),
+the matching \link{deallocation function}{\ref{basic.stc.dynamic.deallocation}},
 if any, is called to free the storage occupied by the object.
 \end{note}
 
@@ -502,12 +502,12 @@ that can be converted to \tcode{T} by one or more of
 \begin{itemize}
 
 \item%
-a standard pointer conversion~(\ref{conv.ptr}) not involving conversions
+a standard \link{pointer conversion}{\ref{conv.ptr}} not involving conversions
 to pointers to private or protected or ambiguous classes
 \item%
-a function pointer conversion~(\ref{conv.fctptr})
+a \link{function pointer conversion}{\ref{conv.fctptr}}
 \item%
-a qualification conversion~(\ref{conv.qual}), or
+a \link{qualification conversion}{\ref{conv.qual}}, or
 
 \end{itemize}
 
@@ -628,7 +628,7 @@ Exceptions thrown in destructors of objects with static storage duration or in
 constructors of namespace-scope objects with static storage duration are not caught by a
 \grammarterm{function-try-block}
 on
-the \tcode{main} function~(\ref{basic.start.main}).
+the \link{\tcode{main} function}{\ref{basic.start.main}}.
 Exceptions thrown in destructors of objects with thread storage duration or in constructors of namespace-scope objects with thread storage duration are not caught by a
 \grammarterm{function-try-block}
 on the initial function of the thread.
@@ -660,9 +660,11 @@ of type \tcode{E}, as follows:
 \begin{itemize}
 \item
 if \tcode{T} is a base class of \tcode{E}, the variable is
-copy-initialized~(\ref{dcl.init}) from the corresponding base class subobject
+\deflinkx{copy-initialized}{copy-initialization}{\ref{dcl.init}}
+from the corresponding base class subobject
 of the exception object;
-\item otherwise, the variable is copy-initialized~(\ref{dcl.init})
+\item otherwise, the variable is
+\deflinkx{copy-initialized}{copy-initialization}{\ref{dcl.init}}
 from the exception object.
 \end{itemize}
 
@@ -697,7 +699,7 @@ otherwise it has a
 The exception specification is either defined implicitly,
 or defined explicitly
 by using a \grammarterm{noexcept-specifier}
-as a suffix of a function declarator~(\ref{dcl.fct}).
+as a suffix of a \link{function declarator}{\ref{dcl.fct}}.
 
 \begin{bnf}
 \nontermdef{noexcept-specifier}\br
@@ -709,20 +711,20 @@ as a suffix of a function declarator~(\ref{dcl.fct}).
 \pnum
 \indextext{exception specification!noexcept!constant expression and}%
 In a \grammarterm{noexcept-specifier}, the \grammarterm{constant-expression},
-if supplied, shall be a contextually converted constant expression
-of type \tcode{bool}~(\ref{expr.const});
+if supplied, shall be a
+\deflink{contextually converted constant expression of type \tcode{bool}}{\ref{expr.const}};
 that constant expression is the exception specification of
 the function type in which the \grammarterm{noexcept-specifier} appears.
 A \tcode{(} token that follows \tcode{noexcept} is part of the
 \grammarterm{noexcept-specifier} and does not commence an
-initializer~(\ref{dcl.init}).
+\link{initializer}{\ref{dcl.init}}.
 The \grammarterm{noexcept-specifier} \tcode{noexcept}
 without a \grammarterm{constant-expression}
 is
 equivalent to the \grammarterm{noexcept-specifier}
 \tcode{noexcept(true)}.
 The \grammarterm{noexcept-specifier} \tcode{throw()}
-is deprecated~(\ref{depr.except.spec}), and
+is \link{deprecated}{\ref{depr.except.spec}}, and
 equivalent to the \grammarterm{noexcept-specifier}
 \tcode{noexcept(true)}.
 
@@ -736,7 +738,7 @@ in which cases the exception specfication
 is as specified below
 and no other declaration for that function
 shall have a \grammarterm{noexcept-specifier}.
-In an explicit instantiation~(\ref{temp.explicit})
+In an \link{explicit instantiation}{\ref{temp.explicit}}
 a \grammarterm{noexcept-specifier} may be specified,
 but is not required.
 If a \grammarterm{noexcept-specifier} is specified
@@ -787,7 +789,7 @@ Whenever an exception is thrown
 and the search for a handler~(\ref{except.handle})
 encounters the outermost block of a function with a
 non-throwing exception specification,
-the function \tcode{std::terminate()} is called~(\ref{except.terminate}).
+the function \link{\tcode{std::terminate()}}{\ref{except.terminate}} is called.
 \begin{note}
 An implementation shall not reject an expression merely because, when
 executed, it throws or might
@@ -815,7 +817,7 @@ An expression \tcode{e} is
 
 \begin{itemize}
 \item
-\tcode{e} is a function call (\ref{expr.call})
+\tcode{e} is a \link{function call}{\ref{expr.call}}
 whose \grammarterm{postfix-expression}
 has a function type,
 or a pointer-to-function type,
@@ -826,15 +828,15 @@ or
 (such as an overloaded operator,
 an allocation function in a \grammarterm{new-expression},
 a constructor for a function argument,
-or a destructor if \tcode{e} is a full-expression~(\ref{intro.execution}))
+or a destructor if \tcode{e} is a \deflink{full-expression}{\ref{intro.execution}})
 that is potentially-throwing,
 or
 \item
 \tcode{e} is a \grammarterm{throw-expression}~(\ref{expr.throw}),
 or
 \item
-\tcode{e} is a \tcode{dynamic_cast} expression that casts to a reference type and
-requires a runtime check~(\ref{expr.dynamic.cast}),
+\tcode{e} is a \link{\tcode{dynamic_cast}}{\ref{expr.dynamic.cast}} expression that casts to a reference type and
+requires a runtime check,
 or
 \item
 \tcode{e} is a \tcode{typeid} expression applied to a
@@ -843,7 +845,7 @@ applied to a pointer to a
 polymorphic class type~(\ref{expr.typeid}),
 or
 \item
-any of the immediate subexpressions~(\ref{intro.execution})
+any of the \deflinkx{immediate subexpressions}{immediate subexpression}{\ref{intro.execution}}
 of \tcode{e} is potentially-throwing.
 \end{itemize}
 
@@ -895,7 +897,7 @@ the invocation of any assignment operator
 in the implicit definition is potentially-throwing.
 
 \pnum
-A deallocation function~(\ref{basic.stc.dynamic.deallocation})
+A \link{deallocation function}{\ref{basic.stc.dynamic.deallocation}}
 with no explicit \grammarterm{noexcept-specifier}
 has a non-throwing exception specification.
 
@@ -939,7 +941,7 @@ An exception specification is considered to be \defnx{needed}{needed!exception s
 \item in an expression, the function is the unique lookup result or the selected
 member of a set of overloaded functions~(\ref{basic.lookup}, \ref{over.match}, \ref{over.over});
 
-\item the function is odr-used~(\ref{basic.def.odr}) or, if it appears in an
+\item the function is \link{odr-used}{\ref{basic.def.odr}} or, if it appears in an
 unevaluated operand, would be odr-used if the expression were
 potentially-evaluated;
 
@@ -969,12 +971,12 @@ needed.
 \rSec1[except.special]{Special functions}
 
 \pnum
-The function \tcode{std::terminate()}~(\ref{except.terminate})
+The function \link{\tcode{std::terminate()}}{\ref{except.terminate}}
 is used by the exception
 handling mechanism for coping with errors related to the exception handling
 mechanism itself. The function
-\tcode{std::current_exception()}~(\ref{propagation}) and the class
-\tcode{std::nested_exception}~(\ref{except.nested}) can be used by a program to
+\link{\tcode{std::current_exception()}}{\ref{propagation}} and the class
+\link{\tcode{std::nested_exception}}{\ref{except.nested}} can be used by a program to
 capture the currently handled exception.
 
 \rSec2[except.terminate]{The \tcode{std::terminate()} function}
@@ -997,12 +999,12 @@ via an exception, or
 \item%
 when the exception handling mechanism cannot find a handler for a thrown exception~(\ref{except.handle}), or
 
-\item when the search for a handler~(\ref{except.handle}) encounters the
+\item when the search for a \link{handler}{\ref{except.handle}} encounters the
 outermost block of a function
-with a non-throwing exception specification~(\ref{except.spec}), or
+with a non-throwing \link{exception specification}{\ref{except.spec}}, or
 
 \item%
-when the destruction of an object during stack unwinding~(\ref{except.ctor})
+when the destruction of an object during \deflink{stack unwinding}{\ref{except.ctor}}
 terminates by throwing an exception, or
 
 \item%
@@ -1056,17 +1058,17 @@ fails to meet a postcondition.
 \pnum
 \indextext{\idxcode{terminate}}%
 In such cases,
-\tcode{std::terminate()}
-is called~(\ref{exception.terminate}).
+\link{\tcode{std::terminate()}
+is called}{\ref{exception.terminate}}.
 In the situation where no matching handler is found, it is
 \impldef{stack unwinding before call to \tcode{std::terminate()}} whether or not the
 stack is unwound
 before
 \tcode{std::terminate()}
 is called.
-In the situation where the search for a handler~(\ref{except.handle}) encounters the
+In the situation where the search for a \link{handler}{\ref{except.handle}} encounters the
 outermost block of a function
-with a non-throwing exception specification~(\ref{except.spec}), it is
+with a non-throwing \link{exception specification}{\ref{except.spec}}, it is
 \impldef{whether stack is unwound before calling \tcode{std::ter\-mi\-nate()}
 when a \tcode{noexcept} specification
 is violated}
@@ -1085,12 +1087,12 @@ will eventually cause a call to
 
 \pnum
 An exception is considered uncaught
-after completing the initialization of the exception object~(\ref{except.throw})
+after completing the initialization of the \deflinkx{exception object}{exception handling!exception object}{\ref{except.throw}}
 until completing the activation of a handler for the exception~(\ref{except.handle}).
 This includes stack unwinding.
 If an exception is rethrown~(\ref{expr.throw}, \ref{propagation}),
 it is considered uncaught from the point of rethrow
 until the rethrown exception is caught.
-The function \tcode{std::uncaught_exceptions()}~(\ref{uncaught.exceptions})
+The function \link{\tcode{std::uncaught_exceptions()}}{\ref{uncaught.exceptions}}
 returns the number of uncaught exceptions in the current thread.%
 \indextext{exception handling|)}
diff --git a/source/expressions.tex b/source/expressions.tex
index 1df89d7..9b4087e 100644
--- a/source/expressions.tex
+++ b/source/expressions.tex
@@ -28,14 +28,14 @@ effects.
 \indextext{operator!overloaded}%
 \begin{note}
 Operators can be overloaded, that is, given meaning when applied to
-expressions of class type~(Clause \ref{class}) or enumeration
-type~(\ref{dcl.enum}). Uses of overloaded operators are transformed into
+expressions of \link{class}{Clause \ref{class}} type or
+\link{enumeration}{\ref{dcl.enum}} type. Uses of overloaded operators are transformed into
 function calls as described in~\ref{over.oper}. Overloaded operators
 obey the rules for syntax and evaluation order specified in Clause~\ref{expr},
 but the requirements of operand type and value category are replaced
 by the rules for function call. Relations between operators, such as
-\tcode{++a} meaning \tcode{a+=1}, are not guaranteed for overloaded
-operators~(\ref{over.oper}).
+\tcode{++a} meaning \tcode{a+=1}, are not guaranteed for \link{overloaded
+operators}{\ref{over.oper}}.
 \end{note}
 
 \pnum
@@ -136,8 +136,8 @@ An unevaluated operand is considered a full-expression~(\ref{intro.execution}).
 \pnum
 Whenever a glvalue expression appears as an operand of an operator that
 expects a prvalue for that operand, the
-lvalue-to-rvalue~(\ref{conv.lval}), array-to-pointer~(\ref{conv.array}),
-or function-to-pointer~(\ref{conv.func}) standard conversions are
+\link{lvalue-to-rvalue}{\ref{conv.lval}}, \link{array-to-pointer}{\ref{conv.array}},
+or \link{function-to-pointer}{\ref{conv.func}} standard conversions are
 applied to convert the expression to a prvalue.
 \begin{note}
 Because cv-qualifiers are removed from the type of an expression of
@@ -149,7 +149,7 @@ a prvalue expression of type \tcode{int} is required.
 \pnum
 Whenever a prvalue expression appears as an operand of an operator that
 expects a glvalue for that operand, the
-temporary materialization conversion~(\ref{conv.rval}) is
+\link{temporary materialization conversion}{\ref{conv.rval}} is
 applied to convert the expression to an xvalue.
 
 \pnum
@@ -161,7 +161,7 @@ This pattern is called the \term{usual arithmetic conversions},
 which are defined as follows:
 
 \begin{itemize}
-\item If either operand is of scoped enumeration type~(\ref{dcl.enum}), no conversions
+\item If either operand is of scoped \link{enumeration type}{\ref{dcl.enum}}, no conversions
 are performed; if the other operand does not have the same type, the expression is
 ill-formed.
 
@@ -174,7 +174,7 @@ converted to \tcode{double}.
 \item Otherwise, if either operand is \tcode{float}, the other shall be
 converted to \tcode{float}.
 
-\item Otherwise, the integral promotions~(\ref{conv.prom}) shall be
+\item Otherwise, the \link{integral promotions}{\ref{conv.prom}} shall be
 performed on both operands.\footnote{As a consequence, operands of type \tcode{bool}, \tcode{char16_t},
 \tcode{char32_t}, \tcode{wchar_t}, or an enumerated type are converted
 to some integral type.}
@@ -209,9 +209,9 @@ integer type.
 \pnum
 In some contexts, an expression only appears for its side effects. Such an
 expression is called a \defn{discarded-value expression}.
-The array-to-pointer~(\ref{conv.array})
-and function-to-pointer~(\ref{conv.func}) standard conversions are not
-applied. The lvalue-to-rvalue conversion~(\ref{conv.lval}) is applied
+The \link{array-to-pointer}{\ref{conv.array}}
+and \link{function-to-pointer}{\ref{conv.func}} standard conversions are not
+applied. The \link{lvalue-to-rvalue conversion}{\ref{conv.lval}} is applied
 if and only if
 the expression is a glvalue of volatile-qualified type and it is one of the
 following:
@@ -220,13 +220,13 @@ following:
 \item \tcode{(} \grammarterm{expression} \tcode{)}, where
   \grammarterm{expression} is one of these expressions,
 \item \grammarterm{id-expression}~(\ref{expr.prim.id}),
-\item subscripting~(\ref{expr.sub}),
-\item class member access~(\ref{expr.ref}),
-\item indirection~(\ref{expr.unary.op}),
-\item pointer-to-member operation~(\ref{expr.mptr.oper}),
-\item conditional expression~(\ref{expr.cond}) where both the second and the
+\item \link{subscripting}{\ref{expr.sub}},
+\item \link{class member access}{\ref{expr.ref}},
+\item \link{indirection}{\ref{expr.unary.op}},
+\item \link{pointer-to-member operation}{\ref{expr.mptr.oper}},
+\item \link{conditional expression}{\ref{expr.cond}} where both the second and the
       third operands are one of these expressions, or
-\item comma expression~(\ref{expr.comma}) where the right operand is one of
+\item \link{comma expression}{\ref{expr.comma}} where the right operand is one of
       these expressions.
 \end{itemize}
 
@@ -234,7 +234,7 @@ following:
 above covers only operators with built-in meaning.
 \end{note}
 If the expression is a prvalue after this optional conversion,
-the temporary materialization conversion~(\ref{conv.rval}) is applied.
+the \link{temporary materialization conversion}{\ref{conv.rval}} is applied.
 \begin{note}
 If the expression is an lvalue of
 class type, it must have a volatile copy constructor to initialize the
@@ -253,7 +253,7 @@ and~\ref{expr.ass}.}
 \pnum
 The \defnx{cv-combined type}{type!cv-combined} of two types \tcode{T1} and \tcode{T2}
 is a type \tcode{T3}
-similar to \tcode{T1} whose cv-qualification signature~(\ref{conv.qual}) is:
+similar to \tcode{T1} whose \deflink{cv-qualification signature}{\ref{conv.qual}} is:
 \begin{itemize}
 \item
 for every $i > 0$, $cv^3_i$ is the union of
@@ -300,20 +300,20 @@ other type is ``pointer to function'', where the function types are otherwise th
 
 \item
 if \tcode{T1} is ``pointer to \cvqual{cv1} \tcode{C1}'' and \tcode{T2} is ``pointer to
-\cvqual{cv2} \tcode{C2}'', where \tcode{C1} is reference-related to \tcode{C2} or \tcode{C2} is
-reference-related to \tcode{C1}~(\ref{dcl.init.ref}), the cv-combined type
+\cvqual{cv2} \tcode{C2}'', where \tcode{C1} is \deflink{reference-related}{\ref{dcl.init.ref}} to \tcode{C2} or \tcode{C2} is
+reference-related to \tcode{C1}, the cv-combined type
 of \tcode{T1} and \tcode{T2} or the cv-combined type of \tcode{T2} and \tcode{T1},
 respectively;
 
 \item
 if \tcode{T1} is ``pointer to member of \tcode{C1} of type \cvqual{cv1} \tcode{U1}'' and \tcode{T2} is
 ``pointer to member of \tcode{C2} of type \cvqual{cv2} \tcode{U2}'' where \tcode{C1} is
-reference-related to \tcode{C2} or \tcode{C2} is reference-related to
-\tcode{C1}~(\ref{dcl.init.ref}), the cv-combined type of \tcode{T2} and \tcode{T1} or the cv-combined type
+reference-related to \tcode{C2} or \tcode{C2} is \deflink{reference-related}{\ref{dcl.init.ref}} to
+\tcode{C1}, the cv-combined type of \tcode{T2} and \tcode{T1} or the cv-combined type
 of \tcode{T1} and \tcode{T2}, respectively;
 
 \item
-if \tcode{T1} and \tcode{T2} are similar types~(\ref{conv.qual}), the cv-combined type of \tcode{T1} and
+if \tcode{T1} and \tcode{T2} are \deflink{similar types}{\ref{conv.qual}}, the cv-combined type of \tcode{T1} and
 \tcode{T2};
 
 \item
@@ -355,15 +355,15 @@ A
 \indextext{constant}%
 \grammarterm{literal}
 is a primary expression.
-Its type depends on its form~(\ref{lex.literal}).
+Its type depends on its \link{form}{\ref{lex.literal}}.
 A string literal is an lvalue; all other literals are prvalues.
 
 \rSec2[expr.prim.this]{This}
 
 \pnum
 \indextext{\idxcode{this}}%
-The keyword \tcode{this} names a pointer to the object for which a non-static member
-function~(\ref{class.this}) is invoked or a non-static data member's
+The keyword \link{\tcode{this}}{\ref{class.this}} names a pointer to the object for which a non-static member
+function is invoked or a non-static data member's
 initializer~(\ref{class.mem}) is evaluated.
 
 \pnum
@@ -378,7 +378,7 @@ are defined within a static member function as they are within a non-static
 member function). \begin{note} This is because declaration matching does not
 occur until the complete declarator is known. \end{note} Unlike the object
 expression in other contexts, \tcode{*this} is not required to be of complete
-type for purposes of class member access~(\ref{expr.ref}) outside the member
+type for purposes of \link{class member access}{\ref{expr.ref}} outside the member
 function body. \begin{note} Only class members declared prior to the declaration
 are visible. \end{note}
 \begin{example}
@@ -393,10 +393,10 @@ template auto A::f(int t) -> decltype(t + g());
 \end{example}
 
 \pnum
-Otherwise, if a \grammarterm{member-declarator} declares a non-static data
-member~(\ref{class.mem}) of a class \tcode{X}, the expression \tcode{this} is
+Otherwise, if a \grammarterm{member-declarator} declares a non-static \link{data
+member}{\ref{class.mem}} of a class \tcode{X}, the expression \tcode{this} is
 a prvalue of type ``pointer to \tcode{X}'' within the
-optional default member initializer~(\ref{class.mem}). It shall not appear elsewhere
+optional \deflink{default member initializer}{\ref{class.mem}}. It shall not appear elsewhere
 in the \grammarterm{member-declarator}.
 
 \pnum
@@ -442,8 +442,8 @@ meaning, except as otherwise indicated.
 An \grammarterm{id-expression} is a restricted form of a
 \grammarterm{primary-expression}.
 \begin{note}
-An \grammarterm{id-expression} can appear after \tcode{.} and \tcode{->}
-operators~(\ref{expr.ref}).
+An \grammarterm{id-expression} can appear after
+\link{\tcode{.} and \tcode{->} operators}{\ref{expr.ref}}.
 \end{note}
 
 \pnum
@@ -451,7 +451,7 @@ An \grammarterm{id-expression} that denotes a non-static data member or
 non-static member function of a class can only be used:
 
 \begin{itemize}
-\item as part of a class member access~(\ref{expr.ref}) in which the
+\item as part of a \link{class member access}{\ref{expr.ref}} in which the
 object expression
 refers to the member's class\footnote{This also applies when the object expression
 is an implicit \tcode{(*this)}~(\ref{class.mfct.non-static}).} or a class derived from
@@ -538,7 +538,7 @@ type.
 A \grammarterm{nested-name-specifier} that denotes a class, optionally
 followed by the keyword \tcode{template}~(\ref{temp.names}), and then
 followed by the name of a member of either that class~(\ref{class.mem})
-or one of its base classes (Clause~\ref{class.derived}), is a
+or one of its \link{base classes}{Clause~\ref{class.derived}}, is a
 \indextext{id!qualified}%
 \grammarterm{qualified-id};~\ref{class.qual} describes name lookup for
 class members that appear in \grammarterm{qualified-id}{s}. The result is the
@@ -552,7 +552,7 @@ point in its potential scope~(\ref{basic.scope.class}).
 Where
 \grammarterm{class-name} \tcode{::\tilde}~\grammarterm{class-name} is used,
 the two \grammarterm{class-name}{s} shall refer to the same class; this
-notation names the destructor~(\ref{class.dtor}).
+notation names the \link{destructor}{\ref{class.dtor}}.
 The form \tcode{\tilde}~\grammarterm{decltype-specifier} also denotes the destructor,
 but it shall not be used as the \grammarterm{unqualified-id} in a \grammarterm{qualified-id}.
 \begin{note}
@@ -575,7 +575,7 @@ is an lvalue if the member is a function or a variable and a prvalue otherwise.
 
 \pnum
 A \grammarterm{nested-name-specifier} that denotes an
-enumeration~(\ref{dcl.enum}), followed by the name of an
+\link{enumeration}{\ref{dcl.enum}}, followed by the name of an
 enumerator of that enumeration, is a \grammarterm{qualified-id}
 that refers to the enumerator. The result is the enumerator. The type
 of the result is the type of the enumeration. The result is a prvalue.
@@ -623,8 +623,8 @@ void abssort(float* x, unsigned N) {
 \pnum
 A \grammarterm{lambda-expression} is a prvalue
 whose result object is called the \defn{closure object}. A
-\grammarterm{lambda-expression} shall not appear in an unevaluated operand
-(Clause~\ref{expr}), in a \grammarterm{template-argument},
+\grammarterm{lambda-expression} shall not appear in an
+\deflink{unevaluated operand}{Clause~\ref{expr}}, in a \grammarterm{template-argument},
 in an \grammarterm{alias-declaration},
 in a typedef declaration, or in the declaration of a function or function
 template outside its function body and default arguments.
@@ -632,8 +632,8 @@ template outside its function body and default arguments.
 The intention is to prevent lambdas from appearing in a signature.
 \end{note}
 \begin{note}
-A closure object behaves like a function
-object~(\ref{function.objects}).\end{note}
+A closure object behaves like a \link{function
+object}{\ref{function.objects}}.\end{note}
 
 \pnum
 In the \grammarterm{decl-specifier-seq} of the \grammarterm{lambda-declarator},
@@ -679,12 +679,12 @@ other than by changing:
 \begin{itemize}
 \item the size and/or alignment of the closure type,
 
-\item whether the closure type is trivially copyable (Clause~\ref{class}),
+\item whether the closure type is \deflinkx{trivially copyable}{trivially copyable class}{Clause~\ref{class}},
 
-\item whether the closure type is a standard-layout class (Clause~\ref{class}),
+\item whether the closure type is a \deflink{standard-layout class}{Clause~\ref{class}},
 or
 
-\item whether the closure type is a POD class (Clause~\ref{class}).
+\item whether the closure type is a \deflink{POD class}{Clause~\ref{class}}.
 \end{itemize}
 
 An implementation shall not add members of rvalue reference type to the closure
@@ -692,12 +692,12 @@ type.
 
 \pnum
 The closure type for a non-generic \grammarterm{lambda-expression} has a public
-inline function call operator~(\ref{over.call}) whose parameters and return type
+inline \link{function call operator}{\ref{over.call}} whose parameters and return type
 are described by the \grammarterm{lambda-expression}'s
 \grammarterm{parameter-declaration-clause} and \grammarterm{trailing-return-type}
 respectively.
 For a generic lambda, the closure type has a public inline function call
-operator member template~(\ref{temp.mem}) whose
+operator \link{member template}{\ref{temp.mem}} whose
 \grammarterm{template-parameter-list} consists of one invented type
 \grammarterm{template-parameter} for each occurrence of \tcode{auto} in the
 lambda's \grammarterm{parameter-declaration-clause}, in order of appearance.
@@ -744,7 +744,7 @@ The function call operator or any given operator template specialization
 is a constexpr function if either
 the corresponding \grammarterm{lambda-expression}{'s}
 \grammarterm{parameter-declaration-clause} is followed by \tcode{constexpr}, or
-it satisfies the requirements for a constexpr function~(\ref{dcl.constexpr}).
+it satisfies the requirements for a \link{constexpr}{\ref{dcl.constexpr}} function.
 \begin{note} Names referenced in
 the \grammarterm{lambda-declarator} are looked up in the context in which the
 \grammarterm{lambda-expression} appears. \end{note}
@@ -793,7 +793,7 @@ static_assert(add(one)(one)() == monoid(2)()); // OK
 The closure type for a non-generic \grammarterm{lambda-expression} with no
 \grammarterm{lambda-capture}
 has a conversion function to pointer to
-function with \Cpp{} language linkage~(\ref{dcl.link}) having
+function with \Cpp{} language \link{linkage}{\ref{dcl.link}} having
 the same parameter and return types as the closure type's function call operator.
 The conversion is to ``pointer to \tcode{noexcept} function''
 if the function call operator
@@ -885,8 +885,8 @@ GL_int(3);                // OK: same as \tcode{GL(3)}
 
 \pnum
 The conversion function or conversion function template is public,
-constexpr, non-virtual, non-explicit, const, and has a non-throwing exception
-specification~(\ref{except.spec}).
+constexpr, non-virtual, non-explicit, const, and has a non-throwing \link{exception
+specification}{\ref{except.spec}}.
 \begin{example}
 \begin{codeblock}
 auto Fwd = [](int (*fp)(int), auto a) { return fp(a); };
@@ -903,8 +903,8 @@ static_assert(Fwd(NC,3) == 3); // ill-formed
 \pnum
 The \grammarterm{lambda-expression}'s \grammarterm{compound-statement} yields the
 \grammarterm{function-body}~(\ref{dcl.fct.def}) of the function call operator, but for
-purposes of name lookup~(\ref{basic.lookup}), determining the type and value of
-\tcode{this}~(\ref{class.this}) and transforming \grammarterm{id-expression}{s}
+purposes of \link{name lookup}{\ref{basic.lookup}}, determining the type and value of
+\link{\tcode{this}}{\ref{class.this}} and transforming \grammarterm{id-expression}{s}
 referring to non-static class members into class member access expressions using
 \tcode{(*this)}~(\ref{class.mfct.non-static}), the \grammarterm{compound-statement} is
 considered in the context of the \grammarterm{lambda-expression}. \begin{example}
@@ -1019,8 +1019,8 @@ void S2::f(int i) {
 \end{example}
 
 \pnum
-A \grammarterm{lambda-expression} whose smallest enclosing scope is a block
-scope~(\ref{basic.scope.block}) is a \defn{local lambda expression}; any other
+A \grammarterm{lambda-expression} whose smallest enclosing scope is a \link{block
+scope}{\ref{basic.scope.block}} is a \defn{local lambda expression}; any other
 \grammarterm{lambda-expression} shall not have a \grammarterm{capture-default} or
 \grammarterm{simple-capture} in its
 \grammarterm{lambda-introducer}. The \defn{reaching scope} of a local lambda expression
@@ -1030,7 +1030,7 @@ its parameters. \begin{note} This reaching scope includes any intervening
 
 \pnum
 The \grammarterm{identifier} in a \grammarterm{simple-capture} is looked up using the
-usual rules for unqualified name lookup~(\ref{basic.lookup.unqual}); each such lookup
+usual rules for \link{unqualified name lookup}{\ref{basic.lookup.unqual}}; each such lookup
 shall find an entity.  An entity that is designated by a
 \grammarterm{simple-capture}
 is said to be \defn{explicitly captured}, and shall be \tcode{*this}
@@ -1094,11 +1094,11 @@ non-static data member), is said to \defnx{implicitly capture}{capture!implicit}
 the entity (i.e.,
 \tcode{*this} or a variable) if the \grammarterm{compound-statement}:
 \begin{itemize}
-\item odr-uses~(\ref{basic.def.odr}) the entity (in the case of a variable),
-\item odr-uses~(\ref{basic.def.odr}) \tcode{this}
+\item \link{odr-uses}{\ref{basic.def.odr}} the entity (in the case of a variable),
+\item \link{odr-uses}{\ref{basic.def.odr}} \tcode{this}
 (in the case of the object designated by \tcode{*this}), or
-\item names the entity in a potentially-evaluated
-expression~(\ref{basic.def.odr}) where the enclosing full-expression depends on
+\item names the entity in a \deflink{potentially evaluated}{\ref{basic.def.odr}}
+expression where the enclosing full-expression depends on
 a generic lambda parameter declared within the reaching scope of the
 \grammarterm{lambda-expression}.
 \end{itemize}
@@ -1128,11 +1128,11 @@ in implicit capture. \end{note}
 
 \pnum
 An entity is \defn{captured} if it is captured explicitly or implicitly. An entity
-captured by a \grammarterm{lambda-expression} is odr-used~(\ref{basic.def.odr}) in the scope
+captured by a \grammarterm{lambda-expression} is \link{odr-used}{\ref{basic.def.odr}} in the scope
 containing the \grammarterm{lambda-expression}. If \tcode{*this} is captured by a local
 lambda expression, its nearest enclosing function shall be a non-static member function.
 If a \grammarterm{lambda-expression} or an instantiation of the function call
-operator template of a generic lambda odr-uses~(\ref{basic.def.odr}) \tcode{this} or a
+operator template of a generic lambda \link{odr-uses}{\ref{basic.def.odr}} \tcode{this} or a % todo: deflink
 variable with automatic storage duration from its reaching scope, that
 entity shall be captured by the \grammarterm{lambda-expression}. If a
 \grammarterm{lambda-expression} captures an entity and that entity is not defined or
@@ -1223,7 +1223,7 @@ A member of an anonymous union shall not be captured by copy.
 
 \pnum
 Every \grammarterm{id-expression} within the \grammarterm{compound-statement} of a
-\grammarterm{lambda-expression} that is an odr-use~(\ref{basic.def.odr}) of an
+\grammarterm{lambda-expression} that is an \link{odr-use}{\ref{basic.def.odr}} of an
 entity captured by copy is transformed into an access to the corresponding unnamed data
 member of the closure type.
 \begin{note} An \grammarterm{id-expression} that is not an odr-use refers to
@@ -1232,7 +1232,7 @@ an \grammarterm{id-expression} does not cause the implicit capture of the
 entity. \end{note}
 If \tcode{*this} is captured by copy, each odr-use of \tcode{this} is
 transformed into a pointer to the corresponding unnamed data member of the closure type,
-cast~(\ref{expr.cast}) to the type of \tcode{this}. \begin{note} The cast ensures that the
+\link{cast}{\ref{expr.cast}} to the type of \tcode{this}. \begin{note} The cast ensures that the
 transformed expression is a prvalue. \end{note}
 An \grammarterm{id-expression} within
 the \grammarterm{compound-statement} of a \grammarterm{lambda-expression}
@@ -1347,8 +1347,8 @@ after the lifetime of the entity has ended is likely to result in undefined beha
 \end{note}
 
 \pnum
-A \grammarterm{simple-capture} followed by an ellipsis is a pack
-expansion~(\ref{temp.variadic}). An \grammarterm{init-capture} followed by an
+A \grammarterm{simple-capture} followed by an ellipsis is a \deflink{pack expansion}{\ref{temp.variadic}}.
+An \grammarterm{init-capture} followed by an
 ellipsis is ill-formed.
 \begin{example}
 \begin{codeblock}
@@ -1365,8 +1365,8 @@ void f(Args... args) {
 \indextext{expression!fold|(}
 
 \pnum
-A fold expression performs a fold of a template parameter
-pack~(\ref{temp.variadic}) over a binary operator.
+A fold expression performs a fold of a
+\deflink{template parameter pack}{\ref{temp.variadic}} over a binary operator.
 
 \begin{bnf}
 \nontermdef{fold-expression}\br
@@ -1398,7 +1398,7 @@ Unary left folds and unary right folds
 are collectively called \defnx{unary folds}{unary fold}.
 In a unary fold,
 the \grammarterm{cast-expression}
-shall contain an unexpanded parameter pack~(\ref{temp.variadic}).
+shall contain an \deflinkx{unexpanded parameter pack}{parameter pack!unexpanded}{\ref{temp.variadic}}.
 
 \pnum
 \indextext{fold!binary}%
@@ -1525,8 +1525,8 @@ constitute the arguments to the function. The postfix expression shall
 have function type or function pointer type.
 For a call to a non-member function or to a static member function,
 the postfix expression shall be either an lvalue that refers to a
-function (in which case the function-to-pointer standard
-conversion~(\ref{conv.func}) is suppressed on the postfix expression),
+function (in which case the \link{function-to-pointer standard
+conversion}{\ref{conv.func}} is suppressed on the postfix expression),
 or it shall have function pointer type. Calling a function through an
 expression whose function type is different
 from the function type of the called function's
@@ -1534,9 +1534,9 @@ definition results in undefined behavior~(\ref{dcl.link}). For a call to a non-s
 member function,
 the postfix expression shall be an
 implicit~(\ref{class.mfct.non-static},~\ref{class.static}) or explicit
-class member access~(\ref{expr.ref}) whose \grammarterm{id-expression} is a
-function member name, or a pointer-to-member
-expression~(\ref{expr.mptr.oper}) selecting a function member; the call is as a member of
+\link{class member access}{\ref{expr.ref}} whose \grammarterm{id-expression} is a
+function member name, or a \link{pointer-to-member
+expression}{\ref{expr.mptr.oper}} selecting a function member; the call is as a member of
 the class object referred to by the
 object expression. In the case of an implicit class
 member access, the implied object is the one pointed to by \tcode{this}.
@@ -1545,11 +1545,11 @@ A member function call of the form \tcode{f()} is interpreted as
 \tcode{(*this).f()} (see~\ref{class.mfct.non-static}).
 \end{note}
 If a function or member function name is used, the name can be
-overloaded (Clause~\ref{over}), in which case the appropriate function
+\link{overloaded}{Clause~\ref{over}}, in which case the appropriate function
 shall be selected according to the rules in~\ref{over.match}. If the selected
 function is non-virtual, or if the \grammarterm{id-expression} in the class
 member access expression is a \grammarterm{qualified-id}, that function is
-called. Otherwise, its final overrider~(\ref{class.virtual}) in the dynamic type
+called. Otherwise, its \deflink{final overrider}{\ref{class.virtual}} in the dynamic type
 of the object expression is called; such a call is referred to as a
 \defnx{virtual function call}{function!virtual function call}.
 \begin{note}
@@ -1562,14 +1562,14 @@ an object under construction or destruction.
 
 \pnum
 \begin{note}
-If a function or member function name is used, and name
-lookup~(\ref{basic.lookup}) does not find a declaration of that name,
+If a function or member function name is used, and \link{name
+lookup}{\ref{basic.lookup}} does not find a declaration of that name,
 the program is ill-formed. No function is implicitly declared by such a
 call.
 \end{note}
 
 \pnum
-If the \grammarterm{postfix-expression} designates a destructor~(\ref{class.dtor}),
+If the \grammarterm{postfix-expression} designates a \link{destructor}{\ref{class.dtor}},
 the type of the function call expression is \tcode{void}; otherwise, the
 type of the function call expression is the return type of the
 statically chosen function (i.e., ignoring the \tcode{virtual} keyword),
@@ -1585,9 +1585,9 @@ When a function is called, each parameter~(\ref{dcl.fct}) shall be
 initialized~(\ref{dcl.init},~\ref{class.copy},~\ref{class.ctor}) with
 its corresponding argument.
 If the function is a non-static member
-function, the \tcode{this} parameter of the function~(\ref{class.this})
+function, the \link{\tcode{this} parameter}{\ref{class.this}} of the function
 shall be initialized with a pointer to the object of the call, converted
-as if by an explicit type conversion~(\ref{expr.cast}).
+as if by an \link{explicit type conversion}{\ref{expr.cast}}.
 \begin{note}
 There is no access or ambiguity checking on this conversion; the access
 checking and disambiguation are done as part of the (possibly implicit)
@@ -1666,7 +1666,7 @@ but it is unspecified whether the value of \tcode{j} is 1 or 2.
 
 \pnum
 The result of a function call is the
-result of the operand of the evaluated \tcode{return} statement~(\ref{stmt.return})
+result of the operand of the evaluated \link{\tcode{return} statement}{\ref{stmt.return}}
 in the called function (if any),
 except in a virtual function call if the return type of the
 final overrider is different from the return type of the statically
@@ -1696,10 +1696,10 @@ pointer parameters.
 \pnum
 \indextext{declaration!ellipsis in function}%
 \indextext{parameter list!variable}%
-A function can be declared to accept fewer arguments (by declaring default
-arguments~(\ref{dcl.fct.default})) or more arguments (by using the ellipsis,
+A function can be declared to accept fewer arguments (by declaring \link{default
+arguments}{\ref{dcl.fct.default}}) or more arguments (by using the ellipsis,
 \tcode{...}, or a function parameter pack~(\ref{dcl.fct})) than the number of
-parameters in the function definition~(\ref{dcl.fct.def}).
+parameters in the \link{function definition}{\ref{dcl.fct.def}}.
 \begin{note}
 This implies that, except where the ellipsis (\tcode{...}) or a function
 parameter pack is used, a parameter is available for each argument.
@@ -1709,35 +1709,35 @@ parameter pack is used, a parameter is available for each argument.
 \indextext{ellipsis!conversion sequence}%
 When there is no parameter for a given argument, the argument is passed
 in such a way that the receiving function can obtain the value of the
-argument by invoking \tcode{va_arg}~(\ref{support.runtime}).
+argument by invoking \linkx{\tcode{va_arg}}{va_arg}{\ref{support.runtime}}.
 \begin{note} This paragraph does not apply to arguments passed to a function parameter pack.
 Function parameter packs are expanded during template instantiation~(\ref{temp.variadic}),
 thus each such argument has a corresponding parameter when a function template
 specialization is actually called. \end{note}
 The
-lvalue-to-rvalue~(\ref{conv.lval}), array-to-pointer~(\ref{conv.array}),
-and function-to-pointer~(\ref{conv.func}) standard conversions are
+\link{lvalue-to-rvalue}{\ref{conv.lval}}, \link{array-to-pointer}{\ref{conv.array}},
+and \link{function-to-pointer}{\ref{conv.func}} standard conversions are
 performed on the argument expression.
-An argument that has type \cv{}~\tcode{std::nullptr_t} is converted
-to type \tcode{void*}~(\ref{conv.ptr}).
+An argument that has type \cv{}~\tcode{std::nullptr_t} is \link{converted}{\ref{conv.ptr}}
+to type \tcode{void*}.
 After these conversions, if the
 argument does not have arithmetic, enumeration, pointer, pointer to
 member, or class type, the program is ill-formed. Passing a potentially-evaluated
-argument of class type (Clause~\ref{class}) having a non-trivial
+argument of \link{class type}{Clause~\ref{class}} having a non-trivial
 copy constructor, a non-trivial move constructor,
 or a
 non-trivial destructor, with no corresponding parameter, is conditionally-supported with
 \impldef{passing argument of class type through ellipsis} semantics. If the argument has
-integral or enumeration type that is subject to the integral
-promotions~(\ref{conv.prom}), or a floating-point type that is subject to the
-floating-point promotion~(\ref{conv.fpprom}), the value of the argument is converted to the
+integral or enumeration type that is subject to the \link{integral
+promotions}{\ref{conv.prom}}, or a floating-point type that is subject to the
+\link{floating-point promotion}{\ref{conv.fpprom}}, the value of the argument is converted to the
 promoted type before the call. These promotions are referred to as
 the \defnx{default argument promotions}{promotion!default argument promotion}.
 
 \pnum
 \indextext{function call!recursive}%
-Recursive calls are permitted, except to the \tcode{main}
-function~(\ref{basic.start.main}).
+Recursive calls are permitted, except to the \link{\tcode{main}
+function}{\ref{basic.start.main}}.
 
 \pnum
 A function call is an lvalue
@@ -1753,8 +1753,8 @@ otherwise.
 \indextext{type conversion, explicit|see{casting}}%
 \indextext{conversion explicit type|see{casting}}%
 \indextext{casting}%
-A \grammarterm{simple-type-specifier}~(\ref{dcl.type.simple}) or
-\grammarterm{typename-specifier}~(\ref{temp.res}) followed
+A \link{\grammarterm{simple-type-specifier}}{\ref{dcl.type.simple}} or
+\link{\grammarterm{typename-specifier}}{\ref{temp.res}} followed
 by a parenthesized optional \grammarterm{expression-list} or
 by a \grammarterm{braced-init-list}
 (the initializer)
@@ -1765,14 +1765,14 @@ If the type is a placeholder
 for a deduced class type,
 it is replaced by the return type
 of the function selected by overload resolution
-for class template deduction~(\ref{over.match.class.deduct})
+for \link{class template deduction}{\ref{over.match.class.deduct}}
 for the remainder of this section.
 
 \pnum
 If the initializer is a parenthesized single expression,
 the type conversion expression is equivalent (in
-definedness, and if defined in meaning) to the corresponding cast
-expression~(\ref{expr.cast}).
+definedness, and if defined in meaning) to the corresponding \link{cast
+expression}{\ref{expr.cast}}.
 \indextext{type!incomplete}%
 If the type is \cv{}~\tcode{void}
 and the initializer is \tcode{()},
@@ -1780,7 +1780,7 @@ the expression is a prvalue of the specified type
 that performs no initialization.
 Otherwise,
 the expression is a prvalue of the specified type
-whose result object is direct-initialized~(\ref{dcl.init})
+whose result object is \deflinkx{direct-initialized}{direct-initialization}{\ref{dcl.init}}
 with the initializer.
 For an expression of the form \tcode{T()},
 \tcode{T} shall not be an array type.
@@ -1903,7 +1903,7 @@ is ``\cvqual{vq12} \tcode{T}''. If \tcode{E2} is not declared to be a
 ``\cvqual{cq12} \cvqual{vq12} \tcode{T}''.
 
 \item If \tcode{E2} is a (possibly overloaded) member function, function
-overload resolution~(\ref{over.match}) is used to determine whether
+\link{overload resolution}{\ref{over.match}} is used to determine whether
 \tcode{E1.E2} refers to a static or a non-static member function.
 
 \begin{itemize}
@@ -1999,8 +1999,8 @@ The result of the expression \tcode{dynamic_cast<T>(v)} is the result of
 converting the expression \tcode{v} to type \tcode{T}.
 \indextext{type!incomplete}%
 \tcode{T} shall be a pointer or reference to a complete class type, or
-``pointer to \cvqual{cv} \tcode{void}''. The \tcode{dynamic_cast} operator shall not cast
-away constness~(\ref{expr.const.cast}).
+``pointer to \cvqual{cv} \tcode{void}''. The \tcode{dynamic_cast} operator shall not
+\deflinkx{cast away constness}{casting away constness}{\ref{expr.const.cast}}.
 
 \pnum
 If \tcode{T} is a pointer type, \tcode{v} shall be a prvalue of a
@@ -2029,8 +2029,8 @@ subobject of the \tcode{D} object pointed to by \tcode{v}. Similarly, if
 \tcode{T} is ``reference to \cvqual{cv1} \tcode{B}'' and \tcode{v} has
 type \cvqual{cv2} \tcode{D} such that \tcode{B} is a base class of
 \tcode{D}, the result is the unique \tcode{B} subobject of the \tcode{D}
-object referred to by \tcode{v}.\footnote{The most derived
-object~(\ref{intro.object}) pointed or referred to by
+object referred to by \tcode{v}.\footnote{The \deflink{most derived
+object}{\ref{intro.object}} pointed or referred to by
 \tcode{v} can contain other \tcode{B} objects as base classes, but these
 are ignored.}
 In both the pointer and
@@ -2049,8 +2049,8 @@ void foo(D* dp) {
 \end{example}
 
 \pnum
-Otherwise, \tcode{v} shall be a pointer to or a glvalue of a polymorphic
-type~(\ref{class.virtual}).
+Otherwise, \tcode{v} shall be a pointer to or a glvalue of a
+\deflinkx{polymorphic type}{polymorphic class}{\ref{class.virtual}}.
 
 \pnum
 If \tcode{T} is ``pointer to \cvqual{cv} \tcode{void}'', then the result
@@ -2081,9 +2081,9 @@ runtime check \term{fails}.
 
 \pnum
 The value of a failed cast to pointer type is the null pointer value of
-the required result type. A failed cast to reference type throws
-an exception~(\ref{except.throw}) of a type that would match a
-handler~(\ref{except.handle}) of type \tcode{std::bad_cast}~(\ref{bad.cast}).
+the required result type. A failed cast to reference type \link{throws
+an exception}{\ref{except.throw}} of a type that would match a
+\link{handler}{\ref{except.handle}} of type \link{\tcode{std::bad_cast}}{\ref{bad.cast}}.
 
 \indextext{\idxcode{bad_cast}}%
 \indexlibrary{\idxcode{bad_cast}}%
@@ -2128,7 +2128,7 @@ applied to an object under construction or destruction.
 The result of a \tcode{typeid} expression is an lvalue of static type
 \indextext{\idxcode{type_info}}%
 \indexlibrary{\idxcode{type_info}}%
-\tcode{const} \tcode{std::type_info}~(\ref{type.info}) and dynamic type \tcode{const}
+\tcode{const} \link{\tcode{std::type_info}}{\ref{type.info}} and dynamic type \tcode{const}
 \tcode{std::type_info} or \tcode{const} \placeholder{name} where \placeholder{name} is an
 \impldef{derived type for \tcode{typeid}} class publicly derived from
 \tcode{std::type_info} which preserves the behavior described
@@ -2140,33 +2140,33 @@ of the program. Whether or not the destructor is called for the
 
 \pnum
 When \tcode{typeid} is applied to a glvalue expression whose type is a
-polymorphic class type~(\ref{class.virtual}), the result refers to a
-\tcode{std::type_info} object representing the type of the most derived
-object~(\ref{intro.object}) (that is, the dynamic type) to which the
+\deflink{polymorphic class}{\ref{class.virtual}} type, the result refers to a
+\tcode{std::type_info} object representing the type of the \deflink{most derived
+object}{\ref{intro.object}} (that is, the dynamic type) to which the
 glvalue refers. If the glvalue expression is obtained by applying the
 unary \tcode{*} operator to a pointer\footnote{If \tcode{p} is an expression of
 pointer type, then \tcode{*p},
 \tcode{(*p)}, \tcode{*(p)}, \tcode{((*p))}, \tcode{*((p))}, and so on
 all meet this requirement.}
-and the pointer is a null pointer value~(\ref{conv.ptr}), the
-\tcode{typeid} expression throws an exception~(\ref{except.throw}) of
+and the pointer is a \link{null pointer value}{\ref{conv.ptr}}, the
+\tcode{typeid} expression \link{throws an exception}{\ref{except.throw}} of
 a type that would match a handler of type
 \indextext{\idxcode{bad_typeid}}%
 \indexlibrary{\idxcode{bad_typeid}}%
-\tcode{std::bad_typeid}
-exception~(\ref{bad.typeid}).
+\link{\tcode{std::bad_typeid}}{\ref{bad.typeid}}
+exception.
 
 \pnum
 When \tcode{typeid} is applied to an expression other than a glvalue of
 a polymorphic class type, the result refers to a \tcode{std::type_info}
 object representing the static type of the expression.
-Lvalue-to-rvalue~(\ref{conv.lval}), array-to-pointer~(\ref{conv.array}),
-and function-to-pointer~(\ref{conv.func}) conversions are not applied to
+\link{Lvalue-to-rvalue}{\ref{conv.lval}}, \link{array-to-pointer}{\ref{conv.array}},
+and \link{function-to-pointer}{\ref{conv.func}} conversions are not applied to
 the expression.
 If the expression is a prvalue,
-the temporary materialization conversion~(\ref{conv.rval})
+the \link{temporary materialization conversion}{\ref{conv.rval}}
 is applied.
-The expression is an unevaluated operand (Clause~\ref{expr}).
+The expression is an \deflink{unevaluated operand}{Clause~\ref{expr}}.
 
 \pnum
 When \tcode{typeid} is applied to a \grammarterm{type-id}, the result
@@ -2198,7 +2198,7 @@ typeid(D)  == typeid(const D&); // yields \tcode{true}
 \end{example}
 
 \pnum
-If the header \tcode{<typeinfo>}~(\ref{type.info}) is not included prior
+If the header \link{\tcode{<typeinfo>}}{\ref{type.info}} is not included prior
 to a use of \tcode{typeid}, the program is ill-formed.
 
 \pnum
@@ -2219,15 +2219,15 @@ converting the expression \tcode{v} to type \tcode{T}.
 If \tcode{T} is an lvalue reference type
 or an rvalue reference to function type, the result is an lvalue;
 if \tcode{T} is an rvalue reference to object type, the result is an xvalue;
-otherwise, the result is a prvalue. The \tcode{static_cast} operator shall not cast
-away constness~(\ref{expr.const.cast}).
+otherwise, the result is a prvalue. The \tcode{static_cast} operator shall not
+\deflinkx{cast away constness}{casting away constness}{\ref{expr.const.cast}}.
 
 \pnum
 \indextext{cast!static!reference}%
 \indextext{cast!reference}%
 An lvalue of type ``\cvqual{cv1} \tcode{B}'', where \tcode{B} is a class
 type, can be cast to type ``reference to \cvqual{cv2} \tcode{D}'', where
-\tcode{D} is a class derived (Clause~\ref{class.derived}) from \tcode{B},
+\tcode{D} is a class \link{derived}{Clause~\ref{class.derived}} from \tcode{B},
 if \cvqual{cv2} is the
 same cv-qualification as, or greater cv-qualification than,
 \cvqual{cv1}. If \tcode{B} is a virtual base class of \tcode{D}
@@ -2257,21 +2257,21 @@ static_cast<D&>(br);            // produces lvalue to the original \tcode{d} obj
 An lvalue
 of type ``\cvqual{cv1} \tcode{T1}'' can be cast to type ``rvalue
 reference to \cvqual{cv2} \tcode{T2}'' if ``\cvqual{cv2} \tcode{T2}'' is
-reference-compatible with ``\cvqual{cv1}
-\tcode{T1}''~(\ref{dcl.init.ref}). If the value is not a bit-field,
+\deflink{reference-compatible}{\ref{dcl.init.ref}} with ``\cvqual{cv1}
+\tcode{T1}''. If the value is not a bit-field,
 the result refers to the object or the specified base class subobject
-thereof; otherwise, the lvalue-to-rvalue conversion~(\ref{conv.lval})
+thereof; otherwise, the \link{lvalue-to-rvalue conversion}{\ref{conv.lval}}
 is applied to the bit-field and the resulting prvalue is used as the
 \grammarterm{expression} of the \tcode{static_cast} for the remainder of this section.
-If \tcode{T2} is an inaccessible (Clause~\ref{class.access}) or
-ambiguous~(\ref{class.member.lookup}) base class of \tcode{T1},
+If \tcode{T2} is an \link{inaccessible}{Clause~\ref{class.access}} or
+\link{ambiguous}{\ref{class.member.lookup}} base class of \tcode{T1},
 a program that necessitates such a cast is ill-formed.
 
 \pnum
 An expression \tcode{e} can be explicitly converted to a type \tcode{T}
-if there is an implicit conversion sequence~(\ref{over.best.ics})
+if there is an \link{implicit conversion sequence}{\ref{over.best.ics}}
 from \tcode{e} to \tcode{T}, or
-if overload resolution for a direct-initialization~(\ref{dcl.init})
+if overload resolution for a \deflink{direct-initialization}{\ref{dcl.init}}
 of an object or reference of type \tcode{T} from \tcode{e}
 would find at least one viable function~(\ref{over.match.viable}).
 If \tcode{T} is a reference type, the effect is
@@ -2294,11 +2294,10 @@ listed below. No other conversion shall be performed explicitly using a
 
 \pnum
 Any expression can be explicitly converted to type \cv{}~\tcode{void},
-in which case it becomes a discarded-value
-expression (Clause~\ref{expr}).
+in which case it becomes a \deflink{discarded-value expression}{Clause~\ref{expr}}.
 \begin{note}
-However, if the value is in a temporary
-object~(\ref{class.temporary}), the destructor for that
+However, if the value is in a \link{temporary
+object}{\ref{class.temporary}}, the destructor for that
 object is
 not executed until the usual time, and the value of the object is
 preserved for the purpose of executing the destructor.
@@ -2306,13 +2305,13 @@ preserved for the purpose of executing the destructor.
 
 
 \pnum
-The inverse of any standard conversion sequence (Clause~\ref{conv}) not containing an
-lvalue-to-rvalue~(\ref{conv.lval}),
-array-to-pointer~(\ref{conv.array}),
-function-to-pointer~(\ref{conv.func}),
-null pointer~(\ref{conv.ptr}), null member pointer~(\ref{conv.mem}),
-boolean~(\ref{conv.bool}), or
-function pointer~(\ref{conv.fctptr})
+The inverse of any \link{standard conversion sequence}{Clause~\ref{conv}} not containing an
+\link{lvalue-to-rvalue}{\ref{conv.lval}},
+\link{array-to-pointer}{\ref{conv.array}},
+\link{function-to-pointer}{\ref{conv.func}},
+\link{null pointer}{\ref{conv.ptr}}, \link{null member pointer}{\ref{conv.mem}},
+\link{boolean}{\ref{conv.bool}}, or
+\link{function pointer}{\ref{conv.fctptr}}
 conversion, can be performed explicitly using \tcode{static_cast}. A
 program is ill-formed if it uses \tcode{static_cast} to perform the
 inverse of an ill-formed standard conversion sequence.
@@ -2328,16 +2327,16 @@ void f() {
 \end{example}
 
 \pnum
-The lvalue-to-rvalue~(\ref{conv.lval}),
-array-to-pointer~(\ref{conv.array}), and
-function-to-pointer~(\ref{conv.func}) conversions are applied to the
+The \link{lvalue-to-rvalue}{\ref{conv.lval}},
+\link{array-to-pointer}{\ref{conv.array}}, and
+\link{function-to-pointer}{\ref{conv.func}} conversions are applied to the
 operand. Such a \tcode{static_cast} is subject to the restriction that
-the explicit conversion does not cast away
-constness~(\ref{expr.const.cast}), and the following additional rules
+the explicit conversion does not \deflinkx{cast away
+constness}{casting away constness}{\ref{expr.const.cast}}, and the following additional rules
 for specific cases:
 
 \pnum
-A value of a scoped enumeration type~(\ref{dcl.enum}) can be explicitly converted to an
+A value of a \link{scoped enumeration type}{\ref{dcl.enum}} can be explicitly converted to an
 integral type. When that type is \cv{}~\tcode{bool}, the resulting value is
 \tcode{false} if the original value is zero and \tcode{true} for all other
 values. For the remaining integral types, the value is unchanged if the
@@ -2364,15 +2363,15 @@ the enumeration type.
 \indextext{cast!derived class}%
 A prvalue of type ``pointer to \cvqual{cv1} \tcode{B}'', where \tcode{B}
 is a class type, can be converted to a prvalue of type ``pointer to
-\cvqual{cv2} \tcode{D}'', where \tcode{D} is a class derived
-(Clause~\ref{class.derived}) from \tcode{B},
+\cvqual{cv2} \tcode{D}'', where \tcode{D} is a class
+\link{derived}{Clause~\ref{class.derived}} from \tcode{B},
 if \cvqual{cv2} is the same cv-qualification as,
 or greater cv-qualification than, \cvqual{cv1}.
 If \tcode{B} is a virtual base class of \tcode{D} or
 a base class of a virtual base class of \tcode{D}, or
 if no valid standard conversion from ``pointer to \tcode{D}''
 to ``pointer to \tcode{B}'' exists~(\ref{conv.ptr}), the program is ill-formed.
-The null pointer value~(\ref{conv.ptr}) is converted
+The \link{null pointer value}{\ref{conv.ptr}} is converted % todo: deflink?
 to the null pointer value of the destination type. If the prvalue of type
 ``pointer to \cvqual{cv1} \tcode{B}'' points to a \tcode{B} that is
 actually a subobject of an object of type \tcode{D}, the resulting
@@ -2383,8 +2382,8 @@ behavior is undefined.
 \indextext{cast!pointer-to-member}%
 A prvalue of type ``pointer to member of \tcode{D} of type \cvqual{cv1}
 \tcode{T}'' can be converted to a prvalue of type ``pointer to member of
-\tcode{B} of type \cvqual{cv2} \tcode{T}'', where \tcode{B} is a base
-class (Clause~\ref{class.derived}) of \tcode{D},
+\tcode{B} of type \cvqual{cv2} \tcode{T}'', where \tcode{B} is a \link{base
+class}{Clause~\ref{class.derived}} of \tcode{D},
 if \cvqual{cv2} is the same cv-qualification
 as, or greater cv-qualification than, \cvqual{cv1}.\footnote{Function types
 (including those used in pointer to member function
@@ -2393,7 +2392,7 @@ If no valid standard conversion
 from ``pointer to member of \tcode{B} of type \tcode{T}''
 to ``pointer to member of \tcode{D} of type \tcode{T}''
 exists~(\ref{conv.mem}), the program is ill-formed.
-The null member pointer value~(\ref{conv.mem}) is converted to the null
+The \deflink{null member pointer value}{\ref{conv.mem}} is converted to the null
 member pointer value of the destination type. If class \tcode{B}
 contains the original member, or is a base or derived class of the class
 containing the original member, the resulting pointer to member points
@@ -2416,7 +2415,7 @@ If the original pointer value represents the address
 then the resulting pointer value is unspecified.
 Otherwise, if the original pointer value points to an object \placeholder{a},
 and there is an object \placeholder{b} of type \tcode{T} (ignoring cv-qualification)
-that is pointer-interconvertible~(\ref{basic.compound}) with \placeholder{a},
+that is \deflink{pointer-interconvertible}{\ref{basic.compound}} with \placeholder{a},
 the result is a pointer to \placeholder{b}.
 Otherwise, the pointer value is unchanged by the conversion.
 \begin{example}
@@ -2440,14 +2439,15 @@ result of converting the expression \tcode{v} to type \tcode{T}.
 If \tcode{T} is an lvalue reference type or an rvalue reference to function type, the result is an lvalue;
 if \tcode{T} is an rvalue reference to object type, the result is an xvalue;
 otherwise, the result is a prvalue and the
-lvalue-to-rvalue~(\ref{conv.lval}), array-to-pointer~(\ref{conv.array}),
-and function-to-pointer~(\ref{conv.func}) standard conversions are
+\link{lvalue-to-rvalue}{\ref{conv.lval}}, \link{array-to-pointer}{\ref{conv.array}},
+and \link{function-to-pointer}{\ref{conv.func}} standard conversions are
 performed on the expression \tcode{v}. Conversions that can be performed explicitly
 using \tcode{reinterpret_cast} are listed below. No other conversion can
 be performed explicitly using \tcode{reinterpret_cast}.
 
 \pnum
-The \tcode{reinterpret_cast} operator shall not cast away constness~(\ref{expr.const.cast}).
+The \tcode{reinterpret_cast} operator shall not
+\deflinkx{cast away constness}{casting away constness}{\ref{expr.const.cast}}.
 An expression of integral, enumeration, pointer, or pointer-to-member type
 can be explicitly converted to its own type; such a cast yields the value of
 its operand.
@@ -2535,7 +2535,7 @@ type and back, possibly with different cv-qualification, shall yield the origina
 pointer value.
 
 \pnum
-The null pointer value~(\ref{conv.ptr}) is converted to the null pointer value
+The \link{null pointer value}{\ref{conv.ptr}} is converted to the null pointer value
 of the destination type.
 \begin{note}
 A null pointer constant of type \tcode{std::nullptr_t} cannot be converted to a
@@ -2552,7 +2552,7 @@ can be explicitly converted to a prvalue of a different type ``pointer to member
 function types or both object types.\footnote{\tcode{T1} and \tcode{T2} may have
 different \cv-qualifiers, subject to
 the overall restriction that a \tcode{reinterpret_cast} cannot cast away
-constness.} The null member pointer value~(\ref{conv.mem}) is converted to the
+constness.} The \deflink{null member pointer value}{\ref{conv.mem}} is converted to the
 null member pointer value of the destination type. The result of this
 conversion is unspecified, except in the following cases:
 
@@ -2582,8 +2582,8 @@ type. \begin{note} That is, for lvalues, a reference cast
 \tcode{*} operators (and similarly for
 \tcode{reinterpret_cast<T\&\&>(x)}). \end{note} No
 temporary is created, no copy is made, and
-constructors~(\ref{class.ctor}) or conversion
-functions~(\ref{class.conv}) are not called.\footnote{This
+\link{constructors}{\ref{class.ctor}} or \link{conversion
+functions}{\ref{class.conv}} are not called.\footnote{This
 is sometimes referred to as a \defn{type pun}.}
 
 \rSec2[expr.const.cast]{Const cast}
@@ -2596,8 +2596,8 @@ The result of the expression \tcode{const_cast<T>(v)} is of type
 lvalue;
 if \tcode{T} is an rvalue reference to object type, the result is an xvalue;
 otherwise, the result is a prvalue and the
-lvalue-to-rvalue~(\ref{conv.lval}), array-to-pointer~(\ref{conv.array}),
-and function-to-pointer~(\ref{conv.func}) standard conversions are
+\link{lvalue-to-rvalue}{\ref{conv.lval}}, \link{array-to-pointer}{\ref{conv.array}},
+and \link{function-to-pointer}{\ref{conv.func}} standard conversions are
 performed on the expression \tcode{v}. Conversions that can be performed explicitly using
 \tcode{const_cast} are listed below. No other conversion shall be
 performed explicitly using \tcode{const_cast}.
@@ -2609,7 +2609,7 @@ to its own type using a \tcode{const_cast} operator.
 \end{note}
 
 \pnum
-For two similar types \tcode{T1} and \tcode{T2}~(\ref{conv.qual}),
+For two \deflink{similar types}{\ref{conv.qual}} \tcode{T1} and \tcode{T2},
 a prvalue of type \tcode{T1} may be explicitly
 converted to the type \tcode{T2} using a \tcode{const_cast}. The result
 of a \tcode{const_cast} refers to the original entity.
@@ -2643,12 +2643,12 @@ explicitly converted to an xvalue of type \tcode{T2} using the cast
 
 The result of a reference \tcode{const_cast} refers
 to the original object if the operand is a glvalue and
-to the result of applying the temporary materialization conversion~(\ref{conv.rval}) otherwise.
+to the result of applying the \link{temporary materialization conversion}{\ref{conv.rval}} otherwise.
 
 \pnum
-A null pointer value~(\ref{conv.ptr}) is converted to the null pointer
-value of the destination type. The null member pointer
-value~(\ref{conv.mem}) is converted to the null member pointer value of
+A \deflink{null pointer value}{\ref{conv.ptr}} is converted to the null pointer
+value of the destination type. The
+\deflink{null member pointer value}{\ref{conv.mem}} is converted to the null member pointer value of
 the destination type.
 
 \pnum
@@ -2666,7 +2666,7 @@ may produce undefined behavior~(\ref{dcl.type.cv}).
 A conversion from a type \tcode{T1} to a type \tcode{T2}
 \defnx{casts away constness}{casting away constness}
 if \tcode{T1} and \tcode{T2} are different,
-there is a cv-decomposition~(\ref{conv.qual}) of \tcode{T1}
+there is a \deflink{cv-decomposition}{\ref{conv.qual}} of \tcode{T1}
 yielding \placeholder{n} such that
 \tcode{T2} has a cv-decomposition of the form
 
@@ -2829,7 +2829,7 @@ called. The operand of \tcode{\&} shall not be a bit-field.
 
 \pnum
 \indextext{overloaded function!address of}%
-The address of an overloaded function (Clause~\ref{over}) can be taken
+The address of an \link{overloaded function}{Clause~\ref{over}} can be taken
 only in a context that uniquely determines which version of the
 overloaded function is referred to (see~\ref{over.over}).
 \begin{note}
@@ -2857,9 +2857,10 @@ result is the type of the promoted operand.
 
 \pnum
 \indextext{operator!logical negation}%
-The operand of the logical negation operator \tcode{!} is contextually
-converted to \tcode{bool}
-(Clause~\ref{conv}); its value is \tcode{true}
+The operand of the logical negation operator \tcode{!} is
+\deflinkx{contextually converted to \tcode{bool}}
+{conversion!contextual to \tcode{bool}}{Clause~\ref{conv}};
+its value is \tcode{true}
 if the converted operand is \tcode{false} and \tcode{false} otherwise.
 The type of the result is \tcode{bool}.
 
@@ -2901,8 +2902,8 @@ bit-field if the operand is a bit-field.
 The expression \tcode{++x} is equivalent to \tcode{x+=1}.
 \indextext{operator!\idxcode{+=}}%
 \begin{note}
-See the discussions of addition~(\ref{expr.add}) and assignment
-operators~(\ref{expr.ass}) for information on conversions.
+See the discussions of \link{addition}{\ref{expr.add}} and \link{assignment
+operators}{\ref{expr.ass}} for information on conversions.
 \end{note}
 
 \pnum
@@ -2924,7 +2925,7 @@ For postfix increment and decrement, see~\ref{expr.post.incr}.
 \indextext{byte}%
 The \tcode{sizeof} operator yields the number of bytes in the object
 representation of its operand. The operand is either an expression,
-which is an unevaluated operand (Clause~\ref{expr}), or a parenthesized
+which is an \deflink{unevaluated operand}{Clause~\ref{expr}}, or a parenthesized
 \grammarterm{type-id}.
 \indextext{type!incomplete}%
 The \tcode{sizeof} operator shall not be applied to an expression that
@@ -2933,8 +2934,8 @@ to the parenthesized name of such
 types, or to a glvalue that designates a bit-field.
 \tcode{sizeof(char)}, \tcode{sizeof(signed char)} and
 \tcode{sizeof(unsigned char)} are \tcode{1}. The result of
-\tcode{sizeof} applied to any other fundamental
-type~(\ref{basic.fundamental}) is \impldef{\tcode{sizeof} applied to
+\tcode{sizeof} applied to any other \link{fundamental
+type}{\ref{basic.fundamental}} is \impldef{\tcode{sizeof} applied to
 fundamental types
 other than \tcode{char}, \tcode{signed char}, and \tcode{unsigned char}}.
 \begin{note}
@@ -2954,8 +2955,8 @@ of the referenced type.
 \indextext{class object!\idxcode{sizeof}}%
 When applied to a class, the result is the number of bytes in an object
 of that class including any padding required for placing objects of that
-type in an array. The size of a most derived class shall be greater than
-zero~(\ref{intro.object}). The result of applying \tcode{sizeof} to a
+type in an array. The size of a \deflink{most derived class}{\ref{intro.object}} shall be greater than
+zero. The result of applying \tcode{sizeof} to a
 base class subobject is the size of the base class type.\footnote{The actual
 size of a base class subobject may be less than the result of
 applying \tcode{sizeof} to the subobject, due to virtual base classes
@@ -2970,19 +2971,19 @@ The \tcode{sizeof} operator can be applied to a pointer to a function,
 but shall not be applied directly to a function.
 
 \pnum
-The lvalue-to-rvalue~(\ref{conv.lval}),
-array-to-pointer~(\ref{conv.array}), and
-function-to-pointer~(\ref{conv.func}) standard conversions are not
+The \link{lvalue-to-rvalue}{\ref{conv.lval}},
+\link{array-to-pointer}{\ref{conv.array}}, and
+\link{function-to-pointer}{\ref{conv.func}} standard conversions are not
 applied to the operand of \tcode{sizeof}.
 If the operand is a prvalue,
-the temporary materialization conversion~(\ref{conv.rval})
+the \link{temporary materialization conversion}{\ref{conv.rval}}
 is applied.
 
 \pnum
 The identifier in a \tcode{sizeof...} expression shall name a parameter
 pack. The \tcode{sizeof...} operator yields the number of arguments
 provided for the parameter pack \grammarterm{identifier}.
-A \tcode{sizeof...} expression is a pack expansion~(\ref{temp.variadic}).
+A \tcode{sizeof...} expression is a \deflink{pack expansion}{\ref{temp.variadic}}.
 \begin{example}
 
 \begin{codeblock}
@@ -3065,8 +3066,8 @@ object created by the \grammarterm{new-expression} has a cv-qualified type.
 \end{bnf}
 
 \indextext{storage duration!dynamic}%
-Entities created by a \grammarterm{new-expression} have dynamic storage
-duration~(\ref{basic.stc.dynamic}).
+Entities created by a \grammarterm{new-expression} have
+\link{dynamic storage duration}{\ref{basic.stc.dynamic}}.
 \begin{note}
 \indextext{\idxcode{new}!scoping and}%
 The lifetime of such an entity is not necessarily restricted to the
@@ -3078,7 +3079,7 @@ returns a pointer to the object created. If it is an array, the
 the array.
 
 \pnum
-If a placeholder type~(\ref{dcl.spec.auto}) appears in the
+If a \link{placeholder type}{\ref{dcl.spec.auto}} appears in the
 \grammarterm{type-specifier-seq} of a \grammarterm{new-type-id} or
 \grammarterm{type-id} of a \grammarterm{new-expression},
 the allocated type is deduced as follows:
@@ -3138,8 +3139,8 @@ is ill-formed because the binding is
 \end{codeblock}
 
 Instead, the explicitly parenthesized version of the \tcode{new}
-operator can be used to create objects of compound
-types~(\ref{basic.compound}):
+operator can be used to create objects of \link{compound
+types}{\ref{basic.compound}}:
 
 \begin{codeblock}
 new (int (*[10])());
@@ -3166,8 +3167,9 @@ to the associated array type.
 
 \pnum
 Every \grammarterm{constant-expression} in a
-\grammarterm{noptr-new-declarator} shall be a converted constant
-expression~(\ref{expr.const}) of type \tcode{std::size_t} and
+\grammarterm{noptr-new-declarator} shall be a
+\deflinkx{converted constant expression}{expression!converted constant}{\ref{expr.const}}
+of type \tcode{std::size_t} and
 shall evaluate to a strictly positive value.
 \indextext{\idxcode{new}}%
 The \grammarterm{expression} in a \grammarterm{noptr-new-declarator} is
@@ -3199,12 +3201,12 @@ negative value afterwards.} is less than zero;
 
 \item
 its value is such that the size of the allocated object would exceed the
-\impldef{maximum size of an allocated object} limit (Annex~\ref{implimits}); or
+\impldef{maximum size of an allocated object} \link{limit}{Annex~\ref{implimits}}; or
 
 \item
 the \grammarterm{new-initializer} is a \grammarterm{braced-init-list} and the
 number of array elements for which initializers are provided (including the
-terminating \tcode{'\textbackslash 0'} in a string literal~(\ref{lex.string})) exceeds the
+terminating \tcode{'\textbackslash 0'} in a \link{string literal}{\ref{lex.string}}) exceeds the
 number of elements to initialize.
 \end{itemize}
 
@@ -3224,7 +3226,7 @@ is the null pointer value of the required result type;
 \item
 otherwise, the \grammarterm{new-expression} terminates by throwing an
 exception of a type that would match a handler~(\ref{except.handle}) of type
-\tcode{std::bad_array_new_length}~(\ref{new.badlength}).
+\link{\tcode{std::bad_array_new_length}}{\ref{new.badlength}}.
 \end{itemize}
 \end{itemize}
 When the value of the \grammarterm{expression} is zero, the allocation
@@ -3234,8 +3236,8 @@ function is called to allocate an array with no elements.
 A \grammarterm{new-expression} may obtain storage for the object by calling an
 allocation function~(\ref{basic.stc.dynamic.allocation}). If
 the \grammarterm{new-expression} terminates by throwing an exception, it
-may release storage by calling a deallocation
-function~(\ref{basic.stc.dynamic.deallocation}). If the allocated type
+may release storage by calling a \link{deallocation
+function}{\ref{basic.stc.dynamic.deallocation}}. If the allocated type
 is a non-array type, the allocation function's name is
 \indextext{\idxcode{operator new}}%
 \indextext{\idxcode{operator delete}}%
@@ -3337,7 +3339,7 @@ the difference between the
 result of the \grammarterm{new-expression} and the address returned by the
 allocation function shall be an integral multiple of the
 strictest fundamental
-alignment requirement~(\ref{basic.align}) of any object type whose size
+\link{alignment requirement}{\ref{basic.align}} of any object type whose size
 is no greater than the size of the array being created.
 \begin{note}
 \indextext{allocation!alignment storage}%
@@ -3419,7 +3421,7 @@ invocation of \tcode{new} to another.
 \pnum
 \begin{note}
 Unless an allocation function has a non-throwing
-exception specification~(\ref{except.spec}),
+\link{exception specification}{\ref{except.spec}},
 it indicates failure to allocate storage by throwing a
 \indextext{\idxcode{bad_alloc}}%
 \indexlibrary{\idxcode{bad_alloc}}%
@@ -3480,10 +3482,10 @@ value computation of the
 \pnum
 If the \grammarterm{new-expression} creates an object or an array of
 objects of class type, access and ambiguity control are done for the
-allocation function, the deallocation function~(\ref{class.free}), and
-the constructor~(\ref{class.ctor}). If the \grammarterm{new-expression}
-creates an array of objects of class type, the destructor is potentially
-invoked~(\ref{class.dtor}).
+allocation function, the \link{deallocation function}{\ref{class.free}}, and
+the \link{constructor}{\ref{class.ctor}}. If the \grammarterm{new-expression}
+creates an array of objects of class type, the \link{destructor}{\ref{class.dtor}}
+is potentially invoked.
 
 \pnum
 \indextext{\idxcode{new}!exception and}%
@@ -3518,9 +3520,8 @@ of parameters and, after parameter transformations~(\ref{dcl.fct}), all
 parameter types except the first are identical. If
 the lookup finds a single matching deallocation function, that function
 will be called; otherwise, no deallocation function will be called. If
-the lookup finds a usual deallocation
-function
-with a parameter of type \tcode{std::size_t}~(\ref{basic.stc.dynamic.deallocation})
+the lookup finds a \deflink{usual deallocation function}{\ref{basic.stc.dynamic.deallocation}}
+with a parameter of type \tcode{std::size_t}
 and that function,
 considered as a placement deallocation function, would have been
 selected as a match for the allocation function, the program is
@@ -3562,8 +3563,8 @@ If the copy is elided in one place, it need not be elided in the other.
 \pnum
 \indextext{expression!\idxcode{delete}}%
 \indextext{\idxcode{delete}}%
-The \grammarterm{delete-expression} operator destroys a most derived
-object~(\ref{intro.object}) or array created by a
+The \grammarterm{delete-expression} operator destroys a
+\deflink{most derived object}{\ref{intro.object}} or array created by a
 \grammarterm{new-expression}.
 
 \begin{bnf}
@@ -3579,8 +3580,8 @@ interpreted as the second alternative.\footnote{A lambda expression with a
 empty square brackets can follow the \tcode{delete} keyword if the lambda expression is
 enclosed in parentheses.}
 The operand shall be of pointer to object type or of class type. If of
-class type, the operand is contextually implicitly converted
-(Clause~\ref{conv}) to a pointer to object
+class type, the operand is \deflink{contextually implicitly converted}{Clause~\ref{conv}}
+to a pointer to object
 type.\footnote{This implies that an object
 cannot be deleted using a pointer of type
 \tcode{void*} because \tcode{void} is not an object type.}
@@ -3598,8 +3599,9 @@ In the first alternative
 be a null pointer value, a pointer to a non-array object
 created by a previous \grammarterm{new-expression},
 or a pointer to a
-subobject~(\ref{intro.object}) representing a base class of such an
-object (Clause~\ref{class.derived}). If not, the behavior is undefined.
+\deflink{subobject}{\ref{intro.object}} representing a
+\link{base class}{Clause~\ref{class.derived}} of such an
+object. If not, the behavior is undefined.
 \indextext{array!\idxcode{delete}}%
 In the second alternative (\defnx{delete array}{\idxcode{delete}!array}), the value of the
 operand of \tcode{delete}
@@ -3617,8 +3619,9 @@ match the type of the object allocated by \tcode{new}, not the syntax of the
 \end{note}
 \begin{note}
 A pointer to a \tcode{const} type can be the operand of a
-\grammarterm{delete-expression}; it is not necessary to cast away the
-constness~(\ref{expr.const.cast}) of the pointer expression before it is
+\grammarterm{delete-expression}; it is not necessary to
+\deflinkx{cast away the constness}{casting away constness}{\ref{expr.const.cast}}
+of the pointer expression before it is
 used as the operand of the \grammarterm{delete-expression}.
 \end{note}
 
@@ -3658,8 +3661,8 @@ null pointer value, then:
 \item
 If the allocation call for the \grammarterm{new-expression} for the object to
 be deleted was not omitted and the allocation was not extended~(\ref{expr.new}), the
-\grammarterm{delete-expression} shall call a deallocation
-function~(\ref{basic.stc.dynamic.deallocation}). The value returned from the
+\grammarterm{delete-expression} shall call a \link{deallocation
+function}{\ref{basic.stc.dynamic.deallocation}}. The value returned from the
 allocation call of the \grammarterm{new-expression} shall be passed as the
 first argument to the deallocation function.
 
@@ -3788,8 +3791,8 @@ element type.
 \pnum
 \indextext{expression!\idxcode{noexcept}}%
 The \tcode{noexcept} operator determines whether the evaluation of its operand,
-which is an unevaluated operand (Clause~\ref{expr}), can throw an
-exception~(\ref{except.throw}).
+which is an \deflink{unevaluated operand}{Clause~\ref{expr}}, can \link{throw an
+exception}{\ref{except.throw}}.
 
 \begin{bnf}
 \nontermdef{noexcept-expression}\br
@@ -3802,7 +3805,8 @@ and is a prvalue.
 
 \pnum
 The result of the \tcode{noexcept} operator is \tcode{true}
-unless the \grammarterm{expression} is potentially-throwing~(\ref{except.spec}).
+unless the \grammarterm{expression} is
+\deflinkx{potentially-throwing}{potentially-throwing!expression}{\ref{except.spec}}.
 \indextext{expression!unary|)}
 
 \rSec1[expr.cast]{Explicit type conversion (cast notation)}%
@@ -3820,8 +3824,8 @@ resulting prvalue; see Clause~\ref{expr}.
 \end{note}
 
 \pnum
-An explicit type conversion can be expressed using functional
-notation~(\ref{expr.type.conv}), a type conversion operator
+An explicit type conversion can be expressed using \link{functional
+notation}{\ref{expr.type.conv}}, a type conversion operator
 (\tcode{dynamic_cast}, \tcode{static_cast}, \tcode{reinterpret_cast},
 \tcode{const_cast}), or the \term{cast} notation.
 
@@ -3842,10 +3846,10 @@ The conversions performed by
 \indextext{cast!const}%
 \indextext{cast!static}%
 \indextext{cast!reinterpret}%
-\item a \tcode{const_cast}~(\ref{expr.const.cast}),
-\item a \tcode{static_cast}~(\ref{expr.static.cast}),
+\item a \link{\tcode{const_cast}}{\ref{expr.const.cast}},
+\item a \link{\tcode{static_cast}}{\ref{expr.static.cast}},
 \item a \tcode{static_cast} followed by a \tcode{const_cast},
-\item a \tcode{reinterpret_cast}~(\ref{expr.reinterpret.cast}), or
+\item a \link{\tcode{reinterpret_cast}}{\ref{expr.reinterpret.cast}}, or
 \item a \tcode{reinterpret_cast} followed by a \tcode{const_cast},
 \end{itemize}
 
@@ -4000,8 +4004,8 @@ The result of a \tcode{.*} expression
 whose second operand is a pointer to a data member is an lvalue if the first
 operand is an lvalue and an xvalue otherwise. The result of a \tcode{.*} expression whose
 second operand is a pointer to a member function is a prvalue.
-If the second operand is the null
-member pointer value~(\ref{conv.mem}), the behavior is undefined.
+If the second operand is the \deflink{null member pointer value}{\ref{conv.mem}},
+the behavior is undefined.
 
 \rSec1[expr.mul]{Multiplicative operators}%
 \indextext{expression!multiplicative operators}%
@@ -4147,7 +4151,7 @@ the behavior is undefined.
 \pnum
 For addition or subtraction, if the expressions \tcode{P} or \tcode{Q} have
 type ``pointer to \cv{}~\tcode{T}'', where \tcode{T} and the array element type
-are not similar~(\ref{conv.qual}), the behavior is undefined.
+are not \deflinkx{similar}{similar types}{\ref{conv.qual}}, the behavior is undefined.
 \begin{note} In particular, a pointer to a base class cannot be used for
 pointer arithmetic when the array contains objects of a derived class type.
 \end{note}
@@ -4248,10 +4252,10 @@ yield \tcode{false} or \tcode{true}. The type of the result is
 
 \pnum
 The usual arithmetic conversions are performed on operands of arithmetic
-or enumeration type. If both operands are pointers, pointer
-conversions~(\ref{conv.ptr}) and qualification conversions~(\ref{conv.qual})
+or enumeration type. If both operands are pointers, \link{pointer
+conversions}{\ref{conv.ptr}} and \link{qualification conversions}{\ref{conv.qual}}
 are performed to bring
-them to their composite pointer type (Clause~\ref{expr}).
+them to their \deflink{composite pointer type}{Clause~\ref{expr}}.
 After conversions, the operands shall have the same type.
 
 \pnum
@@ -4272,7 +4276,7 @@ compares greater.
 object, or to subobjects of such members, recursively,
 the pointer to the later declared member compares greater provided the
 two members
-have the same access control (Clause~\ref{class.access})
+have the same \link{access control}{Clause~\ref{class.access}}
 and provided their class is not a union.
 
 \item Otherwise, neither pointer compares greater than the other.
@@ -4280,7 +4284,7 @@ and provided their class is not a union.
 \end{itemize}
 
 \pnum
-If two operands \tcode{p} and \tcode{q} compare equal~(\ref{expr.eq}),
+If two operands \tcode{p} and \tcode{q} \link{compare equal}{\ref{expr.eq}},
 \tcode{p<=q} and \tcode{p>=q} both yield \tcode{true} and \tcode{p<q} and
 \tcode{p>q} both yield \tcode{false}. Otherwise, if a pointer \tcode{p}
 compares greater than a pointer \tcode{q}, \tcode{p>=q}, \tcode{p>q},
@@ -4317,11 +4321,12 @@ same type after the specified conversions have been applied.
 \indextext{comparison!pointer}%
 \indextext{comparison!pointer to function}%
 If at least one of the operands is a pointer,
-pointer conversions~(\ref{conv.ptr}),
-function pointer conversions~(\ref{conv.fctptr}), and
-qualification conversions~(\ref{conv.qual})
-are performed on both operands to bring them to their composite pointer type
-(Clause~\ref{expr}). Comparing pointers is defined as follows:
+\link{pointer conversions}{\ref{conv.ptr}},
+\link{function pointer conversions}{\ref{conv.fctptr}}, and
+\link{qualification conversions}{\ref{conv.qual}}
+are performed on both operands to bring them to their
+\deflink{composite pointer type}{Clause~\ref{expr}}.
+Comparing pointers is defined as follows:
 
 \begin{itemize}
 \item
@@ -4333,17 +4338,18 @@ see~\ref{expr.unary.op}.} the result of the comparison is unspecified.
 \item
 Otherwise, if the pointers are both null, both point to the same
 \indextext{address}%
-function, or both represent the same address~(\ref{basic.compound}),
+function, or both
+\deflinkx{represent the same address}{represents the address}{\ref{basic.compound}},
 they compare equal.
 \item
 Otherwise, the pointers compare unequal.
 \end{itemize}
 
 \pnum
-If at least one of the operands is a pointer to member, pointer to member
-conversions~(\ref{conv.mem}) and qualification
-conversions~(\ref{conv.qual}) are performed on both operands to bring them to
-their composite pointer type (Clause~\ref{expr}).
+If at least one of the operands is a pointer to member, \link{pointer to member
+conversions}{\ref{conv.mem}} and \link{qualification
+conversions}{\ref{conv.qual}} are performed on both operands to bring them to
+their \deflink{composite pointer type}{Clause~\ref{expr}}.
 Comparing pointers to members is defined as follows:
 
 \begin{itemize}
@@ -4376,12 +4382,12 @@ bool b1 = (bx == cx);   // unspecified
 \end{example}
 
 \item
-If both refer to (possibly different) members of the same union~(\ref{class.union}),
+If both refer to (possibly different) members of the same \link{union}{\ref{class.union}},
 they compare equal.
 
 \item
 Otherwise, two pointers to members compare equal if they would refer to the same member of
-the same most derived object~(\ref{intro.object}) or the same subobject if
+the same \deflink{most derived object}{\ref{intro.object}} or the same subobject if
 indirection with a hypothetical object of the associated
 class type were performed, otherwise they compare unequal.
 \begin{example}
@@ -4484,9 +4490,9 @@ operator applies only to integral or unscoped enumeration operands.
 
 \pnum
 The \tcode{\&\&} operator groups left-to-right. The operands are both
-contextually converted to \tcode{bool}
-(Clause~\ref{conv}). The
-result is \tcode{true} if both operands are \tcode{true} and
+\deflinkx{contextually converted to \tcode{bool}}
+{conversion!contextual to \tcode{bool}}{Clause~\ref{conv}}.
+The result is \tcode{true} if both operands are \tcode{true} and
 \tcode{false} otherwise. Unlike \tcode{\&}, \tcode{\&\&} guarantees
 left-to-right evaluation: the second operand is not evaluated if the
 first operand is \tcode{false}.
@@ -4515,8 +4521,9 @@ value computation and side effect associated with the second expression.
 
 \pnum
 The \tcode{||} operator groups left-to-right. The operands are both
-contextually converted to \tcode{bool}
-(Clause~\ref{conv}). It returns
+\deflinkx{contextually converted to \tcode{bool}}
+{conversion!contextual to \tcode{bool}}{Clause~\ref{conv}}.
+It returns
 \tcode{true} if either of its operands is \tcode{true}, and
 \tcode{false} otherwise. Unlike \tcode{|}, \tcode{||} guarantees
 left-to-right evaluation; moreover, the second operand is not evaluated
@@ -4546,8 +4553,8 @@ and side effect associated with the second expression.
 
 \pnum
 Conditional expressions group right-to-left. The first expression is
-contextually converted to \tcode{bool}
-(Clause~\ref{conv}). It is
+\deflinkx{contextually converted to \tcode{bool}}
+{conversion!contextual to \tcode{bool}}{Clause~\ref{conv}}. It is
 evaluated and if it is \tcode{true}, the result of the conditional
 expression is the value of the second expression, otherwise that of the
 third expression. Only one of the second and third expressions is
@@ -4588,7 +4595,7 @@ Otherwise, if the second and third operand have different types and
 either has (possibly cv-qualified) class type, or if both
 are glvalues of the same value category and the same type except for
 cv-qualification, an attempt is made to
-form an implicit conversion sequence~(\ref{over.best.ics}) from
+form an \link{implicit conversion sequence}{\ref{over.best.ics}} from
 each of those operands to the type of the other.
 \begin{note}
 Properties such as access, whether an operand is a bit-field, or whether
@@ -4602,8 +4609,8 @@ of the operand expression \tcode{E2} as follows:
 \begin{itemize}
 \item If \tcode{E2} is an lvalue, the target type is
 ``lvalue reference to \tcode{T2}'', subject to the
-constraint that in the conversion the reference must bind
-directly~(\ref{dcl.init.ref}) to an lvalue.
+constraint that in the conversion the reference must
+\deflink{bind directly}{\ref{dcl.init.ref}} to an lvalue.
 
 \item If \tcode{E2} is an xvalue, the target type is
 ``rvalue reference to \tcode{T2}'',
@@ -4620,9 +4627,9 @@ the target type is \tcode{T2},
 
 \item otherwise, the target type is the type that \tcode{E2} would have
 after applying the
-lvalue-to-rvalue~(\ref{conv.lval}),
-array-to-pointer~(\ref{conv.array}), and
-function-to-pointer~(\ref{conv.func})
+\link{lvalue-to-rvalue}{\ref{conv.lval}},
+\link{array-to-pointer}{\ref{conv.array}}, and
+\link{function-to-pointer}{\ref{conv.func}}
 standard conversions.
 \end{itemize}
 \end{itemize}
@@ -4660,8 +4667,8 @@ are used in place of the original operands for the remainder of this
 section.
 
 \pnum
-Lvalue-to-rvalue~(\ref{conv.lval}), array-to-pointer~(\ref{conv.array}),
-and function-to-pointer~(\ref{conv.func}) standard conversions are
+\link{Lvalue-to-rvalue}{\ref{conv.lval}}, \link{array-to-pointer}{\ref{conv.array}},
+and \link{function-to-pointer}{\ref{conv.func}} standard conversions are
 performed on the second and third operands. After those conversions, one
 of the following shall hold:
 
@@ -4674,17 +4681,17 @@ the usual arithmetic conversions are performed to bring them to a common
 type, and the result is of that type.
 
 \item One or both of the second and third operands have pointer type;
-pointer conversions~(\ref{conv.ptr}),
-function pointer conversions~(\ref{conv.fctptr}), and
-qualification conversions~(\ref{conv.qual})
+\link{pointer conversions}{\ref{conv.ptr}},
+\link{function pointer conversions}{\ref{conv.fctptr}}, and
+\link{qualification conversions}{\ref{conv.qual}}
 are performed to bring them to their
 composite pointer type (Clause~\ref{expr}). The result is of the composite
 pointer type.
 
 \item One or both of the second and third operands have pointer to member type;
-pointer to member conversions~(\ref{conv.mem}) and qualification
-conversions~(\ref{conv.qual}) are performed to bring them to their composite
-pointer type (Clause~\ref{expr}). The result is of the composite pointer type.
+\link{pointer to member conversions}{\ref{conv.mem}} and \link{qualification
+conversions}{\ref{conv.qual}} are performed to bring them to their
+\deflink{composite pointer type}{Clause~\ref{expr}}. The result is of the composite pointer type.
 
 \item
 Both the second and third operands have type \tcode{std::nullptr_t} or one has
@@ -4707,8 +4714,8 @@ that type and the other is a null pointer constant. The result is of type
 A \grammarterm{throw-expression} is of type \tcode{void}.
 
 \pnum
-Evaluating a \grammarterm{throw-expression} with an operand throws an
-exception~(\ref{except.throw}); the type of the exception object is determined by removing
+Evaluating a \grammarterm{throw-expression} with an operand \link{throws an
+exception}{\ref{except.throw}}; the type of the exception object is determined by removing
 any top-level \grammarterm{cv-qualifier}{s} from the static type of the
 operand and adjusting the type
 from ``array of \tcode{T}'' or function type \tcode{T}
@@ -4718,7 +4725,8 @@ to ``pointer to \tcode{T}''.
 \indextext{exception handling!rethrow}%
 A
 \grammarterm{throw-expression}
-with no operand rethrows the currently handled exception~(\ref{except.handle}).
+with no operand rethrows the
+\deflinkx{currently handled exception}{exception handling!currently handled exception}{\ref{except.handle}}.
 The exception is reactivated with the existing exception object;
 no new exception object is created.
 The exception is no longer considered to be caught.
@@ -4743,7 +4751,7 @@ If no exception is presently being handled,
 evaluating a
 \grammarterm{throw-expression}
 with no operand calls
-\tcode{std::\brk{}terminate()}~(\ref{except.terminate}).
+\link{\tcode{std::\brk{}terminate()}}{\ref{except.terminate}}.
 
 \rSec1[expr.ass]{Assignment and compound assignment operators}%
 \indextext{expression!assignment and compound assignment}
@@ -4883,7 +4891,7 @@ The comma operator groups left-to-right.
 
 A pair of expressions separated by a comma is evaluated left-to-right;
 the left expression is
-a discarded-value expression (Clause~\ref{expr}).
+a \deflink{discarded-value expression}{Clause~\ref{expr}}.
 Every
 \indextext{value computation}%
 value computation and side effect
@@ -4934,12 +4942,12 @@ during translation.\end{note}
 \pnum
 An expression \tcode{e} is a
 \defnx{core constant expression}{expression!core constant}
-unless the evaluation of \tcode{e}, following the rules of the abstract
-machine~(\ref{intro.execution}), would evaluate one of the following expressions:
+unless the evaluation of \tcode{e}, following the rules of the \link{abstract
+machine}{\ref{intro.execution}}, would evaluate one of the following expressions:
 
 \begin{itemize}
 \item
-\tcode{this}~(\ref{expr.prim.this}), except in a constexpr
+\link{\tcode{this}}{\ref{expr.prim.this}}, except in a constexpr
 function or a constexpr constructor that is being evaluated as part
 of \tcode{e};
 
@@ -4948,7 +4956,7 @@ an invocation of a function other than
 a constexpr constructor for a literal class,
 a constexpr function,
 or an implicit invocation of a trivial destructor~(\ref{class.dtor})
-\begin{note} Overload resolution~(\ref{over.match})
+\begin{note} \link{Overload resolution}{\ref{over.match}}
 is applied as usual \end{note};
 
 \item
@@ -4959,23 +4967,23 @@ undefined constexpr constructor;
 an invocation of an instantiated constexpr function or
 constexpr constructor that fails to satisfy the requirements
 for a constexpr function or
-constexpr constructor~(\ref{dcl.constexpr});
+\link{constexpr}{\ref{dcl.constexpr}} constructor;
 
 \item
-an expression that would exceed the implementation-defined
-limits (see Annex~\ref{implimits});
+an expression that would exceed the \link{implementation-defined
+limits}{\ref{implimits}};
 
 \item
 an operation that would have undefined behavior
 as specified in Clauses~\ref{intro} through~\ref{cpp}
 of this International Standard \begin{note} including,
 for example, signed integer overflow~(Clause \ref{expr}), certain
-pointer arithmetic~(\ref{expr.add}), division by
-zero~(\ref{expr.mul}), or certain shift operations~(\ref{expr.shift})
+pointer arithmetic~(\ref{expr.add}), \link{division by
+zero}{\ref{expr.mul}}, or certain \link{shift operations}{\ref{expr.shift}}
 \end{note};
 
 \item
-an lvalue-to-rvalue conversion~(\ref{conv.lval}) unless
+an \link{lvalue-to-rvalue conversion}{\ref{conv.lval}} unless
 it is applied to
 
 \begin{itemize}
@@ -4985,8 +4993,8 @@ it is applied to
   initialized with a constant expression, or
 
   \item
-  a non-volatile glvalue that refers to a subobject of a string
-  literal~(\ref{lex.string}), or
+  a non-volatile glvalue that refers to a subobject of a \link{string
+  literal}{\ref{lex.string}}, or
 
   \item
   a non-volatile glvalue that refers to a non-volatile object
@@ -4999,7 +5007,7 @@ it is applied to
 \end{itemize}
 
 \item
-an lvalue-to-rvalue conversion~(\ref{conv.lval})
+an \link{lvalue-to-rvalue conversion}{\ref{conv.lval}}
 that is applied to a glvalue
 that refers to a non-active member of a union or a subobject thereof;
 
@@ -5010,7 +5018,7 @@ for a union whose active member (if any) is mutable,
 unless the lifetime of the union object began within the evaluation of \tcode{e};
 
 \item
-an assignment expression~(\ref{expr.ass})
+an \link{assignment expression}{\ref{expr.ass}}
 or invocation of an assignment operator~(\ref{class.copy})
 that would change the active member of a union;
 
@@ -5032,7 +5040,7 @@ in a \grammarterm{lambda-expression},
 a reference to \tcode{this} or to a variable with
 automatic storage duration defined outside that
 \grammarterm{lambda-expression}, where
-the reference would be an odr-use~(\ref{basic.def.odr}, \ref{expr.prim.lambda});
+the reference would be an \link{odr-use}{\ref{basic.def.odr}};
 \begin{example}
 \begin{codeblock}
 void g() {
@@ -5068,13 +5076,13 @@ static_assert(bind(monad(2))(monad)() == monad(2)());
 a conversion from type \cv{}~\tcode{void*} to a pointer-to-object type;
 
 \item
-a dynamic cast~(\ref{expr.dynamic.cast});
+a \link{dynamic cast}{\ref{expr.dynamic.cast}};
 
 \item
-a \tcode{reinterpret_cast}~(\ref{expr.reinterpret.cast});
+a \link{\tcode{reinterpret_cast}}{\ref{expr.reinterpret.cast}};
 
 \item
-a pseudo-destructor call~(\ref{expr.pseudo});
+a \link{pseudo-destructor call}{\ref{expr.pseudo}};
 
 \item
 modification of an object~(\ref{expr.ass}, \ref{expr.post.incr},
@@ -5084,7 +5092,7 @@ that refers to a non-volatile object
 whose lifetime began within the evaluation of \tcode{e};
 
 \item
-a typeid expression~(\ref{expr.typeid}) whose operand is a glvalue of a
+a \link{typeid expression}{\ref{expr.typeid}} whose operand is a glvalue of a
 polymorphic class type;
 
 \item
@@ -5094,7 +5102,7 @@ a \grammarterm{new-expression}~(\ref{expr.new});
 a \grammarterm{delete-expression}~(\ref{expr.delete});
 
 \item
-a relational~(\ref{expr.rel}) or equality~(\ref{expr.eq})
+a \link{relational}{\ref{expr.rel}} or \link{equality}{\ref{expr.eq}}
 operator where the result is unspecified; or
 
 \item
@@ -5153,9 +5161,9 @@ is an expression of integral or
 unscoped enumeration type, implicitly converted to a prvalue, where the converted expression is a core constant expression.
 \begin{note}
 Such expressions may be
-used as bit-field lengths~(\ref{class.bit}), as enumerator
+used as \link{bit-field}{\ref{class.bit}} lengths, as enumerator
 initializers if the underlying type is not fixed~(\ref{dcl.enum}),
-and as alignments~(\ref{dcl.align}).
+and as \link{alignments}{\ref{dcl.align}}.
 \end{note}
 
 \pnum
@@ -5167,30 +5175,31 @@ implicit conversion sequence contains only
 
 \begin{itemize}
 \item user-defined conversions,
-\item lvalue-to-rvalue conversions~(\ref{conv.lval}),
-\item array-to-pointer conversions~(\ref{conv.array}),
-\item function-to-pointer conversions~(\ref{conv.func}),
-\item qualification conversions~(\ref{conv.qual}),
-\item integral promotions~(\ref{conv.prom}),
-\item integral conversions~(\ref{conv.integral}) other than narrowing conversions~(\ref{dcl.init.list}),
-\item null pointer conversions~(\ref{conv.ptr}) from \tcode{std::nullptr_t},
-\item null member pointer conversions~(\ref{conv.mem}) from \tcode{std::nullptr_t}, and
-\item function pointer conversions~(\ref{conv.fctptr}),
+\item \link{lvalue-to-rvalue conversions}{\ref{conv.lval}},
+\item \link{array-to-pointer conversions}{\ref{conv.array}},
+\item \link{function-to-pointer conversions}{\ref{conv.func}},
+\item \link{qualification conversions}{\ref{conv.qual}},
+\item \link{integral promotions}{\ref{conv.prom}},
+\item \link{integral conversions}{\ref{conv.integral}} other than
+\deflinkx{narrowing conversions}{narrowing conversion}{\ref{dcl.init.list}},
+\item \deflinkx{null pointer conversions}{null pointer conversion}{\ref{conv.ptr}} from \tcode{std::nullptr_t},
+\item \deflinkx{null member pointer conversions}{null member pointer conversion}{\ref{conv.mem}} from \tcode{std::nullptr_t}, and
+\item \link{function pointer conversions}{\ref{conv.fctptr}},
 \end{itemize}
 
 and where the reference binding (if any) binds directly.
 \begin{note}
-Such expressions may be used in \tcode{new}
-expressions~(\ref{expr.new}), as case expressions~(\ref{stmt.switch}),
+Such expressions may be used in \link{\tcode{new}
+expressions}{\ref{expr.new}}, as \link{case expressions}{\ref{stmt.switch}},
 as enumerator initializers if the underlying type is
-fixed~(\ref{dcl.enum}), as array bounds~(\ref{dcl.array}), and
-as non-type template
-arguments~(\ref{temp.arg}).
+\deflinkx{fixed}{type!underlying!fixed}{\ref{dcl.enum}}, as \link{array}{\ref{dcl.array}} bounds, and
+as non-type \link{template arguments}{\ref{temp.arg}}.
 \end{note}
 \indextext{contextually converted constant expression of type \tcode{bool}|see{conversion, contextual}}%
 \indextext{conversion!contextual to constant expression of type \tcode{bool}}%
 A \term{contextually converted constant expression of type \tcode{bool}} is
-an expression, contextually converted to \tcode{bool}~(Clause\ref{conv}),
+an expression, \deflinkx{contextually converted to \tcode{bool}}
+{conversion!contextual to \tcode{bool}}{Clause~\ref{conv}},
 where the converted expression is a constant expression and
 the conversion sequence contains only the conversions above.
 
@@ -5247,7 +5256,7 @@ It is unspecified whether the value of \tcode{f()} will be \tcode{true} or \tcod
 \pnum
 If an expression of literal class type is used in a context where an
 integral constant expression is required, then that expression is
-contextually implicitly converted (Clause~\ref{conv}) to an integral or unscoped
+\deflink{contextually implicitly converted}{Clause~\ref{conv}} to an integral or unscoped
 enumeration type
 and the selected conversion function shall be \tcode{constexpr}. \begin{example}
 \begin{codeblock}
diff --git a/source/future.tex b/source/future.tex
index 3d7e5a5..d8ed9eb 100644
--- a/source/future.tex
+++ b/source/future.tex
@@ -12,7 +12,7 @@ is defined as:
 Normative for the current edition of this International Standard,
 but having been identified as a candidate for removal from future revisions.
 An implementation may declare library names and entities described in this section with the
-\tcode{deprecated} attribute~(\ref{dcl.attr.deprecated}).
+\link{\tcode{deprecated} attribute}{\ref{dcl.attr.deprecated}}.
 
 \rSec1[depr.static_constexpr]{Redeclaration of \tcode{static constexpr} data members}
 
@@ -435,18 +435,17 @@ If
 \tcode{INT_MAX}.\footnote{The function signature
 \tcode{strlen(const char*)}
 is declared in
-\tcode{<cstring>}
 \indexlibrary{\idxcode{strlen}}%
 \indextext{\idxhdr{cstring}}%
 \indexlibrary{\idxhdr{cstring}}%
-(\ref{cstring.syn}).
+\link{\tcode{<cstring>}}{\ref{cstring.syn}}.
 The macro
 \tcode{INT_MAX}
 is defined in
-\tcode{<climits>}
 \indextext{\idxhdr{climits}}%
 \indexlibrary{\idxhdr{climits}}%
-(\ref{climits.syn}).}
+\link{\tcode{<climits>}}{\ref{climits.syn}}.
+}
 \end{itemize}
 
 \pnum
@@ -1046,11 +1045,10 @@ The constructor is
 \tcode{strstreambuf(s, n, s + std::strlen(s))}.\footnote{The function signature
 \tcode{strlen(const char*)}
 is declared in
-\tcode{<cstring>}
 \indexlibrary{\idxcode{strlen}}%
 \indextext{\idxhdr{cstring}}%
 \indexlibrary{\idxhdr{cstring}}%
-(\ref{cstring.syn}).}
+\link{\tcode{<cstring>}}{\ref{cstring.syn}}.}
 \end{itemize}
 \end{itemdescr}
 
@@ -1288,7 +1286,7 @@ bool uncaught_exception() noexcept;
 \rSec2[depr.weak.result_type]{Weak result types}
 
 \pnum
-A call wrapper~(\ref{func.def}) may have a \defn{weak result type}.
+A \deflink{call wrapper}{\ref{func.def}} may have a \defn{weak result type}.
 If it does, the type of its member type \tcode{result_type}
 is based on the type \tcode{T} of the wrapper's target object:
 \begin{itemize}
@@ -1531,7 +1529,7 @@ namespace std {
 
 \indexlibrary{\idxcode{reference_wrapper}!weak result type}%
 \pnum
-\tcode{reference_wrapper<T>} has a weak result type~(\ref{depr.weak.result_type}).
+\tcode{reference_wrapper<T>} has a \deflink{weak result type}{\ref{depr.weak.result_type}}.
 If \tcode{T} is a function type,
 \tcode{result_type} shall be a synonym for the return type of \tcode{T}.
 
@@ -1578,7 +1576,7 @@ which shall be synonyms for \tcode{size_t} and \tcode{Key}, respectively.
 \pnum
 The forwarding call wrapper \tcode{g}
 returned by a call to \tcode{bind(f, bound_args...)}~(\ref{func.bind.bind})
-shall have a weak result type~(\ref{depr.weak.result_type}).
+shall have a \deflink{weak result type}{\ref{depr.weak.result_type}}.
 
 \pnum
 The forwarding call wrapper \tcode{g}
@@ -1901,8 +1899,8 @@ namespace std {
 results into uninitialized memory. The template parameter
 \tcode{OutputIterator} is required to have its \tcode{operator*} return an
 object for which \tcode{operator\&} is defined and returns a pointer to
-\tcode{T}, and is also required to satisfy the requirements of an output
-iterator~(\ref{output.iterators}).
+\tcode{T}, and is also required to satisfy the requirements of an \link{output
+iterator}{\ref{output.iterators}}.
 
 \indexlibrary{\idxcode{raw_storage_iterator}!constructor}%
 \begin{itemdecl}
@@ -2104,7 +2102,7 @@ For \tcode{result_of<Fn(ArgTypes...)>},
 \pnum
 \tcode{is_literal_type<T>} is a \tcode{UnaryTypeTrait}~(\ref{meta.rqmts})
 with a base characteristic of \tcode{true_type}
-if \tcode{T} is a literal type~(\ref{basic.types}), and
+if \tcode{T} is a \deflink{literal type}{\ref{basic.types}}, and
 \tcode{false_type} otherwise.
 The partial specialization \tcode{result_of<Fn(ArgTypes...)>} is a
 \tcode{TransformationTrait} whose member typedef \tcode{type} is defined
diff --git a/source/grammar.tex b/source/grammar.tex
index 149fd5e..3c01043 100644
--- a/source/grammar.tex
+++ b/source/grammar.tex
@@ -17,10 +17,10 @@ to weed out syntactically valid but meaningless constructs.
 \pnum
 \indextext{keyword}%
 New context-dependent keywords are introduced into a program by
-\tcode{typedef}~(\ref{dcl.typedef}),
-\tcode{namespace}~(\ref{namespace.def}),
-class~(Clause \ref{class}), enumeration~(\ref{dcl.enum}), and
-\tcode{template}~(Clause \ref{temp})
+\link{\tcode{typedef}}{\ref{dcl.typedef}},
+\link{\tcode{namespace}}{\ref{namespace.def}},
+\link{class}{Clause \ref{class}}, \link{enumeration}{\ref{dcl.enum}}, and
+\link{\tcode{template}}{Clause \ref{temp}}
 declarations.
 
 \begin{ncbnf}
diff --git a/source/intro.tex b/source/intro.tex
index d60a5cd..fa6044d 100644
--- a/source/intro.tex
+++ b/source/intro.tex
@@ -127,7 +127,7 @@ comma-separated list bounded by the parentheses~(\ref{cpp.replace})
 \indexdefn{argument}%
 \indexdefn{argument!throw expression}%
 \definition{argument}{defns.argument.throw}
-\defncontext{throw expression} the operand of \tcode{throw}~(\ref{expr.throw})
+\defncontext{throw expression} the operand of \link{\tcode{throw}}{\ref{expr.throw}}
 
 \indexdefn{argument}%
 \indexdefn{argument!template instantiation}%
@@ -157,13 +157,14 @@ implementation's output messages
 
 \indexdefn{type!dynamic}%
 \definition{dynamic type}{defns.dynamic.type}
-\defncontext{glvalue} type of the most derived object~(\ref{intro.object}) to which the
+\defncontext{glvalue} type of the \deflink{most derived object}{\ref{intro.object}} to which the
 glvalue refers\\
 \begin{example}
-If a pointer~(\ref{dcl.ptr}) \tcode{p} whose static type is ``pointer to
-class \tcode{B}'' is pointing to an object of class \tcode{D}, derived
-from \tcode{B} (Clause~\ref{class.derived}), the dynamic type of the
-expression \tcode{*p} is ``\tcode{D}''. References~(\ref{dcl.ref}) are
+If a \link{pointer}{\ref{dcl.ptr}} \tcode{p} whose static type is ``pointer to
+class \tcode{B}'' is pointing to an object of class \tcode{D},
+\link{derived}{Clause~\ref{class.derived}}
+from \tcode{B}, the dynamic type of the
+expression \tcode{*p} is ``\tcode{D}''. \link{References}{\ref{dcl.ref}} are
 treated similarly.
 \end{example}
 
@@ -173,7 +174,7 @@ treated similarly.
 
 \indexdefn{program!ill-formed}%
 \definition{ill-formed program}{defns.ill.formed}
-program that is not well-formed~(\ref{defns.well.formed})
+program that is not \link{well-formed}{\ref{defns.well.formed}}
 
 \indexdefn{behavior!implementation-defined}%
 \definition{implementation-defined behavior}{defns.impl.defined}
@@ -219,13 +220,13 @@ following the macro name
 
 \indexdefn{signature}%
 \definition{signature}{defns.signature}
-\defncontext{function} name, parameter-type-list~(\ref{dcl.fct}), and enclosing namespace (if any)\\
+\defncontext{function} name, \deflink{parameter-type-list}{\ref{dcl.fct}}, and enclosing namespace (if any)\\
 \begin{note} Signatures are used as a basis for
 name mangling and linking.\end{note}
 
 \indexdefn{signature}%
 \definition{signature}{defns.signature.templ}
-\defncontext{function template} name, parameter-type-list~(\ref{dcl.fct}), enclosing namespace (if any),
+\defncontext{function template} name, \deflink{parameter-type-list}{\ref{dcl.fct}}, enclosing namespace (if any),
 return type, and template parameter list
 
 \indexdefn{signature}%
@@ -235,13 +236,13 @@ and its template arguments (whether explicitly specified or deduced)
 
 \indexdefn{signature}%
 \definition{signature}{defns.signature.member}
-\defncontext{class member function} name, parameter-type-list~(\ref{dcl.fct}), class of which the
+\defncontext{class member function} name, \deflink{parameter-type-list}{\ref{dcl.fct}}, class of which the
 function is a member, \cv-qualifiers (if any),
 and \grammarterm{ref-qualifier} (if any)
 
 \indexdefn{signature}%
 \definition{signature}{defns.signature.member.templ}
-\defncontext{class member function template} name, parameter-type-list~(\ref{dcl.fct}), class of which the
+\defncontext{class member function template} name, \deflink{parameter-type-list}{\ref{dcl.fct}}, class of which the
 function is a member, \cv-qualifiers (if any),
 \grammarterm{ref-qualifier} (if any), return type (if any), and template parameter list
 
@@ -277,8 +278,8 @@ characteristic of the environment (with or without the issuance of a
 diagnostic message), to terminating a translation or execution (with the
 issuance of a diagnostic message). Many erroneous program constructs do
 not engender undefined behavior; they are required to be diagnosed.
-Evaluation of a constant expression never exhibits behavior explicitly
-specified as undefined~(\ref{expr.const}).
+Evaluation of a \deflink{constant expression}{\ref{expr.const}} never
+exhibits behavior explicitly specified as undefined.
 \end{note}
 
 \indexdefn{behavior!unspecified}%
@@ -293,7 +294,7 @@ possible behaviors is usually delineated by this International Standard.
 \indexdefn{program!well-formed}%
 \definition{well-formed program}{defns.well.formed}
 \Cpp{}  program constructed according to the syntax rules, diagnosable
-semantic rules, and the one-definition rule~(\ref{basic.def.odr}).%
+semantic rules, and the \link{one-definition rule}{\ref{basic.def.odr}}.%
 \indextext{definitions|)}
 
 \rSec0[intro]{General principles}
@@ -369,7 +370,7 @@ see~\ref{temp.deduct}.
 \indextext{conformance requirements!classes}%
 \indextext{conformance requirements!class templates}%
 For classes and class templates, the library Clauses specify partial
-definitions. Private members~(Clause~\ref{class.access}) are not
+definitions. \link{Private members}{Clause~\ref{class.access}} are not
 specified, but each implementation shall supply them to complete the
 definitions according to the description in the library Clauses.
 
@@ -380,13 +381,13 @@ consistent with the descriptions in the library Clauses.
 
 \pnum
 The names defined in the library have namespace
-scope~(\ref{basic.namespace}). A \Cpp{}  translation
-unit~(\ref{lex.phases}) obtains access to these names by including the
-appropriate standard library header~(\ref{cpp.include}).
+scope~(\ref{basic.namespace}). A \Cpp{}  \link{translation
+unit}{\ref{lex.phases}} obtains access to these names by \link{including}{\ref{cpp.include}} the
+appropriate standard library header.
 
 \pnum
 The templates, classes, functions, and objects in the library have
-external linkage~(\ref{basic.link}). The implementation provides
+external \link{linkage}{\ref{basic.link}}. The implementation provides
 definitions for standard library entities, as necessary, while combining
 translation units to form a complete \Cpp{}  program~(\ref{lex.phases}).%
 \indextext{conformance requirements!library|)}
@@ -492,9 +493,9 @@ identifiers separated by commas).
 \indextext{memory model|(}%
 The fundamental storage unit in the \Cpp{} memory model is the
 \defn{byte}.
-A byte is at least large enough to contain any member of the basic
+A byte is at least large enough to contain any member of the
 \indextext{character set!basic execution}%
-execution character set~(\ref{lex.charset})
+\deflinkx{basic execution character set}{character set!basic execution}{\ref{lex.charset}}
 and the eight-bit code units of the Unicode UTF-8 encoding form
 and is composed of a contiguous sequence of
 bits,\footnote{The number of bits in a byte is reported by the macro
@@ -514,8 +515,8 @@ A \defn{memory location} is either an object of scalar type or a maximal
 sequence of adjacent bit-fields all having nonzero width. \begin{note} Various
 features of the language, such as references and virtual functions, might
 involve additional memory locations that are not accessible to programs but are
-managed by the implementation. \end{note} Two or more threads of
-execution~(\ref{intro.multithread}) can access separate memory
+managed by the implementation. \end{note} Two or more \link{threads of
+execution}{\ref{intro.multithread}} can access separate memory
 locations without interfering with each other.
 
 \pnum
@@ -557,26 +558,26 @@ bit-fields \tcode{b} and \tcode{c} cannot be concurrently modified, but
 The constructs in a \Cpp{} program create, destroy, refer to, access, and
 manipulate objects.
 An \defn{object} is created
-by a definition~(\ref{basic.def}),
+by a \link{definition}{\ref{basic.def}},
 by a \grammarterm{new-expression}~(\ref{expr.new}),
-when implicitly changing the active member of a union~(\ref{class.union}),
+when implicitly changing the active member of a \link{union}{\ref{class.union}},
 or
 when a temporary object is created~(\ref{conv.rval}, \ref{class.temporary}).
 An object occupies a region of storage
 in its period of construction~(\ref{class.cdtor}),
-throughout its lifetime~(\ref{basic.life}),
+throughout its \link{lifetime}{\ref{basic.life}},
 and
 in its period of destruction~(\ref{class.cdtor}).
 \begin{note} A function is not an object, regardless of whether or not it
 occupies storage in the way that objects do. \end{note}
 The properties of an
 object are determined when the object is created. An object can have a
-name~(Clause~\ref{basic}). An object has a storage
-duration~(\ref{basic.stc}) which influences its
-lifetime~(\ref{basic.life}). An object has a
-type~(\ref{basic.types}).
+\deflink{name}{Clause~\ref{basic}}. An object has a
+\deflink{storage duration}{\ref{basic.stc}} which influences its
+\link{lifetime}{\ref{basic.life}}. An object has a
+\link{type}{\ref{basic.types}}.
 Some objects are
-polymorphic~(\ref{class.virtual}); the implementation
+\deflinkx{polymorphic}{polymorphic class}{\ref{class.virtual}}; the implementation
 generates information associated with each such object that makes it
 possible to determine that object's type during program execution. For
 other objects, the interpretation of the values found therein is
@@ -698,7 +699,7 @@ of the (unique) object that contains \tcode{x}.
 \end{itemize}
 
 \pnum
-If a complete object, a data member~(\ref{class.mem}), or an array element is of
+If a complete object, a \deflink{data member}{\ref{class.mem}}, or an array element is of
 class type, its type is considered the \defn{most derived
 class}, to distinguish it from the class type of any base class subobject;
 an object of a most derived class type or of a non-class type is called a
@@ -706,11 +707,11 @@ an object of a most derived class type or of a non-class type is called a
 
 \pnum
 \indextext{most derived object!bit-field}%
-Unless it is a bit-field~(\ref{class.bit}), a most derived object shall have a
+Unless it is a \link{bit-field}{\ref{class.bit}}, a most derived object shall have a
 nonzero size and shall occupy one or more bytes of storage. Base class
 subobjects may have zero size. An object of trivially copyable or
-standard-layout type~(\ref{basic.types}) shall occupy contiguous bytes of
-storage.
+\deflinkx{standard-layout type}{standard-layout types}{\ref{basic.types}}
+shall occupy contiguous bytes of storage.
 
 \pnum
 \indextext{most derived object!bit-field}%
@@ -814,8 +815,8 @@ requirement on the implementation executing that program with that input
 operation).
 
 \pnum
-An instance of each object with automatic storage
-duration~(\ref{basic.stc.auto}) is associated with each entry into its
+An instance of each object with \link{automatic storage
+duration}{\ref{basic.stc.auto}} is associated with each entry into its
 block. Such an object exists and retains its last-stored value during
 the execution of the block and while the block is suspended (by a call
 of a function or receipt of a signal).
@@ -923,11 +924,11 @@ if \tcode{e} is a \grammarterm{lambda-expression}~(\ref{expr.prim.lambda}),
 the initialization of the entities captured by copy and
 the constituent expressions of the \grammarterm{initializer} of the \grammarterm{init-capture}{s},
 \item
-if \tcode{e} is a function call~(\ref{expr.call}) or implicitly invokes a function,
-the constituent expressions of each default argument~(\ref{dcl.fct.default})
+if \tcode{e} is a \link{function call}{\ref{expr.call}} or implicitly invokes a function,
+the constituent expressions of each \link{default argument}{\ref{dcl.fct.default}}
 used in the call, or
 \item
-if \tcode{e} creates an aggregate object~(\ref{dcl.init.aggr}),
+if \tcode{e} creates an \link{aggregate}{\ref{dcl.init.aggr}} object,
 the constituent expressions of each default member initializer~(\ref{class.mem})
 used in the initialization.
 \end{itemize}
@@ -945,7 +946,7 @@ are not subexpressions of the \grammarterm{lambda-expression}.
 A \defn{full-expression} is
 \begin{itemize}
 \item
-an unevaluated operand (Clause \ref{expr}),
+an \deflink{unevaluated operand}{Clause \ref{expr}},
 \item
 a \grammarterm{constant-expression}~(\ref{expr.const}),
 \item
@@ -954,7 +955,7 @@ a \grammarterm{mem-initializer}~(\ref{class.base.init}),
 including the constituent expressions of the initializer,
 \item
 an invocation of a destructor generated at the end of the lifetime
-of an object other than a temporary object~(\ref{class.temporary}), or
+of an object other than a \link{temporary object}{\ref{class.temporary}}, or
 \item
 an expression that is not a subexpression of another expression and
 that is not otherwise part of a full-expression.
@@ -1001,14 +1002,14 @@ struct B {
 \begin{note} The evaluation of a full-expression can include the
 evaluation of subexpressions that are not lexically part of the
 full-expression. For example, subexpressions involved in evaluating
-default arguments~(\ref{dcl.fct.default}) are considered to
+\link{default arguments}{\ref{dcl.fct.default}} are considered to
 be created in the expression that calls the function, not the expression
 that defines the default argument. \end{note}
 
 \pnum
 \indextext{value computation|(}%
 Reading an object designated by a \tcode{volatile}
-glvalue~(\ref{basic.lval}), modifying an object, calling a library I/O
+\deflink{glvalue}{\ref{basic.lval}}, modifying an object, calling a library I/O
 function, or calling a function that does any of those operations are
 all
 \defn{side effects}, which are changes in the state of the execution
@@ -1024,7 +1025,7 @@ may not have completed yet.
 
 \pnum
 \defnx{Sequenced before}{sequenced before} is an asymmetric, transitive, pair-wise relation between
-evaluations executed by a single thread~(\ref{intro.multithread}), which induces
+evaluations executed by a single \deflink{thread}{\ref{intro.multithread}}, which induces
 a partial order among those evaluations. Given any two evaluations \placeholder{A} and
 \placeholder{B}, if \placeholder{A} is sequenced before \placeholder{B}
 (or, equivalently, \placeholder{B} is \defn{sequenced after} \placeholder{A}),
@@ -1069,10 +1070,10 @@ evaluations. \end{note} The value computations of the operands of an
 operator are sequenced before the value computation of the result of the
 operator. If a
 \indextext{side effects}%
-side effect on a memory location~(\ref{intro.memory}) is unsequenced
+side effect on a \deflink{memory location}{\ref{intro.memory}} is unsequenced
 relative to either another side effect on the same memory location or
 a value computation using the value of any object in the same memory location,
-and they are not potentially concurrent~(\ref{intro.multithread}),
+and they are not \deflink{potentially concurrent}{\ref{intro.multithread}},
 the behavior is undefined.
 \begin{note}
 The next section imposes similar, but more complex restrictions on
@@ -1118,7 +1119,7 @@ unit.
 \begin{example}
 Evaluation of a \grammarterm{new-expression} invokes one or more allocation
 and constructor functions; see~\ref{expr.new}. For another example,
-invocation of a conversion function~(\ref{class.conv.fct}) can arise in
+invocation of a \link{conversion function}{\ref{class.conv.fct}} can arise in
 contexts in which no function call syntax appears.
 \end{example}
 The sequencing constraints on the execution of the called function (as
@@ -1149,9 +1150,10 @@ subsequently executed by the thread. \begin{note} When one thread creates anothe
 the initial call to the top-level function of the new thread is executed by the
 new thread, not by the creating thread. \end{note} Every thread in a program can
 potentially access every object and function in a program.\footnote{An object
-with automatic or thread storage duration~(\ref{basic.stc}) is associated with
+with automatic or thread \link{storage duration}{\ref{basic.stc}} is associated with
 one specific thread, and can be accessed by a different thread only indirectly
-through a pointer or reference~(\ref{basic.compound}).} Under a hosted
+through a \deflinkx{pointer}{type!pointer}{\ref{basic.compound}} or
+\deflink{reference}{\ref{basic.compound}}.} Under a hosted
 implementation, a \Cpp{} program can have more than one thread running
 concurrently. The execution of each thread proceeds as defined by the remainder
 of this International Standard. The execution of the entire program consists of an execution
@@ -1179,13 +1181,13 @@ and detailed visibility constraints. However, it also implicitly supports a
 simpler view for more restricted programs. \end{note}
 
 \pnum
-Two expression evaluations \defn{conflict} if one of them modifies a memory
-location~(\ref{intro.memory}) and the other one reads or modifies the same
+Two expression evaluations \defn{conflict} if one of them modifies a
+\deflink{memory location}{\ref{intro.memory}} and the other one reads or modifies the same
 memory location.
 
 \pnum
-The library defines a number of atomic operations (Clause~\ref{atomics}) and
-operations on mutexes (Clause~\ref{thread}) that are specially identified as
+The library defines a number of \link{atomic operations}{Clause~\ref{atomics}} and
+operations on \link{mutexes}{Clause~\ref{thread.mutex}} that are specially identified as
 synchronization operations. These operations play a special role in making
 assignments in one thread visible to another. A synchronization operation on one
 or more memory locations is either a consume operation, an acquire operation, a
@@ -1249,7 +1251,7 @@ the value of \placeholder{A} is used as an operand of \placeholder{B}, unless:
 \begin{itemize}
 \item
 \placeholder{B} is an invocation of any specialization of
-\tcode{std::kill_dependency}~(\ref{atomics.order}), or
+\linkx{\tcode{std::kill_dependency}}{\idxcode{kill_dependency}}{\ref{atomics.order}}, or
 \item
 \placeholder{A} is the left operand of a built-in logical AND (\tcode{\&\&},
 see~\ref{expr.log.and}) or logical OR (\tcode{||}, see~\ref{expr.log.or})
@@ -1258,8 +1260,8 @@ operator, or
 \placeholder{A} is the left operand of a conditional (\tcode{?:}, see~\ref{expr.cond})
 operator, or
 \item
-\placeholder{A} is the left operand of the built-in comma (\tcode{,})
-operator~(\ref{expr.comma}); \end{itemize} or
+\placeholder{A} is the left operand of the built-in \link{comma (\tcode{,})
+operator}{\ref{expr.comma}}; \end{itemize} or
 \item
 \placeholder{A} writes a scalar object or bit-field \placeholder{M}, \placeholder{B} reads the value
 written by \placeholder{A} from \placeholder{M}, and \placeholder{A} is sequenced before \placeholder{B}, or
@@ -1517,12 +1519,12 @@ empty loops, even when termination cannot be proven. \end{note}
 
 \pnum
 Executions of atomic functions
-that are either defined to be lock-free~(\ref{atomics.flag})
-or indicated as lock-free~(\ref{atomics.lockfree})
+that are either defined to be \link{lock-free}{\ref{atomics.flag}}
+or indicated as \link{lock-free}{\ref{atomics.lockfree}}
 are \defnx{lock-free executions}{lock-free execution}.
 \begin{itemize}
 \item
-  If there is only one thread that is not blocked~(\ref{defns.block})
+  If there is only one thread that is not \link{blocked}{\ref{defns.block}}
   in a standard library function,
   a lock-free execution in that thread shall complete.
   \begin{note}
@@ -1567,7 +1569,7 @@ an \defn{execution step}:
 \end{itemize}
 
 \pnum
-An invocation of a standard library function that blocks~(\ref{defns.block})
+An invocation of a standard library function that \link{blocks}{\ref{defns.block}}
 is considered to continuously execute execution steps while waiting for the
 condition that it blocks on to be satisfied.
 \begin{example}
@@ -1605,8 +1607,8 @@ this will happen in an unspecified but finite amount of time.
 It is \impldef{whether the thread that executes \tcode{main} and the threads created
 by \tcode{std::thread} provide concurrent forward progress guarantees} whether the
 implementation-created thread of execution that executes
-\tcode{main}~(\ref{basic.start.main}) and the threads of execution created by
-\tcode{std::thread}~(\ref{thread.thread.class}) provide concurrent forward progress
+\link{\tcode{main}}{\ref{basic.start.main}} and the threads of execution created by
+\link{\tcode{std::thread}}{\ref{thread.thread.class}} provide concurrent forward progress
 guarantees.
 \begin{note}
 General-purpose implementations are encouraged to provide these guarantees.
diff --git a/source/iostreams.tex b/source/iostreams.tex
index 4bbee20..1bd90f1 100644
--- a/source/iostreams.tex
+++ b/source/iostreams.tex
@@ -392,10 +392,9 @@ In this Clause, the type name \tcode{FILE} refers to
 the type
 \tcode{FILE}
 declared in
-\tcode{<cstdio>}
 \indextext{\idxhdr{cstdio}}%
 \indexlibrary{\idxhdr{cstdio}}%
-(\ref{cstdio.syn}).
+\link{\tcode{<cstdio>}}{\ref{cstdio.syn}}.
 
 \pnum
 The header
@@ -410,7 +409,7 @@ these objects.
 The objects are constructed and the associations are established at some
 time prior to or during the first time an object of class
 \tcode{ios_base::Init} is constructed, and in any case before the body
-of \tcode{main}~(\ref{basic.start.main}) begins execution.\footnote{If it is possible for them to do so, implementations are encouraged to
+of \link{\tcode{main}}{\ref{basic.start.main}} begins execution.\footnote{If it is possible for them to do so, implementations are encouraged to
 initialize the objects earlier than required.}
 The objects are not destroyed during program execution.\footnote{Constructors and destructors for static objects can
 access these objects to read input from
@@ -431,7 +430,7 @@ follows the same semantics as mixing such operations on
 as specified in the C standard library.
 
 \pnum
-Concurrent access to a synchronized~(\ref{ios.members.static}) standard iostream object's formatted and unformatted input~(\ref{istream}) and output~(\ref{ostream}) functions or a standard C stream by multiple threads shall not result in a data race~(\ref{intro.multithread}). \begin{note} Users must still synchronize concurrent use of these objects and streams by multiple threads if they wish to avoid interleaved characters. \end{note}
+Concurrent access to a synchronized~(\ref{ios.members.static}) standard iostream object's formatted and unformatted \link{input}{\ref{istream}} and \link{output}{\ref{ostream}} functions or a standard C stream by multiple threads shall not result in a \deflink{data race}{\ref{intro.multithread}}. \begin{note} Users must still synchronize concurrent use of these objects and streams by multiple threads if they wish to avoid interleaved characters. \end{note}
 
 \xref~ISO C 7.21.2.
 
@@ -452,7 +451,7 @@ associated with the object
 declared in
 \indextext{\idxhdr{cstdio}}%
 \indexlibrary{\idxhdr{cstdio}}%
-\tcode{<cstdio>}~(\ref{cstdio.syn}).
+\link{\tcode{<cstdio>}}{\ref{cstdio.syn}}.
 
 \pnum
 After the object
@@ -462,7 +461,7 @@ is initialized,
 returns
 \tcode{\&cout}.
 Its state is otherwise the same as required for
-\tcode{basic_ios<char>::init}~(\ref{basic.ios.cons}).
+\linkx{\tcode{basic_ios<char>::init}}{basic_ios!init}{\ref{basic.ios.cons}}.
 \end{itemdescr}
 
 \indexlibrary{\idxcode{cout}}%
@@ -480,7 +479,7 @@ associated with the object
 declared in
 \indextext{\idxhdr{cstdio}}%
 \indexlibrary{\idxhdr{cstdio}}%
-\tcode{<cstdio>}~(\ref{cstdio.syn}).
+\link{\tcode{<cstdio>}}{\ref{cstdio.syn}}.
 \end{itemdescr}
 
 \indexlibrary{\idxcode{cerr}}%
@@ -498,7 +497,7 @@ associated with the object
 declared in
 \indextext{\idxhdr{cstdio}}%
 \indexlibrary{\idxhdr{cstdio}}%
-\tcode{<cstdio>}~(\ref{cstdio.syn}).
+\link{\tcode{<cstdio>}}{\ref{cstdio.syn}}.
 
 \pnum
 After the object
@@ -507,7 +506,7 @@ is initialized,
 \tcode{cerr.flags() \& unitbuf}
 is nonzero and \tcode{cerr.tie()} returns \tcode{\&cout}.
 Its state is otherwise the same as required for
-\tcode{basic_ios<char>::init}~(\ref{basic.ios.cons}).
+\linkx{\tcode{basic_ios<char>::init}}{basic_ios!init}{\ref{basic.ios.cons}}.
 \end{itemdescr}
 
 \indexlibrary{\idxcode{clog}}%
@@ -525,7 +524,7 @@ associated with the object
 declared in
 \indextext{\idxhdr{cstdio}}%
 \indexlibrary{\idxhdr{cstdio}}%
-\tcode{<cstdio>}~(\ref{cstdio.syn}).
+\link{\tcode{<cstdio>}}{\ref{cstdio.syn}}.
 \end{itemdescr}
 
 \rSec2[wide.stream.objects]{Wide stream objects}
@@ -545,7 +544,7 @@ associated with the object
 declared in
 \indextext{\idxhdr{cstdio}}%
 \indexlibrary{\idxhdr{cstdio}}%
-\tcode{<cstdio>}~(\ref{cstdio.syn}).
+\link{\tcode{<cstdio>}}{\ref{cstdio.syn}}.
 
 \pnum
 After the object
@@ -555,7 +554,7 @@ is initialized,
 returns
 \tcode{\&wcout}.
 Its state is otherwise the same as required for
-\tcode{basic_ios<wchar_t>::init}~(\ref{basic.ios.cons}).
+\linkx{\tcode{basic_ios<wchar_t>::init}}{basic_ios!init}{\ref{basic.ios.cons}}.
 \end{itemdescr}
 
 \indexlibrary{\idxcode{wcout}}%
@@ -573,7 +572,7 @@ associated with the object
 declared in
 \indextext{\idxhdr{cstdio}}%
 \indexlibrary{\idxhdr{cstdio}}%
-\tcode{<cstdio>}~(\ref{cstdio.syn}).
+\link{\tcode{<cstdio>}}{\ref{cstdio.syn}}.
 \end{itemdescr}
 
 \indexlibrary{\idxcode{wcerr}}%
@@ -591,7 +590,7 @@ associated with the object
 declared in
 \indextext{\idxhdr{cstdio}}%
 \indexlibrary{\idxhdr{cstdio}}%
-\tcode{<cstdio>}~(\ref{cstdio.syn}).
+\link{\tcode{<cstdio>}}{\ref{cstdio.syn}}.
 
 \pnum
 After the object
@@ -600,7 +599,7 @@ is initialized,
 \tcode{wcerr.flags() \& unitbuf}
 is nonzero and \tcode{wcerr.tie()} returns \tcode{\&wcout}.
 Its state is otherwise the same as required for
-\tcode{basic_ios<wchar_t>::init}~(\ref{basic.ios.cons}).
+\linkx{\tcode{basic_ios<wchar_t>::init}}{basic_ios!init}{\ref{basic.ios.cons}}.
 \end{itemdescr}
 
 \indexlibrary{\idxcode{wclog}}%
@@ -618,7 +617,7 @@ associated with the object
 declared in
 \indextext{\idxhdr{cstdio}}%
 \indexlibrary{\idxhdr{cstdio}}%
-\tcode{<cstdio>}~(\ref{cstdio.syn}).
+\link{\tcode{<cstdio>}}{\ref{cstdio.syn}}.
 \end{itemdescr}
 
 \rSec1[iostreams.base]{Iostreams base classes}
@@ -959,7 +958,7 @@ using fmtflags = @\textit{T1}@;
 \pnum
 The type
 \tcode{fmtflags}
-is a bitmask type~(\ref{bitmask.types}).
+is a \link{bitmask type}{\ref{bitmask.types}}.
 Setting its elements has the effects indicated in Table~\ref{tab:iostreams.fmtflags.effects}.
 
 \begin{libefftab}{\tcode{fmtflags} effects}{tab:iostreams.fmtflags.effects}
@@ -1022,7 +1021,7 @@ using iostate = @\textit{T2}@;
 \pnum
 The type
 \tcode{iostate}
-is a bitmask type~(\ref{bitmask.types})
+is a \link{bitmask type}{\ref{bitmask.types}}
 that contains the elements indicated in Table~\ref{tab:iostreams.iostate.effects}.
 
 \begin{libefftab}{\tcode{iostate} effects}{tab:iostreams.iostate.effects}
@@ -1058,7 +1057,7 @@ using openmode = @\textit{T3}@;
 \pnum
 The type
 \tcode{openmode}
-is a bitmask type~(\ref{bitmask.types}).
+is a \link{bitmask type}{\ref{bitmask.types}}.
 It contains the elements indicated in Table~\ref{tab:iostreams.openmode.effects}.
 
 \begin{libefftab}{\tcode{openmode} effects}{tab:iostreams.openmode.effects}
@@ -1088,7 +1087,7 @@ using seekdir = @\textit{T4}@;
 \pnum
 The type
 \tcode{seekdir}
-is an enumerated type~(\ref{enumerated.types})
+is an \link{enumerated type}{\ref{enumerated.types}}
 that contains the elements indicated in Table~\ref{tab:iostreams.seekdir.effects}.
 
 \begin{libefftabmean}{\tcode{seekdir} effects}{tab:iostreams.seekdir.effects}
@@ -1125,7 +1124,7 @@ ensures the construction of the eight objects declared in
 \tcode{<io\-stream>}~(\ref{iostream.objects}) that associate file
 stream buffers with the standard C streams
 provided for by the functions declared in
-\tcode{<cstdio>}~(\ref{cstdio.syn}).
+\link{\tcode{<cstdio>}}{\ref{cstdio.syn}}.
 
 \pnum
 For the sake of exposition, the maintained data is presented here as:
@@ -1366,7 +1365,7 @@ bool sync_with_stdio(bool sync = true);
 \pnum
 \returns
 \tcode{true}
-if the previous state of the standard iostream objects~(\ref{iostream.objects})
+if the previous state of the \link{standard iostream objects}{\ref{iostream.objects}}
 was synchronized and otherwise returns
 \tcode{false}.
 The first time it is called,
@@ -1431,8 +1430,8 @@ static int xalloc();
 
 \pnum
 \remarks
-Concurrent access to this function by multiple threads shall not result in a data
-race~(\ref{intro.multithread}).
+Concurrent access to this function by multiple threads shall not result in a
+\deflink{data race}{\ref{intro.multithread}}.
 \end{itemdescr}
 
 \indexlibrarymember{iword}{ios_base}%
@@ -1861,10 +1860,11 @@ The destructor does not destroy
 \tcode{rdbuf()}.
 \end{itemdescr}
 
-\indexlibrarymember{init}{basic_ios}%
+\begin{indexed}{\indexlibrarymember{init}{basic_ios}}
 \begin{itemdecl}
 void init(basic_streambuf<charT, traits>* sb);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2226,7 +2226,7 @@ otherwise
 If \tcode{((state | (rdbuf() ? goodbit : badbit)) \& exceptions()) == 0},
 returns.
 Otherwise, the function throws an object of class
-\tcode{basic_ios::failure}~(\ref{ios::failure}),
+\link{\tcode{basic_ios::failure}}{\ref{ios::failure}},
 constructed with
 \impldef{argument values to construct \tcode{basic_ios::failure}}
 argument values.%
@@ -2243,7 +2243,7 @@ void setstate(iostate state);
 Calls
 \tcode{clear(rdstate() | state)}
 (which may throw
-\tcode{basic_ios::failure}~(\ref{ios::failure})).
+\link{\tcode{basic_ios::failure}}{\ref{ios::failure}}).
 \end{itemdescr}
 
 \indexlibrarymember{good}{basic_ios}%
@@ -2341,10 +2341,11 @@ Calls
 
 \rSec3[fmtflags.manip]{\tcode{fmtflags} manipulators}
 
-\indexlibrary{\idxcode{boolalpha}}%
+\begin{indexed}{\indexlibrary{\idxcode{boolalpha}}}
 \begin{itemdecl}
 ios_base& boolalpha(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2357,10 +2358,11 @@ Calls
 \tcode{str}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{noboolalpha}}%
+\begin{indexed}{\indexlibrary{\idxcode{noboolalpha}}}
 \begin{itemdecl}
 ios_base& noboolalpha(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2373,10 +2375,11 @@ Calls
 \tcode{str}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{showbase}}%
+\begin{indexed}{\indexlibrary{\idxcode{showbase}}}
 \begin{itemdecl}
 ios_base& showbase(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2389,10 +2392,11 @@ Calls
 \tcode{str}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{noshowbase}}%
+\begin{indexed}{\indexlibrary{\idxcode{noshowbase}}}
 \begin{itemdecl}
 ios_base& noshowbase(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2405,10 +2409,11 @@ Calls
 \tcode{str}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{showpoint}}%
+\begin{indexed}{\indexlibrary{\idxcode{showpoint}}}
 \begin{itemdecl}
 ios_base& showpoint(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2583,10 +2588,11 @@ Calls
 \tcode{str}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{left}}%
+\begin{indexed}{\indexlibrary{\idxcode{left}}}
 \begin{itemdecl}
 ios_base& left(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2599,10 +2605,11 @@ Calls
 \tcode{str}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{right}}%
+\begin{indexed}{\indexlibrary{\idxcode{right}}}
 \begin{itemdecl}
 ios_base& right(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2617,10 +2624,11 @@ Calls
 
 \rSec3[basefield.manip]{\tcode{basefield} manipulators}
 
-\indexlibrary{\idxcode{dec}}%
+\begin{indexed}{\indexlibrary{\idxcode{dec}}}
 \begin{itemdecl}
 ios_base& dec(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2641,10 +2649,11 @@ to change the format flags stored in
 \tcode{cout}.}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{hex}}%
+\begin{indexed}{\indexlibrary{\idxcode{hex}}}
 \begin{itemdecl}
 ios_base& hex(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2657,10 +2666,11 @@ Calls
 \tcode{str}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{oct}}%
+\begin{indexed}{\indexlibrary{\idxcode{oct}}}
 \begin{itemdecl}
 ios_base& oct(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2675,10 +2685,11 @@ Calls
 
 \rSec3[floatfield.manip]{\tcode{floatfield} manipulators}
 
-\indexlibrary{\idxcode{fixed}}%
+\begin{indexed}{\indexlibrary{\idxcode{fixed}}}
 \begin{itemdecl}
 ios_base& fixed(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2691,10 +2702,11 @@ Calls
 \tcode{str}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{scientific}}%
+\begin{indexed}{\indexlibrary{\idxcode{scientific}}}
 \begin{itemdecl}
 ios_base& scientific(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2707,10 +2719,11 @@ Calls
 \tcode{str}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{hexfloat}}%
+\begin{indexed}{\indexlibrary{\idxcode{hexfloat}}}
 \begin{itemdecl}
 ios_base& hexfloat(ios_base& str);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\effects Calls \tcode{str.setf(ios_base::fixed | ios_base::scientific,
@@ -2742,30 +2755,33 @@ Calls \tcode{str.unsetf(ios_base::floatfield)}.
 
 \rSec3[error.reporting]{Error reporting}
 
-\indexlibrarymember{make_error_code}{io_errc}%
+\begin{indexed}{\indexlibrarymember{make_error_code}{io_errc}}
 \begin{itemdecl}
 error_code make_error_code(io_errc e) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
 \returns \tcode{error_code(static_cast<int>(e), iostream_category())}.
 \end{itemdescr}
 
-\indexlibrarymember{make_error_condition}{io_errc}%
+\begin{indexed}{\indexlibrarymember{make_error_condition}{io_errc}}
 \begin{itemdecl}
 error_condition make_error_condition(io_errc e) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
 \returns \tcode{error_condition(static_cast<int>(e), iostream_category())}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{iostream_category}}%
+\begin{indexed}{\indexlibrary{\idxcode{iostream_category}}}
 \begin{itemdecl}
 const error_category& iostream_category() noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -3199,7 +3215,7 @@ streamsize in_avail();
 If a read position is available, returns
 \tcode{egptr() - gptr()}.
 Otherwise returns
-\tcode{showmanyc()} (\ref{streambuf.virt.get}).
+\linkx{\tcode{showmanyc()}}{basic_streambuf!showmanyc}{\ref{streambuf.virt.get}}.
 \end{itemdescr}
 
 \indexlibrarymember{snextc}{basic_streambuf}%
@@ -3619,11 +3635,12 @@ Returns zero.
 
 \rSec4[streambuf.virt.get]{Get area}
 
-\indexlibrarymember{showmanyc}{basic_streambuf}%
+\begin{indexed}{\indexlibrarymember{showmanyc}{basic_streambuf}}
 \begin{itemdecl}
 streamsize showmanyc();@\footnote{\textrm{The morphemes of \tcode{showmanyc}\
 are ``es-how-many-see'', not ``show-manic''.}}@
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -4146,7 +4163,7 @@ namespace std {
   template <class charT, class traits = char_traits<charT>>
   class basic_istream : virtual public basic_ios<charT, traits> {
   public:
-    // types (inherited from \tcode{basic_ios} (\ref{ios})):
+    // types (inherited from \link{\tcode{basic_ios}}{\ref{ios}}):
     using char_type   = charT;
     using int_type    = typename traits::int_type;
     using pos_type    = typename traits::pos_type;
@@ -4569,7 +4586,7 @@ operator>>(void*& val);
 \pnum
 As in the case of the inserters, these extractors depend on the
 locale's
-\tcode{num_get<>}~(\ref{locale.num.get}) object to perform parsing the input
+\link{\tcode{num_get<>}}{\ref{locale.num.get}} object to perform parsing the input
 stream data.
 These extractors behave as formatted input functions (as described in~\ref{istream.formatted.reqmts}).  After a sentry object is constructed, the
 conversion occurs as if performed by the following code fragment:
@@ -4669,7 +4686,7 @@ This extractor does not behave as a formatted input function
 \pnum
 \returns
 \tcode{pf(*this)}.\footnote{See, for example, the function signature
-\tcode{ws(basic_istream\&)}~(\ref{istream.manip}).%
+\linkx{\tcode{ws(basic_istream\&)}}{ws}{\ref{istream.manip}}.%
 \indexlibrary{\idxcode{ws}}}%
 \end{itemdescr}
 
@@ -4702,7 +4719,7 @@ basic_istream<charT, traits>& operator>>(ios_base& (*pf)(ios_base&));
 \effects
 Calls
 \tcode{pf(*this)}.\footnote{See, for example, the function signature
-\tcode{dec(ios_base\&)}~(\ref{basefield.manip}).}
+\linkx{\tcode{dec(ios_base\&)}}{dec}{\ref{basefield.manip}}.}
 This extractor does not behave as a formatted input function
 (as described in~\ref{istream.formatted.reqmts}).
 
@@ -4809,7 +4826,7 @@ basic_istream<charT, traits>& operator>>(basic_streambuf<charT, traits>* sb);
 \begin{itemdescr}
 \pnum
 \effects
-Behaves as an unformatted input function (\ref{istream.unformatted}).
+Behaves as an \link{unformatted input function}{\ref{istream.unformatted}}.
 If \tcode{sb} is null, calls
 \tcode{setstate(fail\-bit)},
 which may throw
@@ -5203,7 +5220,7 @@ characters and discards them.
 Characters are extracted until any of the following occurs:
 \begin{itemize}
 \item
-\tcode{n != numeric_limits<streamsize>::max()}~(\ref{numeric.limits})
+\tcode{n != \deflinkx{numeric_limits<streamsize>::max()}{numeric_limits!max}{\ref{numeric.limits}}}
 and
 \tcode{n} characters have been extracted so far
 \item
@@ -5523,21 +5540,22 @@ In case of failure, the function calls \tcode{setstate(\brk{}failbit)} (which ma
 
 \rSec3[istream.manip]{Standard \tcode{basic_istream} manipulators}
 
-\indexlibrary{\idxcode{ws}}%
+\begin{indexed}{\indexlibrary{\idxcode{ws}}}
 \begin{itemdecl}
 template <class charT, class traits>
   basic_istream<charT, traits>& ws(basic_istream<charT, traits>& is);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
 \effects
-Behaves as an unformatted input function (\ref{istream.unformatted}), except that it does not count the number of characters extracted and
+Behaves as an \link{unformatted input function}{\ref{istream.unformatted}}, except that it does not count the number of characters extracted and
 does not affect the value returned by subsequent calls to is.gcount(). After
 constructing a sentry object extracts characters as long as the next available
 character \tcode{c} is whitespace or until there are no more characters in the sequence.
 Whitespace characters are distinguished with the same criterion as used by
-\tcode{sentry::sentry}~(\ref{istream::sentry}).
+\link{\tcode{sentry::sentry}}{\ref{istream::sentry}}.
 If
 \tcode{ws}
 stops extracting characters because there are no more available it sets
@@ -5624,9 +5642,9 @@ explicit basic_iostream(basic_streambuf<charT, traits>* sb);
 \effects
 Constructs an object of class \tcode{basic_iostream},
 initializing the base class subobjects with
-\tcode{basic_istream<charT, traits>(sb)}~(\ref{istream})
+\link{\tcode{basic_istream<charT, traits>(sb)}}{\ref{istream}}
 and
-\tcode{basic_ostream<charT, traits>(sb)}~(\ref{ostream}).
+\link{\tcode{basic_ostream<charT, traits>(sb)}}{\ref{ostream}}.
 
 \pnum
 \postconditions
@@ -5706,7 +5724,7 @@ namespace std {
   template <class charT, class traits = char_traits<charT>>
   class basic_ostream : virtual public basic_ios<charT, traits> {
   public:
-    // types (inherited from \tcode{basic_ios} (\ref{ios})):
+    // types (inherited from \link{\tcode{basic_ios}}{\ref{ios}}):
     using char_type   = charT;
     using int_type    = typename traits::int_type;
     using pos_type    = typename traits::pos_type;
@@ -5851,7 +5869,7 @@ explicit basic_ostream(basic_streambuf<charT, traits>* sb);
 \effects
 Constructs an object of class
 \tcode{basic_ostream}, initializing the base class subobject with
-\tcode{basic_ios<charT, traits>::init(sb)}~(\ref{basic.ios.cons}).
+\tcode{basic_ios<charT, traits>::init(sb)}~(\ref{basic.ios.cons}). % todo
 
 \pnum
 \postconditions
@@ -6271,7 +6289,7 @@ in~\ref{ostream.formatted.reqmts}).
 \returns
 \tcode{pf(*this)}.\footnote{See, for example, the function signature
 \indexlibrary{\idxcode{endl}}%
-\tcode{endl(basic_ostream\&)}~(\ref{ostream.manip}).}
+\liblinkx{\tcode{endl(basic_ostream\&)}}{endl}{\ref{ostream.manip}}.}
 \end{itemdescr}
 
 \indexlibrarymember{operator<<}{basic_ostream}%
@@ -6292,7 +6310,7 @@ behave as a formatted output function (as described in~\ref{ostream.formatted.re
 \returns
 \tcode{*this}.\footnote{See, for example, the function signature
 \indexlibrary{\idxcode{dec}}%
-\tcode{dec(ios_base\&)}~(\ref{basefield.manip}).}
+\liblinkx{\tcode{dec(ios_base\&)}}{dec}{\ref{basefield.manip}}.}
 \end{itemdescr}
 
 \indexlibrarymember{operator<<}{basic_ostream}%
@@ -6321,7 +6339,7 @@ basic_ostream<charT, traits>& operator<<(basic_streambuf<charT, traits>* sb);
 \begin{itemdescr}
 \pnum
 \effects
-Behaves as an unformatted output function (\ref{ostream.unformatted}).
+Behaves as an \link{unformatted output function}{\ref{ostream.unformatted}}.
 After the sentry object is
 constructed, if
 \tcode{sb} is null calls
@@ -6378,7 +6396,7 @@ return *this << s;
 \end{codeblock}
 where \tcode{s} is an
 \impldef{NTCTS in \tcode{basic_ostream<charT, traits>\& op\-er\-ator<<(nullptr_t)}}
-NTCTS~(\ref{defns.ntcts}).
+\link{NTCTS}{\ref{defns.ntcts}}.
 \end{itemdescr}
 
 \rSec4[ostream.inserters.character]{Character inserter function templates}
@@ -6402,7 +6420,7 @@ template<class traits>
 \begin{itemdescr}
 \pnum
 \effects
-Behaves as a formatted output function~(\ref{ostream.formatted.reqmts})
+Behaves as a \link{formatted output function}{\ref{ostream.formatted.reqmts}}
 of \tcode{out}. Constructs a character sequence \tcode{seq}.
 If \tcode{c} has type
 \tcode{char}
@@ -6594,11 +6612,12 @@ Otherwise, if the sentry object returns \tcode{false}, does nothing.
 
 \rSec3[ostream.manip]{Standard \tcode{basic_ostream} manipulators}
 
-\indexlibrary{\idxcode{endl}}%
+\begin{indexed}{\indexlibrary{\idxcode{endl}}}
 \begin{itemdecl}
 template <class charT, class traits>
   basic_ostream<charT, traits>& endl(basic_ostream<charT, traits>& os);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -6951,7 +6970,7 @@ specialization of the \tcode{basic_string} template (Clause~\ref{strings}).
 
 \pnum
 \effects The expression \tcode{in >> get_money(mon, intl)} described below
-behaves as a formatted input function~(\ref{istream.formatted.reqmts}).
+behaves as a \link{formatted input function}{\ref{istream.formatted.reqmts}}.
 
 \pnum
 \returns An object of unspecified type such that if
@@ -6993,7 +7012,7 @@ specialization of the \tcode{basic_string} template (Clause~\ref{strings}).
 \returns An object of unspecified type such that if
 \tcode{out} is an object of type \tcode{basic_ostream<charT, traits>}
 then the expression \tcode{out << put_money(mon, intl)} behaves as a
-formatted output function~(\ref{ostream.formatted.reqmts}) that calls
+\link{formatted output function}{\ref{ostream.formatted.reqmts}} that calls
 \tcode{f(out, mon, intl)}, where the function \tcode{f} is defined as:
 
 \begin{codeblock}
@@ -7113,7 +7132,7 @@ of \tcode{basic_ostream} with member type \tcode{char_type} the same as
 \tcode{charT} and with member type \tcode{traits_type}, which in the second and third
 forms is the same as \tcode{traits}, then the expression
 \tcode{out << quoted(s, delim, escape)}
-behaves as a formatted output function~(\ref{ostream.formatted.reqmts})
+behaves as a \link{formatted output function}{\ref{ostream.formatted.reqmts}}
 of \tcode{out}. This forms a character sequence \tcode{seq}, initially
 consisting of the following elements:
 \begin{itemize}
@@ -8700,7 +8719,7 @@ and
 are declared, in
 \indextext{\idxhdr{cstdio}}%
 \indexlibrary{\idxhdr{cstdio}}%
-\tcode{<cstdio>}~(\ref{cstdio.syn}).}
+\link{\tcode{<cstdio>}}{\ref{cstdio.syn}}.}
 
 \pnum
 If the repositioning operation fails, calls
@@ -9975,7 +9994,7 @@ but instead are required to report an error as described above.
 \rSec3[fs.conform.os]{Operating system dependent behavior conformance}
 \pnum
 Some behavior is specified as being
-operating system dependent (\ref{fs.def.osdep}). The operating system an
+\link{operating system dependent}{\ref{fs.def.osdep}}. The operating system an
 implementation is dependent upon is
 \impldef{operating system on which implementation depends}.
 
@@ -9986,7 +10005,7 @@ system emulator rather than the actual underlying operating system.
 \rSec3[fs.race.behavior]{File system race behavior}
 
 \pnum
-Behavior is undefined if calls to functions provided by this subclause introduce a file system race~(\ref{fs.def.race}).
+Behavior is undefined if calls to functions provided by this subclause introduce a \link{file system race}{\ref{fs.def.race}}.
 
 \pnum
 If the possibility of a file system race would make it unreliable for a
@@ -10026,7 +10045,7 @@ other files, possibly including other directory files.
 \definition{file}{fs.def.file}
 An object within a file system that holds user or system data. Files can be written to, or read from, or both. A file
 has certain attributes, including type. File types include regular files
-and directories. Other types of files, such as symbolic links~(\ref{fs.def.symlink}),
+and directories. Other types of files, such as \link{symbolic links}{\ref{fs.def.symlink}},
 may be supported by the implementation.
 
 \definition{file system}{fs.def.filesystem}
@@ -10055,7 +10074,7 @@ The following characteristics of filenames are operating system dependent:
 \end{itemize}
 
 \definition{hard link}{fs.def.hardlink}
-A link~(\ref{fs.def.link}) to an existing file. Some
+A \link{link}{\ref{fs.def.link}} to an existing file. Some
 file systems support multiple hard links to a file. If the last hard link to a
 file is removed, the file itself is removed.
 \begin{note} A hard link can be thought of as a shared-ownership smart
@@ -10120,7 +10139,7 @@ The maximum number of elements in the sequence is operating system dependent.
 
 \definition{pathname}{fs.def.pathname}
 A character string that represents the name of a path. Pathnames are
-formatted according to the generic pathname format grammar~(\ref{fs.path.generic}) or an
+formatted according to the \link{generic pathname format}{\ref{fs.path.generic}} grammar or an
 operating system dependent
 native pathname format.
 
@@ -10162,7 +10181,7 @@ unless \tcode{EcharT} is one of the encoded character types.
 
 \pnum
 Template parameters named \tcode{InputIterator} shall meet the
-input iterator requirements~(\ref{input.iterators}) and shall
+\link{input iterator requirements}{\ref{input.iterators}} and shall
 have a value type that is one of the encoded character types.
 
 \pnum
@@ -10174,7 +10193,7 @@ they are not included as permitted types. \end{note}
 
 \pnum
 Template parameters named \tcode{Allocator} shall meet the
-Allocator requirements~(\ref{allocator.requirements}).
+\link{Allocator requirements}{\ref{allocator.requirements}}.
 
 \rSec3[fs.req.namespace]{Namespaces and headers}
 
@@ -10408,7 +10427,7 @@ namespace std::filesystem {
 
 \pnum
 \tcode{\textit{trivial-clock}} is an \impldef{type of filesystem trivial clock} type
-that satisfies the \tcode{TrivialClock} requirements~(\ref{time.clock.req})
+that satisfies the \link{\tcode{TrivialClock} requirements}{\ref{time.clock.req}}
 and that is capable of representing and measuring file time values.
 Implementations should ensure that the resolution and range of
 \tcode{file_time_type} reflect the operating system dependent resolution and range
@@ -10472,8 +10491,8 @@ handle errors as follows, unless otherwise specified:
 
 \indexlibrary{\idxcode{path}}%
 \pnum
-An object of class \tcode{path} represents a path~(\ref{fs.def.path})
-and contains a pathname~(\ref{fs.def.pathname}).
+An object of class \tcode{path} represents a \link{path}{\ref{fs.def.path}}
+and contains a \link{pathname}{\ref{fs.def.pathname}}.
 Such an object is concerned only with the lexical and syntactic aspects
 of a path. The path does not necessarily exist in external storage, and the
 pathname is not necessarily valid for the current operating
@@ -10759,8 +10778,8 @@ because on these systems:
 \pnum
 Several functions are defined to accept \term{detected-format} arguments,
 which are character sequences. A detected-format argument represents a path
-using either a pathname in the generic format~(\ref{fs.path.generic})
-or a pathname in the native format~(\ref{fs.def.native}).
+using either a pathname in the \link{generic format}{\ref{fs.path.generic}}
+or a pathname in the \link{native format}{\ref{fs.def.native}}.
 Such an argument is taken to be in the generic format if and only if
 it matches the generic format and is not acceptable to the operating system
 as a native path.
@@ -10844,7 +10863,7 @@ standard library functions that perform file operations using narrow character
 strings to identify paths. Changing this behavior would be surprising and error
 prone.
 \end{note}
-\item \tcode{wchar_t}: The encoding is the native wide encoding~(\ref{fs.def.native.encode}).
+\item \tcode{wchar_t}: The encoding is the \link{native wide encoding}{\ref{fs.def.native.encode}}.
 The method of conversion is unspecified.
 \begin{note}
 For Windows-based operating systems \tcode{path::value_type} is \tcode{wchar_t}
@@ -10904,7 +10923,7 @@ denotes a possibly \tcode{const} encoded character type~(\ref{temp.deduct}).
 
 \pnum
 \begin{note}
-See path conversions~(\ref{fs.path.cvt})
+See \link{path conversions}{\ref{fs.path.cvt}}
 for how the value types above and their encodings convert to
 \tcode{path::value_type} and its encoding.
 \end{note}
@@ -10999,7 +11018,7 @@ follows:
 \begin{itemize}
 \item
 If \tcode{value_type} is \tcode{wchar_t}, converts to the native
-wide encoding~(\ref{fs.def.native.encode}) using the \tcode{codecvt<\brk{}wchar_t, char, mbstate_t>}
+wide encoding~(\ref{fs.def.native.encode}) using the \tcode{codecvt<\brk{}wchar_t, char, mbstate_t>} % todo
 facet of \tcode{loc}.
 \item
 Otherwise a conversion is performed using the
@@ -11381,7 +11400,7 @@ void swap(path& rhs) noexcept;
 \rSec4[fs.path.native.obs]{\tcode{path} native format observers}
 
 \pnum
-The string returned by all native format observers is in the native pathname format~(\ref{fs.def.native}).
+The string returned by all native format observers is in the \link{native pathname format}{\ref{fs.def.native}}.
 
 \indexlibrarymember{native}{path}%
 \begin{itemdecl}
@@ -11464,7 +11483,7 @@ The encoding of the string returned by \tcode{u8string()} is always UTF-8.
 
 \pnum
 Generic format observer functions return strings formatted according to the
-generic pathname format (\ref{fs.path.generic}).
+\link{generic pathname format}{\ref{fs.path.generic}}.
 A single slash (\tcode{'/'}) character is used as
 the \grammarterm{directory-separator}.
 
@@ -11810,7 +11829,7 @@ bool is_absolute() const;
 \begin{itemdescr}
 \pnum
 \returns \tcode{true} if the pathname in the native format
-  contains an absolute path (\ref{fs.def.absolute.path}), else \tcode{false}.
+  contains an \link{absolute path}{\ref{fs.def.absolute.path}}, else \tcode{false}.
 
 \pnum
 \begin{example} \tcode{path("/").is_absolute()} is
@@ -11838,7 +11857,7 @@ path lexically_normal() const;
 \begin{itemdescr}
 \pnum
 \returns A path whose pathname in the generic format is
-the normal form~(\ref{fs.def.normal.form}) of the pathname
+the \link{normal form}{\ref{fs.def.normal.form}} of the pathname
 in the generic format of \tcode{*this}.
 
 \pnum
@@ -11862,8 +11881,8 @@ path lexically_relative(const path& base) const;
 \begin{itemdescr}
 \pnum
 \returns \tcode{*this} made relative to \tcode{base}.
-Does not resolve~(\ref{fs.def.pathres}) symlinks.
-Does not first normalize~(\ref{fs.def.normal.form}) \tcode{*this} or \tcode{base}.
+Does not \link{resolve}{\ref{fs.def.pathres}} symlinks.
+Does not first \deflinkx{normalize}{normalization}{\ref{fs.def.normal.form}} \tcode{*this} or \tcode{base}.
 
 \pnum
 \effects
@@ -11912,7 +11931,7 @@ but that does not affect \tcode{path} equality.
   use the operational function \tcode{relative()}. \end{note}
 
 \pnum
-\begin{note} If normalization~(\ref{fs.def.normal.form}) is needed
+\begin{note} If \link{normalization}{\ref{fs.def.normal.form}} is needed
   to ensure consistent matching of elements,
   apply \tcode{lexically_normal()} to
   \tcode{*this}, \tcode{base}, or both. \end{note}
@@ -11933,7 +11952,7 @@ path lexically_proximate(const path& base) const;
   use the operational function \tcode{proximate()}. \end{note}
 
 \pnum
-\begin{note} If normalization~(\ref{fs.def.normal.form}) is needed
+\begin{note} If \link{normalization}{\ref{fs.def.normal.form}} is needed
   to ensure consistent matching of elements,
   apply \tcode{lexically_normal()} to
   \tcode{*this}, \tcode{base}, or both. \end{note}
@@ -11944,11 +11963,11 @@ path lexically_proximate(const path& base) const;
 \indexlibrary{\idxcode{path}!\idxcode{iterator}}%
 \pnum
 Path iterators iterate over the elements of the pathname
-in the generic format~(\ref{fs.path.generic}).
+in the \link{generic format}{\ref{fs.path.generic}}.
 
 \pnum
 A \tcode{path::iterator} is a constant iterator satisfying all the
-requirements of a bidirectional iterator~(\ref{bidirectional.iterators})
+requirements of a \link{bidirectional iterator}{\ref{bidirectional.iterators}}
 except that,
 for dereferenceable iterators \tcode{a} and \tcode{b}
 of type \tcode{path::iterator}
@@ -12079,7 +12098,7 @@ bool operator==(const path& lhs, const path& rhs) noexcept;
 which considers the two path's lexical representations only.
 \begin{example} \tcode{path("foo") == "bar"} is never \tcode{true}. \end{example}
 \item Equivalence is determined by the \tcode{equivalent()} non-member function, which
-determines if two paths resolve~(\ref{fs.def.pathres}) to the same file system entity.
+determines if two paths \link{resolve}{\ref{fs.def.pathres}} to the same file system entity.
 \begin{example}
 \tcode{equivalent("foo", "bar")} will be \tcode{true} when both paths resolve to the same file.
 \end{example}
@@ -12167,8 +12186,8 @@ template <class InputIterator>
 \pnum
 \returns
 \begin{itemize}
-\item If \tcode{value_type} is \tcode{char} and the current native
-      narrow encoding~(\ref{fs.def.native.encode}) is UTF-8,
+\item If \tcode{value_type} is \tcode{char} and the current \link{native
+      narrow encoding}{\ref{fs.def.native.encode}} is UTF-8,
       return \tcode{path(source)} or \tcode{path(first, last)};
       otherwise,
 \item if \tcode{value_type} is \tcode{wchar_t} and the
@@ -12184,7 +12203,7 @@ template <class InputIterator>
 \end{itemize}
 
 \pnum
-\remarks Argument format conversion (\ref{fs.path.fmt.cvt}) applies to the
+\remarks \link{Argument format conversion}{\ref{fs.path.fmt.cvt}} applies to the
   arguments for these functions. How Unicode encoding conversions are performed is
   unspecified.
 
@@ -12469,7 +12488,7 @@ implementations shall provide only a single definition.
 \indexlibrary{\idxcode{perms}}%
 \pnum
 The \tcode{enum class} type \tcode{perms}
-is a bitmask type~(\ref{bitmask.types}) that specifies bitmask constants used to identify file
+is a \link{bitmask type}{\ref{bitmask.types}} that specifies bitmask constants used to identify file
 permissions, with the meanings listed in Table~\ref{tab:fs.enum.perms}.
 
 \begin{floattable}
@@ -13201,8 +13220,8 @@ namespace std::filesystem {
 \end{codeblock}
 
 \pnum
- \tcode{directory_iterator} satisfies the requirements of an input
-iterator~(\ref{input.iterators}).
+ \tcode{directory_iterator} satisfies the requirements of an \link{input
+iterator}{\ref{input.iterators}}.
 
 \pnum
 If an iterator of type \tcode{directory_iterator} reports an error or
@@ -13344,7 +13363,7 @@ directory_iterator& increment(error_code& ec) noexcept;
 
 \pnum
 \effects As specified for the prefix increment operation of
-Input iterators~(\ref{input.iterators}).
+\link{Input iterators}{\ref{input.iterators}}.
 
 \pnum
 \returns \tcode{*this}.
@@ -13631,7 +13650,7 @@ recursive_directory_iterator& increment(error_code& ec) noexcept;
 \begin{itemdescr}
 \pnum
 \effects As specified for the prefix increment operation of
-Input iterators~(\ref{input.iterators}),
+\link{Input iterators}{\ref{input.iterators}},
 except that:
 
 \begin{itemize}
@@ -13724,7 +13743,7 @@ Filesystem operation functions query or modify files, including directories,
 in external storage.
 
 \pnum
-\begin{note} Because hardware failures, network failures, file system races~(\ref{fs.def.race}),
+\begin{note} Because hardware failures, network failures, \link{file system races}{\ref{fs.def.race}},
 and many other kinds of errors occur frequently in file system operations, users should be aware
 that any filesystem operation function, no matter how apparently innocuous, may encounter
 an error; see~\ref{fs.err.report}. \end{note}
@@ -14319,7 +14338,7 @@ as if by \tcode{status(p1)} and \tcode{status(p2)}, respectively.
 \pnum
 \effects Determines \tcode{s1} and \tcode{s2}.
 If \tcode{(!exists(s1) \&\& !exists(s2)) || (is_other(s1) \&\& is_other(s2))}
-an error is reported~(\ref{fs.err.report}).
+an error is reported~(\ref{fs.err.report}). % todo
 
 \pnum
 \returns \tcode{true}, if \tcode{s1 == s2} and \tcode{p1} and \tcode{p2} resolve to the same file
@@ -15207,7 +15226,7 @@ path weakly_canonical(const path& p, error_code& ec);
 \begin{itemdescr}
 \pnum
 \returns \tcode{p} with symlinks resolved and
-  the result normalized~(\ref{fs.def.normal.form}).
+  the result \link{normalized}{\ref{fs.def.normal.form}}.
 
 \pnum
 \effects Using \tcode{status(p)} or \tcode{status(p, ec)}, respectively,
@@ -15226,7 +15245,7 @@ path weakly_canonical(const path& p, error_code& ec);
   \tcode{path()} is returned at the first error occurrence, if any.
 
 \pnum
-\postconditions The returned path is in normal form~(\ref{fs.def.normal.form}).
+\postconditions The returned path is in \link{normal form}{\ref{fs.def.normal.form}}.
 
 \pnum
 \remarks Implementations are encouraged
@@ -15550,8 +15569,8 @@ with the following changes:
 The header \tcode{<cinttypes>} includes the header \tcode{<cstdint>} instead
 of \tcode{<stdint.h>}, and
 \item
-if and only if the type \tcode{intmax_t} designates an extended integer
-type~(\ref{basic.fundamental}), the following function signatures are added:
+if and only if the type \tcode{intmax_t} designates an
+\deflink{extended integer type}{\ref{basic.fundamental}}, the following function signatures are added:
 \begin{codeblock}
 intmax_t abs(intmax_t);
 imaxdiv_t div(intmax_t, intmax_t);
diff --git a/source/iterators.tex b/source/iterators.tex
index e721c96..264a455 100644
--- a/source/iterators.tex
+++ b/source/iterators.tex
@@ -5,9 +5,9 @@
 
 \pnum
 This Clause describes components that \Cpp{} programs may use to perform
-iterations over containers (Clause \ref{containers}),
-streams~(\ref{iostream.format}),
-and stream buffers~(\ref{stream.buffers}).
+iterations over \link{containers}{Clause \ref{containers}},
+\link{streams}{\ref{iostream.format}},
+and \link{stream buffers}{\ref{stream.buffers}}.
 
 \pnum
 The following subclauses describe
@@ -249,7 +249,7 @@ denotes a value of value type
 \tcode{o}
 denotes a value of some type that is writable to the output iterator.
 \begin{note} For an iterator type \tcode{X} there must be an instantiation
-of \tcode{iterator_traits<X>}~(\ref{iterator.traits}). \end{note}
+of \link{\tcode{iterator_traits<X>}}{\ref{iterator.traits}}. \end{note}
 
 \rSec2[iterator.iterators]{Iterator}
 
@@ -258,7 +258,7 @@ The \tcode{Iterator} requirements form the basis of the iterator concept
 taxonomy; every iterator satisfies the \tcode{Iterator} requirements. This
 set of requirements specifies operations for dereferencing and incrementing
 an iterator. Most algorithms will require additional operations to
-read~(\ref{input.iterators}) or write~(\ref{output.iterators}) values, or
+\link{read}{\ref{input.iterators}} or \link{write}{\ref{output.iterators}} values, or
 to provide a richer set of iterator movements~(\ref{forward.iterators},
 \ref{bidirectional.iterators}, \ref{random.access.iterators}).
 
@@ -268,7 +268,7 @@ A type \tcode{X} satisfies the \tcode{Iterator} requirements if:
 \begin{itemize}
 \item \tcode{X} satisfies the \tcode{CopyConstructible}, \tcode{CopyAssignable}, and
 \tcode{Destructible} requirements~(\ref{utility.arg.requirements}) and lvalues
-of type \tcode{X} are swappable (\ref{swappable.requirements}), and
+of type \tcode{X} are \deflink{swappable}{\ref{swappable.requirements}}, and
 
 \item the expressions in Table~\ref{tab:iterator.requirements} are valid and have
 the indicated semantics.
@@ -307,8 +307,8 @@ A class or pointer type
 satisfies the requirements of an input iterator for the value type
 \tcode{T}
 if
-\tcode{X} satisfies the \tcode{Iterator}~(\ref{iterator.iterators}) and
-\tcode{EqualityComparable} (Table~\ref{tab:equalitycomparable}) requirements and
+\tcode{X} satisfies the \link{\tcode{Iterator}}{\ref{iterator.iterators}} and
+\link{\tcode{EqualityComparable}}{Table~\ref{tab:equalitycomparable}} requirements and
 the expressions in Table~\ref{tab:iterator.input.requirements} are valid and have
 the indicated semantics.
 
@@ -400,7 +400,7 @@ Algorithms on input iterators should never attempt to pass through the same iter
 They should be
 \term{single pass}
 algorithms.
-Value type \tcode{T} is not required to be a \tcode{CopyAssignable} type (Table~\ref{tab:copyassignable}).
+Value type \tcode{T} is not required to be a \link{\tcode{CopyAssignable}}{Table~\ref{tab:copyassignable}} type.
 These algorithms can be used with istreams as the source of the input data through the
 \tcode{istream_iterator}
 class template.
@@ -412,7 +412,7 @@ class template.
 A class or pointer type
 \tcode{X}
 satisfies the requirements of an output iterator
-if \tcode{X} satisfies the \tcode{Iterator} requirements~(\ref{iterator.iterators})
+if \tcode{X} satisfies the \link{\tcode{Iterator}}{\ref{iterator.iterators}} requirements
 and the expressions in Table~\ref{tab:iterator.output.requirements}
 are valid and have the indicated semantics.
 
@@ -480,10 +480,10 @@ A class or pointer type
 satisfies the requirements of a forward iterator if
 
 \begin{itemize}
-\item \tcode{X} satisfies the requirements of an input iterator~(\ref{input.iterators}),
+\item \tcode{X} satisfies the requirements of an \link{input iterator}{\ref{input.iterators}},
 
-\item \tcode{X} satisfies the \tcode{DefaultConstructible}
-requirements~(\ref{utility.arg.requirements}),
+\item \tcode{X} satisfies the \link{\tcode{DefaultConstructible}
+requirements}{\ref{utility.arg.requirements}},
 
 \item if \tcode{X} is a mutable iterator, \tcode{reference} is a reference to \tcode{T};
 if \tcode{X} is a constant iterator, \tcode{reference} is a reference to \tcode{const T},
@@ -1254,12 +1254,12 @@ namespace std {
 \pnum
 The template parameter
 \tcode{Iterator}
-shall meet all the requirements of a Bidirectional Iterator~(\ref{bidirectional.iterators}).
+shall meet all the requirements of a \link{Bidirectional Iterator}{\ref{bidirectional.iterators}}.
 
 \pnum
 Additionally,
 \tcode{Iterator}
-shall meet the requirements of a random access iterator~(\ref{random.access.iterators})
+shall meet the requirements of a \link{random access iterator}{\ref{random.access.iterators}}
 if any of the members
 \tcode{operator+}~(\ref{reverse.iter.op+}),
 \tcode{operator-}~(\ref{reverse.iter.op-}),
@@ -2197,11 +2197,11 @@ otherwise as a synonym for \tcode{\placeholder{R}}.
 
 \pnum
 The template parameter \tcode{Iterator} shall meet
-the requirements of an input iterator~(\ref{input.iterators}).
+the requirements for an \link{input iterator}{\ref{input.iterators}}.
 Additionally, if any of the bidirectional or random access traversal
 functions are instantiated, the template parameter shall meet the
-requirements for a Bidirectional Iterator~(\ref{bidirectional.iterators})
-or a Random Access Iterator~(\ref{random.access.iterators}), respectively.
+requirements for a \link{Bidirectional Iterator}{\ref{bidirectional.iterators}}
+or a \link{Random Access Iterator}{\ref{random.access.iterators}}, respectively.
 
 \rSec3[move.iter.ops]{\tcode{move_iterator} operations}
 
@@ -2562,7 +2562,7 @@ and prints the partial sums onto
 \indexlibrary{\idxcode{istream_iterator}}%
 The class template
 \tcode{istream_iterator}
-is an input iterator~(\ref{input.iterators}) that
+is an \link{input iterator}{\ref{input.iterators}} that
 reads (using
 \tcode{operator>>})
 successive elements from the input stream for which it was constructed.
@@ -2907,10 +2907,11 @@ The iterator is destroyed.
 
 \rSec3[ostream.iterator.ops]{\tcode{ostream_iterator} operations}
 
-\indexlibrarymember{operator=}{ostream_iterator}%
+\begin{indexed}{\indexlibrarymember{operator=}{ostream_iterator}}
 \begin{itemdecl}
 ostream_iterator& operator=(const T& value);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2953,7 +2954,7 @@ ostream_iterator& operator++(int);
 The
 class template
 \tcode{istreambuf_iterator}
-defines an input iterator~(\ref{input.iterators}) that
+defines an \link{input iterator}{\ref{input.iterators}} that
 reads successive
 \textit{characters}
 from the streambuf for which it was constructed.
diff --git a/source/lex.tex b/source/lex.tex
index 28ffe65..dea99a8 100644
--- a/source/lex.tex
+++ b/source/lex.tex
@@ -30,10 +30,10 @@
 \indextext{compilation!separate|(}%
 The text of the program is kept in units called
 \defnx{source files}{source file} in this International
-Standard. A source file together with all the headers~(\ref{headers})
-and source files included~(\ref{cpp.include}) via the preprocessing
+Standard. A source file together with all the \link{headers}{\ref{headers}}
+and source files \link{included}{\ref{cpp.include}} via the preprocessing
 directive \tcode{\#include}, less any source lines skipped by any of the
-conditional inclusion~(\ref{cpp.cond}) preprocessing directives, is
+\link{conditional inclusion}{\ref{cpp.cond}} preprocessing directives, is
 called a \defn{translation unit}.
 \begin{note} A \Cpp{} program need not all be translated at the same time.
 \end{note}
@@ -45,8 +45,8 @@ translation units of a program communicate~(\ref{basic.link}) by (for
 example) calls to functions whose identifiers have external linkage,
 manipulation of objects whose identifiers have external linkage, or
 manipulation of data files. Translation units can be separately
-translated and then later linked to produce an executable
-program~(\ref{basic.link}). \end{note}%
+translated and then later \link{linked}{\ref{basic.link}} to produce an executable
+program. \end{note}%
 \indextext{compilation!separate|)}
 
 \rSec1[lex.phases]{Phases of translation}%
@@ -68,8 +68,8 @@ indicators) if necessary.
 The set of physical source file characters accepted is \impldef{physical source file
 characters}.
 Any
-source file character not in the basic source character
-set~(\ref{lex.charset}) is replaced by the
+source file character not in the
+\deflink{basic source character set}{\ref{lex.charset}} is replaced by the
 \indextext{universal character name}\grammarterm{universal-character-name} that
 designates that character. An implementation may use any internal
 encoding, so long as an actual extended character encountered in the
@@ -93,8 +93,8 @@ backslash character before any such splicing takes place,
 shall be processed as if an additional new-line character were appended
 to the file.
 
-\item The source file is decomposed into preprocessing
-tokens~(\ref{lex.pptoken}) and sequences of white-space characters
+\item The source file is decomposed into \link{preprocessing
+tokens}{\ref{lex.pptoken}} and sequences of white-space characters
 (including comments). A source file shall not end in a partial
 preprocessing token or in a partial comment.\footnote{A partial preprocessing
 token would arise from a source file
@@ -117,8 +117,8 @@ directive.
 \item Preprocessing directives are executed, macro invocations are
 expanded, and \tcode{_Pragma} unary operator expressions are executed.
 If a character sequence that matches the syntax of a
-\grammarterm{universal-character-name} is produced by token
-concatenation~(\ref{cpp.concat}), the behavior is undefined. A
+\grammarterm{universal-character-name} is produced by \link{token
+concatenation}{\ref{cpp.concat}}, the behavior is undefined. A
 \tcode{\#include} preprocessing directive causes the named header or
 source file to be processed from phase 1 through phase 4, recursively.
 All preprocessing directives are then deleted.
@@ -136,7 +136,7 @@ non-corresponding source characters to the same execution character.}
 
 \item White-space characters separating tokens are no longer
 significant. Each preprocessing token is converted into a
-token~(\ref{lex.token}). The resulting tokens are syntactically and
+\link{token}{\ref{lex.token}}. The resulting tokens are syntactically and
 semantically analyzed and translated as a translation unit. \begin{note}
 The process of analyzing and translating the tokens may occasionally
 result in one token being replaced by a sequence of other
@@ -150,8 +150,8 @@ only, and does not specify any particular implementation. \end{note}
 as follows: \begin{note} Some or all of these may be supplied from a
 library. \end{note} Each translated translation unit is examined to
 produce a list of required instantiations. \begin{note} This may include
-instantiations which have been explicitly
-requested~(\ref{temp.explicit}). \end{note} The definitions of the
+instantiations which have been \link{explicitly
+requested}{\ref{temp.explicit}}. \end{note} The definitions of the
 required templates are located. It is \impldef{whether source of translation units must
 be available to locate template definitions} whether the
 source of the translation units containing these definitions is required
@@ -263,7 +263,7 @@ are locale-specific.%
 \end{bnf}
 
 \pnum
-Each preprocessing token that is converted to a token~(\ref{lex.token})
+Each preprocessing token that is converted to a \link{token}{\ref{lex.token}}
 shall have the lexical form of a keyword, an identifier, a literal, an
 operator, or a punctuator.
 
@@ -279,7 +279,7 @@ separated by
 \indextext{space!white}%
 white space;
 \indextext{comment}%
-this consists of comments~(\ref{lex.comment}), or white-space
+this consists of \link{comments}{\ref{lex.comment}}, or white-space
 characters (space, horizontal tab, new-line, vertical tab, and
 form-feed), or both. As described in Clause~\ref{cpp}, in certain
 circumstances during translation phase 4, white space (or the absence
@@ -315,7 +315,7 @@ the next preprocessing token is the longest sequence of
 characters that could constitute a preprocessing token, even if that
 would cause further lexical analysis to fail,
 except that a \grammarterm{header-name}~(\ref{lex.header}) is only formed
-within a \tcode{\#include} directive~(\ref{cpp.include}).
+within a \link{\tcode{\#include} directive}{\ref{cpp.include}}.
 \end{itemize}
 
 \begin{example}
@@ -357,7 +357,8 @@ keywords are colloquially known as ``digraphs''. }
 
 \pnum
 In all respects of the language, each alternative token behaves the
-same, respectively, as its primary token, except for its spelling.\footnote{Thus the ``stringized'' values~(\ref{cpp.stringize}) of
+same, respectively, as its primary token, except for its spelling.\footnote{Thus
+the \link{``stringized''}{\ref{cpp.stringize}} values of
 \tcode{[} and \tcode{<:} will be different, maintaining the source
 spelling, but the tokens can otherwise be freely interchanged. }
 The set of alternative tokens is defined in
@@ -501,9 +502,9 @@ depending on the implementation.}%
 \end{bnf}
 
 \pnum
-Preprocessing number tokens lexically include all integer literal
-tokens~(\ref{lex.icon}) and all floating literal
-tokens~(\ref{lex.fcon}).
+Preprocessing number tokens lexically include all \link{integer literal}{\ref{lex.icon}}
+tokens and all \link{floating literal}{\ref{lex.fcon}}
+tokens.
 
 \pnum
 A preprocessing number does not have a type or a value; it acquires both
@@ -805,7 +806,7 @@ are converted into tokens for operators and punctuators:
 \end{bnfkeywordtab}
 
 Each \grammarterm{preprocessing-op-or-punc} is converted to a single token
-in translation phase 7~(\ref{lex.phases}).%
+in \link{translation phase 7}{\ref{lex.phases}}.%
 \indextext{punctuator|)}%
 \indextext{operator|)}
 
@@ -1036,7 +1037,7 @@ and \tcode{ll} or \tcode{LL}  &
 
 \pnum
 If an integer literal cannot be represented by any type in its list and
-an extended integer type~(\ref{basic.fundamental}) can represent its value, it may have that
+an \deflink{extended integer type}{\ref{basic.fundamental}} can represent its value, it may have that
 extended integer type. If all of the types in the list for the integer literal
 are signed, the extended integer type shall be signed. If all of the
 types in the list for the integer literal are unsigned, the extended integer
@@ -1550,12 +1551,11 @@ also referred to as narrow
 string literals. A narrow string literal has type
 \indextext{literal!string!type of}%
 ``array of \placeholder{n} \tcode{const char}'', where \placeholder{n} is the size of
-the string as defined below, and has static storage
-duration~(\ref{basic.stc}).
+the string as defined below, and has \deflink{static storage duration}{\ref{basic.stc}}.
 
 \pnum
-For a UTF-8 string literal, each successive element of the object
-representation~(\ref{basic.types}) has the value of the corresponding
+For a UTF-8 string literal, each successive element of the
+\deflink{object representation}{\ref{basic.types}} has the value of the corresponding
 code unit of the UTF-8 encoding of the string.
 
 \pnum
@@ -1597,7 +1597,7 @@ is initialized with the given characters.
 
 \pnum
 \indextext{concatenation!string}%
-In translation phase 6~(\ref{lex.phases}), adjacent \grammarterm{string-literal}{s} are concatenated. If
+In \link{translation phase 6}{\ref{lex.phases}}, adjacent \grammarterm{string-literal}{s} are concatenated. If
 both \grammarterm{string-literal}{s} have the same \grammarterm{encoding-prefix}, the resulting concatenated string literal has
 that \grammarterm{encoding-prefix}. If one \grammarterm{string-literal} has no \grammarterm{encoding-prefix}, it is treated as a \grammarterm{string-literal} of
 the same \grammarterm{encoding-prefix} as the other operand. If a UTF-8 string literal token is adjacent to a
@@ -1648,13 +1648,13 @@ after concatenation (and not the single hexadecimal character
 \indextext{\idxcode{0}|seealso{zero, null}}%
 \indextext{\idxcode{0}!string terminator}%
 \indextext{\idxcode{0}!null character|see {character, null}}%
-After any necessary concatenation, in translation phase
-7~(\ref{lex.phases}), \tcode{'\textbackslash 0'} is appended to every
+After any necessary concatenation, in \link{translation phase
+7}{\ref{lex.phases}}, \tcode{'\textbackslash 0'} is appended to every
 string literal so that programs that scan a string can find its end.
 
 \pnum
 Escape sequences and \grammarterm{universal-character-name}{s} in non-raw string literals
-have the same meaning as in character literals~(\ref{lex.ccon}), except that
+have the same meaning as in \link{character literals}{\ref{lex.ccon}}, except that
 the single quote \tcode{'} is representable either by itself or by the escape sequence
 \tcode{\textbackslash'}, and the double quote \tcode{"} shall be preceded by a
 \tcode{\textbackslash},
@@ -1776,12 +1776,12 @@ The syntactic non-terminal preceding the \grammarterm{ud-suffix} in a
 characters that could match that non-terminal.
 
 \pnum
-A \grammarterm{user-defined-literal} is treated as a call to a literal operator or
-literal operator template~(\ref{over.literal}). To determine the form of this call for a
+A \grammarterm{user-defined-literal} is treated as a call to a \deflink{literal operator}{\ref{over.literal}} or
+\deflink{literal operator template}{\ref{over.literal}}. To determine the form of this call for a
 given \grammarterm{user-defined-literal} \placeholder{L} with \grammarterm{ud-suffix} \placeholder{X},
 the \grammarterm{literal-operator-id} whose literal suffix identifier is \placeholder{X} is
-looked up in the context of \placeholder{L} using the rules for unqualified name
-lookup~(\ref{basic.lookup.unqual}). Let \placeholder{S} be the set of declarations found by
+looked up in the context of \placeholder{L} using the rules for \link{unqualified name
+lookup}{\ref{basic.lookup.unqual}}. Let \placeholder{S} be the set of declarations found by
 this lookup. \placeholder{S} shall not be empty.
 
 \pnum
@@ -1794,8 +1794,9 @@ the form
 operator "" @\placeholder{X}@(@\placeholder{n}@ULL)
 \end{codeblock}
 
-Otherwise, \placeholder{S} shall contain a raw literal operator or a literal operator
-template~(\ref{over.literal}) but not both. If \placeholder{S} contains a raw literal operator,
+Otherwise, \placeholder{S} shall contain a \deflink{raw literal operator}{\ref{over.literal}} or a
+\deflink{literal operator template}{\ref{over.literal}} but not both.
+If \placeholder{S} contains a raw literal operator,
 the literal \placeholder{L} is treated as a call of the form
 
 \begin{codeblock}
@@ -1824,8 +1825,9 @@ the form
 operator "" @\placeholder{X}@(@\placeholder{f}@L)
 \end{codeblock}
 
-Otherwise, \placeholder{S} shall contain a raw literal operator or a literal operator
-template~(\ref{over.literal}) but not both. If \placeholder{S} contains a raw literal operator,
+Otherwise, \placeholder{S} shall contain a \deflink{raw literal operator}{\ref{over.literal}} or a
+\deflink{literal operator template}{\ref{over.literal}} but not both.
+If \placeholder{S} contains a raw literal operator,
 the \grammarterm{literal} \placeholder{L} is treated as a call of the form
 
 \begin{codeblock}
@@ -1858,7 +1860,7 @@ operator "" @\placeholder{X}@(@\placeholder{str}{}@, @\placeholder{len}{}@)
 \pnum
 If \placeholder{L} is a \grammarterm{user-defined-character-literal}, let \placeholder{ch} be the
 literal without its \grammarterm{ud-suffix}.
-\placeholder{S} shall contain a literal operator~(\ref{over.literal}) whose only parameter has
+\placeholder{S} shall contain a \deflink{literal operator}{\ref{over.literal}} whose only parameter has
 the type of \placeholder{ch} and the
 literal \placeholder{L} is treated as a call
 of the form
@@ -1885,7 +1887,7 @@ int main() {
 \end{example}
 
 \pnum
-In translation phase 6~(\ref{lex.phases}), adjacent string literals are concatenated and
+In \link{translation phase 6}{\ref{lex.phases}}, adjacent string literals are concatenated and
 \grammarterm{user-defined-string-literal}{s} are considered string literals for that
 purpose. During concatenation, \grammarterm{ud-suffix}{es} are removed and ignored and
 the concatenation process occurs as described in~\ref{lex.string}. At the end of phase
diff --git a/source/lib-intro.tex b/source/lib-intro.tex
index a36a50b..94922be 100644
--- a/source/lib-intro.tex
+++ b/source/lib-intro.tex
@@ -11,8 +11,8 @@ how a well-formed \Cpp{} program makes use of the library, and
 how a conforming implementation may provide the entities in the library.
 
 \pnum
-The following subclauses describe the definitions~(\ref{definitions}), method of
-description~(\ref{description}), and organization~(\ref{organization}) of the
+The following subclauses describe the \link{definitions}{\ref{definitions}}, method of
+\link{description}{\ref{description}}, and \link{organization}{\ref{organization}} of the
 library. Clause~\ref{requirements}, Clauses~\ref{\firstlibchapter}
 through~\ref{\lastlibchapter}, and Annex~\ref{depr} specify the contents of the
 library, as well as library requirements and constraints on both well-formed
@@ -40,24 +40,24 @@ Table~\ref{tab:library.categories}.
 \end{libsumtabbase}
 
 \pnum
-The language support library (Clause~\ref{language.support}) provides components that are
+The \link{language support library}{Clause~\ref{language.support}} provides components that are
 required by certain parts of the \Cpp{} language, such as memory allocation~(\ref{expr.new},
-\ref{expr.delete}) and exception processing (Clause~\ref{except}).
+\ref{expr.delete}) and \link{exception processing}{Clause~\ref{except}}.
 
 \pnum
-The diagnostics library (Clause~\ref{diagnostics}) provides a consistent framework for
+The \link{diagnostics library}{Clause~\ref{diagnostics}} provides a consistent framework for
 reporting errors in a \Cpp{} program, including predefined exception classes.
 
 \pnum
-The general utilities library (Clause~\ref{utilities}) includes components used
-by other library elements, such as a predefined storage allocator for dynamic
-storage management~(\ref{basic.stc.dynamic}), and components used
+The \link{general utilities library}{Clause~\ref{utilities}} includes components used
+by other library elements, such as a predefined storage allocator for \link{dynamic
+storage management}{\ref{basic.stc.dynamic}}, and components used
 as infrastructure
 in \Cpp{} programs,
 such as tuples, function wrappers, and time facilities.
 
 \pnum
-The strings library (Clause~\ref{strings}) provides support for manipulating text represented
+The \link{strings library}{Clause~\ref{strings}} provides support for manipulating text represented
 as sequences of type
 \tcode{char},
 sequences of type
@@ -69,16 +69,16 @@ sequences of type
 and sequences of any other character-like type.
 
 \pnum
-The localization library (Clause~\ref{localization}) provides extended internationalization
+The \link{localization library}{Clause~\ref{localization}} provides extended internationalization
 support for text processing.
 
 \pnum
-The containers (Clause~\ref{containers}), iterators (Clause~\ref{iterators}),
-and algorithms (Clause~\ref{algorithms}) libraries provide a \Cpp{} program with access
+The \link{containers}{Clause~\ref{containers}}, \link{iterators}{Clause~\ref{iterators}},
+and \link{algorithms}{Clause~\ref{algorithms}} libraries provide a \Cpp{} program with access
 to a subset of the most widely used algorithms and data structures.
 
 \pnum
-The numerics library (Clause~\ref{numerics}) provides
+The \link{numerics library}{Clause~\ref{numerics}} provides
 numeric algorithms and complex number components that extend support for numeric processing.
 The
 \tcode{valarray}
@@ -89,21 +89,21 @@ potentially implemented as parallel operations on platforms that support such pr
 The random number component provides facilities for generating pseudo-random numbers.
 
 \pnum
-The input/output library (Clause~\ref{input.output}) provides the
+The \link{input/output library}{Clause~\ref{input.output}} provides the
 \tcode{iostream}
 components that are the primary mechanism for \Cpp{} program input and output.
 They can be used with other elements of the library, particularly
 strings, locales, and iterators.
 
 \pnum
-The regular expressions library (Clause~\ref{re}) provides regular expression matching and searching.
+The \link{regular expressions library}{Clause~\ref{re}} provides regular expression matching and searching.
 
 \pnum
-The atomic operations library (Clause~\ref{atomics}) allows more fine-grained
+The \link{atomic operations library}{Clause~\ref{atomics}} allows more fine-grained
 concurrent access to shared data than is possible with locks.
 
 \pnum
-The thread support library (Clause~\ref{thread}) provides components to create
+The \link{thread support library}{Clause~\ref{thread}} provides components to create
 and manage threads, including mutual exclusion and interthread communication.
 
 \rSec1[library.c]{The C standard library}
@@ -166,13 +166,13 @@ represent a
 \begin{note}
 It is used for one of the template parameters of the string,
 iostream, and regular expression class templates.
-A character container type is a POD~(\ref{basic.types}) type.
+A character container type is a \deflinkx{POD type}{type!POD}{\ref{basic.types}}.
 \end{note}
 
 \definition{comparison function}{defns.comparison}
 \indexdefn{function!comparison}%
-an operator function~(\ref{over.oper}) for any of the equality~(\ref{expr.eq}) or
-relational~(\ref{expr.rel}) operators
+an \deflink{operator function}{\ref{over.oper}} for any of the \link{equality}{\ref{expr.eq}} or
+\link{relational}{\ref{expr.rel}} operators
 
 \definition{component}{defns.component}
 \indexdefn{component}%
@@ -192,8 +192,8 @@ strings are referred to as the
 \indexdefn{constant subexpression}%
 an expression whose evaluation as subexpression of a
 \grammarterm{conditional-expression}
-\tcode{CE}~(\ref{expr.cond}) would not prevent \tcode{CE}
-from being a core constant expression~(\ref{expr.const})
+\tcode{CE} would not prevent \tcode{CE}
+from being a \deflinkx{core constant expression}{expression!core constant}{\ref{expr.const}}
 
 \definition{deadlock}{defns.deadlock}
 \indexdefn{deadlock}%
@@ -253,7 +253,7 @@ necessary to implement the iostream class templates.
 
 \definition{modifier function}{defns.modifier}
 \indexdefn{function!modifier}%
-a class member function~(\ref{class.mfct}) other than a constructor,
+a \link{class member function}{\ref{class.mfct}} other than a constructor,
 assignment operator, or destructor
 that alters the state of an object of the class
 
@@ -276,7 +276,7 @@ value
 
 \definition{observer function}{defns.observer}
 \indexdefn{function!observer}%
-a class member function~(\ref{class.mfct}) that accesses the state of an object of the class
+a \link{class member function}{\ref{class.mfct}} that accesses the state of an object of the class
 but does not alter that state\\
 \begin{note}
 Observer functions are specified as
@@ -546,8 +546,8 @@ of this International Standard and the ISO C standard.
 This subclause describes several editorial conventions used to describe the contents
 of the \Cpp{} standard library.
 These conventions are for describing
-implementation-defined types~(\ref{type.descriptions}),
-and member functions~(\ref{functions.within.classes}).
+\link{implementation-defined types}{\ref{type.descriptions}},
+and \link{member functions}{\ref{functions.within.classes}}.
 
 \rSec3[type.descriptions]{Type descriptions}
 
@@ -630,7 +630,7 @@ and Annex~\ref{depr} are
 Each bitmask type can be implemented as an
 enumerated type that overloads certain operators, as an integer type,
 or as a
-\tcode{bitset}~(\ref{template.bitset}).
+\link{\tcode{bitset}}{\ref{template.bitset}}.
 \indextext{type!enumerated}%
 
 \pnum
@@ -742,7 +742,7 @@ also its value in the \tcode{"C"}
 locale, but may change during program
 execution by a call to
 \tcode{setlocale(int, const char*)},\footnote{declared in
-\tcode{<clocale>}~(\ref{c.locales}).
+\link{\tcode{<clocale>}}{\ref{c.locales}}.
 \indextext{\idxcode{setlocale}}%
 \indexlibrary{\idxcode{setlocale}}%
 \indextext{\idxhdr{clocale}}%
@@ -753,7 +753,7 @@ object, as described in Clauses~\ref{locales} and~\ref{input.output}.
 \item
 A
 \term{character sequence}
-is an array object~(\ref{dcl.array}) \tcode{\placeholdernc{A}} that
+is an \link{array object}{\ref{dcl.array}} \tcode{\placeholdernc{A}} that
 can be declared as
 \tcode{\placeholdernc{T\;A}[\placeholder{N}]},
 where \tcode{\placeholder{T}} is any of the types
@@ -787,7 +787,7 @@ character); no other element in the sequence has the value zero.%
 \indexlibrary{\idxhdr{cstring}}%
 \indextext{NTBS}\footnote{Many of the objects manipulated by
 function signatures declared in
-\tcode{<cstring>}~(\ref{c.strings}) are character sequences or \ntbs{}s.
+\link{\tcode{<cstring>}}{\ref{c.strings}} are character sequences or \ntbs{}s.
 \indextext{\idxhdr{cstring}}%
 \indexlibrary{\idxhdr{cstring}}%
 The size of some of these character sequences is limited by
@@ -865,7 +865,7 @@ of which at most one participates in overload resolution. \end{note}
 \pnum
 Clauses~\ref{\firstlibchapter} through~\ref{\lastlibchapter} and
 Annex~\ref{depr} do not specify the representation of classes, and intentionally
-omit specification of class members~(\ref{class.mem}). An implementation may
+omit specification of \link{class members}{\ref{class.mem}}. An implementation may
 define static or non-static class members, or both, as needed to implement the
 semantics of the member functions specified in Clauses~\ref{\firstlibchapter}
 through~\ref{\lastlibchapter} and Annex~\ref{depr}.
@@ -1100,10 +1100,10 @@ for any of these C headers:
 Except as noted in Clauses~\ref{library} through~\ref{\lastlibchapter}
 and Annex~\ref{depr}, the contents of each header \tcode{c\placeholder{name}} is
 the same as that of the corresponding header \tcode{\placeholder{name}.h} as
-specified in the C standard library (Clause~\ref{intro.refs}).
+specified in the \deflinkx{C standard library}{C!standard library}{Clause~\ref{intro.refs}}.
 In the \Cpp{} standard library, however, the
 declarations (except for names which are defined as macros in C) are within
-namespace scope~(\ref{basic.scope.namespace}) of the namespace \tcode{std}.
+\link{namespace scope}{\ref{basic.scope.namespace}} of the namespace \tcode{std}.
 It is unspecified whether these names (including any overloads added in
 Clauses~\ref{\firstlibchapter} through~\ref{\lastlibchapter} and Annex~\ref{depr})
 are first declared within the global namespace scope
@@ -1311,8 +1311,8 @@ The other headers listed in this table shall meet the same requirements as for a
 \pnum
 This section describes how a \Cpp{} program gains access to the facilities of the
 \Cpp{} standard library. \ref{using.headers} describes effects during translation
-phase 4, while~\ref{using.linkage} describes effects during phase
-8~(\ref{lex.phases}).
+phase 4, while~\ref{using.linkage} describes effects during \link{phase
+8}{\ref{lex.phases}}.
 
 \rSec3[using.headers]{Headers}
 
@@ -1320,8 +1320,8 @@ phase 4, while~\ref{using.linkage} describes effects during phase
 The entities in the \Cpp{} standard library are defined in headers,
 whose contents are made available to a translation unit when it contains the appropriate
 \indextext{unit!translation}%
-\tcode{\#include}
-preprocessing directive~(\ref{cpp.include}).%
+\link{\tcode{\#include}
+preprocessing directive}{\ref{cpp.include}}.%
 \indextext{\idxcode{\#include}}%
 \indextext{source file}
 
@@ -1353,7 +1353,7 @@ declared in that header. No diagnostic is required.
 \rSec3[using.linkage]{Linkage}
 
 \pnum
-Entities in the \Cpp{} standard library have external linkage~(\ref{basic.link}).
+Entities in the \Cpp{} standard library have \link{external linkage}{\ref{basic.link}}.
 Unless otherwise specified, objects and functions have the default
 \tcode{extern "C++"}
 linkage~(\ref{dcl.link}).
@@ -1384,9 +1384,8 @@ the program prior to program startup.
 
 \indextext{startup!program}%
 \pnum
-See also
-replacement functions~(\ref{replacement.functions}),
-runtime changes~(\ref{handler.functions}).
+\link{replacement functions}{\ref{replacement.functions}},
+\link{runtime changes}{\ref{handler.functions}}.
 
 \rSec2[utility.requirements]{Requirements on types and expressions}
 
@@ -1423,7 +1422,7 @@ type \tcode{const T}.
 In general, a default constructor is not required. Certain container class
 member function signatures specify \tcode{T()} as a default argument.
 \tcode{T()} shall be a well-defined expression~(\ref{dcl.init}) if one of those
-signatures is called using the default argument~(\ref{dcl.fct.default}).
+signatures is called using the \link{default argument}{\ref{dcl.fct.default}}.
 
 \indextext{requirements!\idxcode{EqualityComparable}}%
 \begin{concepttable}{\tcode{EqualityComparable} requirements}{equalitycomparable}
@@ -1451,7 +1450,7 @@ If \tcode{a == b} and \tcode{b == c}, then \tcode{a == c}.
 \hdstyle{Expression}  &   \hdstyle{Return type} &   \hdstyle{Requirement} \\ \capsep
 \tcode{a < b}   &
 convertible to \tcode{bool} &
-\tcode{<} is a strict weak ordering relation~(\ref{alg.sorting})    \\
+\tcode{<} is a \link{strict weak ordering relation}{\ref{alg.sorting}}    \\
 \end{concepttable}
 
 \enlargethispage{-3\baselineskip}
@@ -1547,14 +1546,14 @@ evaluated in the context described below, and
 
 \pnum
 The context in which \tcode{swap(t, u)} and \tcode{swap(u, t)} are evaluated shall
-ensure that a binary non-member function named ``swap'' is selected via overload
-resolution~(\ref{over.match}) on a candidate set that includes:
+ensure that a binary non-member function named ``swap'' is selected via \link{overload
+resolution}{\ref{over.match}} on a candidate set that includes:
 
 \begin{itemize}
 \item the two \tcode{swap} function templates defined in
-\tcode{<utility>}~(\ref{utility}) and
+\link{\tcode{<utility>}}{\ref{utility}} and
 
-\item the lookup set produced by argument-dependent lookup~(\ref{basic.lookup.argdep}).
+\item the lookup set produced by \link{argument-dependent lookup}{\ref{basic.lookup.argdep}}.
 \end{itemize}
 
 \begin{note} If \tcode{T} and \tcode{U} are both fundamental types or arrays of
@@ -1572,7 +1571,7 @@ An rvalue or lvalue \tcode{t} is \defn{swappable} if and only if \tcode{t} is
 swappable with any rvalue or lvalue, respectively, of type \tcode{T}.
 
 \pnum
-A type \tcode{X} satisfying any of the iterator requirements~(\ref{iterator.requirements})
+A type \tcode{X} satisfying any of the \link{iterator requirements}{\ref{iterator.requirements}}
 satisfies the requirements of \tcode{ValueSwappable} if,
 for any dereferenceable object
 \tcode{x} of type \tcode{X},
@@ -1633,7 +1632,7 @@ A type \tcode{P} meets the requirements of \tcode{NullablePointer} if:
 \tcode{DefaultConstructible}, \tcode{CopyConstructible}, \tcode{CopyAssignable},
 and \tcode{Destructible},
 
-\item lvalues of type \tcode{P} are swappable~(\ref{swappable.requirements}),
+\item lvalues of type \tcode{P} are \link{swappable}{\ref{swappable.requirements}},
 
 \item the expressions shown in Table~\ref{tab:nullablepointer} are
 valid and have the indicated semantics, and
@@ -1648,8 +1647,9 @@ of type \tcode{P} may have an indeterminate value. \begin{note} Operations invol
 indeterminate values may cause undefined behavior. \end{note}
 
 \pnum
-An object \tcode{p} of type \tcode{P} can be contextually converted to
-\tcode{bool} (Clause~\ref{conv}). The effect shall be as if \tcode{p != nullptr}
+An object \tcode{p} of type \tcode{P} can be
+\deflinkx{contextually converted to \tcode{bool}}{conversion!contextual to bool}{Clause~\ref{conv}}.
+The effect shall be as if \tcode{p != nullptr}
 had been evaluated in place of \tcode{p}.
 
 \pnum
@@ -1707,9 +1707,10 @@ Expression  &   Return type   &   Operational semantics \\ \capsep
 A type \tcode{H} meets the \tcode{Hash} requirements if:
 
 \begin{itemize}
-\item it is a function object type~(\ref{function.objects}),
-\item it satisfies the requirements of \tcode{CopyConstructible} and
-  \tcode{Destructible}~(\ref{utility.arg.requirements}), and
+\item it is a \deflinkx{function object type}{function object!type}{\ref{function.objects}},
+\item it satisfies the requirements of
+\link{\tcode{CopyConstructible}}{\ref{tab:copyconstructible}} and
+\link{\tcode{Destructible}}{\ref{tab:destructible}}, and
 \item the expressions shown in Table~\ref{tab:hash}
 are valid and have the indicated semantics.
 \end{itemize}
@@ -1747,14 +1748,14 @@ which are class-type objects that encapsulate the information about an allocatio
 This information includes the knowledge of pointer types, the type of their
 difference, the type of the size of objects in this allocation model, as well
 as the memory allocation and deallocation primitives for it. All of the
-string types (Clause~\ref{strings}),
-containers (Clause~\ref{containers}) (except array),
+\link{string types}{Clause~\ref{strings}},
+\link{containers}{Clause~\ref{containers}} (except array),
 string buffers and string streams (Clause~\ref{input.output}), and
-\tcode{match_results} (Clause~\ref{re}) are parameterized in terms of
+\link{\tcode{match_results}}{Clause~\ref{re}} are parameterized in terms of
 allocators.
 
 \pnum
-The class template \tcode{allocator_traits}~(\ref{allocator.traits}) supplies
+The class template \link{\tcode{allocator_traits}}{\ref{allocator.traits}} supplies
 a uniform interface to all allocator types.
 Table~\ref{tab:desc.var.def} describes the types manipulated
 through allocators. Table~\ref{tab:utilities.allocator.requirements}
@@ -2023,28 +2024,28 @@ above form, no default is provided.
 Note B:
 If \tcode{X::propagate_on_container_copy_assignment::value} is \tcode{true},
 \tcode{X} shall satisfy the
-\tcode{CopyAssign\-able} requirements (Table~\ref{tab:copyassignable})
+\link{\tcode{CopyAssign\-able} requirements}{Table~\ref{tab:copyassignable}}
 and the copy operation shall not throw exceptions.
 If \tcode{X::propagate_on_container_move_assignment::value} is \tcode{true},
 \tcode{X} shall satisfy the
-\tcode{MoveAssignable} requirements (Table~\ref{tab:moveassignable})
+\link{\tcode{MoveAssignable} requirements}{Table~\ref{tab:moveassignable}}
 and the move operation shall not throw exceptions.
 If \tcode{X::propagate_on_container_swap::value} is \tcode{true},
-lvalues of type \tcode{X} shall be swappable~(\ref{swappable.requirements})
+lvalues of type \tcode{X} shall be \link{swappable}{\ref{swappable.requirements}}
 and the \tcode{swap} operation shall not throw exceptions.
 
 \pnum
 An allocator type \tcode{X} shall satisfy the requirements of
-\tcode{CopyConstructible}~(\ref{utility.arg.requirements}).
+\link{\tcode{CopyConstructible}}{\ref{utility.arg.requirements}}.
 The \tcode{X::pointer}, \tcode{X::const_pointer}, \tcode{X::void_pointer}, and
 \tcode{X::const_void_pointer} types shall satisfy the requirements of
-\tcode{NullablePointer}~(\ref{nullablepointer.requirements}).
+\link{\tcode{NullablePointer}}{\ref{nullablepointer.requirements}}.
 No constructor,
 comparison function, copy operation, move operation, or swap operation on
 these pointer types shall exit via an exception. \tcode{X::pointer} and \tcode{X::const_pointer} shall also
 satisfy the requirements for
-a random access iterator~(\ref{random.access.iterators}) and of
-a contiguous iterator~(\ref{iterator.requirements.general}).
+a \link{random access iterator}{\ref{random.access.iterators}} and of
+a \link{contiguous iterator}{\ref{iterator.requirements.general}}.
 
 \pnum
 Let \tcode{x1} and \tcode{x2} denote objects of (possibly different) types
@@ -2127,7 +2128,7 @@ whether or not \tcode{T} is a complete type:
 
 \begin{itemize}
 \item \tcode{X} is a complete type, and
-\item all the member types of \tcode{allocator_traits<X>}~(\ref{allocator.traits})
+\item all the member types of \link{\tcode{allocator_traits<X>}}{\ref{allocator.traits}}
   other than \tcode{value_type} are complete types.
 \end{itemize}
 
@@ -2138,11 +2139,11 @@ whether or not \tcode{T} is a complete type:
 \pnum
 This section describes restrictions on \Cpp{} programs that use the facilities of
 the \Cpp{} standard library. The following subclauses specify constraints on the
-program's use of namespaces~(\ref{namespace.std}), its use of various reserved
-names~(\ref{reserved.names}), its use of headers~(\ref{alt.headers}), its use of
+program's use of \link{namespaces}{\ref{namespace.std}}, its use of various \link{reserved
+names}{\ref{reserved.names}}, its use of \link{headers}{\ref{alt.headers}}, its use of
 standard library classes as base classes~(\ref{derived.classes}), its
-definitions of replacement functions~(\ref{replacement.functions}), and its
-installation of handler functions during execution~(\ref{handler.functions}).
+definitions of \link{replacement functions}{\ref{replacement.functions}}, and its
+installation of \link{handler functions}{\ref{handler.functions}} during execution.
 
 \rSec3[namespace.constraints]{Namespace use}
 
@@ -2388,7 +2389,7 @@ shall be identical to
 \rSec4[usrlit.suffix]{User-defined literal suffixes}
 
 \pnum
-Literal suffix identifiers~(\ref{over.literal}) that do not start with an underscore are reserved for future standardization.
+\link{Literal suffix identifiers}{\ref{over.literal}} that do not start with an underscore are reserved for future standardization.
 
 \rSec3[alt.headers]{Headers}
 
@@ -2396,7 +2397,7 @@ Literal suffix identifiers~(\ref{over.literal}) that do not start with an unders
 If a file with a name
 equivalent to the derived file name for one of the \Cpp{} standard library headers
 is not provided as part of the implementation, and a file with that name
-is placed in any of the standard places for a source file to be included~(\ref{cpp.include}),
+is placed in any of the standard places for a source file to be \link{included}{\ref{cpp.include}},
 the behavior is undefined.%
 \indextext{source file}%
 \indextext{undefined}
@@ -2529,7 +2530,7 @@ In particular, the effects are undefined in the following cases:
 
 \begin{itemize}
 \item
-for replacement functions~(\ref{new.delete}), if the installed replacement function does not
+for \link{replacement functions}{\ref{new.delete}}, if the installed replacement function does not
 implement the semantics of the applicable
 \required
 paragraph.
@@ -2553,7 +2554,7 @@ in the applicable
 \required
 paragraph.
 \item
-if an incomplete type~(\ref{basic.types}) is used as a template
+if an \deflinkx{incomplete type}{type!incomplete}{\ref{basic.types}} is used as a template
 argument when instantiating a template component, unless specifically
 allowed for that component.
 \end{itemize}
@@ -2609,7 +2610,7 @@ specified as being sharable without data races or the user supplies a locking me
 
 \pnum
 If an object of a standard library type is accessed, and
-the beginning of the object's lifetime~(\ref{basic.life})
+the beginning of the object's \link{lifetime}{\ref{basic.life}}
 does not happen before the access, or
 the access does not happen before the end of the object's lifetime,
 the behavior is undefined unless otherwise specified.
@@ -2657,7 +2658,7 @@ Every such entity shall be defined such that any header that defines it may be
 included after any other header that also defines it~(\ref{basic.def.odr}).
 
 \pnum
-The C standard library headers (\ref{depr.c.headers})
+The \link{C standard library headers}{\ref{depr.c.headers}}
 shall include only their corresponding \Cpp{} standard library header,
 as described in~\ref{headers}.
 
@@ -2685,7 +2686,7 @@ explicitly stated otherwise.
 It is unspecified whether any
 non-member
 functions in the \Cpp{} standard library are defined as
-\tcode{inline}~(\ref{dcl.inline}).
+\link{\tcode{inline}}{\ref{dcl.inline}}.
 
 \pnum
 A call to a non-member function signature
@@ -2710,7 +2711,7 @@ The phrase ``unless otherwise specified'' applies to cases such as
 the swappable with requirements~(\ref{swappable.requirements}).
 The exception for overloaded operators allows argument-dependent lookup
 in cases like that of
-\tcode{ostream_iterator::operator=}~(\ref{ostream.iterator.ops}):
+\liblinkx{\tcode{ostream_iterator::operator=}}{ostream_iterator!operator=}{\ref{ostream.iterator.ops}}:
 
 \effects
 \begin{codeblock}
@@ -2725,7 +2726,7 @@ return *this;
 
 \pnum
 It is unspecified whether any member functions in the \Cpp{} standard library are defined as
-\tcode{inline}~(\ref{dcl.inline}).
+\link{\tcode{inline}}{\ref{dcl.inline}}.
 
 \pnum
 For a non-virtual member function described in the \Cpp{} standard library,
@@ -2744,7 +2745,7 @@ or add additional signatures for a member function name.
 
 \pnum
 This International Standard explicitly requires that certain standard library functions are
-\tcode{constexpr}~(\ref{dcl.constexpr}). An implementation shall not declare
+\link{\tcode{constexpr}}{\ref{dcl.constexpr}}. An implementation shall not declare
 any standard library function signature as \tcode{constexpr} except for those where
 it is explicitly required.
 Within any header that provides any non-defining declarations of constexpr
@@ -2781,8 +2782,8 @@ library may be recursively reentered.
 \rSec3[res.on.data.races]{Data race avoidance}
 
 \pnum
-This section specifies requirements that implementations shall meet to prevent data
-races~(\ref{intro.multithread}).
+This section specifies requirements that implementations shall meet to prevent
+\deflinkx{data races}{data race}{\ref{intro.multithread}}.
 Every standard library function shall meet each requirement unless otherwise specified.
 Implementations may prevent data races in cases other than those specified below.
 
@@ -2821,7 +2822,7 @@ not visible to users and are protected against data races.
 \pnum
 Unless otherwise specified, \Cpp{} standard library functions shall perform all operations
 solely within the current thread if those operations have effects that are
-visible~(\ref{intro.multithread}) to users.
+\deflinkx{visible}{side effects!visible}{\ref{intro.multithread}} to users.
 
 \pnum
 \begin{note} This allows implementations to parallelize operations if there are no visible
@@ -2870,8 +2871,8 @@ Every base class not specified as
 Unless explicitly stated otherwise, types with distinct names shall be distinct
 types.\footnote{There is an implicit exception to this rule for types that are
 described as synonyms for basic integral types, such as
-\tcode{size_t}~(\ref{support.types}) and
-\tcode{streamoff}~(\ref{stream.types}).}
+\link{\tcode{size_t}}{\ref{support.types}} and
+\link{\tcode{streamoff}}{\ref{stream.types}}.}
 \end{itemize}
 
 \pnum
@@ -2927,9 +2928,9 @@ may throw \impldef{exceptions thrown by standard library functions that have a
 potentially-throwing exception specification} exceptions.%
 \footnote{In particular, they
 can report a failure to allocate storage by throwing an exception of type
-\tcode{bad_alloc},
+\link{\tcode{bad_alloc}}{\ref{bad.alloc}},
 or a class derived from
-\tcode{bad_alloc}~(\ref{bad.alloc}).}
+\tcode{bad_alloc}.}
 Implementations should
 report errors by throwing exceptions of or derived
 from the standard exception classes~(\ref{bad.alloc},
@@ -2947,8 +2948,8 @@ by adding a non-throwing exception specification.
 \indextext{traceable pointer object}%
 \indextext{pointer!to traceable object}%
 Objects constructed by the standard library that may hold a user-supplied pointer value
-or an integer of type \tcode{std::intptr_t} shall store such values in a traceable
-pointer location~(\ref{basic.stc.dynamic.safety}). \begin{note} Other libraries are
+or an integer of type \tcode{std::intptr_t} shall store such values in a \link{traceable
+pointer location}{\ref{basic.stc.dynamic.safety}}. \begin{note} Other libraries are
 strongly encouraged to do the same, since not doing so may result in accidental use of
 pointers that are not safely derived. Libraries that store pointers outside the user's
 address space should make it appear that they are stored and retrieved from a traceable
@@ -2958,7 +2959,7 @@ pointer location. \end{note}
 
 \pnum
 Certain functions in the \Cpp{} standard library report errors via a
-\tcode{std::error_code}~(\ref{syserr.errcode.overview}) object. That object's
+\link{\tcode{std::error_code}}{\ref{syserr.errcode.overview}} object. That object's
 \tcode{category()} member shall return \tcode{std::system_category()} for
 errors originating from the operating system, or a reference to an
 \impldef{\tcode{error_category} for errors originating outside the
diff --git a/source/locales.tex b/source/locales.tex
index 7b03a78..2e841cd 100644
--- a/source/locales.tex
+++ b/source/locales.tex
@@ -282,7 +282,7 @@ Whether there is one global locale object for the entire program or one global l
 object per thread is \impldef{whether locale object is global or per-thread}.
 Implementations should provide one global locale object per
 thread. If there is a single global locale object for the entire program,
-implementations are not required to avoid data races on it~(\ref{res.on.data.races}).
+implementations are not required to \link{avoid data races}{\ref{res.on.data.races}} on it.
 
 \rSec3[locale.types]{\tcode{locale} types}
 
@@ -1117,7 +1117,7 @@ namespace std {
 \pnum
 The type
 \tcode{mask}
-is a bitmask type~(\ref{bitmask.types}).
+is a \link{bitmask type}{\ref{bitmask.types}}.
 
 \rSec3[locale.ctype]{Class template \tcode{ctype}}
 
@@ -1432,7 +1432,7 @@ value or values.\footnote{The char argument of
 is intended to accept values derived from character literals for conversion
 to the locale's encoding.}
 The only characters for which unique transformations are required
-are those in the basic source character set~(\ref{lex.charset}).
+are those in the \deflinkx{basic source character set}{character set!basic source}{\ref{lex.charset}}.
 
 For any named
 \tcode{ctype}
@@ -1477,7 +1477,8 @@ values to the corresponding
 \tcode{char}
 value or values.
 
-For any character \tcode{c} in the basic source character set~(\ref{lex.charset})
+For any character \tcode{c} in the
+\deflinkx{basic source character set}{character set!basic source}{\ref{lex.charset}}
 the transformation is such that
 
 \begin{codeblock}
@@ -1841,8 +1842,8 @@ virtual const char* do_narrow(const char* low,
 
 These functions are described identically as those members of the
 same name in the
-\tcode{ctype}
-class template~(\ref{locale.ctype.members}).
+\link{\tcode{ctype}
+class template}{\ref{locale.ctype.members}}.
 
 \rSec3[locale.codecvt]{Class template \tcode{codecvt}}
 
@@ -3394,7 +3395,7 @@ The specializations required in Table~\ref{tab:localization.category.facets}~(\r
 \tcode{collate<char>}
 and
 \tcode{collate<wchar_t>},
-apply lexicographic ordering~(\ref{alg.lex.comparison}).
+apply \link{lexicographic ordering}{\ref{alg.lex.comparison}}.
 
 \pnum
 Each function compares a string of characters
@@ -3458,7 +3459,7 @@ The specializations required in Table~\ref{tab:localization.category.facets}~(\r
 and
 \tcode{collate<wchar_t>},
 implement
-a lexicographical comparison~(\ref{alg.lex.comparison}).
+a \link{lexicographical comparison}{\ref{alg.lex.comparison}}.
 \end{itemdescr}
 
 \indexlibrarymember{collate}{do_transform}%
@@ -5277,7 +5278,6 @@ int main(int argc, char** argv) {
 \indextext{\idxhdr{cassert}}%
 \indexlibrary{\idxhdr{cassert}}%
 \indexlibrary{\idxcode{lconv}}%
-\indexlibrary{\idxcode{setlocale}}%
 \indexlibrary{\idxcode{localeconv}}%
 \indexlibrary{\idxcode{NULL}}%
 \indexlibrary{\idxcode{LC_ALL}}%
@@ -5290,7 +5290,7 @@ int main(int argc, char** argv) {
 namespace std {
   struct lconv;
 
-  char* setlocale(int category, const char* locale);
+  char* @\libentity{setlocale}@(int category, const char* locale);
   lconv* localeconv();
 }
 
diff --git a/source/macros.tex b/source/macros.tex
index a69a162..9abb6ee 100644
--- a/source/macros.tex
+++ b/source/macros.tex
@@ -527,3 +527,47 @@
 \let\addcontentsline\oldcontentsline%
 }
 \newcommand{\defncontext}[1]{\textlangle#1\textrangle}
+
+
+%%-------------------------------------------------
+%% cxxdraft-htmlgen macros
+
+\newcommand{\link}[2]{#1~(#2)}
+	% Link to section.
+	%   arg 0: link text
+	%   arg 1: section abbreviation
+
+\newcommand{\linkx}[3]{#1~(#3)}
+	% Link to indexed position.
+	%   arg 0: link text
+	%   arg 1: generalindex key
+	%   arg 2: section abbreviation
+
+\newcommand{\liblinkx}[3]{#1~(#3)}
+	% Link to indexed position.
+	%   arg 0: link text
+	%   arg 1: libraryindex key
+	%   arg 2: section abbreviation
+
+\newcommand{\deflinkx}[3]{#1~(#3)}
+	% Link to definition.
+	%   arg 0: link text
+	%   arg 1: definition key
+	%   arg 2: section abbreviation
+
+\newcommand{\deflink}[2]{\deflinkx{#1}{#1}{#2}}
+	% Convenience macro for when the link
+	% text is also the definition key.
+
+\newcommand{\indexedspan}[2]{#1#2}
+	%   arg 0: text
+	%   arg 1: indices (zero or more \index commands)
+
+\newcommand{\libentity}[1]{\indexedspan{\tcode{#1}}{\indexlibrary{\idxcode{#1}}}}
+	%   arg 0: entity name
+
+\newcommand{\libmember}[2]{\indexedspan{\tcode{#1}}{\indexlibrarymember{#1}{#2}}}
+	%   arg 0: member name
+	%   arg 1: parent name
+
+\newenvironment{indexed}[1]{}{}
diff --git a/source/numerics.tex b/source/numerics.tex
index cf14ba6..ef03800 100644
--- a/source/numerics.tex
+++ b/source/numerics.tex
@@ -116,7 +116,7 @@ storage and use the copy constructor to initialize each element.
 If the distinction between initialization and assignment is important
 for a class, or if it fails to satisfy any of
 the other conditions listed above, the programmer should use
-\tcode{vector}~(\ref{vector}) instead of
+\link{\tcode{vector}}{\ref{vector}} instead of
 \tcode{valarray}
 for that class.
 \end{note}
@@ -232,10 +232,10 @@ floating-point evaluation in constant expressions.
 \end{note}
 
 \pnum
-The floating-point environment has thread storage
-duration~(\ref{basic.stc.thread}). The initial state for a thread's floating-point
+The floating-point environment has \deflink{thread storage duration}{\ref{basic.stc.thread}}.
+The initial state for a thread's floating-point
 environment is the state of the floating-point environment of the thread that constructs
-the corresponding \tcode{thread} object~(\ref{thread.thread.class}) at the time it
+the corresponding \link{\tcode{thread} object}{\ref{thread.thread.class}} at the time it
 constructed the object. \begin{note} That is, the child thread gets the floating-point
 state of the parent thread at the time of the child's creation. \end{note}
 
@@ -263,7 +263,7 @@ for any type other than \tcode{float}, \tcode{double}, or \tcode{long double} is
 The specializations
 \tcode{complex<float>},
 \tcode{complex<double>}, and
-\tcode{complex<long double>} are literal types~(\ref{basic.types}).
+\tcode{complex<long double>} are \deflinkx{literal types}{literal type}{\ref{basic.types}}.
 
 \pnum
 If the result of a function is not mathematically defined or not in
@@ -1414,7 +1414,7 @@ and to templates producing such types when instantiated.
 \pnum
 \indextext{\idxcode{result_type}!entity characterization based on}%
 Each of the entities specified via this subclause
-has an associated arithmetic type~(\ref{basic.fundamental})
+has an associated \deflinkx{arithmetic type}{type!arithmetic}{\ref{basic.fundamental}}
 identified as \tcode{result_type}.
 With \tcode{T} as the \tcode{result_type}
 thus associated with such an entity,
@@ -1493,21 +1493,21 @@ the effect of instantiating a template:
     is undefined unless the corresponding template argument
     is cv-unqualified and
     satisfies the requirements
-    of seed sequence~(\ref{rand.req.seedseq}).
+    of \link{seed sequence}{\ref{rand.req.seedseq}}.
   \item
     that has a template type parameter
     named \tcode{URBG}
     is undefined unless the corresponding template argument
     is cv-unqualified and
     satisfies the requirements
-    of uniform random bit generator~(\ref{rand.req.urng}).
+    of \link{uniform random bit generator}{\ref{rand.req.urng}}.
   \item
     that has a template type parameter
     named \tcode{Engine}
     is undefined unless the corresponding template argument
     is cv-unqualified and
     satisfies the requirements
-    of random number engine~(\ref{rand.req.eng}).
+    of \link{random number engine}{\ref{rand.req.eng}}.
   \item
     that has a template type parameter
     named \tcode{RealType}
@@ -1632,7 +1632,7 @@ In that Table and throughout this section:
 \indextext{\idxcode{result_type}!seed sequence requirement}%
 \tcode{S::result_type}
   & \tcode{T}
-  & \tcode{T} is an unsigned integer type~(\ref{basic.fundamental})
+  & \tcode{T} is an \deflink{unsigned integer type}{\ref{basic.fundamental}}
     of at least 32 bits.
   & compile-time
   \\ \rowsep
@@ -1759,7 +1759,7 @@ In that Table and throughout this section:
 \indextext{\idxcode{result_type}!uniform random bit generator requirement}%
 \tcode{G::result_type}
   & \tcode{T}
-  & \tcode{T} is an unsigned integer type~(\ref{basic.fundamental}).
+  & \tcode{T} is an \deflink{unsigned integer type}{\ref{basic.fundamental}}.
   & compile-time
   \\ \rowsep
 \tcode{g()}%
@@ -1845,7 +1845,7 @@ An engine's state may be established via
 \pnum
 A class \tcode{E}
 that satisfies the requirements
-of a uniform random bit generator~(\ref{rand.req.urng})
+of a \link{uniform random bit generator}{\ref{rand.req.urng}}
 also satisfies the requirements
 of a \techterm{random number engine}
 if the expressions shown
@@ -1866,7 +1866,7 @@ In that Table and throughout this section:
     \tcode{s} is a value of \tcode{T};
   \item
     \tcode{q} is an lvalue
-    satisfying the requirements of a seed sequence~(\ref{rand.req.seedseq});
+    satisfying the requirements of a \link{seed sequence}{\ref{rand.req.seedseq}};
   \item
     \tcode{z} is a value
     of type \tcode{unsigned long long};
@@ -2057,8 +2057,8 @@ according to Clause~\ref{strings} and Clause~\ref{input.output}.
 
 \pnum
 \tcode{E} shall meet the requirements
-of \tcode{CopyConstructible} (Table~\ref{tab:copyconstructible})
-and \tcode{CopyAssignable} (Table~\ref{tab:copyassignable}) types.
+of \link{\tcode{CopyConstructible}}{Table~\ref{tab:copyconstructible}}
+and \link{\tcode{CopyAssignable}}{Table~\ref{tab:copyassignable}} types.
 These operations shall each be of complexity
 no worse than \bigoh{\mbox{size of state}}.
 
@@ -2262,7 +2262,7 @@ In that Table and throughout this section,
   \item
     \tcode{g}, \tcode{g1}, and \tcode{g2} are lvalues of a type
     satisfying the requirements
-    of a uniform random bit generator~(\ref{rand.req.urng});
+    of a \link{uniform random bit generator}{\ref{rand.req.urng}};
   \item
     \tcode{os} is an lvalue of the type of some class template specialization
     \tcode{basic_ostream<charT,} \tcode{traits>};
@@ -2294,7 +2294,7 @@ according to Clauses~\ref{strings} and \ref{input.output}.
 \indextext{\idxcode{result_type}!random number distribution requirement}%
 \tcode{D::result_type}
   & \tcode{T}
-  & \tcode{T} is an arithmetic type~(\ref{basic.fundamental}).
+  & \tcode{T} is an \deflinkx{arithmetic type}{type!arithmetic}{\ref{basic.fundamental}}.
   & compile-time
   \\ \rowsep
 \tcode{D::param_type}
@@ -2436,8 +2436,8 @@ according to Clauses~\ref{strings} and \ref{input.output}.
 
 \pnum
 \tcode{D} shall satisfy the requirements
-of \tcode{CopyConstructible} (Table~\ref{tab:copyconstructible})
-and \tcode{CopyAssignable} (Table~\ref{tab:copyassignable}) types.
+of \link{\tcode{CopyConstructible}}{Table~\ref{tab:copyconstructible}}
+and \link{\tcode{CopyAssignable}}{Table~\ref{tab:copyassignable}} types.
 
 \pnum
 The sequence of numbers
@@ -2468,10 +2468,10 @@ for convenience of exposition only.
 
 \pnum
 \tcode{P} shall satisfy the requirements
-of \tcode{CopyConstructible} (Table~\ref{tab:copyconstructible}),
-\tcode{CopyAssignable} (Table~\ref{tab:copyassignable}),
+of \link{\tcode{CopyConstructible}}{Table~\ref{tab:copyconstructible}},
+\link{\tcode{CopyAssignable}}{Table~\ref{tab:copyassignable}},
 and
-\tcode{EqualityComparable} (Table~\ref{tab:equalitycomparable}) types.
+\link{\tcode{EqualityComparable}}{Table~\ref{tab:equalitycomparable}} types.
 
 \pnum
 For each of the constructors of \tcode{D}
@@ -2665,7 +2665,7 @@ namespace std {
 Each type instantiated
 from a class template specified in this section~\ref{rand.eng}
 satisfies the requirements
-of a random number engine~(\ref{rand.req.eng}) type.
+of a \link{random number engine}{\ref{rand.req.eng}} type.
 
 \pnum
 Except where specified otherwise,
@@ -3215,7 +3215,7 @@ template<class Sseq> explicit subtract_with_carry_engine(Sseq& q);
 Each type instantiated
 from a class template specified in this section~\ref{rand.adapt}
 satisfies the requirements
-of a random number engine adaptor~(\ref{rand.req.adapt}) type.
+of a \link{random number engine adaptor}{\ref{rand.req.adapt}} type.
 
 \pnum
 Except where specified otherwise,
@@ -4001,7 +4001,7 @@ template<class InputIterator>
 \begin{itemdescr}
 \pnum\requires
   \tcode{InputIterator} shall satisfy the requirements
-  of an input iterator (Table~\ref{tab:iterator.input.requirements}) type.
+  of an \link{input iterator}{Table~\ref{tab:iterator.input.requirements}} type.
   Moreover,
   \tcode{iterator_traits<InputIterator>::value_type}
   shall denote an integer type.
@@ -4022,7 +4022,7 @@ template<class RandomAccessIterator>
 
 \begin{itemdescr}
 \pnum\requires \tcode{RandomAccessIterator}
-  shall meet the requirements of a mutable random access iterator~(\ref{random.access.iterators}).
+  shall meet the requirements of a mutable \link{random access iterator}{\ref{random.access.iterators}}.
   Moreover,
   \tcode{iterator_traits<RandomAccessIterator>::value_type}
   shall denote an unsigned integer type
@@ -4128,7 +4128,7 @@ template<class OutputIterator>
 \begin{itemdescr}
 \pnum\requires
   \tcode{OutputIterator} shall satisfy the requirements
-  of an output iterator~(\ref{output.iterators}).
+  of an \link{output iterator}{\ref{output.iterators}}.
   Moreover,
   the expression
   \tcode{*dest = rt}
@@ -4235,7 +4235,7 @@ template<class RealType, size_t bits, class URBG>
 Each type instantiated
 from a class template specified in this section~\ref{rand.dist}
 satisfies the requirements
-of a random number distribution~(\ref{rand.req.dist}) type.
+of a \link{random number distribution}{\ref{rand.req.dist}} type.
 
 \pnum
 Descriptions are provided in this section~\ref{rand.dist}
@@ -5863,7 +5863,7 @@ template<class InputIterator>
 \begin{itemdescr}
 \pnum\requires
   \tcode{InputIterator} shall satisfy the requirements
-  of an input iterator~(\ref{input.iterators}).
+  of an \link{input iterator}{\ref{input.iterators}}.
   Moreover,
   \tcode{iterator_traits<InputIterator>::value_type}
   shall denote a type that is convertible to \tcode{double}.
@@ -5898,7 +5898,7 @@ template<class UnaryOperation>
 \begin{itemdescr}
 \pnum\requires
  Each instance of type \tcode{UnaryOperation}
- shall be a function object~(\ref{function.objects})
+ shall be a \deflink{function object}{\ref{function.objects}}
  whose return type shall be convertible to \tcode{double}.
  Moreover,
  \tcode{double} shall be convertible
@@ -6046,7 +6046,7 @@ template<class InputIteratorB, class InputIteratorW>
 \pnum\requires
   \tcode{InputIteratorB} and \tcode{InputIteratorW}
   shall each satisfy the requirements
-  of an input iterator (Table~\ref{tab:iterator.input.requirements}) type.
+  of an \link{input iterator}{Table~\ref{tab:iterator.input.requirements}} type.
   Moreover,
   \tcode{iterator_traits<InputIteratorB>::value_type} and
   \tcode{iterator_traits<InputIteratorW>::value_type}
@@ -6078,7 +6078,7 @@ template<class UnaryOperation>
 \begin{itemdescr}
 \pnum\requires
  Each instance of type \tcode{UnaryOperation}
- shall be a function object~(\ref{function.objects})
+ shall be a \deflink{function object}{\ref{function.objects}}
  whose return type shall be convertible to \tcode{double}.
  Moreover,
  \tcode{double} shall be convertible
@@ -6113,7 +6113,7 @@ template<class UnaryOperation>
 \begin{itemdescr}
 \pnum\requires
  Each instance of type \tcode{UnaryOperation}
- shall be a function object~(\ref{function.objects})
+ shall be a \link{function object}{\ref{function.objects}}
  whose return type shall be convertible to \tcode{double}.
  Moreover,
  \tcode{double} shall be convertible
@@ -6267,7 +6267,7 @@ template<class InputIteratorB, class InputIteratorW>
 \pnum\requires
   \tcode{InputIteratorB} and \tcode{InputIteratorW}
   shall each satisfy the requirements
-  of an input iterator (Table~\ref{tab:iterator.input.requirements}) type.
+  of an \link{input iterator}{Table~\ref{tab:iterator.input.requirements}} type.
   Moreover,
   \tcode{iterator_traits<InputIteratorB>::value_type} and
   \tcode{iterator_traits<InputIteratorW>::value_type}
@@ -6299,7 +6299,7 @@ template<class UnaryOperation>
 \begin{itemdescr}
 \pnum\requires
  Each instance of type \tcode{UnaryOperation}
- shall be a function object~(\ref{function.objects})
+ shall be a \link{function object}{\ref{function.objects}}
  whose return type shall be convertible to \tcode{double}.
  Moreover,
  \tcode{double} shall be convertible
@@ -6334,7 +6334,7 @@ template<class UnaryOperation>
 \begin{itemdescr}
 \pnum\requires
  Each instance of type \tcode{UnaryOperation}
- shall be a function object~(\ref{function.objects})
+ shall be a \link{function object}{\ref{function.objects}}
  whose return type shall be convertible to \tcode{double}.
  Moreover,
  \tcode{double} shall be convertible
@@ -6387,7 +6387,7 @@ vector<result_type> densities() const;
 \indextext{\idxhdr{cstdlib}}%
 \indexlibrary{\idxhdr{cstdlib}}%
 \begin{note}
-The header \tcode{<cstdlib>}~(\ref{cstdlib.syn})
+The header \link{\tcode{<cstdlib>}}{\ref{cstdlib.syn}}
 declares the functions described in this subclause.
 \end{note}
 
@@ -6601,8 +6601,9 @@ additional functions and operators as follows:
 \begin{itemize}
 \item
 for every function taking a
-\tcode{const valarray<T>\&} other than \tcode{begin} and
-\tcode{end}~(\ref{valarray.range}),
+\tcode{const valarray<T>\&} other than
+\liblinkx{\tcode{begin}}{begin!valarray}{\ref{valarray.range}} and
+\liblinkx{\tcode{end}}{end!valarray}{\ref{valarray.range}},
 identical functions taking the replacement types shall be added;
 \item
 for every function taking two
@@ -6627,7 +6628,7 @@ objects.
 
 \pnum
 These library functions are permitted to throw a
-\tcode{bad_alloc}~(\ref{bad.alloc}) exception if there are not sufficient resources available
+\link{\tcode{bad_alloc}}{\ref{bad.alloc}} exception if there are not sufficient resources available
 to carry out the operation.
 Note that the exception is not mandated.
 
@@ -6787,7 +6788,8 @@ explicit valarray(size_t n);
 \pnum
 \effects
 Constructs a \tcode{valarray} that has length \tcode{n}.
-Each element of the array is value-initialized~(\ref{dcl.init}).
+Each element of the array is 
+\deflinkx{value-initialized}{value-initialize}{\ref{dcl.init}}.
 \end{itemdescr}
 
 \indexlibrary{\idxcode{valarray}!constructor}%
@@ -7029,7 +7031,7 @@ and other techniques to generate efficient
 \pnum
 The reference returned by the subscript operator for an array shall
 be valid until the member function
-\tcode{resize(size_t, T)}~(\ref{valarray.members}) is called for that array or until the lifetime of
+\liblinkx{\tcode{resize(size_t, T)}}{valarray!resize}{\ref{valarray.members}} is called for that array or until the lifetime of
 that array ends, whichever happens first.
 \end{itemdescr}
 
@@ -7436,7 +7438,8 @@ places, with zero fill.
 \pnum
 \begin{example}
 If the argument has the value -2,
-the first two elements of the result will be value-initialized~(\ref{dcl.init}); the third element of the result will be assigned the value
+the first two elements of the result will be
+\deflinkx{value-initialized}{value-initialize}{\ref{dcl.init}}; the third element of the result will be assigned the value
 of the first element of the argument; etc.
 \end{example}
 \end{itemdescr}
@@ -7471,10 +7474,11 @@ the value returned by applying the argument function to the
 corresponding element of \tcode{*this}.
 \end{itemdescr}
 
-\indexlibrarymember{resize}{valarray}%
+\begin{indexed}{\indexlibrarymember{resize}{valarray}}
 \begin{itemdecl}
 void resize(size_t sz, T c = T());
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -8519,40 +8523,42 @@ object refers.
 
 \pnum
 In the \tcode{begin} and \tcode{end} function templates that follow, \unspec{1}
-is a type that meets the requirements of a mutable random access
-iterator~(\ref{random.access.iterators})
-and of a contiguous iterator~(\ref{iterator.requirements.general})
+is a type that meets the requirements of a mutable \link{random access
+iterator}{\ref{random.access.iterators}}
+and of a \deflinkx{contiguous iterator}{contiguous iterators}{\ref{iterator.requirements.general}}
 whose \tcode{value_type} is the template
 parameter \tcode{T} and whose \tcode{reference} type is \tcode{T\&}. \unspec{2} is a
-type that meets the requirements of a constant random access
-iterator~(\ref{random.access.iterators})
-and of a contiguous iterator~(\ref{iterator.requirements.general})
+type that meets the requirements of a constant \link{random access
+iterator}{\ref{random.access.iterators}}
+and of a \deflinkx{contiguous iterator}{contiguous iterators}{\ref{iterator.requirements.general}}
 whose \tcode{value_type} is the template
 parameter \tcode{T} and whose \tcode{reference} type is \tcode{const T\&}.
 
 \pnum
 The iterators returned by \tcode{begin} and \tcode{end} for an array
 are guaranteed to be valid until the member function
-\tcode{resize(size_t, T)}~(\ref{valarray.members}) is called for that
+\liblinkx{\tcode{resize(size_t, T)}}{valarray!resize}{\ref{valarray.members}} is called for that
 array or until the lifetime of that array ends, whichever happens
 first.
 
-\indexlibrary{\idxcode{begin}!\idxcode{valarray}}%
+\begin{indexed}{\indexlibrary{\idxcode{begin}!\idxcode{valarray}}}
 \begin{itemdecl}
 template <class T> @\unspec{1}@ begin(valarray<T>& v);
 template <class T> @\unspec{2}@ begin(const valarray<T>& v);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
 \returns An iterator referencing the first value in the array.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{end}!\idxcode{valarray}}%
+\begin{indexed}{\indexlibrary{\idxcode{end}!\idxcode{valarray}}}
 \begin{itemdecl}
 template <class T> @\unspec{1}@ end(valarray<T>& v);
 template <class T> @\unspec{2}@ end(const valarray<T>& v);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -8829,8 +8835,8 @@ template <class InputIterator, class T, class BinaryOperation>
 \begin{itemdescr}
 \pnum
 \requires
-\tcode{T} shall meet the requirements of \tcode{CopyConstructible} (Table~\ref{tab:copyconstructible})
-and \tcode{CopyAssignable} (Table~\ref{tab:copyassignable}) types.
+\tcode{T} shall meet the requirements of \link{\tcode{CopyConstructible}}{Table~\ref{tab:copyconstructible}}
+and \link{\tcode{CopyAssignable}}{Table~\ref{tab:copyassignable}} types.
 In the range
 \crange{first}{last},
 \tcode{binary_op}
@@ -8979,8 +8985,8 @@ template <class InputIterator1, class InputIterator2, class T,
 \begin{itemdescr}
 \pnum
 \requires
-\tcode{T} shall meet the requirements of \tcode{CopyConstructible} (Table~\ref{tab:copyconstructible})
-and \tcode{CopyAssignable} (Table~\ref{tab:copyassignable}) types.
+\tcode{T} shall meet the requirements of \link{\tcode{CopyConstructible}}{Table~\ref{tab:copyconstructible}}
+and \link{\tcode{CopyAssignable}}{Table~\ref{tab:copyassignable}} types.
 In the ranges
 \crange{first1}{last1}
 and
@@ -9152,7 +9158,7 @@ template <class InputIterator, class OutputIterator, class BinaryOperation>
 \tcode{InputIterator}'s value type shall be constructible from the type of \tcode{*first}.
 The result of the expression \tcode{acc + *i} or \tcode{binary_op(acc, *i)} shall be
 implicitly convertible to \tcode{InputIterator}'s value type. \tcode{acc}
-shall be writable~(\ref{iterator.requirements.general}) to the \tcode{result} output iterator.
+shall be \deflink{writable}{\ref{iterator.requirements.general}} to the \tcode{result} output iterator.
 In the ranges
 \crange{first}{last}
 and
@@ -10496,11 +10502,11 @@ namespace std {
 The contents and meaning of the header \tcode{<cmath>}
 are the same as the C standard library header \tcode{<math.h>},
 with the addition of
-a three-dimensional hypotenuse function~(\ref{c.math.hypot3}) and
+a \link{three-dimensional hypotenuse}{\ref{c.math.hypot3}} function and
 the mathematical special functions described in \ref{sf.cmath}.
 \begin{note}
 Several functions have additional overloads in this International Standard,
-but they have the same behavior as in the C standard library~(\ref{library.c}).
+but they have the same behavior as in the \link{C standard library}{\ref{library.c}}.
 \end{note}
 
 \pnum
@@ -10511,7 +10517,8 @@ there shall be additional overloads sufficient to ensure:
   \item If any argument of arithmetic type
     corresponding to a \tcode{double} parameter
     has type \tcode{long double},
-    then all arguments of arithmetic type~(\ref{basic.fundamental})
+    then all arguments of
+    \deflinkx{arithmetic type}{type!arithmetic}{\ref{basic.fundamental}}
     corresponding to \tcode{double} parameters
     are effectively cast to \tcode{long double}.
   \item Otherwise, if any argument of arithmetic type
@@ -10540,8 +10547,8 @@ ISO C 7.12
 \indextext{\idxhdr{cmath}}%
 \indexlibrary{\idxhdr{cmath}}%
 \begin{note}
-The headers \tcode{<cstdlib>}~(\ref{cstdlib.syn}) and
-\tcode{<cmath>}~(\ref{cmath.syn})
+The headers \link{\tcode{<cstdlib>}}{\ref{cstdlib.syn}} and
+\link{\tcode{<cmath>}}{\ref{cmath.syn}}
 declare the functions described in this subclause.
 \end{note}
 
@@ -10568,7 +10575,7 @@ for the functions \tcode{abs}, \tcode{labs}, \tcode{llabs},
 If \tcode{abs()} is called with an argument of type \tcode{X}
 for which \tcode{is_unsigned_v<X>} is \tcode{true} and
 if \tcode{X} cannot be converted to \tcode{int}
-by integral promotion~(\ref{conv.prom}), the program is ill-formed.
+by \link{integral promotion}{\ref{conv.prom}}, the program is ill-formed.
 \begin{note}
 Arguments that can be promoted to \tcode{int} are permitted for compatibility with C.
 \end{note}
diff --git a/source/overloading.tex b/source/overloading.tex
index 20c4386..0aaee89 100644
--- a/source/overloading.tex
+++ b/source/overloading.tex
@@ -68,12 +68,12 @@ Certain function declarations cannot be overloaded:
 \item
 \indextext{return type!overloading and}%
 Function declarations that differ only in the return type,
-the exception specification~(\ref{except.spec}), or both
+the \link{exception specification}{\ref{except.spec}}, or both
 cannot be overloaded.
 \item
 \indextext{\idxcode{static}!overloading and}%
 Member function declarations with the same name and the same
-parameter-type-list~(\ref{dcl.fct}) cannot be overloaded if any of them is a
+\deflink{parameter-type-list}{\ref{dcl.fct}} cannot be overloaded if any of them is a
 \tcode{static}
 member function declaration~(\ref{class.static}).
 Likewise, member function template declarations with the same name,
@@ -108,7 +108,7 @@ class X {
 \end{example}
 
 \item Member function declarations with the same name and the same
-parameter-type-list~(\ref{dcl.fct}) as well as member function template
+\deflink{parameter-type-list}{\ref{dcl.fct}} as well as member function template
 declarations with the same name, the same parameter-type-list, and
 the same template parameter lists cannot be overloaded if any of them, but not
 all, have a \grammarterm{ref-qualifier}~(\ref{dcl.fct}). \begin{example}
@@ -419,7 +419,7 @@ contexts within the language:
 
 \begin{itemize}
 \item
-invocation of a function named in the function call syntax~(\ref{over.call.func});
+invocation of a function named in the \link{function call syntax}{\ref{over.call.func}};
 \item
 invocation of a function call operator, a pointer-to-function
 conversion function, a reference-to-pointer-to-function conversion
@@ -433,7 +433,7 @@ invocation of a constructor for default- or direct-initialization~(\ref{dcl.init
 of a class object~(\ref{over.match.ctor});
 \item
 invocation of a user-defined conversion for
-copy-initialization~(\ref{dcl.init}) of a class object~(\ref{over.match.copy});
+\deflink{copy-initialization}{\ref{dcl.init}} of a class object~(\ref{over.match.copy});
 \item
 invocation of a conversion function for initialization of an object of a
 non-class type from an expression of class type~(\ref{over.match.conv}); and
@@ -441,7 +441,7 @@ non-class type from an expression of class type~(\ref{over.match.conv}); and
 invocation of a conversion function for conversion to a glvalue
 or class prvalue
 to which a reference~(\ref{dcl.init.ref})
-will be directly bound~(\ref{over.match.ref}).
+will be \link{directly bound}{\ref{over.match.ref}}.
 \end{itemize}
 
 Each of these contexts defines the set of candidate functions and
@@ -459,7 +459,7 @@ conditions) is selected to form a set of
 viable functions~(\ref{over.match.viable}).
 \item
 Then the best viable function is selected based on the
-implicit conversion sequences~(\ref{over.best.ics}) needed to
+\link{implicit conversion sequences}{\ref{over.best.ics}} needed to
 match each argument to the corresponding parameter of each
 viable function.
 \end{itemize}
@@ -470,7 +470,7 @@ resolution succeeds and produces it as the result.
 Otherwise
 overload resolution fails and the invocation is ill-formed.
 When overload resolution succeeds,
-and the best viable function is not accessible (Clause~\ref{class.access}) in the context
+and the best viable function is not \link{accessible}{Clause~\ref{class.access}} in the context
 in which it is used,
 the program is ill-formed.
 
@@ -582,7 +582,7 @@ an rvalue can be bound to the parameter
 as long as in all other respects the argument can be
 converted to the type of the implicit object parameter.
 \begin{note} The fact that such an argument is an rvalue does not
-affect the ranking of implicit conversion sequences~(\ref{over.ics.rank}).
+affect the \link{ranking}{\ref{over.ics.rank}} of implicit conversion sequences.
 \end{note}
 \end{itemize}
 
@@ -642,7 +642,7 @@ contexts.
 \indextext{overloading!resolution!function call syntax|(}
 
 \pnum
-In a function call~(\ref{expr.call})
+In a \link{function call}{\ref{expr.call}}
 
 \begin{ncsimplebnf}
 postfix-expression \terminal{(} \opt{expression-list} \terminal{)}
@@ -741,8 +741,8 @@ or
 operator and has the more general form of a
 \grammarterm{primary-expression}.
 The name is looked up in the context of the function
-call following the normal rules for name lookup in function
-calls~(\ref{basic.lookup}).
+call following the normal rules for \link{name lookup}{\ref{basic.lookup}} in function
+calls.
 The function declarations found by that lookup constitute the
 set of candidate functions.
 Because of the rules for name lookup, the set of candidate functions
@@ -759,7 +759,7 @@ In case (2), the argument list is the
 in the call augmented by the addition of an implied object
 argument as in a qualified function call.
 If the keyword
-\tcode{this}~(\ref{class.this}) is in scope and refers to
+\link{\tcode{this}}{\ref{class.this}} is in scope and refers to
 class
 \tcode{T},
 or a derived class of
@@ -1084,7 +1084,7 @@ void m() {
 If a built-in candidate is selected by overload resolution, the
 operands of class type are converted to the types of the corresponding parameters
 of the selected operation function, except that the second standard conversion
-sequence of a user-defined conversion sequence~(\ref{over.ics.user}) is not applied.
+sequence of a \link{user-defined conversion sequence}{\ref{over.ics.user}} is not applied.
 Then the operator is treated as the corresponding
 built-in operator and interpreted according to Clause~\ref{expr}.
 \begin{example}
@@ -1164,10 +1164,10 @@ void B::f() {
 \indextext{overloading!resolution!initialization}
 
 \pnum
-When objects of class type are direct-initialized~(\ref{dcl.init}),
+When objects of class type are \deflinkx{direct-initialized}{direct-initialization}{\ref{dcl.init}},
 copy-initialized from an expression of the same or a
 derived class type~(\ref{dcl.init}),
-or default-initialized~(\ref{dcl.init}),
+or \deflinkx{default-initialized}{default-initialization}{\ref{dcl.init}},
 overload resolution selects the constructor.
 For direct-initialization or default-initialization
 that is not in the context of copy-initialization, the
@@ -1175,7 +1175,7 @@ candidate functions are
 all the constructors of the class of the object being
 initialized.
 For copy-initialization, the candidate functions are all
-the converting constructors~(\ref{class.conv.ctor}) of that
+the \deflinkx{converting constructors}{converting constructor}{\ref{class.conv.ctor}} of that
 class.
 The argument list is the
 \grammarterm{expression-list} or \grammarterm{assignment-expression}
@@ -1202,7 +1202,7 @@ the candidate functions are selected as follows:
 
 \begin{itemize}
 \item
-The converting constructors~(\ref{class.conv.ctor}) of
+The \deflinkx{converting constructors}{converting constructor}{\ref{class.conv.ctor}} of
 \tcode{T}
 are candidate functions.
 \item
@@ -1275,11 +1275,11 @@ and yield type
 \tcode{T}
 or a type that can be converted to type
 \tcode{T}
-via a standard conversion sequence~(\ref{over.ics.scs})
+via a \link{standard conversion sequence}{\ref{over.ics.scs}}
 are candidate functions.
 For direct-initialization, those explicit conversion functions that are not
 hidden within \tcode{S} and yield type \tcode{T} or a type that can be converted
-to type \tcode{T} with a qualification conversion~(\ref{conv.qual}) are also
+to type \tcode{T} with a \link{qualification conversion}{\ref{conv.qual}} are also
 candidate functions.
 Conversion functions that return a cv-qualified type
 are considered to yield the cv-unqualified version of that type
@@ -1332,15 +1332,15 @@ and yield type ``lvalue reference to \cvqual{cv2} \tcode{T2}''
 ``\cvqual{cv2} \tcode{T2}''
 or ``rvalue reference to \cvqual{cv2} \tcode{T2}'' (when initializing an
 rvalue reference or an lvalue reference to function),
-where ``\cvqual{cv1} \tcode{T}'' is reference-compatible~(\ref{dcl.init.ref})
+where ``\cvqual{cv1} \tcode{T}'' is \deflink{reference-compatible}{\ref{dcl.init.ref}}
 with ``\cvqual{cv2} \tcode{T2}'',
 are candidate functions. For direct-initialization, those explicit
 conversion functions that are not hidden within \tcode{S} and yield
 type ``lvalue reference to \cvqual{cv2} \tcode{T2}'' or ``\cvqual{cv2}
 \tcode{T2}'' or ``rvalue reference to \cvqual{cv2} \tcode{T2}'',
 respectively, where \tcode{T2} is the same type as \tcode{T} or can be
-converted to type \tcode{T} with a qualification
-conversion~(\ref{conv.qual}), are also candidate functions.
+converted to type \tcode{T} with a \link{qualification
+conversion}{\ref{conv.qual}}, are also candidate functions.
 
 \end{itemize}
 
@@ -1531,8 +1531,8 @@ A candidate function having more than
 parameters is viable
 only if the
 \textit{(m+1)}-st
-parameter has a default
-argument~(\ref{dcl.fct.default}).\footnote{According to~\ref{dcl.fct.default},
+parameter has a \link{default
+argument}{\ref{dcl.fct.default}}.\footnote{According to~\ref{dcl.fct.default},
 parameters following the
 \textit{(m+1)}-st
 parameter must also have default arguments.}
@@ -1548,7 +1548,7 @@ Second, for
 \tcode{F}
 to be a viable function, there shall exist for each
 argument an
-\term{implicit conversion sequence}~(\ref{over.best.ics}) that
+\deflink{implicit conversion sequence}{\ref{over.best.ics}} that
 converts that argument to the corresponding parameter of
 \tcode{F}.
 If the parameter has reference type, the implicit conversion sequence
@@ -1636,8 +1636,8 @@ float x = a;        // ambiguous: both possibilities require conversions,
 \end{example}
 or, if not that,
 
-\item the context is an initialization by conversion function for direct
-reference binding (\ref{over.match.ref}) of a reference to function type, the
+\item the context is an initialization by conversion function for \link{direct
+reference binding}{\ref{over.match.ref}} of a reference to function type, the
 return type of \tcode{F1} is the same kind of reference (i.e. lvalue or rvalue)
 as the reference being initialized, and the return type of \tcode{F2} is not
 \begin{example}
@@ -1825,7 +1825,7 @@ are converted to match the corresponding properties of the
 parameter.
 Other properties, such as the lifetime, storage class,
 alignment, accessibility of the argument, whether the argument is a bit-field,
-and whether a function is deleted~(\ref{dcl.fct.def.delete}), are ignored.
+and whether a function is \link{deleted}{\ref{dcl.fct.def.delete}}, are ignored.
 So, although an implicit
 conversion sequence can be defined for a given argument-parameter
 pair, the conversion from the argument to the parameter might still
@@ -1839,13 +1839,13 @@ sequence is one of the following forms:
 \begin{itemize}
 \item
 a
-\term{standard conversion sequence}~(\ref{over.ics.scs}),
+\link{standard conversion sequence}{\ref{over.ics.scs}},
 \item
 a
-\term{user-defined conversion sequence}~(\ref{over.ics.user}), or
+\link{user-defined conversion sequence}{\ref{over.ics.user}}, or
 \item
 an
-\term{ellipsis conversion sequence}~(\ref{over.ics.ellipsis}).
+\link{ellipsis conversion sequence}{\ref{over.ics.ellipsis}}.
 \end{itemize}
 
 \pnum
@@ -2016,10 +2016,10 @@ Each conversion in Table~\ref{tab:over.conversions}
 also has an associated rank (Exact
 Match, Promotion, or Conversion).
 These are used
-to rank standard conversion sequences~(\ref{over.ics.rank}).
+to \link{rank standard conversion sequences}{\ref{over.ics.rank}}.
 The rank of a conversion sequence is determined by considering the
-rank of each conversion in the sequence and the rank of any reference
-binding~(\ref{over.ics.ref}).
+rank of each conversion in the sequence and the rank of any \link{reference
+binding}{\ref{over.ics.ref}}.
 If any of those has Conversion rank, the
 sequence has Conversion rank; otherwise, if any of those has Promotion rank,
 the sequence has Promotion rank; otherwise, the sequence has Exact
@@ -2051,12 +2051,12 @@ A user-defined conversion sequence consists of an initial
 standard conversion sequence followed by a user-defined
 conversion~(\ref{class.conv}) followed by a second standard
 conversion sequence.
-If the user-defined conversion is specified
-by a constructor~(\ref{class.conv.ctor}), the initial standard
+If the user-defined conversion is \link{specified
+by a constructor}{\ref{class.conv.ctor}}, the initial standard
 conversion sequence converts the source type to the type required
 by the argument of the constructor.
 If the user-defined
-conversion is specified by a conversion function~(\ref{class.conv.fct}), the
+conversion is specified by a \link{conversion function}{\ref{class.conv.fct}}, the
 initial standard conversion sequence
 converts the source type to the implicit object parameter of the
 conversion function.
@@ -2094,7 +2094,7 @@ specification of the function called (see~\ref{expr.call}).
 \rSec4[over.ics.ref]{Reference binding}
 
 \pnum
-When a parameter of reference type binds directly~(\ref{dcl.init.ref}) to an
+When a parameter of reference type \link{binds directly}{\ref{dcl.init.ref}} to an
 argument expression, the implicit conversion sequence is the identity conversion,
 unless the argument expression has a type that is a derived class of the parameter
 type, in which case the implicit conversion sequence is a derived-to-base
@@ -2111,7 +2111,7 @@ int i = f(b);       // calls \tcode{f(B\&)}, an exact match, rather than \tcode{
 \end{example}
 If the parameter binds directly to the result of
 applying a conversion function to the argument expression, the implicit
-conversion sequence is a user-defined conversion sequence~(\ref{over.ics.user}),
+conversion sequence is a \link{user-defined conversion sequence}{\ref{over.ics.user}},
 with the second standard conversion sequence either an identity conversion or,
 if the conversion function returns an entity of a type that is a derived class
 of the parameter type, a derived-to-base Conversion.
@@ -2166,7 +2166,7 @@ the prohibition on binding a non-\tcode{const} lvalue reference to a bit-field~(
 \rSec4[over.ics.list]{List-initialization sequence}
 
 \pnum
-When an argument is an initializer list~(\ref{dcl.init.list}), it is not an
+When an argument is an initializer list~(\ref{dcl.init.list}), it is not an % todo
 expression and special rules apply for converting it to a parameter type.
 
 \pnum
@@ -2277,8 +2277,8 @@ i({ {1,2}, {"bar"} });  // OK: \tcode{i(D(A(std::initializer_list<int>\{1,2\}),
 
 \pnum
 Otherwise, if the parameter has an aggregate type which can be initialized from
-the initializer list according to the rules for aggregate
-initialization~(\ref{dcl.init.aggr}), the implicit conversion sequence is a
+the initializer list according to the rules for \link{aggregate
+initialization}{\ref{dcl.init.aggr}}, the implicit conversion sequence is a
 user-defined conversion sequence with the second standard conversion
 sequence an identity conversion. \begin{example}
 \begin{codeblock}
@@ -2362,13 +2362,13 @@ When comparing the basic forms of implicit conversion sequences
 
 \begin{itemize}
 \item
-a standard conversion sequence~(\ref{over.ics.scs}) is a better
+a \link{standard conversion sequence}{\ref{over.ics.scs}} is a better
 conversion sequence than a user-defined conversion sequence
 or an ellipsis conversion sequence, and
 \item
-a user-defined conversion sequence~(\ref{over.ics.user}) is a
-better conversion sequence than an ellipsis conversion
-sequence~(\ref{over.ics.ellipsis}).
+a \link{user-defined conversion sequence}{\ref{over.ics.user}} is a
+better conversion sequence than an \link{ellipsis conversion
+sequence}{\ref{over.ics.ellipsis}}.
 \end{itemize}
 
 \pnum
@@ -2732,7 +2732,7 @@ A function template name is considered to name a set of overloaded functions
 in such contexts.
 A function with type \tcode{F} is selected for the function type \tcode{FT}
 of the target type required in the context if \tcode{F}
-(after possibly applying the function pointer conversion~(\ref{conv.fctptr}))
+(after possibly applying the \link{function pointer conversion}{\ref{conv.fctptr}})
 is identical to \tcode{FT}.
 \begin{note}
 That is, the class of which the function is a member is ignored when matching a
@@ -2745,11 +2745,11 @@ The target can be
 an object or reference being initialized~(\ref{dcl.init}, \ref{dcl.init.ref},
 \ref{dcl.init.list}),
 \item
-the left side of an assignment~(\ref{expr.ass}),
+the left side of an \link{assignment}{\ref{expr.ass}},
 \item
 a parameter of a function~(\ref{expr.call}),
 \item
-a parameter of a user-defined operator~(\ref{over.oper}),
+a parameter of a \link{user-defined operator}{\ref{over.oper}},
 \item
 the return value of a function, operator function, or conversion~(\ref{stmt.return}),
 \item
@@ -2926,8 +2926,8 @@ the operator named in its
 \end{bnfkeywordtab}
 
 \begin{note}
-The last two operators are function call~(\ref{expr.call})
-and subscripting~(\ref{expr.sub}).
+The last two operators are \link{function call}{\ref{expr.call}}
+and \link{subscripting}{\ref{expr.sub}}.
 The operators
 \tcode{new[]},
 \tcode{delete[]},
@@ -3028,7 +3028,7 @@ this is not required by operator functions.
 
 \pnum
 \indextext{argument!overloaded operator and default}%
-An operator function cannot have default arguments~(\ref{dcl.fct.default}),
+An operator function cannot have \link{default arguments}{\ref{dcl.fct.default}},
 except where explicitly stated below.
 Operator
 functions cannot have more or fewer parameters than the
@@ -3342,11 +3342,11 @@ such a literal suffix identifier is ill-formed, no diagnostic required.
 \pnum
 A declaration whose \grammarterm{declarator-id} is a
 \grammarterm{literal-operator-id} shall be a declaration of a namespace-scope
-function or function template (it could be a friend
-function~(\ref{class.friend})), an explicit instantiation or specialization of a
+function or function template (it could be a \link{friend
+function}{\ref{class.friend}}), an explicit instantiation or specialization of a
 function template, or a \grammarterm{using-declaration}~(\ref{namespace.udecl}).
-A function declared with a \grammarterm{literal-operator-id} is a \term{literal
-operator}. A function template declared with a \grammarterm{literal-operator-id}
+A function declared with a \grammarterm{literal-operator-id} is a \term{literal operator}.
+A function template declared with a \grammarterm{literal-operator-id}
 is a \term{literal operator template}.
 
 \pnum
@@ -3367,7 +3367,7 @@ const char16_t*, std::size_t
 const char32_t*, std::size_t
 \end{codeblock}
 
-If a parameter has a default argument~(\ref{dcl.fct.default}), the program is
+If a parameter has a \link{default argument}{\ref{dcl.fct.default}}, the program is
 ill-formed.
 
 \pnum
@@ -3378,15 +3378,15 @@ whose type is \tcode{const char*}.
 The declaration of a literal operator template shall have an empty
 \grammarterm{parameter-declaration-clause} and its
 \grammarterm{template-parameter-list} shall have a single
-\grammarterm{template-parameter} that is a non-type template parameter
-pack (\ref{temp.variadic}) with element type \tcode{char}.
+\grammarterm{template-parameter} that is a non-type template
+\deflink{parameter pack}{\ref{temp.variadic}} with element type \tcode{char}.
 
 \pnum
 Literal operators and literal operator templates shall not have C language linkage.
 
 \pnum
 \begin{note} Literal operators and literal operator templates are usually invoked
-implicitly through user-defined literals~(\ref{lex.ext}). However, except for
+implicitly through \link{user-defined literals}{\ref{lex.ext}}. However, except for
 the constraints described above, they are ordinary namespace-scope functions and
 function templates. In particular, they are looked up like ordinary functions
 and function templates and they follow the same overload resolution rules. Also,
@@ -3450,7 +3450,7 @@ is hidden and is not included in the set of candidate functions.
 In this subclause, the term
 \defn{promoted integral type}
 is used to refer to those integral types which are preserved by
-integral promotion~(\ref{conv.prom}) (including e.g.
+\link{integral promotion}{\ref{conv.prom}} (including e.g.
 \tcode{int}
 and
 \tcode{long}
diff --git a/source/preprocessor.tex b/source/preprocessor.tex
index a5fb356..45f41fb 100644
--- a/source/preprocessor.tex
+++ b/source/preprocessor.tex
@@ -267,7 +267,7 @@ in any context not mentioned in this section.
 Each preprocessing token that remains (in the list of preprocessing tokens that
 will become the controlling expression)
 after all macro replacements have occurred
-shall be in the lexical form of a token~(\ref{lex.token}).
+shall be in the lexical form of a \link{token}{\ref{lex.token}}.
 
 \pnum
 Preprocessing directives of the forms
@@ -313,8 +313,8 @@ are replaced with the \grammarterm{pp-number}
 \tcode{0},
 and then each preprocessing token is converted into a token.
 \begin{note}
-An alternative
-token~(\ref{lex.digraph}) is not an identifier,
+An \link{alternative
+token}{\ref{lex.digraph}} is not an identifier,
 even when its spelling consists entirely of letters and underscores.
 Therefore it is not subject to this replacement.
 \end{note}
@@ -332,8 +332,8 @@ Thus on an
 implementation where \tcode{std::numeric_limits<int>::max()} is \tcode{0x7FFF}
 and \tcode{std::numeric_limits<unsigned int>::max()} is \tcode{0xFFFF},
 the integer literal \tcode{0x8000} is signed and positive within a \tcode{\#if}
-expression even though it is unsigned in translation phase
-7~(\ref{lex.phases}).
+expression even though it is unsigned in \link{translation phase
+7}{\ref{lex.phases}}.
 \end{note}
 This includes interpreting character literals, which may involve
 converting escape sequences into execution character set members.
@@ -675,7 +675,7 @@ not sequences possibly containing identifier-like subsequences
 (see \ref{lex.phases}, translation phases),
 they are never scanned for macro names or parameters.}
 to be replaced by the replacement list of preprocessing tokens
-that constitute the remainder of the directive.\footnote{An alternative token~(\ref{lex.digraph}) is not an identifier,
+that constitute the remainder of the directive.\footnote{An \link{alternative token}{\ref{lex.digraph}} is not an identifier,
 even when its spelling consists entirely of letters and underscores.
 Therefore it is not possible to define a macro
 whose name is the same as that of an alternative token.}
@@ -1137,7 +1137,7 @@ The
 \term{line number}
 of the current source line is one greater than
 the number of new-line characters read or introduced
-in translation phase 1~(\ref{lex.phases})
+in \link{translation phase 1}{\ref{lex.phases}}
 while processing the source file to the current token.
 
 \pnum
@@ -1278,8 +1278,8 @@ The presumed line number (within the current source file) of the current source
 The integer literal \tcode{1} if the implementation is a hosted
 implementation or the integer literal \tcode{0} if it is not.
 
-\indextext{__STDCPP_DEFAULT_NEW_ALIGNMENT__@\mname{STDCPP_DEFAULT_NEW_ALIGNMENT}}%
-\item \mname{STDCPP_DEFAULT_NEW_ALIGNMENT}\\
+\item \indexedspan{\mname{STDCPP_DEFAULT_NEW_ALIGNMENT}}{
+ \indextext{__STDCPP_DEFAULT_NEW_ALIGNMENT__@\mname{STDCPP_DEFAULT_NEW_ALIGNMENT}}}\\
 An integer literal of type \tcode{std::size_t}
 whose value is the alignment guaranteed
 by a call to \tcode{operator new(std::size_t)}
@@ -1334,12 +1334,12 @@ all amendments and technical corrigenda as of the specified year and month.
 \indextext{__STDCPP_STRICT_POINTER_SAFETY__@\mname{STDCPP_STRICT_POINTER_SAFETY}}%
 \item \mname{STDCPP_STRICT_POINTER_SAFETY}\\
 Defined, and has the value integer literal 1, if and only if the implementation
-has strict pointer safety~(\ref{basic.stc.dynamic.safety}).
+has \deflink{strict pointer safety}{\ref{basic.stc.dynamic.safety}}.
 
 \indextext{__STDCPP_THREADS__@\mname{STDCPP_THREADS}}%
 \item \mname{STDCPP_THREADS}\\
 Defined, and has the value integer literal 1, if and only if a program
-can have more than one thread of execution~(\ref{intro.multithread}).
+can have more than one \link{thread of execution}{\ref{intro.multithread}}.
 
 \end{description}
 
diff --git a/source/regex.tex b/source/regex.tex
index fcd496b..b7fd51e 100644
--- a/source/regex.tex
+++ b/source/regex.tex
@@ -12,7 +12,7 @@ searching.
 
 \pnum
 The following subclauses describe a basic regular expression class template and its
-traits that can handle char-like~(\ref{strings.general}) template arguments,
+traits that can handle \deflinkx{char-like}{char-like types}{\ref{strings.general}} template arguments,
 two specializations of this class template that handle sequences of \tcode{char} and \tcode{wchar_t},
 a class template that holds the
 result of a regular expression match, a series of algorithms that allow a character
@@ -112,8 +112,8 @@ defining types and functions for the character container
 type \tcode{charT}; \tcode{u} is an object of
 type \tcode{X}; \tcode{v} is an object of type \tcode{const
 X}; \tcode{p} is a value of type \tcode{const charT*}; \tcode{I1}
-and \tcode{I2} are input iterators~(\ref{input.iterators});
-\tcode{F1} and \tcode{F2} are forward iterators~(\ref{forward.iterators});
+and \tcode{I2} are \link{input iterators}{\ref{input.iterators}};
+\tcode{F1} and \tcode{F2} are \link{forward iterators}{\ref{forward.iterators}};
 \tcode{c} is a value of type \tcode{const charT};
 \tcode{s} is an object of type \tcode{X::string_type};
 \tcode{cs} is an object of type \tcode{const X::string_type};
@@ -147,7 +147,7 @@ and \tcode{loc} is an object of type \tcode{X::locale_type}.
   & A type that represents the locale used by the traits class. \indextext{locale}
  \\ \rowsep
 \tcode{X::char_class_type}
- & A bitmask type~(\ref{bitmask.types}).
+ & A \link{bitmask type}{\ref{bitmask.types}}.
  & A bitmask type representing a particular character classification.
    \indextext{regular expression traits!\idxcode{char_class_type}}%
    \indextext{\idxcode{char_class_type}!regular expression traits}%
@@ -651,8 +651,8 @@ namespace std::regex_constants {
 \indexlibrary{\idxcode{syntax_option_type}!\idxcode{awk}}%
 \indexlibrary{\idxcode{syntax_option_type}!\idxcode{grep}}%
 \indexlibrary{\idxcode{syntax_option_type}!\idxcode{egrep}}%
-The type \tcode{syntax_option_type} is an \impldef{type of \tcode{syntax_option_type}} bitmask
-type~(\ref{bitmask.types}). Setting its elements has the effects listed in
+The type \tcode{syntax_option_type} is an \impldef{type of \tcode{syntax_option_type}} \link{bitmask
+type}{\ref{bitmask.types}}. Setting its elements has the effects listed in
 Table~\ref{tab:re:syntaxoption}.  A valid value of type
 \tcode{syntax_option_type} shall have at most one of the grammar elements
 \tcode{ECMAScript}, \tcode{basic}, \tcode{extended}, \tcode{awk}, \tcode{grep}, \tcode{egrep}, set.
@@ -786,7 +786,7 @@ namespace std::regex_constants {
 \pnum
 \indexlibrary{\idxcode{match_flag_type}}%
 The type \tcode{match_flag_type} is an
-\impldef{type of \tcode{regex_constants::match_flag_type}} bitmask type~(\ref{bitmask.types}).
+\impldef{type of \tcode{regex_constants::match_flag_type}} \link{bitmask type}{\ref{bitmask.types}}.
 The constants of that type, except for \tcode{match_default} and
 \tcode{format_default}, are bitmask elements. The \tcode{match_default} and
 \tcode{format_default} constants are empty bitmasks.
@@ -848,7 +848,7 @@ The expression shall only match a sub-sequence that begins at
 \tcode{match_prev_avail} &
 \verb!--first! is a valid iterator position. When this flag is
 set the flags \tcode{match_not_bol} and \tcode{match_not_bow} shall be ignored by the
-regular expression algorithms~(\ref{re.alg}) and iterators~(\ref{re.iter}).
+\link{regular expression algorithms}{\ref{re.alg}} and \link{iterators}{\ref{re.iter}}.
 \\ \rowsep
 %
 \indexlibrary{\idxcode{format_default}}%
@@ -909,7 +909,7 @@ namespace std::regex_constants {
 \indexlibrary{\idxcode{error_type}}%
 \indexlibrary{\idxcode{regex_constants}!\idxcode{error_type}}%
 The type \tcode{error_type} is an \impldef{type of
-\tcode{regex_constants::error_type}} enumerated type~(\ref{enumerated.types}).
+\tcode{regex_constants::error_type}} \link{enumerated type}{\ref{enumerated.types}}.
 Values of type \tcode{error_type} represent the error
 conditions described in Table~\ref{tab:re:errortype}:
 
@@ -1732,8 +1732,8 @@ template <class InputIterator>
 
 \begin{itemdescr}
 \pnum
-\requires  The type \tcode{InputIterator} shall satisfy the requirements for an Input
-Iterator~(\ref{input.iterators}).
+\requires  The type \tcode{InputIterator} shall satisfy the requirements for an
+\link{Input Iterator}{\ref{input.iterators}}.
 
 \pnum
 \returns \tcode{assign(string_type(first, last), f)}.
@@ -2829,7 +2829,7 @@ template <class OutputIter>
 \begin{itemdescr}
 \pnum
 \requires \tcode{ready() == true} and \tcode{OutputIter} shall satisfy the requirements for an
-Output Iterator~(\ref{output.iterators}).
+\link{Output Iterator}{\ref{output.iterators}}.
 
 \pnum
 \effects Copies the character sequence \range{fmt_first}{fmt_last} to
@@ -3017,7 +3017,7 @@ template <class BidirectionalIterator, class Allocator, class charT, class trait
 \begin{itemdescr}
 \pnum
 \requires The type \tcode{BidirectionalIterator} shall satisfy the requirements
-of a Bidirectional Iterator~(\ref{bidirectional.iterators}).
+of a \link{Bidirectional Iterator}{\ref{bidirectional.iterators}}.
 
 \pnum
 \effects  Determines whether there is a match between the
@@ -3199,8 +3199,8 @@ template <class BidirectionalIterator, class Allocator, class charT, class trait
 
 \begin{itemdescr}
 \pnum
-\requires Type \tcode{BidirectionalIterator} shall satisfy the requirements of a Bidirectional
-Iterator (\ref{bidirectional.iterators}).
+\requires Type \tcode{BidirectionalIterator} shall satisfy the requirements of a \link{Bidirectional
+Iterator}{\ref{bidirectional.iterators}}.
 
 \pnum
 \effects Determines whether there is some sub-sequence within \range{first}{last} that matches
@@ -4163,8 +4163,8 @@ to an integral value, this is accomplished by calling \tcode{traits_inst.value}.
 The behavior of the internal finite state machine representation when used to match a
 sequence of characters is as described in ECMA-262.
 The behavior is modified according
-to any match_flag_type flags~(\ref{re.matchflag}) specified when using the regular expression
-object in one of the regular expression algorithms~(\ref{re.alg}). The behavior is also
+to any \link{\tcode{match_flag_type} flags}{\ref{re.matchflag}} specified when using the regular expression
+object in one of the \link{regular expression algorithms}{\ref{re.alg}}. The behavior is also
 localized by interaction with the traits class template parameter as follows:
 \begin{itemize}
 \item During matching of a regular expression finite state machine
diff --git a/source/special.tex b/source/special.tex
index 8caa612..34a5a7a 100644
--- a/source/special.tex
+++ b/source/special.tex
@@ -15,14 +15,16 @@
 \indextext{constructor!move}%
 \indextext{assignment operator!copy}%
 \indextext{assignment operator!move}%
-The default constructor~(\ref{class.ctor}),
-copy constructor and copy assignment operator~(\ref{class.copy}),
-move constructor and move assignment operator~(\ref{class.copy}),
-and destructor~(\ref{class.dtor}) are
+The \deflinkx{default constructor}{constructor!default}{\ref{class.ctor}},
+\deflinkx{copy constructor}{constructor!copy}{\ref{class.copy}} and
+\deflinkx{copy assignment operator}{assignment operator!copy}{\ref{class.copy}},
+\deflinkx{move constructor}{constructor!move}{\ref{class.copy}} and
+\deflinkx{move assignment operator}{assignment operator!move}{\ref{class.copy}},
+and \link{destructor}{\ref{class.dtor}} are
 \term{special member functions}.
 \begin{note} The implementation will implicitly declare these member functions for some class
 types when the program does not explicitly declare them.
-The implementation will implicitly define them if they are odr-used~(\ref{basic.def.odr}).
+The implementation will implicitly define them if they are \link{odr-used}{\ref{basic.def.odr}}.
 See~\ref{class.ctor}, \ref{class.dtor} and~\ref{class.copy}. \end{note}
 An implicitly-declared special member function is declared at the closing
 \tcode{\}} of the \grammarterm{class-specifier}.
@@ -55,7 +57,7 @@ Often such special member functions are called implicitly.
 
 \pnum
 \indextext{access control!member function and}%
-Special member functions obey the usual access rules (Clause~\ref{class.access}).
+Special member functions obey the usual \link{access rules}{Clause~\ref{class.access}}.
 \begin{example}
 Declaring a constructor
 \tcode{protected}
@@ -64,7 +66,7 @@ ensures that only derived classes and friends can create objects using it.
 
 \pnum
 For a class, its non-static data members, its non-virtual direct base classes,
-and, if the class is not abstract~(\ref{class.abstract}), its virtual base
+and, if the class is not \deflinkx{abstract}{class!abstract}{\ref{class.abstract}}, its virtual base
 classes are called its \term{potentially constructed subobjects}.
 
 \rSec1[class.ctor]{Constructors}%
@@ -74,7 +76,7 @@ classes are called its \term{potentially constructed subobjects}.
 \pnum
 Constructors do not have names.
 In a declaration of a constructor, the \grammarterm{declarator} is a
-function declarator~(\ref{dcl.fct}) of the form
+\link{function declarator}{\ref{dcl.fct}} of the form
 
 \begin{ncbnf}
 ptr-declarator \terminal{(} parameter-declaration-clause \terminal{)} \opt{noexcept-specifier} \opt{attribute-specifier-seq}
@@ -88,15 +90,15 @@ one of the following forms:
 \begin{itemize}
 \item
 in a \grammarterm{member-declaration} that belongs to the
-\grammarterm{member-specification} of a class but is not a friend
-declaration~(\ref{class.friend}), the \grammarterm{id-expression} is the
-injected-class-name (Clause~\ref{class}) of the immediately-enclosing class;
+\grammarterm{member-specification} of a class but is not a \link{friend
+declaration}{\ref{class.friend}}, the \grammarterm{id-expression} is the
+\deflink{injected-class-name}{Clause~\ref{class}} of the immediately-enclosing class;
 
 \item
 in a \grammarterm{member-declaration} that belongs to the
 \grammarterm{member-specification} of a class template but is not a friend
 declaration, the \grammarterm{id-expression} is a \grammarterm{class-name} that
-names the current instantiation~(\ref{temp.dep.type}) of the
+names the \deflink{current instantiation}{\ref{temp.dep.type}} of the
 immediately-enclosing class template; or
 
 \item
@@ -123,8 +125,8 @@ S::S() { }          // defines the constructor
 \pnum
 A constructor is used to initialize objects of its class type.
 Because constructors do not have names, they are never found during
-name lookup; however an explicit type conversion using the functional
-notation~(\ref{expr.type.conv}) will cause a constructor to be called to
+name lookup; however an \link{explicit type conversion using the functional
+notation}{\ref{expr.type.conv}} will cause a constructor to be called to
 initialize an object.
 \begin{note}
 For initialization of objects of class type see~\ref{class.init}.
@@ -146,7 +148,7 @@ and
 \tcode{volatile}
 semantics~(\ref{dcl.type.cv}) are not applied on an object under construction.
 They come into effect when the constructor for the
-most derived object~(\ref{intro.object}) ends.
+\deflink{most derived object}{\ref{intro.object}} ends.
 
 \pnum
 \indextext{constructor!inheritance of}%
@@ -185,7 +187,7 @@ with a non-trivial default constructor and
 no variant member of the anonymous union containing \tcode{M}
 has a default member initializer,
 
-\item any non-static data member with no default member initializer~(\ref{class.mem}) is
+\item any non-static data member with no \deflink{default member initializer}{\ref{class.mem}} is
 of reference type,
 
 \item any non-variant non-static data member of const-qualified type (or array
@@ -200,8 +202,8 @@ of const-qualified type (or array thereof),
 \item any potentially constructed subobject, except for a non-static data member
 with a \grammarterm{brace-or-equal-initializer}, has
 class type \tcode{M} (or array thereof) and either \tcode{M}
-has no default constructor or overload resolution
-(\ref{over.match}) as applied to find \tcode{M}'s corresponding
+has no default constructor or \link{overload resolution}{\ref{over.match}}
+as applied to find \tcode{M}'s corresponding
 constructor results in an ambiguity or in a function that is deleted or
 inaccessible from the defaulted default constructor, or
 
@@ -217,11 +219,11 @@ if it is not user-provided and if:
 
 \begin{itemize}
 \item
-its class has no virtual functions~(\ref{class.virtual}) and no virtual base
-classes~(\ref{class.mi}), and
+its class has no \link{virtual functions}{\ref{class.virtual}} and no \deflinkx{virtual base
+classes}{base class!virtual}{\ref{class.mi}}, and
 
 \item no non-static data member of its class has
-a default member initializer~(\ref{class.mem}), and
+a \deflink{default member initializer}{\ref{class.mem}}, and
 
 \item
 all the direct base classes of its class have trivial default constructors, and
@@ -239,7 +241,7 @@ A default constructor
 that is defaulted and not defined as deleted
 is
 \defnx{implicitly defined}{constructor!implicitly defined}
-when it is odr-used~(\ref{basic.def.odr})
+when it is \link{odr-used}{\ref{basic.def.odr}}
 to create an object of its class type~(\ref{intro.object})
 or when it is explicitly defaulted after its first declaration.
 The implicitly-defined default constructor performs the set of
@@ -250,7 +252,7 @@ constructor for that class with no
 If that user-written default constructor would be ill-formed,
 the program is ill-formed.
 If that user-written default constructor would satisfy the requirements
-of a constexpr constructor~(\ref{dcl.constexpr}), the implicitly-defined
+of a \deflinkx{constexpr constructor}{specifier!constexpr!constructor}{\ref{dcl.constexpr}}, the implicitly-defined
 default constructor is \tcode{constexpr}.
 Before the defaulted default constructor for a class is
 implicitly defined,
@@ -267,16 +269,16 @@ implicit exception specification, see~\ref{dcl.fct.def}.
 \indextext{constructor!implicitly called}%
 Default constructors are called implicitly to create class objects of static, thread,
 or automatic storage duration~(\ref{basic.stc.static}, \ref{basic.stc.thread}, \ref{basic.stc.auto}) defined
-without an initializer~(\ref{dcl.init}),
-are called to create class objects of dynamic storage duration~(\ref{basic.stc.dynamic}) created by a
+without an \link{initializer}{\ref{dcl.init}},
+are called to create class objects of \link{dynamic storage duration}{\ref{basic.stc.dynamic}} created by a
 \grammarterm{new-expression}
 in which the
 \grammarterm{new-initializer}
 is omitted~(\ref{expr.new}), or
-are called when the explicit type conversion syntax~(\ref{expr.type.conv}) is
+are called when the \link{explicit type conversion}{\ref{expr.type.conv}} syntax is
 used.
 A program is ill-formed if the default constructor for an object
-is implicitly used and the constructor is not accessible (Clause~\ref{class.access}).
+is implicitly used and the constructor is not \link{accessible}{Clause~\ref{class.access}}.
 
 \pnum
 \begin{note}
@@ -298,7 +300,7 @@ The address of a constructor shall not be taken.
 \pnum
 \indextext{object!unnamed}%
 \indextext{constructor!explicit call}%
-A functional notation type conversion~(\ref{expr.type.conv}) can be used
+A \link{functional notation type conversion}{\ref{expr.type.conv}} can be used
 to create new objects of its type.
 \begin{note}
 The syntax looks like an explicit call of the constructor.
@@ -375,12 +377,12 @@ D d = D(1);                     // value of \tcode{d.b} is unspecified
 Temporary objects are created
 \begin{itemize}
 \item
-when a prvalue is materialized so that it can be used as a glvalue~(\ref{conv.rval}),
+when a prvalue is materialized so that it can be used as a \deflink{glvalue}{\ref{conv.rval}},
 \item
 when needed by the implementation to pass or return an object of trivially-copyable type (see below),
 and
 \item
-when throwing an exception~(\ref{except.throw}).
+when \link{throwing an exception}{\ref{except.throw}}.
 \begin{note}
 The lifetime of exception objects is described in~\ref{except.throw}.
 \end{note}
@@ -390,7 +392,7 @@ unevaluated (Clause~\ref{expr}),
 all the semantic restrictions shall be respected as if the temporary object
 had been created and later destroyed.
 \begin{note}
-This includes accessibility (Clause~\ref{class.access}) and whether it is deleted,
+This includes \link{accessibility}{Clause~\ref{class.access}} and whether it is deleted,
 for the constructor selected and for the destructor. However, in the special
 case of the operand of a
 \grammarterm{decltype-specifier}~(\ref{expr.call}), no temporary is introduced,
@@ -410,13 +412,13 @@ when binding a reference to a prvalue~(\ref{dcl.init.ref}, \ref{expr.type.conv},
 \item
 when performing member access on a class prvalue~(\ref{expr.ref}, \ref{expr.mptr.oper}),
 \item
-when performing an array-to-pointer conversion or subscripting on an array prvalue~(\ref{conv.array}, \ref{expr.sub}),
+when performing an \link{array-to-pointer conversion}{\ref{conv.array}} or \link{subscripting}{\ref{expr.sub}} on an array prvalue,
 \item
 when initializing an object of type \tcode{std::initializer_list<T>} from a \grammarterm{braced-init-list}~(\ref{dcl.init.list}),
 \item
 for certain unevaluated operands~(\ref{expr.typeid}, \ref{expr.sizeof}), and
 \item
-when a prvalue appears as a discarded-value expression (Clause~\ref{expr}).
+when a prvalue appears as a \deflink{discarded-value expression}{Clause~\ref{expr}}.
 \end{itemize}
 \end{note}
 \begin{example} Consider the following code:
@@ -495,7 +497,7 @@ Similarly, the destructor shall be called for a temporary with a non-trivial
 destructor~(\ref{class.dtor}).
 Temporary objects are destroyed as the last step
 in evaluating
-the full-expression~(\ref{intro.execution})
+the \deflink{full-expression}{\ref{intro.execution}}
 that (lexically) contains the point where
 they were created.
 This is true even if that evaluation ends in throwing an exception.
@@ -530,10 +532,10 @@ that is the complete object of a subobject to which the reference is bound
 persists for the lifetime of the reference except:
 
 \begin{itemize}
-\item A temporary object bound to a reference parameter in a function call~(\ref{expr.call})
+\item A temporary object bound to a reference parameter in a \link{function call}{\ref{expr.call}}
 persists until the completion of the full-expression containing the call.
 
-\item The lifetime of a temporary bound to the returned value in a function return statement~(\ref{stmt.return}) is not extended; the temporary is destroyed at the end of the full-expression in the return statement.
+\item The lifetime of a temporary bound to the returned value in a function \link{return statement}{\ref{stmt.return}} is not extended; the temporary is destroyed at the end of the full-expression in the return statement.
 
 \item A temporary bound to a reference in a \grammarterm{new-initializer}~(\ref{expr.new}) persists until the completion of the full-expression containing the \grammarterm{new-initializer}. \begin{example}
 \begin{codeblock}
@@ -553,8 +555,10 @@ at the same point,
 these temporaries are destroyed at that point in the reverse order of the
 completion of their construction.
 In addition, the destruction of temporaries bound to references shall
-take into account the ordering of destruction of objects with static, thread, or
-automatic storage duration~(\ref{basic.stc.static}, \ref{basic.stc.thread}, \ref{basic.stc.auto});
+take into account the ordering of destruction of objects with
+\deflinkx{static}{static storage duration}{\ref{basic.stc.static}},
+\deflinkx{thread}{thread storage duration}{\ref{basic.stc.thread}}, or
+\deflink{automatic storage duration}{\ref{basic.stc.auto}};
 that is, if
 \tcode{obj1}
 is an object with the same storage duration as the temporary and
@@ -663,12 +667,12 @@ by conversion functions.
 These conversions are called
 \defnx{user-defined conversions}{conversion!user-defined}
 and are used for implicit type conversions (Clause~\ref{conv}),
-for initialization~(\ref{dcl.init}),
+for \link{initialization}{\ref{dcl.init}},
 and for explicit type conversions~(\ref{expr.cast}, \ref{expr.static.cast}).
 
 \pnum
 User-defined conversions are applied only where they are unambiguous~(\ref{class.member.lookup}, \ref{class.conv.fct}).
-Conversions obey the access control rules (Clause~\ref{class.access}).
+Conversions obey the \link{access control rules}{Clause~\ref{class.access}}.
 Access control is applied after ambiguity resolution~(\ref{basic.lookup}).
 
 \pnum
@@ -702,7 +706,7 @@ User-defined conversions are used implicitly only if they are unambiguous.
 \indextext{name hiding!user-defined conversion and}%
 A conversion function in a derived class does not hide a conversion function
 in a base class unless the two functions convert to the same type.
-Function overload resolution~(\ref{over.match.best}) selects the best
+Function \link{overload resolution}{\ref{over.match.best}} selects the best
 conversion function to perform the conversion.
 \begin{example}
 \begin{codeblock}
@@ -756,12 +760,12 @@ void f(X arg) {
 \pnum
 \begin{note}
 An explicit constructor constructs objects just like non-explicit
-constructors, but does so only where the direct-initialization syntax~(\ref{dcl.init})
+constructors, but does so only where the \deflink{direct-initialization}{\ref{dcl.init}} syntax
 or where casts~(\ref{expr.static.cast}, \ref{expr.cast}) are explicitly
 used; see also~\ref{over.match.copy}.
 A default constructor may be an explicit constructor; such a constructor
 will be used to perform default-initialization
-or value-initialization~(\ref{dcl.init}).
+or \deflinkx{value-initialization}{value-initialize}{\ref{dcl.init}}.
 \begin{example}
 \begin{codeblock}
 struct Z {
@@ -832,7 +836,7 @@ A conversion function is never used to convert a (possibly cv-qualified) object
 to the (possibly cv-qualified) same object type (or a reference to it),
 to a (possibly cv-qualified) base class of that type (or a reference to it),
 or to (possibly cv-qualified) void.\footnote{These conversions are considered
-as standard conversions for the purposes of overload resolution~(\ref{over.best.ics}, \ref{over.ics.ref}) and therefore initialization~(\ref{dcl.init}) and explicit casts~(\ref{expr.static.cast}). A conversion to \tcode{void} does not invoke any conversion function~(\ref{expr.static.cast}).
+as standard conversions for the purposes of overload resolution~(\ref{over.best.ics}, \ref{over.ics.ref}) and therefore initialization~(\ref{dcl.init}) and \link{explicit casts}{\ref{expr.static.cast}}. A conversion to \tcode{void} does not invoke any conversion function~(\ref{expr.static.cast}).
 Even though never directly called to perform a conversion,
 such conversion functions can be declared and can potentially
 be reached through a call to a virtual conversion function in a base class.}
@@ -854,7 +858,7 @@ In all three cases the value assigned will be converted by
 \end{example}
 
 \pnum
-A conversion function may be explicit~(\ref{dcl.fct.spec}), in which case it is only considered as a user-defined conversion for direct-initialization~(\ref{dcl.init}). Otherwise, user-defined conversions are not restricted to use in assignments and initializations.
+A conversion function may be \linkx{explicit}{specifier!explicit}{\ref{dcl.fct.spec}}, in which case it is only considered as a user-defined conversion for \deflink{direct-initialization}{\ref{dcl.init}}. Otherwise, user-defined conversions are not restricted to use in assignments and initializations.
 \begin{example}
 \begin{codeblock}
 class Y { };
@@ -917,7 +921,7 @@ Conversion functions can be virtual.
 \pnum
 \indextext{conversion!deduced return type of user-defined}%
 A conversion function template shall not have a
-deduced return type~(\ref{dcl.spec.auto}).
+\link{deduced return type}{\ref{dcl.spec.auto}}.
 \begin{example}
 \begin{codeblock}
 struct S {
@@ -934,7 +938,7 @@ struct S {
 
 \pnum
 In a declaration of a destructor, the \grammarterm{declarator} is a
-function declarator~(\ref{dcl.fct}) of the form
+\link{function declarator}{\ref{dcl.fct}} of the form
 
 \begin{ncbnf}
 ptr-declarator \terminal{(} parameter-declaration-clause \terminal{)} \opt{noexcept-specifier} \opt{attribute-specifier-seq}
@@ -948,17 +952,17 @@ one of the following forms:
 \begin{itemize}
 \item
 in a \grammarterm{member-declaration} that belongs to the
-\grammarterm{member-specification} of a class but is not a friend
-declaration~(\ref{class.friend}), the \grammarterm{id-expression} is
+\grammarterm{member-specification} of a class but is not a \link{friend
+declaration}{\ref{class.friend}}, the \grammarterm{id-expression} is
 \tcode{\~}\grammarterm{class-name} and the \grammarterm{class-name} is the
-injected-class-name (Clause~\ref{class}) of the immediately-enclosing class;
+\deflink{injected-class-name}{Clause~\ref{class}} of the immediately-enclosing class;
 
 \item
 in a \grammarterm{member-declaration} that belongs to the
 \grammarterm{member-specification} of a class template but is not a friend
 declaration, the \grammarterm{id-expression} is
 \tcode{\~}\grammarterm{class-name} and the \grammarterm{class-name} names the
-current instantiation~(\ref{temp.dep.type}) of the immediately-enclosing class template; or
+\deflink{current instantiation}{\ref{temp.dep.type}} of the immediately-enclosing class template; or
 
 \item
 in a declaration at namespace scope or in a friend declaration, the
@@ -991,7 +995,7 @@ and
 \tcode{volatile}
 semantics~(\ref{dcl.type.cv}) are not applied on an object under destruction.
 They stop being in effect when the destructor for the
-most derived object~(\ref{intro.object}) starts.
+\deflink{most derived object}{\ref{intro.object}} starts.
 
 \pnum
 \begin{note}
@@ -1004,7 +1008,7 @@ has the same exception specification as if had been implicitly declared~(\ref{ex
 \indextext{destructor!default}%
 If a class has no user-declared
 destructor, a destructor is implicitly
-declared as defaulted~(\ref{dcl.fct.def}).
+declared as \link{defaulted}{\ref{dcl.fct.def}}.
 An implicitly-declared destructor is an
 \tcode{inline}
 \tcode{public}
@@ -1047,7 +1051,7 @@ A destructor
 that is defaulted and not defined as deleted
 is
 \defnx{implicitly defined}{destructor!implicitly defined}
-when it is odr-used~(\ref{basic.def.odr})
+when it is \link{odr-used}{\ref{basic.def.odr}}
 or when it is explicitly defaulted after its first declaration.
 
 \pnum
@@ -1080,8 +1084,8 @@ derived classes.
 Bases and members are destroyed in the reverse order of the completion of
 their constructor (see~\ref{class.base.init}).
 A
-\tcode{return}
-statement~(\ref{stmt.return}) in a destructor might not directly return to the
+\link{\tcode{return}
+statement}{\ref{stmt.return}} in a destructor might not directly return to the
 caller; before transferring control to the caller, the destructors for the
 members and bases are called.
 \indextext{order of execution!destructor and array}%
@@ -1092,9 +1096,8 @@ construction (see~\ref{class.init}).
 \indextext{destructor!virtual}%
 \indextext{destructor!pure virtual}%
 A destructor can be declared
-\tcode{virtual}~(\ref{class.virtual})
-or pure
-\tcode{virtual}~(\ref{class.abstract});
+\link{\tcode{virtual}}{\ref{class.virtual}}
+or \link{pure \tcode{virtual}}{\ref{class.abstract}};
 if any objects of that class or any derived class are created in the program,
 the destructor shall be defined.
 If a class has a base class with a virtual destructor, its  destructor
@@ -1114,11 +1117,11 @@ A destructor is invoked implicitly
 
 \begin{itemize}
 
-\item for a constructed object with static storage duration~(\ref{basic.stc.static}) at program termination~(\ref{basic.start.term}),
+\item for a constructed object with \link{static storage duration}{\ref{basic.stc.static}} at program \link{termination}{\ref{basic.start.term}},
 
-\item for a constructed object with thread storage duration~(\ref{basic.stc.thread}) at thread exit,
+\item for a constructed object with \link{thread storage duration}{\ref{basic.stc.thread}} at thread exit,
 
-\item for a constructed object with automatic storage duration~(\ref{basic.stc.auto}) when the block in which an object is created exits~(\ref{stmt.dcl}),
+\item for a constructed object with \link{automatic storage duration}{\ref{basic.stc.auto}} when the block in which an object is created exits~(\ref{stmt.dcl}),
 
 \item for a constructed temporary object when its lifetime ends~(\ref{conv.rval}, \ref{class.temporary}).
 \end{itemize}
@@ -1139,12 +1142,13 @@ A program is ill-formed if a destructor that is potentially invoked is deleted
 or not accessible from the context of the invocation.
 
 \pnum
-At the point of definition of a virtual destructor (including an implicit
-definition~(\ref{class.copy})), the non-array deallocation function is
+At the point of definition of a virtual destructor (including an
+\deflinkx{implicit definition}{destructor!implicitly defined}{\ref{class.dtor}}),
+the non-array deallocation function is
 determined as if for the expression \tcode{delete this} appearing in a
 non-virtual destructor of the destructor's class (see~\ref{expr.delete}).
 If the lookup fails or if the deallocation function has
-a deleted definition~(\ref{dcl.fct.def}), the program is ill-formed.
+a \deflink{deleted definition}{\ref{dcl.fct.def}}, the program is ill-formed.
 \begin{note}
 This assures that a deallocation function corresponding to the dynamic type of an
 object is available for the
@@ -1158,8 +1162,8 @@ In an explicit destructor call, the destructor is specified by a
 followed by a
 \grammarterm{type-name} or \grammarterm{decltype-specifier}
 that denotes the destructor's class type.
-The invocation of a destructor is subject to the usual rules for member
-functions~(\ref{class.mfct});
+The invocation of a destructor is subject to the usual rules for \link{member
+functions}{\ref{class.mfct}};
 that is, if the object is not of the destructor's class type and
 not of a class derived from the destructor's class type (including when
 the destructor is invoked via a null pointer value), the program has
@@ -1191,7 +1195,7 @@ void f() {
 \end{example}
 \begin{note}
 An explicit destructor call must always be written using
-a member access operator~(\ref{expr.ref}) or a \grammarterm{qualified-id}~(\ref{expr.prim});
+a \link{member access}{\ref{expr.ref}} operator or a \grammarterm{qualified-id}~(\ref{expr.prim});
 in particular, the
 \grammarterm{unary-expression}
 \tcode{\~{}X()}
@@ -1230,7 +1234,7 @@ void g() {                      // rare, specialized use:
 \pnum
 Once a destructor is invoked for an object, the object no longer exists;
 the behavior is undefined if the destructor is invoked
-for an object whose lifetime has ended~(\ref{basic.life}).
+for an object whose \deflink{lifetime}{\ref{basic.life}} has ended.
 \begin{example}
 If the destructor for an automatic object is explicitly invoked,
 and the block is subsequently left in a manner that would ordinarily
@@ -1421,7 +1425,7 @@ the delete expression would have been ill-formed.
 \pnum
 \begin{note}
 If a deallocation function has no explicit \grammarterm{noexcept-specifier}, it
-has a non-throwing exception specification~(\ref{except.spec}).
+has a non-throwing \link{exception specification}{\ref{except.spec}}.
 \end{note}
 
 \rSec1[class.init]{Initialization}%
@@ -1494,7 +1498,7 @@ complex g = { 1, 2 };           // initialize by a call of \tcode{complex(double
 \end{example}
 \begin{note}
 \indextext{initialization!overloaded assignment and}%
-Overloading of the assignment operator~(\ref{over.ass})
+\link{Overloading of the assignment operator}{\ref{over.ass}}
 has no effect on initialization.
 \end{note}
 
@@ -1724,7 +1728,7 @@ D d(10);
 \begin{note}
 The initialization
 performed by each \grammarterm{mem-initializer}
-constitutes a full-expression~(\ref{intro.execution}).
+constitutes a \deflink{full-expression}{\ref{intro.execution}}.
 Any expression in
 a
 \grammarterm{mem-initializer}
@@ -1758,10 +1762,10 @@ then
 
 \begin{itemize}
 \item if the entity is a non-static data member that has
-a default member initializer~(\ref{class.mem}) and either
+a \deflink{default member initializer}{\ref{class.mem}} and either
 
 \begin{itemize}
-\item the constructor's class is a union~(\ref{class.union}), and no other variant
+\item the constructor's class is a \link{union}{\ref{class.union}}, and no other variant
 member of that union is designated by a \grammarterm{mem-initializer-id} or
 
 \item the constructor's class is not a union, and, if the entity is a member of an
@@ -1774,10 +1778,10 @@ as specified in~\ref{dcl.init};
 
 \item otherwise, if the entity is an anonymous union or a variant member~(\ref{class.union.anon}), no initialization is performed;
 
-\item otherwise, the entity is default-initialized~(\ref{dcl.init}).
+\item otherwise, the entity is \deflinkx{default-initialized}{default-initialization}{\ref{dcl.init}}.
 \end{itemize}
 
-\begin{note} An abstract class~(\ref{class.abstract}) is never a most derived
+\begin{note} An \link{abstract class}{\ref{class.abstract}} is never a most derived % todo: deflink
 class, thus its constructors never initialize virtual base classes, therefore the
 corresponding \grammarterm{mem-initializer}{s} may be omitted. \end{note}
 An attempt to initialize more than one non-static data member of a union renders the
@@ -1858,7 +1862,7 @@ A a2(1);                // OK, unfortunately
 
 \pnum
 In a non-delegating constructor, the destructor for each potentially constructed
-subobject of class type is potentially invoked~(\ref{class.dtor}).
+subobject of class type is \deflink{potentially invoked}{\ref{class.dtor}}.
 \begin{note} This provision ensures that destructors can be called for fully-constructed
 subobjects in case an exception is thrown~(\ref{except.ctor}). \end{note}
 
@@ -1868,7 +1872,7 @@ proceeds in the following order:
 \begin{itemize}
 \item
 \indextext{initialization!order of virtual base class}%
-First, and only for the constructor of the most derived class~(\ref{intro.object}),
+First, and only for the constructor of the \deflink{most derived class}{\ref{intro.object}},
 virtual base classes are initialized in the order they appear on a
 depth-first left-to-right traversal of the directed acyclic graph of
 base classes,
@@ -1990,12 +1994,11 @@ to refer to the object being initialized.
 
 \pnum
 \indextext{initialization!member function call during}%
-Member functions (including virtual member functions, \ref{class.virtual}) can be
+Member functions (including \link{virtual member functions}{\ref{class.virtual}}) can be
 called for an object under construction.
 Similarly, an object under construction can be the operand of the
-\tcode{typeid}
-operator~(\ref{expr.typeid}) or of a
-\tcode{dynamic_cast}~(\ref{expr.dynamic.cast}).
+\link{\tcode{typeid} operator}{\ref{expr.typeid}} or of a
+\link{\tcode{dynamic_cast}}{\ref{expr.dynamic.cast}}.
 However, if these operations are performed in a
 \grammarterm{ctor-initializer}
 (or in a function called directly or indirectly from a
@@ -2047,7 +2050,7 @@ of an object under construction.
 \pnum
 \indextext{initializer!pack expansion}%
 A \grammarterm{mem-initializer} followed by an ellipsis is
-a pack expansion~(\ref{temp.variadic}) that initializes the base
+a \deflink{pack expansion}{\ref{temp.variadic}} that initializes the base
 classes specified by a pack expansion in the \grammarterm{base-specifier-list}
 for the class. \begin{example}
 
@@ -2067,7 +2070,7 @@ public:
 \pnum
 When a constructor for type \tcode{B} is invoked
 to initialize an object of a different type \tcode{D}
-(that is, when the constructor was inherited~(\ref{namespace.udecl})),
+(that is, when the constructor was \deflinkx{inherited}{inherits}{\ref{namespace.udecl}}),
 initialization proceeds as if a defaulted default constructor
 were used to initialize the \tcode{D} object and
 each base class subobject from which the constructor was inherited,
@@ -2261,7 +2264,7 @@ struct E : C, D, X {
 \indextext{virtual function call!destructor and}%
 \indextext{construction!virtual function call}%
 \indextext{destruction!virtual function call}%
-Member functions, including virtual functions~(\ref{class.virtual}), can be called
+Member functions, including \link{virtual functions}{\ref{class.virtual}}, can be called
 during construction or destruction~(\ref{class.base.init}).
 When a virtual function is called directly or indirectly from a constructor
 or from a destructor,
@@ -2272,7 +2275,7 @@ destruction,
 the function called is the
 final overrider in the constructor's or destructor's class and not one
 overriding it in a more-derived class.
-If the virtual function call uses an explicit class member access~(\ref{expr.ref})
+If the virtual function call uses an explicit \link{class member access}{\ref{expr.ref}}
 and the object expression refers to
 the complete object of \tcode{x} or one of that object's base class subobjects
 but not \tcode{x} or one of its base class subobjects, the behavior
@@ -2315,12 +2318,12 @@ B::B(V* v, A* a) {
 \indextext{\idxcode{typeid}!construction and}%
 \indextext{\idxcode{typeid}!destruction and}%
 The
-\tcode{typeid}
-operator~(\ref{expr.typeid}) can be used during construction or destruction~(\ref{class.base.init}).
+\link{\tcode{typeid}
+operator}{\ref{expr.typeid}} can be used during construction or destruction~(\ref{class.base.init}).
 When
 \tcode{typeid}
 is used in a constructor (including the
-\grammarterm{mem-initializer} or default member initializer~(\ref{class.mem})
+\grammarterm{mem-initializer} or \deflink{default member initializer}{\ref{class.mem}}
 for a non-static data member)
 or in a destructor, or used in a function called (directly or indirectly) from
 a constructor or destructor, if the operand of
@@ -2341,7 +2344,7 @@ bases, the behavior is undefined.
 \indextext{destruction!dynamic cast and}%
 \indextext{cast!dynamic!construction and}%
 \indextext{cast!dynamic!destruction and}%
-\tcode{dynamic_cast}s~(\ref{expr.dynamic.cast}) can be used during construction
+\link{\tcode{dynamic_cast}s}{\ref{expr.dynamic.cast}} can be used during construction
 or destruction~(\ref{class.base.init}). When a
 \tcode{dynamic_cast}
 is used in a constructor (including the
@@ -2392,8 +2395,8 @@ B::B(V* v, A* a) {
 
 \pnum
 A class object can be copied or moved in two ways:
-by initialization~(\ref{class.ctor}, \ref{dcl.init}), including for function argument passing~(\ref{expr.call}) and for function value return~(\ref{stmt.return});
-and by assignment~(\ref{expr.ass}).
+by initialization~(\ref{class.ctor}, \ref{dcl.init}), including for function argument passing~(\ref{expr.call}) and for \link{function value return}{\ref{stmt.return}};
+and by \link{assignment}{\ref{expr.ass}}.
 Conceptually, these two operations are implemented by a
 copy/move constructor~(\ref{class.ctor})
 and copy/move assignment operator~(\ref{over.ass}).
@@ -2405,7 +2408,7 @@ and copy/move assignment operator~(\ref{over.ass}).
 \indextext{assignment operator!move!inaccessible}%
 A program is ill-formed if the copy/move constructor or the copy/move assignment
 operator for an object is implicitly odr-used and the special member function
-is not accessible (Clause~\ref{class.access}).
+is not \link{accessible}{Clause~\ref{class.access}}.
 \begin{note}
 Copying/moving one object into another using the copy/move constructor or
 the copy/move assignment operator does not change the layout or size of either
@@ -2430,7 +2433,7 @@ a
 or
 \tcode{const volatile X\&},
 and either there are no other parameters
-or else all other parameters have default arguments~(\ref{dcl.fct.default}).
+or else all other parameters have \link{default arguments}{\ref{dcl.fct.default}}.
 \begin{example}
 \tcode{X::X(const X\&)}
 and
@@ -2452,8 +2455,8 @@ X c = b;            // calls \tcode{X(const X\&, int);}
 A non-template constructor for class \tcode{X} is a \defnx{move constructor}{constructor!move} if its
 first parameter is of type \tcode{X\&\&}, \tcode{const X\&\&},
 \tcode{volatile X\&\&}, or \tcode{const volatile X\&\&}, and either there are
-no other parameters or else all other parameters have default
-arguments~(\ref{dcl.fct.default}).
+no other parameters or else all other parameters have \link{default
+arguments}{\ref{dcl.fct.default}}.
 \begin{example} \tcode{Y::Y(Y\&\&)} is a move constructor.
 \begin{codeblock}
 struct Y {
@@ -2542,7 +2545,7 @@ a non-explicit one is declared \defnx{implicitly}{constructor!copy!implicitly de
 If the class definition declares a move
 constructor or move assignment operator, the implicitly declared copy
 constructor is defined as deleted; otherwise, it is defined as
-defaulted~(\ref{dcl.fct.def}).
+\link{defaulted}{\ref{dcl.fct.def}}.
 The latter case is deprecated if the class has a user-declared copy assignment
 operator or a user-declared destructor.
 
@@ -2611,14 +2614,14 @@ An implicitly-declared copy/move constructor is an
 \tcode{public}
 member of its class.
 A defaulted copy/\brk{}move constructor for a class
-  \tcode{X} is defined as deleted~(\ref{dcl.fct.def.delete}) if \tcode{X} has:
+  \tcode{X} is defined as \link{deleted}{\ref{dcl.fct.def.delete}} if \tcode{X} has:
 \begin{itemize}
 \item a variant member with a non-trivial corresponding constructor and
   \tcode{X} is a union-like class,
 
 \item a potentially constructed subobject type
   \tcode{M} (or array thereof) that cannot be copied/moved because
-  overload resolution (\ref{over.match}), as applied to find
+  \link{overload resolution}{\ref{over.match}}, as applied to find
   \tcode{M}'s
   corresponding constructor, results in an ambiguity or
   a function that is deleted or inaccessible from the
@@ -2651,8 +2654,8 @@ if it is not user-provided and if:
 \item
 class
 \tcode{X}
-has no virtual functions~(\ref{class.virtual})
-and no virtual base classes~(\ref{class.mi}), and
+has no \link{virtual functions}{\ref{class.virtual}}
+and no \deflinkx{virtual base classes}{base class!virtual}{\ref{class.mi}}, and
 
 \item
 the constructor selected to copy/move each direct base class subobject is trivial, and
@@ -2675,14 +2678,14 @@ A copy/move constructor
 that is defaulted and not defined as deleted
 is
 \term{implicitly defined}
-if it is odr-used~(\ref{basic.def.odr})
+if it is \link{odr-used}{\ref{basic.def.odr}}
 or when it is explicitly defaulted after its first declaration.
 \begin{note}
 The copy/move constructor is implicitly defined even if the implementation elided
-its odr-use (\ref{basic.def.odr}, \ref{class.temporary}).
+its \link{odr-use}{\ref{basic.def.odr}} (\ref{class.temporary}).
 \end{note}
 If the implicitly-defined constructor would satisfy the requirements of a
-constexpr constructor~(\ref{dcl.constexpr}), the implicitly-defined
+\deflinkx{constexpr constructor}{specifier!constexpr!constructor}{\ref{dcl.constexpr}}, the implicitly-defined
 constructor is \tcode{constexpr}.
 
 \pnum
@@ -2693,7 +2696,7 @@ potentially constructed subobjects
 shall have been implicitly defined.
 \begin{note}
 An implicitly-declared copy/move constructor has an
-implied exception specification~(\ref{except.spec}).
+implied \link{exception specification}{\ref{except.spec}}.
 \end{note}
 
 \pnum
@@ -2727,7 +2730,7 @@ the implicitly-defined copy/move constructor (see~\ref{class.base.init}).
 
 \pnum
 The implicitly-defined copy/move constructor for a union
-\tcode{X} copies the object representation~(\ref{basic.types}) of \tcode{X}.%
+\tcode{X} copies the \deflink{object representation}{\ref{basic.types}} of \tcode{X}.%
 \indextext{constructor!move|)}%
 \indextext{constructor!copy|)}
 
@@ -2742,7 +2745,7 @@ The implicitly-defined copy/move constructor for a union
 \indextext{move!class object|see{assignment operator, move}}%
 \indextext{operator!copy assignment|see{assignment operator, copy}}%
 \indextext{operator!move assignment|see{assignment operator, move}}
-A user-declared \term{copy} assignment operator \tcode{X::operator=} is a
+A user-declared \defnx{copy}{assignment operator!copy} assignment operator \tcode{X::operator=} is a
 non-static non-template member function of class \tcode{X} with exactly one
 parameter of type \tcode{X}, \tcode{X\&}, \tcode{const} \tcode{X\&},
 \tcode{volatile} \tcode{X\&} or \tcode{const} \tcode{volatile}
@@ -2790,7 +2793,7 @@ one is declared \defnx{implicitly}{assignment operator!copy!implicitly declared}
 If the class definition declares a move
 constructor or move assignment operator, the implicitly declared copy
 assignment operator is defined as deleted; otherwise, it is defined as
-defaulted~(\ref{dcl.fct.def}).
+\link{defaulted}{\ref{dcl.fct.def}}.
 The latter case is deprecated if the class has a user-declared copy constructor
 or a user-declared destructor.
 The implicitly-declared copy assignment operator for a class
@@ -2846,7 +2849,7 @@ X& X::operator=(X&)
 \end{codeblock}
 
 \pnum
-A user-declared move assignment operator \tcode{X::operator=} is
+A user-declared \defnx{move}{assignment operator!move} assignment operator \tcode{X::operator=} is
 a non-static non-template member function of class \tcode{X} with exactly
 one parameter of type \tcode{X\&\&}, \tcode{const X\&\&}, \tcode{volatile X\&\&}, or
 \tcode{const volatile X\&\&}. \begin{note} An overloaded assignment operator must be
@@ -2927,8 +2930,8 @@ class \tcode{X} is defined as deleted if \tcode{X} has:
 
 \item a direct non-static data member of class type \tcode{M}
   (or array thereof) or a direct base class \tcode{M}
-  that cannot be copied/moved because overload resolution
-  (\ref{over.match}), as applied to find \tcode{M}'s corresponding
+  that cannot be copied/moved because \link{overload resolution}{\ref{over.match}},
+  as applied to find \tcode{M}'s corresponding
   assignment operator, results in an ambiguity or
   a function that is deleted or inaccessible from the
   defaulted assignment operator.
@@ -2969,8 +2972,8 @@ if it is not user-provided and if:
 \item
 class
 \tcode{X}
-has no virtual functions~(\ref{class.virtual})
-and no virtual base classes~(\ref{class.mi}), and
+has no \link{virtual functions}{\ref{class.virtual}}
+and no \link{virtual base classes}{\ref{class.mi}}, and
 
 \item the assignment operator selected to copy/move each direct
 base class subobject is trivial, and
@@ -2994,7 +2997,7 @@ that is defaulted and not defined as deleted
 is
 \term{implicitly defined}
 when
-it is odr-used~(\ref{basic.def.odr}) (e.g., when it is selected by overload resolution
+it is \link{odr-used}{\ref{basic.def.odr}} (e.g., when it is selected by overload resolution
 to assign to an object of its class type)
 or when it is explicitly defaulted after its first declaration.
 The implicitly-defined copy/move assignment operator is \tcode{constexpr} if
@@ -3020,7 +3023,7 @@ its direct base classes and
 its non-static data members shall have been implicitly defined.
 \begin{note}
 An implicitly-declared copy/move assignment operator has an
-implied exception specification~(\ref{except.spec}).
+implied \link{exception specification}{\ref{except.spec}}.
 \end{note}
 
 \pnum
@@ -3070,7 +3073,7 @@ is assigned twice by the implicitly-defined copy/move assignment operator for
 
 \pnum
 The implicitly-defined copy assignment operator for a
-union \tcode{X} copies the object representation~(\ref{basic.types}) of \tcode{X}.%
+union \tcode{X} copies the \deflink{object representation}{\ref{basic.types}} of \tcode{X}.%
 \indextext{assignment operator!move|)}%
 \indextext{assignment operator!copy|)}
 
@@ -3122,13 +3125,14 @@ is the name of a non-volatile automatic object
 (other than a function or catch-clause parameter)
 whose scope does not extend beyond the end of the innermost enclosing
 \grammarterm{try-block} (if there is one), the copy/move operation from the
-operand to the exception object~(\ref{except.throw}) can be omitted by
+operand to the \deflinkx{exception object}{exception handling!exception object}{\ref{except.throw}} can be omitted by
 constructing the automatic object directly into the exception object
 
 \item when the \grammarterm{exception-declaration} of an
 exception handler (Clause~\ref{except}) declares an object of the same
-type (except for cv-qualification) as the exception
-object~(\ref{except.throw}), the copy operation can be omitted by treating
+type (except for cv-qualification) as the
+\deflinkx{exception object}{exception handling!exception object}{\ref{except.throw}},
+the copy operation can be omitted by treating
 the \grammarterm{exception-declaration} as an alias for the exception
 object if the meaning of the program will be unchanged except for the execution
 of constructors and destructors for the object declared by the
@@ -3138,8 +3142,8 @@ always an lvalue.  \end{note}
 \end{itemize}
 Copy elision is required
 where an expression is evaluated in a context
-requiring a constant expression~(\ref{expr.const})
-and in constant initialization~(\ref{basic.start.static}).
+requiring a \link{constant expression}{\ref{expr.const}}
+and in \deflink{constant initialization}{\ref{basic.start.static}}.
 \begin{note}
 Copy elision might not be performed
 if the same expression
@@ -3202,7 +3206,7 @@ move construction from the local automatic object to \tcode{t2} that is elided.
 \pnum
 In the following copy-initialization contexts, a move operation might be used instead of a copy operation:
 \begin{itemize}
-\item If the \grammarterm{expression} in a \tcode{return} statement~(\ref{stmt.return})
+\item If the \grammarterm{expression} in a \link{\tcode{return} statement}{\ref{stmt.return}}
 is a (possibly parenthesized) \grammarterm{id-expression}
 that names an object with automatic storage duration declared in the body
 or \grammarterm{parameter-declaration-clause} of the innermost enclosing
diff --git a/source/statements.tex b/source/statements.tex
index 8bfbd2b..bca2658 100644
--- a/source/statements.tex
+++ b/source/statements.tex
@@ -67,7 +67,7 @@ else {
 The value of a \grammarterm{condition} that is an initialized declaration
 in a statement other than a \tcode{switch} statement is the value of the
 declared variable
-contextually converted to \tcode{bool} (Clause~\ref{conv}).
+\deflinkx{contextually converted to \tcode{bool}}{conversion!contextual to bool}{Clause~\ref{conv}}.
 If that
 conversion is ill-formed, the program is ill-formed. The value of a
 \grammarterm{condition} that is an initialized declaration in a
@@ -121,8 +121,8 @@ Labels have their own name space and do not interfere with other
 identifiers.
 \begin{note}
 A label may have the same name as another declaration in the same scope or a
-\grammarterm{template-parameter} from an enclosing scope. Unqualified name
-lookup~(\ref{basic.lookup.unqual}) ignores labels.
+\grammarterm{template-parameter} from an enclosing scope. \link{Unqualified name
+lookup}{\ref{basic.lookup.unqual}} ignores labels.
 \end{note}
 
 \pnum
@@ -143,7 +143,7 @@ Expression statements have the form
 \end{bnf}
 
 The expression is
-a discarded-value expression (Clause~\ref{expr}).
+a \deflink{discarded-value expression}{Clause~\ref{expr}}.
 All
 \indextext{side effects}%
 side effects from an expression statement
@@ -156,8 +156,8 @@ a \defn{null statement}.
 Most statements are expression statements --- usually assignments or
 function calls. A null statement is useful to carry a label just before
 the \tcode{\}} of a compound statement and to supply a null body to an
-iteration statement such as a \tcode{while}
-statement~(\ref{stmt.while}).
+iteration statement such as a \link{\tcode{while}
+statement}{\ref{stmt.while}}.
 \end{note}
 
 \rSec1[stmt.block]{Compound statement or block}%
@@ -180,7 +180,7 @@ provided.
     statement-seq statement
 \end{bnf}
 
-A compound statement defines a block scope~(\ref{basic.scope}).
+A compound statement defines a \deflink{block scope}{\ref{basic.scope}}.
 \begin{note}
 A declaration is a \grammarterm{statement}~(\ref{stmt.dcl}).
 \end{note}
@@ -211,7 +211,7 @@ in the syntax notation.
 \indextext{scope!\idxgram{selection-statement}}%
 The substatement in a \grammarterm{selection-statement} (each substatement,
 in the \tcode{else} form of the \tcode{if} statement) implicitly defines
-a block scope~(\ref{basic.scope}). If the substatement in a
+a \deflink{block scope}{\ref{basic.scope}}. If the substatement in a
 selection-statement is a single statement and not a
 \grammarterm{compound-statement}, it is as if it was rewritten to be a
 compound-statement containing the original substatement.
@@ -250,24 +250,24 @@ an \tcode{else} part.\footnote{In other words, the \tcode{else} is associated wi
 
 \pnum
 If the \tcode{if} statement is of the form \tcode{if constexpr}, the value
-of the condition shall be a contextually
-converted constant expression of type \tcode{bool}~(\ref{expr.const}); this
-form is called a \defn{constexpr if} statement. If the value of the
+of the condition shall be a
+\deflink{contextually converted constant expression of type \tcode{bool}}{\ref{expr.const}};
+this form is called a \defn{constexpr if} statement. If the value of the
 converted condition is \tcode{false}, the first substatement is a
 \defn{discarded statement}, otherwise the second substatement, if
 present, is a discarded statement. During the instantation of an
-enclosing templated entity (Clause~\ref{temp}), if the condition is
+enclosing \link{templated}{Clause~\ref{temp}} entity, if the condition is
 not value-dependent after its instantiation, the discarded substatement
 (if any) is not instantiated.
 \begin{note}
-Odr-uses~(\ref{basic.def.odr}) in a discarded statement do not require
+\link{Odr-uses}{\ref{basic.def.odr}} in a discarded statement do not require
 an entity to be defined.
 \end{note}
 A \tcode{case} or \tcode{default} label appearing within such an
-\tcode{if} statement shall be associated with a \tcode{switch}
-statement~(\ref{stmt.switch}) within the same \tcode{if} statement.
-A label~(\ref{stmt.label}) declared in a substatement of a constexpr if
-statement shall only be referred to by a statement~(\ref{stmt.goto}) in
+\tcode{if} statement shall be associated with a \link{\tcode{switch}
+statement}{\ref{stmt.switch}} within the same \tcode{if} statement.
+A \link{label}{\ref{stmt.label}} declared in a substatement of a constexpr if
+statement shall only be referred to by a \link{statement}{\ref{stmt.goto}} in
 the same substatement.
 \begin{example}
 \begin{codeblock}
@@ -336,10 +336,10 @@ several statements depending on the value of a condition.
 \pnum
 The condition shall be of integral type, enumeration type, or class
 type. If of class type, the
-condition is contextually implicitly converted (Clause~\ref{conv}) to
+condition is \deflink{contextually implicitly converted}{Clause~\ref{conv}} to
 an integral or enumeration type.
-If the (possibly converted) type is subject to integral
-promotions~(\ref{conv.prom}), the condition is converted
+If the (possibly converted) type is subject to \link{integral
+promotions}{\ref{conv.prom}}, the condition is converted
 to the promoted type.
 Any
 statement within the \tcode{switch} statement can be labeled with one or
@@ -351,7 +351,7 @@ more case labels as follows:
 \end{ncbnf}
 
 where the \grammarterm{constant-expression} shall be
-a converted constant expression~(\ref{expr.const}) of the
+a converted \link{constant expression}{\ref{expr.const}} of the
 adjusted type of the switch condition. No two of the case constants in
 the same switch shall have the same value after conversion.
 
@@ -384,7 +384,7 @@ then none of the statements in the switch is executed.
 \pnum
 \tcode{case} and \tcode{default} labels in themselves do not alter the
 flow of control, which continues unimpeded across such labels. To exit
-from a switch, see \tcode{break},~\ref{stmt.break}.
+from a switch, see \link{\tcode{break}}{\ref{stmt.break}}.
 \begin{note}
 Usually, the substatement that is the subject of a switch is compound
 and \tcode{case} and \tcode{default} labels appear on the top-level
@@ -453,7 +453,7 @@ An \grammarterm{init-statement} ends with a semicolon.
 
 \pnum
 The substatement in an \grammarterm{iteration-statement} implicitly defines
-a block scope~(\ref{basic.scope}) which is entered and exited each time
+a block \link{scope}{\ref{basic.scope}} which is entered and exited each time
 through the loop.
 
 \indextext{scope!\idxgram{iteration-statement}}%
@@ -505,8 +505,8 @@ substatement.
 \pnum
 \indextext{statement!declaration in \tcode{while}}%
 When the condition of a \tcode{while} statement is a declaration, the scope of
-the variable that is declared extends from its point of
-declaration~(\ref{basic.scope.pdecl}) to the end of the \tcode{while}
+the variable that is declared extends from its
+\deflink{point of declaration}{\ref{basic.scope.pdecl}} to the end of the \tcode{while}
 \grammarterm{statement}. A \tcode{while} statement of the form
 
 \begin{codeblock}
@@ -553,7 +553,7 @@ fails.
 \indextext{statement!\idxcode{do}}
 
 \pnum
-The expression is contextually converted to \tcode{bool} (Clause~\ref{conv});
+The expression is \deflinkx{contextually converted to \tcode{bool}}{conversion!contextual to bool}{Clause~\ref{conv}};
 if that conversion is ill-formed, the program is ill-formed.
 
 \pnum
@@ -671,15 +671,15 @@ incomplete type, the program is ill-formed;
 \item if the \grammarterm{for-range-initializer} is an expression of
 class type \tcode{C}, the \grammarterm{unqualified-id}{s}
 \tcode{begin} and \tcode{end} are looked up in the scope of \tcode{C}
-as if by class member access lookup~(\ref{basic.lookup.classref}), and if either
+as if by \link{class member access lookup}{\ref{basic.lookup.classref}}, and if either
 (or both) finds at least one declaration, \placeholder{begin-expr} and
 \placeholder{end-expr} are \tcode{__range.begin()} and \tcode{__range.end()},
 respectively;
 
 \item otherwise, \placeholder{begin-expr} and \placeholder{end-expr} are \tcode{begin(__range)}
 and \tcode{end(__range)}, respectively, where \tcode{begin} and \tcode{end} are looked
-up in the associated namespaces~(\ref{basic.lookup.argdep}).
-\begin{note} Ordinary unqualified lookup~(\ref{basic.lookup.unqual}) is not
+up in the \deflinkx{associated namespaces}{namespace!associated}{\ref{basic.lookup.argdep}}.
+\begin{note} Ordinary \link{unqualified lookup}{\ref{basic.lookup.unqual}} is not
 performed. \end{note}
 \end{itemize}
 \end{itemize}
@@ -723,8 +723,8 @@ Jump statements unconditionally transfer control.
 \pnum
 \indextext{local variable!destruction of}%
 \indextext{scope!destructor and exit from}%
-On exit from a scope (however accomplished), objects with automatic storage
-duration~(\ref{basic.stc.auto}) that have been constructed in that scope are destroyed
+On exit from a scope (however accomplished), objects with \link{automatic storage
+duration}{\ref{basic.stc.auto}} that have been constructed in that scope are destroyed
 in the reverse order of their construction. \begin{note} For temporaries,
 see~\ref{class.temporary}. \end{note} Transfer out of a loop, out of a block, or back
 past
@@ -813,8 +813,8 @@ A function returns to its caller by the \tcode{return} statement.
 The \grammarterm{expr-or-braced-init-list}
 of a return statement is called its operand. A return statement with
 no operand shall be used only in a function whose return type is
-\cv{}~\tcode{void}, a constructor~(\ref{class.ctor}), or a
-destructor~(\ref{class.dtor}).
+\cv{}~\tcode{void}, a \link{constructor}{\ref{class.ctor}}, or a
+\link{destructor}{\ref{class.dtor}}.
 \indextext{\idxcode{return}!constructor and}%
 \indextext{\idxcode{return}!constructor and}%
 A return statement with an operand of type \tcode{void} shall be used only
@@ -824,7 +824,7 @@ in a function whose return type is not \cv{}~\tcode{void};
 \indextext{conversion!return type}%
 the return statement initializes the
 glvalue result or prvalue result object of the (explicit or implicit) function call
-by copy-initialization~(\ref{dcl.init}) from the operand.
+by \deflink{copy-initialization}{\ref{dcl.init}} from the operand.
 \begin{note}
 A return statement can involve
 an invocation of a constructor to perform a copy or move of the operand
@@ -845,7 +845,7 @@ a destructor, or
 a function with a \cv{}~\tcode{void} return type is
 equivalent to a \tcode{return} with no operand.
 Otherwise, flowing off the end of a function
-other than \tcode{main}~(\ref{basic.start.main})
+other than \link{\tcode{main}}{\ref{basic.start.main}}
 results in undefined behavior.
 
 \pnum
@@ -862,7 +862,7 @@ enclosing the return statement.
 The \tcode{goto} statement unconditionally transfers control to the
 statement labeled by the identifier. The identifier shall be a
 \indextext{label}%
-label~(\ref{stmt.label}) located in the current function.
+\link{label}{\ref{stmt.label}} located in the current function.
 
 \rSec1[stmt.dcl]{Declaration statement}%
 \indextext{statement!declaration}
@@ -887,7 +887,7 @@ which it resumes its force.
 \pnum
 \indextext{block!initialization in}%
 \indextext{initialization!automatic}%
-Variables with automatic storage duration~(\ref{basic.stc.auto}) are
+Variables with \link{automatic storage duration}{\ref{basic.stc.auto}} are
 initialized each time their \grammarterm{declaration-statement} is executed.
 \indextext{local variable!destruction of}%
 Variables with automatic storage duration declared in the block are
@@ -926,8 +926,8 @@ lx:
 \indextext{initialization!local \tcode{static}}%
 \indextext{initialization!local \tcode{thread_local}}%
 Dynamic initialization of a block-scope variable with
-static storage duration~(\ref{basic.stc.static}) or
-thread storage duration~(\ref{basic.stc.thread}) is performed
+\link{static storage duration}{\ref{basic.stc.static}} or
+\link{thread storage duration}{\ref{basic.stc.thread}} is performed
 the first time control passes through its declaration; such a variable is
 considered initialized upon the completion of its initialization. If the
 initialization exits by throwing an exception, the initialization is not
@@ -966,8 +966,8 @@ static and thread storage duration are destroyed.
 \pnum
 There is an ambiguity in the grammar involving
 \grammarterm{expression-statement}{s} and \grammarterm{declaration}{s}: An
-\grammarterm{expression-statement} with a function-style explicit type
-conversion~(\ref{expr.type.conv}) as its leftmost subexpression can be
+\grammarterm{expression-statement} with a \link{function-style explicit type
+conversion}{\ref{expr.type.conv}} as its leftmost subexpression can be
 indistinguishable from a \grammarterm{declaration} where the first
 \grammarterm{declarator} starts with a \tcode{(}. In those cases the
 \grammarterm{statement} is a \grammarterm{declaration}.
diff --git a/source/strings.tex b/source/strings.tex
index e7fd4e2..576b520 100644
--- a/source/strings.tex
+++ b/source/strings.tex
@@ -5,7 +5,7 @@
 
 \pnum
 This Clause describes components for manipulating sequences of
-any non-array POD~(\ref{basic.types}) type.
+any non-array \deflinkx{POD type}{type!POD}{\ref{basic.types}}.
 Such types are called \defnx{char-like types}{char-like type},
 and objects of
 char-like types are called \defnx{char-like objects}{char-like object} or
@@ -276,9 +276,9 @@ using state_type = STATE_T;
 \requires
 \tcode{state_type}
 shall meet the requirements of
-\tcode{CopyAssignable} (Table~\ref{tab:copyassignable}),
-\tcode{CopyConstructible} (Table~\ref{tab:copyconstructible}), and
-\tcode{DefaultConstructible} (Table~\ref{tab:defaultconstructible}) types.
+\link{\tcode{CopyAssignable}}{Table~\ref{tab:copyassignable}},
+\link{\tcode{CopyConstructible}}{Table~\ref{tab:copyconstructible}}, and
+\link{\tcode{DefaultConstructible}}{Table~\ref{tab:defaultconstructible}} types.
 \end{itemdescr}
 
 \rSec2[char.traits.specializations]{\tcode{char_traits} specializations}
@@ -844,7 +844,7 @@ contained char-like objects.\footnote{\tcode{Allocator::value_type} must name th
 as \tcode{charT}~(\ref{string.require}).}
 
 \pnum
-A \tcode{basic_string} is a contiguous container~(\ref{container.requirements.general}).
+A \tcode{basic_string} is a \deflink{contiguous container}{\ref{container.requirements.general}}.
 
 \pnum
 In all cases,
@@ -859,13 +859,13 @@ kinds of errors, each associated with an exception type:
 a
 \term{length}
 error is associated with exceptions of type
-\tcode{length_error}~(\ref{length.error});
+\link{\tcode{length_error}}{\ref{length.error}};
 \indexlibrary{\idxcode{length_error}}%
 \item
 an
 \term{out-of-range}
 error is associated with exceptions of type
-\tcode{out_of_range}~(\ref{out.of.range}).
+\link{\tcode{out_of_range}}{\ref{out.of.range}}.
 \indexlibrary{\idxcode{out_of_range}}%
 \end{itemize}
 
@@ -1176,8 +1176,9 @@ invalidated by the following uses of that \tcode{basic_string} object:
 \begin{itemize}
 \item as an argument to any standard library function taking a reference to non-const
 \tcode{basic_string} as an argument.\footnote{For example, as an argument to non-member
-functions \tcode{swap()}~(\ref{string.special}),
-\tcode{operator>{}>()}~(\ref{string.io}), and \tcode{getline()}~(\ref{string.io}), or as
+functions \liblinkx{\tcode{swap()}}{basic_string!swap}{\ref{string.special}},
+\liblinkx{\tcode{operator>{}>()}}{basic_string!operator>>}{\ref{string.io}},
+and \link{\tcode{getline()}}{\ref{string.io}}, or as
 an argument to \tcode{basic_string::swap()}.}
 
 \item Calling non-const member functions, except
@@ -1541,7 +1542,7 @@ basic_string& operator=(basic_string&& str)
 \begin{itemdescr}
 \pnum
 \effects
-Move assigns as a sequence container~(\ref{sequence.reqmts}),
+Move assigns as a \link{sequence container}{\ref{sequence.reqmts}},
 except that iterators, pointers and references may be invalidated.
 
 \pnum
@@ -1856,11 +1857,12 @@ bool empty() const noexcept;
 
 \rSec3[string.access]{\tcode{basic_string} element access}
 
-\indexlibrarymember{operator[]}{basic_string}%
+\begin{indexed}{\indexlibrarymember{operator[]}{basic_string}}
 \begin{itemdecl}
 const_reference operator[](size_type pos) const;
 reference       operator[](size_type pos);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1879,11 +1881,12 @@ returns a reference to an object of type \tcode{charT} with value
 \complexity Constant time.
 \end{itemdescr}
 
-\indexlibrarymember{at}{basic_string}%
+\begin{indexed}{\indexlibrarymember{at}{basic_string}}
 \begin{itemdecl}
 const_reference at(size_type pos) const;
 reference       at(size_type pos);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1897,11 +1900,12 @@ if
 \tcode{operator[](pos)}.
 \end{itemdescr}
 
-\indexlibrarymember{front}{basic_string}%
+\begin{indexed}{\indexlibrarymember{front}{basic_string}}
 \begin{itemdecl}
 const charT& front() const;
 charT& front();
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1913,11 +1917,12 @@ charT& front();
 Equivalent to: \tcode{return operator[](0);}
 \end{itemdescr}
 
-\indexlibrarymember{back}{basic_string}%
+\begin{indexed}{\indexlibrarymember{back}{basic_string}}
 \begin{itemdecl}
 const charT& back() const;
 charT& back();
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -4204,10 +4209,9 @@ template<class charT, class traits, class Allocator>
 
 \rSec3[string.special]{\tcode{swap}}
 
-\indexlibrarymember{swap}{basic_string}%
 \begin{itemdecl}
 template<class charT, class traits, class Allocator>
-  void swap(basic_string<charT, traits, Allocator>& lhs,
+  void @\libmember{swap}{basic_string}@(basic_string<charT, traits, Allocator>& lhs,
             basic_string<charT, traits, Allocator>& rhs)
     noexcept(noexcept(lhs.swap(rhs)));
 \end{itemdecl}
@@ -4220,18 +4224,17 @@ Equivalent to: \tcode{lhs.swap(rhs);}
 
 \rSec3[string.io]{Inserters and extractors}
 
-\indexlibrarymember{operator>>}{basic_string}%
 \begin{itemdecl}
 template<class charT, class traits, class Allocator>
   basic_istream<charT, traits>&
-    operator>>(basic_istream<charT, traits>& is,
+    @\libmember{operator>>}{basic_string}@(basic_istream<charT, traits>& is,
                basic_string<charT, traits, Allocator>& str);
 \end{itemdecl}
 
 \begin{itemdescr}
 \pnum
 \effects
-Behaves as a formatted input function~(\ref{istream.formatted.reqmts}).
+Behaves as a \link{formatted input function}{\ref{istream.formatted}}.
 After constructing a
 \tcode{sentry}
 object, if the sentry converts to \tcode{true}, calls
@@ -4310,7 +4313,7 @@ template<class charT, class traits, class Allocator>
 \begin{itemdescr}
 \pnum
 \effects
-Behaves as an unformatted input function~(\ref{istream.unformatted}),
+Behaves as an \link{unformatted input function}{\ref{istream.unformatted}},
 except that it does not affect the value returned by subsequent calls to
 \tcode{basic_istream<>::gcount()}.
 After constructing a
@@ -4642,7 +4645,7 @@ The same suffix \tcode{s} is used for \tcode{chrono::duration} literals denoting
 \rSec1[string.view]{String view classes}
 
 \pnum
-The class template \tcode{basic_string_view} describes an object that can refer to a constant contiguous sequence of char-like (\ref{strings.general}) objects with the first element of the sequence at position zero.
+The class template \tcode{basic_string_view} describes an object that can refer to a constant contiguous sequence of \deflinkx{char-like objects}{char-like object}{\ref{strings.general}} with the first element of the sequence at position zero.
 In the rest of this section, the type of the char-like objects held in a \tcode{basic_string_view} object is designated by \tcode{charT}.
 
 \pnum
@@ -5616,8 +5619,8 @@ template<class charT, class traits>
 \begin{itemdescr}
 \pnum
 \effects
-Behaves as a formatted output
-function~(\ref{ostream.formatted.reqmts}) of \tcode{os}. Forms a character sequence
+Behaves as a \link{formatted output
+function}{\ref{ostream.formatted.reqmts}} of \tcode{os}. Forms a character sequence
 \tcode{seq}, initially consisting of the elements defined by the range
 \range{str.begin()}{str.end()}. Determines padding for \tcode{seq}
 as described in~\ref{ostream.formatted.reqmts}.
@@ -5877,8 +5880,8 @@ The contents and meaning of the header \tcode{<cstring>}
 are the same as the C standard library header \tcode{<string.h>}.
 
 \pnum
-The functions \tcode{strerror} and \tcode{strtok} are not required to avoid data
-races~(\ref{res.on.data.races}).
+The functions \tcode{strerror} and \tcode{strtok} are not required to
+\link{avoid data races}{\ref{res.on.data.races}}.
 
 \pnum
 \indextext{signal-safe!\idxcode{memcpy}}%
@@ -5890,7 +5893,7 @@ The functions \tcode{memcpy} and \tcode{memmove} are signal-safe~(\ref{csignal.s
 The functions
 \tcode{strchr}, \tcode{strpbrk}, \tcode{strrchr}, \tcode{strstr}, and \tcode{memchr},
 have different signatures in this International Standard,
-but they have the same behavior as in the C standard library~(\ref{library.c}).
+but they have the same behavior as in the \link{C standard library}{\ref{library.c}}.
 \end{note}
 
 \xref ISO C~7.24.
@@ -6060,7 +6063,7 @@ are the same as the C standard library header
 The functions
 \tcode{wcschr}, \tcode{wcspbrk}, \tcode{wcsrchr}, \tcode{wcsstr}, and \tcode{wmemchr}
 have different signatures in this International Standard,
-but they have the same behavior as in the C standard library~(\ref{library.c}).
+but they have the same behavior as in the \link{C standard library}{\ref{library.c}}.
 \end{note}
 
 \xref ISO C 7.29
@@ -6105,8 +6108,8 @@ are the same as the C standard library header
 \indextext{\idxhdr{cwchar}}%
 \indexlibrary{\idxhdr{cwchar}}%
 \begin{note}
-The headers \tcode{<cstdlib>}~(\ref{cstdlib.syn})
-and \tcode{<cwchar>}~(\ref{cwchar.syn})
+The headers \link{\tcode{<cstdlib>}}{\ref{cstdlib.syn}}
+and \link{\tcode{<cwchar>}}{\ref{cwchar.syn}}
 declare the functions described in this subclause.
 \end{note}
 
diff --git a/source/support.tex b/source/support.tex
index a9d8bd7..90664ca 100644
--- a/source/support.tex
+++ b/source/support.tex
@@ -43,21 +43,14 @@ as summarized in Table~\ref{tab:lang.sup.lib.summary}.
 
 \rSec2[cstddef.syn]{Header \tcode{<cstddef>} synopsis}
 
-\indexlibrary{\idxcode{NULL}}%
-\indexlibrary{\idxcode{offsetof}}%
-\indexlibrary{\idxcode{ptrdiff_t}}%
-\indexlibrary{\idxcode{size_t}}%
-\indexlibrary{\idxcode{max_align_t}}%
-\indexlibrary{\idxcode{nullptr_t}}%
-\indexlibrary{\idxcode{byte}}%
 \begin{codeblock}
 namespace std {
-  using ptrdiff_t = @\seebelow@;
-  using size_t = @\seebelow@;
-  using max_align_t = @\seebelow@;
-  using nullptr_t = decltype(nullptr);
+  using @\libentity{ptrdiff_t}@ = @\seebelow@;
+  using @\libentity{size_t}@ = @\seebelow@;
+  using @\libentity{max_align_t}@ = @\seebelow@;
+  using @\libentity{nullptr_t}@ = decltype(nullptr);
 
-  enum class byte : unsigned char {};
+  enum class @\libentity{byte}@ : unsigned char {};
 
   // \ref{support.types.byteops}, \tcode{byte} type operations
   template <class IntType>
@@ -79,8 +72,8 @@ namespace std {
     constexpr IntType to_integer(byte b) noexcept;
 }
 
-#define NULL @\seebelow@
-#define offsetof(P, D) @\seebelow@
+#define @\libentity{NULL}@ @\seebelow@
+#define @\libentity{offsetof}@(P, D) @\seebelow@
 \end{codeblock}
 
 \pnum
@@ -120,7 +113,6 @@ and as noted in
 \indexlibrary{\idxcode{div_t}}%
 \indexlibrary{\idxcode{exit}}%
 \indexlibrary{\idxcode{free}}%
-\indexlibrary{\idxcode{getenv}}%
 \indexlibrary{\idxcode{labs}}%
 \indexlibrary{\idxcode{ldiv}}%
 \indexlibrary{\idxcode{ldiv_t}}%
@@ -178,7 +170,7 @@ namespace std {
   [[noreturn]] void _Exit(int status) noexcept;
   [[noreturn]] void quick_exit(int status) noexcept;
 
-  char* getenv(const char* name);
+  char* @\libentity{getenv}@(const char* name);
   int system(const char* string);
 
   // \ref{c.malloc}, C library memory allocation
@@ -253,7 +245,7 @@ and except as noted in
 \ref{c.math.abs}.
 \begin{note}
 Several functions have additional overloads in this International Standard,
-but they have the same behavior as in the C standard library~(\ref{library.c}).
+but they have the same behavior as in the \link{C standard library}{\ref{library.c}}.
 \end{note}
 
 \xref ISO C 7.22
@@ -261,8 +253,7 @@ but they have the same behavior as in the C standard library~(\ref{library.c}).
 \rSec2[support.types.nullptr]{Null pointers}
 
 \pnum
-\indexlibrary{\idxcode{nullptr_t}}%
-The type \tcode{nullptr_t} is a synonym
+The type \libentity{nullptr_t} is a synonym
 for the type of a \tcode{nullptr} expression, and it
 has the characteristics
 described in~\ref{basic.fundamental} and~\ref{conv.ptr}.
@@ -272,9 +263,7 @@ Although \tcode{nullptr}'s address cannot be taken, the address of another
 \end{note}
 
 \pnum
-The macro
-\indexlibrary{\idxcode{NULL}}%
-\tcode{NULL}
+The macro \libentity{NULL}
 is an \impldef{definition of \tcode{NULL}} null pointer constant.%
 \footnote{Possible definitions include
 \tcode{0}
@@ -287,21 +276,20 @@ but not
 
 \pnum
 The macro
-\indexlibrary{\idxcode{offsetof}}%
-\tcode{offsetof(\placeholder{type}, \placeholder{member-designator})}
+\libentity{offsetof}\tcode{(\placeholder{type}, \placeholder{member-designator})}
 has the same semantics as the corresponding macro in
 the C standard library header \tcode{<stddef.h>}, but
 accepts a restricted set of \tcode{\placeholder{type}}
 arguments in this International Standard.
 Use of the \tcode{offsetof} macro with a \tcode{\placeholder{type}}
-other than a standard-layout class (Clause~\ref{class})
+other than a \deflink{standard-layout class}{Clause~\ref{class}}
 is conditionally-supported.\footnote{Note that \tcode{offsetof}
 is required to work as specified even if unary
 \tcode{operator\&}
 is overloaded for any of the types involved.}
 The expression \tcode{offsetof(\placeholder{type}, \placeholder{member-designator})}
-is never type-dependent~(\ref{temp.dep.expr}) and it is
-value-dependent~(\ref{temp.dep.constexpr}) if and only if \tcode{\placeholder{type}} is
+is never \link{type-dependent}{\ref{temp.dep.expr}} and it is
+\link{value-dependent}{\ref{temp.dep.constexpr}} if and only if \tcode{\placeholder{type}} is
 dependent. The result of applying the \tcode{offsetof} macro to
 a static data member or a function member is undefined.
 No operation invoked by the \tcode{offsetof} macro shall throw an exception and
@@ -322,7 +310,7 @@ to contain the size in bytes of any object.
 \pnum
 \begin{note}
 It is recommended that implementations choose types for \tcode{ptrdiff_t} and \tcode{size_t}
-whose integer conversion ranks~(\ref{conv.rank}) are no greater than that of
+whose integer \link{conversion ranks}{\ref{conv.rank}} are no greater than that of
 \tcode{signed long int} unless a larger size is necessary to contain all the possible values.
 \end{note}
 
@@ -333,8 +321,8 @@ The type
 is at least as great as that of every scalar type, and whose alignment
 requirement is supported in every context.
 
-\xref Alignment~(\ref{basic.align}), Sizeof~(\ref{expr.sizeof}), Additive
-operators~(\ref{expr.add}), Free store~(\ref{class.free}), and ISO C~7.19.
+\xref \link{Alignment}{\ref{basic.align}}, \link{Sizeof}{\ref{expr.sizeof}}, \link{Additive
+operators}{\ref{expr.add}}, \link{Free store}{\ref{class.free}}, and ISO C~7.19.
 
 \rSec2[support.types.byteops]{\tcode{byte} type operations}
 
@@ -494,9 +482,9 @@ template <class IntType>
 
 \pnum
 The headers
-\tcode{<limits>}~(\ref{limits.syn}),
-\tcode{<climits>}~(\ref{climits.syn}), and
-\tcode{<cfloat>}~(\ref{cfloat.syn})
+\link{\tcode{<limits>}}{\ref{limits.syn}},
+\link{\tcode{<climits>}}{\ref{climits.syn}}, and
+\link{\tcode{<cfloat>}}{\ref{cfloat.syn}}
 supply characteristics of imple\-mentation-dependent
 arithmetic types~(\ref{basic.fundamental}).
 
@@ -717,7 +705,7 @@ the specialization on the unqualified type \tcode{T}.
 
 \pnum
 Non-arithmetic standard types, such as
-\tcode{complex<T>}~(\ref{complex}), shall not have specializations.
+\link{\tcode{complex<T>}}{\ref{complex}}, shall not have specializations.
 
 \rSec3[numeric.limits.members]{\tcode{numeric_limits} members}
 
@@ -747,10 +735,11 @@ or
 \tcode{is_bounded == false \&\& is_signed == false}.
 \end{itemdescr}
 
-\indexlibrarymember{max}{numeric_limits}%
+\begin{indexed}{\indexlibrarymember{max}{numeric_limits}}
 \begin{itemdecl}
 static constexpr T max() noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1601,7 +1590,7 @@ the C standard library header \tcode{<stdint.h>}.
 \pnum
 \indextext{\idxhdr{cstdlib}}%
 \begin{note}
-The header \tcode{<cstdlib>}~(\ref{cstdlib.syn})
+The header \link{\tcode{<cstdlib>}}{\ref{cstdlib.syn}}
 declares the functions described in this subclause.
 \end{note}
 
@@ -1658,7 +1647,8 @@ The
 functions register the function pointed to by \tcode{f}
 to be called without arguments at normal program termination.
 It is unspecified whether a call to \tcode{atexit()} that does not
-happen before~(\ref{intro.multithread}) a call to \tcode{exit()} will succeed.
+\deflinkx{happen before}{happens before}{\ref{intro.multithread}}
+a call to \tcode{exit()} will succeed.
 \begin{note} The \tcode{atexit()} functions do not introduce a data
 race~(\ref{res.on.data.races}). \end{note}
 
@@ -1674,10 +1664,11 @@ function returns zero if the registration succeeds,
 nonzero if it fails.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{exit}}%
+\begin{indexed}{\indexlibrary{\idxcode{exit}}}
 \begin{itemdecl}
 [[noreturn]] void exit(int status);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -1692,7 +1683,7 @@ are called.\footnote{A function is called for every time it is registered.}
 See~\ref{basic.start.term} for the order of destructions and calls.
 (Automatic objects are not destroyed as a result of calling
 \tcode{exit()}.)\footnote{Objects with automatic storage duration are all destroyed in a program whose
-\tcode{main} function~(\ref{basic.start.main})
+\link{\tcode{main} function}{\ref{basic.start.main}}
 contains no automatic objects and executes the call to
 \tcode{exit()}.
 Control can be transferred directly to such a
@@ -1746,7 +1737,8 @@ int at_quick_exit(@\placeholder{atexit-handler}@* f) noexcept;
 \effects The \tcode{at_quick_exit()} functions register the function pointed to by \tcode{f}
 to be called without arguments when \tcode{quick_exit} is called.
 It is unspecified whether a call to \tcode{at_quick_exit()} that does not
-happen before~(\ref{intro.multithread}) all calls to \tcode{quick_exit} will succeed. \begin{note} The
+\deflinkx{happen before}{happens before}{\ref{intro.multithread}}
+all calls to \tcode{quick_exit} will succeed. \begin{note} The
 \tcode{at_quick_exit()} functions do not introduce a
 data race~(\ref{res.on.data.races}). \end{note}
 \begin{note}
@@ -1900,7 +1892,7 @@ void* operator new(std::size_t size, std::align_val_t alignment);
 \pnum
 \effects
 The
-allocation functions~(\ref{basic.stc.dynamic.allocation})
+\link{allocation functions}{\ref{basic.stc.dynamic.allocation}}
 called by a
 \grammarterm{new-expression}~(\ref{expr.new})
 to allocate
@@ -1945,7 +1937,7 @@ a null pointer value, throws
 \tcode{bad_alloc}.
 \item
 Otherwise, the function calls the current
-\tcode{new_handler} function~(\ref{new.handler}).
+\link{\tcode{new_handler}}{\ref{new.handler}} function.
 If the called function returns, the loop repeats.
 \item
 The loop terminates when an attempt to allocate the requested storage is
@@ -2016,7 +2008,7 @@ void operator delete(void* ptr, std::size_t size, std::align_val_t alignment) no
 \pnum
 \effects
 The
-deallocation functions~(\ref{basic.stc.dynamic.deallocation})
+\link{deallocation functions}{\ref{basic.stc.dynamic.deallocation}}
 called by a
 \grammarterm{delete-expression}
 to render the value of \tcode{ptr} invalid.
@@ -2049,7 +2041,7 @@ which has not been invalidated by an intervening call to
 
 \pnum
 \requires
-If an implementation has strict pointer safety~(\ref{basic.stc.dynamic.safety})
+If an implementation has \deflink{strict pointer safety}{\ref{basic.stc.dynamic.safety}}
 then \tcode{ptr} shall be a safely-derived pointer.
 
 \pnum
@@ -2115,7 +2107,7 @@ void operator delete(void* ptr, std::align_val_t alignment, const std::nothrow_t
 \pnum
 \effects
 The
-deallocation functions~(\ref{basic.stc.dynamic.deallocation})
+\link{deallocation functions}{\ref{basic.stc.dynamic.deallocation}}
 called by the implementation
 to render the value of \tcode{ptr} invalid
 when the constructor invoked from a nothrow
@@ -2139,7 +2131,7 @@ which has not been invalidated by an intervening call to
 
 \pnum
 \requires
-If an implementation has strict pointer safety~(\ref{basic.stc.dynamic.safety})
+If an implementation has \deflink{strict pointer safety}{\ref{basic.stc.dynamic.safety}}
 then \tcode{ptr} shall be a safely-derived pointer.
 
 \pnum
@@ -2170,7 +2162,7 @@ void* operator new[](std::size_t size, std::align_val_t alignment);
 \pnum
 \effects
 The
-allocation functions~(\ref{basic.stc.dynamic.allocation})
+\link{allocation functions}{\ref{basic.stc.dynamic.allocation}}
 called by the array form of a
 \grammarterm{new-expression}~(\ref{expr.new})
 to allocate
@@ -2270,7 +2262,7 @@ void operator delete[](void* ptr, std::size_t size, std::align_val_t alignment)
 \pnum
 \effects
 The
-deallocation functions~(\ref{basic.stc.dynamic.deallocation})
+\link{deallocation functions}{\ref{basic.stc.dynamic.deallocation}}
 called by the array form of a
 \grammarterm{delete-expression}
 to render the value of \tcode{ptr} invalid.
@@ -2303,7 +2295,7 @@ which has not been invalidated by an intervening call to
 
 \pnum
 \requires
-If an implementation has strict pointer safety~(\ref{basic.stc.dynamic.safety})
+If an implementation has \deflink{strict pointer safety}{\ref{basic.stc.dynamic.safety}}
 then \tcode{ptr} shall be a safely-derived pointer.
 
 \pnum
@@ -2350,7 +2342,7 @@ void operator delete[](void* ptr, std::align_val_t alignment, const std::nothrow
 \pnum
 \effects
 The
-deallocation functions~(\ref{basic.stc.dynamic.deallocation})
+\link{deallocation functions}{\ref{basic.stc.dynamic.deallocation}}
 called by the implementation
 to render the value of \tcode{ptr} invalid
 when the constructor invoked from a nothrow
@@ -2374,7 +2366,7 @@ which has not been invalidated by an intervening call to
 
 \pnum
 \requires
-If an implementation has strict pointer safety~(\ref{basic.stc.dynamic.safety})
+If an implementation has \deflink{strict pointer safety}{\ref{basic.stc.dynamic.safety}}
 then \tcode{ptr} shall be a safely-derived pointer.
 
 \pnum
@@ -2453,7 +2445,7 @@ Intentionally performs no action.
 
 \pnum
 \requires
-If an implementation has strict pointer safety~(\ref{basic.stc.dynamic.safety})
+If an implementation has \deflink{strict pointer safety}{\ref{basic.stc.dynamic.safety}}
 then \tcode{ptr} shall be a safely-derived pointer.
 
 \pnum
@@ -2476,7 +2468,7 @@ Intentionally performs no action.
 
 \pnum
 \requires
-If an implementation has strict pointer safety~(\ref{basic.stc.dynamic.safety})
+If an implementation has \deflink{strict pointer safety}{\ref{basic.stc.dynamic.safety}}
 then \tcode{ptr} shall be a safely-derived pointer.
 
 \pnum
@@ -2501,8 +2493,8 @@ versions of \tcode{operator delete}, the C standard library function
 introduce a data race~(\ref{res.on.data.races}).
 Calls to these functions that allocate or deallocate a particular unit
 of storage shall occur in a single total order, and each such deallocation call
-shall happen before~(\ref{intro.multithread}) the next allocation (if any) in
-this order.
+shall \deflinkx{happen before}{happens before}{\ref{intro.multithread}}
+the next allocation (if any) in this order.
 
 \rSec2[alloc.errors]{Storage allocation errors}
 
@@ -2565,7 +2557,8 @@ An \impldef{return value of \tcode{bad_alloc::what}} \ntbs{}.
 
 \pnum
 \remarks
-The message may be a null-terminated multibyte string~(\ref{multibyte.strings}),
+The message may be a
+\deflinkx{null-terminated multibyte string}{string!null-terminated multibyte}{\ref{multibyte.strings}},
 suitable for conversion and display as a
 \tcode{wstring}~(\ref{string.classes}, \ref{locale.codecvt}).
 \end{itemdescr}
@@ -2611,17 +2604,19 @@ An \impldef{return value of \tcode{bad_array_new_length::what}} \ntbs{}.
 
 \pnum
 \remarks
-The message may be a null-terminated multibyte string~(\ref{multibyte.strings}),
+The message may be a
+\deflinkx{null-terminated multibyte string}{string!null-terminated multibyte}{\ref{multibyte.strings}},
 suitable for conversion and display as a
 \tcode{wstring}~(\ref{string.classes}, \ref{locale.codecvt}).
 \end{itemdescr}
 
 \rSec3[new.handler]{Type \tcode{new_handler}}
 
-\indexlibrary{\idxcode{new_handler}}%
+\begin{indexed}{\indexlibrary{\idxcode{new_handler}}}
 \begin{itemdecl}
 using new_handler = void (*)();
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2698,8 +2693,8 @@ template <class T> constexpr T* launder(T* p) noexcept;
 \pnum
 \requires
 \tcode{p} represents the address \placeholder{A} of a byte in memory.
-An object \placeholder{X} that is within its lifetime~(\ref{basic.life})
-and whose type is similar~(\ref{conv.qual}) to \tcode{T}
+An object \placeholder{X} that is within its \deflink{lifetime}{\ref{basic.life}}
+and whose type is \deflinkx{similar}{similar types}{\ref{conv.qual}} to \tcode{T}
 is located at the address \placeholder{A}.
 All bytes of storage that would be reachable through the result
 are reachable through \tcode{p} (see below).
@@ -2929,7 +2924,8 @@ An \impldef{return value of \tcode{type_info::name()}} \ntbs{}.
 
 \pnum
 \remarks
-The message may be a null-terminated multibyte string~(\ref{multibyte.strings}),
+The message may be a
+\deflinkx{null-terminated multibyte string}{string!null-terminated multibyte}{\ref{multibyte.strings}},
 suitable for conversion and display as a
 \tcode{wstring}~(\ref{string.classes}, \ref{locale.codecvt})
 \end{itemdescr}
@@ -2996,7 +2992,8 @@ An \impldef{return value of \tcode{bad_cast::what}} \ntbs{}.
 
 \pnum
 \remarks
-The message may be a null-terminated multibyte string~(\ref{multibyte.strings}),
+The message may be a
+\deflinkx{null-terminated multibyte string}{string!null-terminated multibyte}{\ref{multibyte.strings}},
 suitable for conversion and display as a
 \tcode{wstring}~(\ref{string.classes}, \ref{locale.codecvt})
 \end{itemdescr}
@@ -3063,7 +3060,8 @@ An \impldef{return value of \tcode{bad_typeid::what}} \ntbs{}.
 
 \pnum
 \remarks
-The message may be a null-terminated multibyte string~(\ref{multibyte.strings}),
+The message may be a
+\deflinkx{null-terminated multibyte string}{string!null-terminated multibyte}{\ref{multibyte.strings}},
 suitable for conversion and display as a
 \tcode{wstring}~(\ref{string.classes}, \ref{locale.codecvt})
 \end{itemdescr}
@@ -3192,7 +3190,8 @@ An \impldef{return value of \tcode{exception::what}} \ntbs{}.
 
 \pnum
 \remarks
-The message may be a null-terminated multibyte string~(\ref{multibyte.strings}),
+The message may be a
+\deflinkx{null-terminated multibyte string}{string!null-terminated multibyte}{\ref{multibyte.strings}},
 suitable for conversion and display as a
 \tcode{wstring}~(\ref{string.classes}, \ref{locale.codecvt}).
 The return value remains valid until the exception object from which
@@ -3261,7 +3260,8 @@ An \impldef{return value of \tcode{bad_exception::what}} \ntbs{}.
 
 \pnum
 \remarks
-The message may be a null-terminated multibyte string~(\ref{multibyte.strings}),
+The message may be a
+\deflinkx{null-terminated multibyte string}{string!null-terminated multibyte}{\ref{multibyte.strings}},
 suitable for conversion and display as a
 \tcode{wstring}~(\ref{string.classes}, \ref{locale.codecvt}).
 \end{itemdescr}
@@ -3365,21 +3365,22 @@ int uncaught_exceptions() noexcept;
 \begin{itemdescr}
 \pnum
 \returns
-The number of uncaught exceptions~(\ref{except.uncaught}).
+The number of \link{uncaught exceptions}{\ref{except.uncaught}}.
 
 \pnum
 \remarks
 When \tcode{uncaught_exceptions() > 0},
-throwing an exception can result in a call of\\
-\tcode{std::terminate()}~(\ref{except.terminate}).
+throwing an exception can result in a call of
+\link{\tcode{std::terminate()}}{\ref{except.terminate}}.
 \end{itemdescr}
 
 \rSec2[propagation]{Exception propagation}
 
-\indexlibrary{\idxcode{exception_ptr}}%
+\begin{indexed}{\indexlibrary{\idxcode{exception_ptr}}}
 \begin{itemdecl}
 using exception_ptr = @\unspec@;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -3387,7 +3388,7 @@ The type \tcode{exception_ptr} can be used to refer to an exception object.
 
 \pnum
 \tcode{exception_ptr} shall satisfy the requirements of
-\tcode{NullablePointer}~(\ref{nullablepointer.requirements}).
+\link{\tcode{NullablePointer}}{\ref{nullablepointer.requirements}}.
 
 \pnum
 Two non-null values of type \tcode{exception_ptr} are equivalent and compare equal if and
@@ -3424,8 +3425,9 @@ exception_ptr current_exception() noexcept;
 
 \begin{itemdescr}
 \pnum
-\returns An \tcode{exception_ptr} object that refers to
-the currently handled exception~(\ref{except.handle}) or a copy of the currently
+\returns An \tcode{exception_ptr} object that refers to the
+\deflinkx{currently handled exception}{exception handling!currently handled exception}{\ref{except.handle}}
+or a copy of the currently
 handled exception, or a null \tcode{exception_ptr} object if no exception is being
 handled. The referenced object shall remain valid at least as long as there is an
 \tcode{exception_ptr} object that refers to it.
@@ -3735,7 +3737,7 @@ provide further compatibility with C code.
 \pnum
 Calls to the function
 \indexlibrary{\idxcode{getenv}}%
-\tcode{getenv}~(\ref{cstdlib.syn}) shall not introduce a data
+\liblinkx{\tcode{getenv}}{getenv}{\ref{cstdlib.syn}} shall not introduce a data
 race~(\ref{res.on.data.races}) provided that nothing modifies the environment.
 \begin{note} Calls to the POSIX functions
 \indexlibrary{\idxcode{setenv}}%
@@ -3745,7 +3747,7 @@ race~(\ref{res.on.data.races}) provided that nothing modifies the environment.
 environment. \end{note}
 
 \pnum
-A call to the \tcode{setlocale} function~(\ref{c.locales})
+A call to the \liblinkx{\tcode{setlocale}}{setlocale}{\ref{c.locales}} function
 may introduce a data race with other
 calls to the \tcode{setlocale} function or with calls to functions that are
 affected by the current C locale. The implementation shall behave as if no
@@ -3756,20 +3758,15 @@ function.
 
 \indextext{\idxhdr{cstdarg}}%
 \indexlibrary{\idxhdr{cstdarg}}%
-\indexlibrary{\idxcode{va_list}}%
-\indexlibrary{\idxcode{va_start}}%
-\indexlibrary{\idxcode{va_copy}}%
-\indexlibrary{\idxcode{va_end}}%
-\indexlibrary{\idxcode{va_arg}}%
 \begin{codeblock}
 namespace std {
-  using va_list = @\seebelow@;
+  using @\libentity{va_list}@ = @\seebelow@;
 }
 
-#define va_arg(V, P) @\seebelow@
-#define va_copy(VDST, VSRC) @\seebelow@
-#define va_end(V) @\seebelow@
-#define va_start(V, P) @\seebelow@
+#define @\libentity{va_arg}@(V, P) @\seebelow@
+#define @\libentity{va_copy}@(VDST, VSRC) @\seebelow@
+#define @\libentity{va_end}@(V) @\seebelow@
+#define @\libentity{va_start}@(V, P) @\seebelow@
 \end{codeblock}
 
 \pnum
diff --git a/source/templates.tex b/source/templates.tex
index 8c5e231..3014fe7 100644
--- a/source/templates.tex
+++ b/source/templates.tex
@@ -95,7 +95,7 @@ a class template declaration, if the
 class name
 is a
 \grammarterm{simple-template-id},
-the declaration declares a class template partial specialization~(\ref{temp.class.spec}).
+the declaration declares a \link{class template partial specialization}{\ref{temp.class.spec}}.
 \end{note}
 
 \pnum
@@ -109,17 +109,17 @@ no declarator is permitted.
 
 \pnum
 \indextext{template name!linkage of}%
-A template name has linkage~(\ref{basic.link}).
+A template name has \link{linkage}{\ref{basic.link}}.
 Specializations (explicit or implicit) of
 a template that has internal linkage are
 distinct from all specializations in other translation
 units.
-A template, a template explicit specialization~(\ref{temp.expl.spec}), and a class
+A template, a template \link{explicit specialization}{\ref{temp.expl.spec}}, and a class
 template partial specialization shall not have C linkage. Use of a linkage specification
 other than \tcode{"C"} or \tcode{"C++"} with any of these constructs is
 conditionally-supported, with
 \impldef{semantics of linkage specification on templates} semantics.
-Template definitions shall obey the one-definition rule~(\ref{basic.def.odr}).
+Template definitions shall obey the \link{one-definition rule}{\ref{basic.def.odr}}.
 \begin{note}
 Default arguments for function templates and for member functions of
 class templates are considered definitions for the purpose of template
@@ -159,8 +159,8 @@ templated entity is a templated entity.
 A function template, member function of a class template, variable template,
 or static data
 member of a class template shall be defined in every translation unit in
-which it is implicitly instantiated~(\ref{temp.inst}) unless the
-corresponding specialization is explicitly instantiated~(\ref{temp.explicit})
+which it is \link{implicitly instantiated}{\ref{temp.inst}} unless the
+corresponding specialization is \link{explicitly instantiated}{\ref{temp.explicit}}
 in some translation unit; no diagnostic is required.
 
 \rSec1[temp.param]{Template parameters}
@@ -292,7 +292,7 @@ types:
 
 \item \tcode{std::nullptr_t}, or
 
-\item a type that contains a placeholder type~(\ref{dcl.spec.auto}).
+\item a type that contains a \deflink{placeholder type}{\ref{dcl.spec.auto}}.
 \end{itemize}
 
 \pnum
@@ -381,7 +381,7 @@ A default
 may be specified for any kind of
 \grammarterm{template-parameter}
 (type, non-type, template)
-that is not a template parameter pack~(\ref{temp.variadic}).
+that is not a \deflink{template parameter pack}{\ref{temp.variadic}}.
 A default
 \grammarterm{template-argument}
 may be specified in a template declaration.
@@ -524,7 +524,7 @@ If a \grammarterm{template-parameter} is a
 optional \grammarterm{identifier} or is a
 \grammarterm{parameter-declaration} that declares a parameter
 pack~(\ref{dcl.fct}), then the \grammarterm{template-parameter}
-is a template parameter pack~(\ref{temp.variadic}).
+is a \deflink{template parameter pack}{\ref{temp.variadic}}.
 A template parameter pack that is a \grammarterm{parameter-declaration} whose type
 contains one or more unexpanded parameter packs is a pack expansion. Similarly,
 a template parameter pack that is a \grammarterm{type-parameter} with a
@@ -550,7 +550,7 @@ template<class... T, T... Values> struct static_array;// error: \tcode{Values} e
 \rSec1[temp.names]{Names of template specializations}
 
 \pnum
-A template specialization~(\ref{temp.spec}) can be referred to by a
+A \link{template specialization}{\ref{temp.spec}} can be referred to by a
 \grammarterm{template-id}:
 
 \begin{bnf}
@@ -584,7 +584,7 @@ A template specialization~(\ref{temp.spec}) can be referred to by a
 \end{bnf}
 
 \begin{note}
-The name lookup rules~(\ref{basic.lookup}) are used to associate the use of
+The \link{name lookup}{\ref{basic.lookup}} rules are used to associate the use of
 a name with a template declaration;
 that is, to identify a name as a
 \grammarterm{template-name}.
@@ -598,7 +598,7 @@ the name must be known to refer to a template.
 
 \pnum
 \indextext{\idxcode{<}!template and}%
-After name lookup~(\ref{basic.lookup}) finds that a name is a
+After \link{name lookup}{\ref{basic.lookup}} finds that a name is a
 \grammarterm{template-name}
 or that an \grammarterm{operator-function-id} or a \grammarterm{literal-operator-id} refers to a set of
 overloaded functions any member of which is a function template,
@@ -754,8 +754,8 @@ specified in a
 shall match the type and form specified for the corresponding
 parameter declared by the template in its
 \grammarterm{template-parameter-list}.
-When the parameter declared by the template is a template
-parameter pack~(\ref{temp.variadic}), it will correspond to zero or more
+When the parameter declared by the template is a
+\deflink{template parameter pack}{\ref{temp.variadic}}, it will correspond to zero or more
 \grammarterm{template-argument}{s}.
 \begin{example}
 \begin{codeblock}
@@ -920,7 +920,7 @@ the program is ill-formed.
 \pnum
 When a \grammarterm{simple-template-id} does not name a function,
 a default \grammarterm{template-argument} is
-implicitly instantiated~(\ref{temp.inst})
+\link{implicitly instantiated}{\ref{temp.inst}}
 when the value of that default argument is needed.
 \begin{example}
 \begin{codeblock}
@@ -932,7 +932,7 @@ The default argument for \tcode{U} is instantiated to form the type \tcode{S<boo
 
 \pnum
 A \grammarterm{template-argument} followed by an ellipsis is
-a pack expansion~(\ref{temp.variadic}).
+a \deflink{pack expansion}{\ref{temp.variadic}}.
 
 \rSec2[temp.arg.type]{Template type arguments}
 
@@ -974,10 +974,10 @@ A template type argument may be an incomplete type~(\ref{basic.types}).
 
 \pnum
 If the type of a \grammarterm{template-parameter}
-contains a placeholder type~(\ref{dcl.spec.auto}, \ref{temp.param}),
+contains a \deflink{placeholder type}{\ref{dcl.spec.auto}},
 the deduced parameter type is determined
 from the type of the \grammarterm{template-argument}
-by placeholder type deduction~(\ref{dcl.type.auto.deduct}).
+by \link{placeholder type deduction}{\ref{dcl.type.auto.deduct}}.
 If a deduced parameter type is not permitted
 for a \grammarterm{template-parameter} declaration~(\ref{temp.param}),
 the program is ill-formed.
@@ -987,20 +987,19 @@ A
 \grammarterm{template-argument}
 for a non-type
 \grammarterm{template-parameter}
-shall be
-a converted
-constant expression~(\ref{expr.const})
+shall be a
+\deflinkx{converted constant expression}{expression!converted constant}{\ref{expr.const}}
 of the type of the \grammarterm{template-parameter}.
 For a non-type \grammarterm{template-parameter} of reference or pointer type,
 the value of the constant expression shall not refer to
 (or for a pointer type, shall not be the address of):
 
 \begin{itemize}
-\item a subobject~(\ref{intro.object}),
-\item a temporary object~(\ref{class.temporary}),
-\item a string literal~(\ref{lex.string}),
-\item the result of a \tcode{typeid} expression~(\ref{expr.typeid}), or
-\item a predefined \tcode{__func__} variable~(\ref{dcl.fct.def.general}).
+\item a \deflink{subobject}{\ref{intro.object}},
+\item a \link{temporary object}{\ref{class.temporary}},
+\item a \link{string literal}{\ref{lex.string}},
+\item the result of a \link{\tcode{typeid} expression}{\ref{expr.typeid}}, or
+\item a predefined \linkx{\tcode{__func__}}{\idxcode{__func__}}{\ref{dcl.fct.def.general}} variable.
 \end{itemize}
 
 \begin{note}
@@ -1042,7 +1041,7 @@ B<2.5> b3;                      // error: template parameter type cannot be \tco
 
 \pnum
 \begin{note}
-A string literal~(\ref{lex.string})
+A \link{string literal}{\ref{lex.string}}
 is not an acceptable
 \grammarterm{template-argument}.
 \begin{example}
@@ -1117,7 +1116,7 @@ considered even if their parameter lists match that of the template template
 parameter.
 
 \pnum
-Any partial specializations~(\ref{temp.class.spec}) associated with the
+Any \link{partial specializations}{\ref{temp.class.spec}} associated with the
 primary class template or primary variable template are considered when a
 specialization based on the template
 \grammarterm{template-parameter}
@@ -1154,8 +1153,9 @@ Two template parameters match if they are of the same kind (type, non-type, temp
 for non-type \grammarterm{template-parameter}{s}, their types are
 equivalent~(\ref{temp.over.link}), and for template \grammarterm{template-parameter}{s},
 each of their corresponding \grammarterm{template-parameter}{s} matches, recursively.
-When \tcode{P}'s \grammarterm{template-parameter-list} contains a template parameter
-pack~(\ref{temp.variadic}), the template parameter pack will match zero or more template
+When \tcode{P}'s \grammarterm{template-parameter-list} contains a
+\deflink{template parameter pack}{\ref{temp.variadic}},
+the template parameter pack will match zero or more template
 parameters or template parameter packs in the \grammarterm{template-parameter-list} of
 \tcode{A} with the same type and form as the template parameter pack in \tcode{P}
 (ignoring whether those template parameters are template parameter packs).
@@ -1208,8 +1208,8 @@ if, given the following rewrite to two function templates,
 the function template corresponding to \tcode{P}
 is at least as specialized as
 the function template corresponding to \tcode{A}
-according to the partial ordering rules
-for function templates~(\ref{temp.func.order}).
+according to the \link{partial ordering rules
+for function templates}{\ref{temp.func.order}}.
 Given an invented class template \tcode{X}
 with the template parameter list of \tcode{A} (including default arguments):
 
@@ -1302,7 +1302,7 @@ declares \tcode{y} and \tcode{z} to be of the same type.
 \end{example}
 
 \pnum
-If an expression $e$ is type-dependent~(\ref{temp.dep.expr}),
+If an expression $e$ is \link{type-dependent}{\ref{temp.dep.expr}},
 \tcode{decltype($e$)}
 denotes a unique dependent type. Two such \grammarterm{decltype-specifier}{s}
 refer to the same type only if their \grammarterm{expression}{s} are
@@ -1328,7 +1328,7 @@ template<class T1, int I> void sort<T1, I>(T1 data[I]);         // error
 \end{codeblock}
 \end{example}
 \begin{note}
-However, this syntax is allowed in class template partial specializations~(\ref{temp.class.spec}).
+However, this syntax is allowed in \link{class template partial specializations}{\ref{temp.class.spec}}.
 \end{note}
 
 \pnum
@@ -1340,8 +1340,8 @@ each default argument or \grammarterm{noexcept-specifier} is a separate
 definition which is unrelated to
 the function template definition or to any other default arguments or
 \grammarterm{noexcept-specifier}{s}.
-For the purpose of instantiation, the substatements of a constexpr if
-statement~(\ref{stmt.if}) are considered definitions.
+For the purpose of instantiation, the substatements of a
+\deflink{constexpr if}{\ref{stmt.if}} statement are considered definitions.
 
 \pnum
 Because an \grammarterm{alias-declaration} cannot declare a
@@ -1591,7 +1591,7 @@ template<class T> template<class T2> int string<T>::compare(const T2& s) {
 
 \pnum
 A local class of non-closure type shall not have member templates.
-Access control rules (Clause~\ref{class.access})
+\link{Access control rules}{Clause~\ref{class.access}}
 apply to member template names.
 A destructor shall not be a member
 template.
@@ -1701,8 +1701,8 @@ conversion function template
 in a base class.
 
 \pnum
-Overload resolution~(\ref{over.ics.rank}) and partial
-ordering~(\ref{temp.func.order}) are used to select the best conversion function
+\link{Overload resolution}{\ref{over.ics.rank}} and \link{partial
+ordering}{\ref{temp.func.order}} are used to select the best conversion function
 among multiple
 specializations of conversion function templates
 and/or non-template
@@ -1792,7 +1792,7 @@ the \grammarterm{alignment-specifier} without the ellipsis.
 \item In a \grammarterm{capture-list}~(\ref{expr.prim.lambda}); the pattern is
 a \grammarterm{capture}.
 
-\item In a \tcode{sizeof...} expression~(\ref{expr.sizeof}); the pattern is an
+\item In a \link{\tcode{sizeof...} expression}{\ref{expr.sizeof}}; the pattern is an
 \grammarterm{identifier}.
 
 \item In a \grammarterm{fold-expression} (\ref{expr.prim.fold});
@@ -1869,8 +1869,8 @@ follows:
 
 \begin{itemize}
 \item
-if the pack is a template parameter pack, the element is a template
-parameter~(\ref{temp.param}) of the corresponding kind (type or
+if the pack is a template parameter pack, the element is a \link{template
+parameter}{\ref{temp.param}} of the corresponding kind (type or
 non-type) designating the type or value from the template
 argument; otherwise,
 
@@ -1903,7 +1903,7 @@ template void f<>();    // OK: \tcode{X<>} has no base classes
 \end{example}
 
 \pnum
-The instantiation of a \tcode{sizeof...} expression~(\ref{expr.sizeof}) produces
+The instantiation of a \link{\tcode{sizeof...} expression}{\ref{expr.sizeof}} produces
 an integral constant containing the number of elements in the parameter pack
 it expands.
 
@@ -2079,8 +2079,8 @@ class A {
 
 \pnum
 A template friend declaration specifies that all specializations of that
-template, whether they are implicitly instantiated~(\ref{temp.inst}), partially
-specialized~(\ref{temp.class.spec}) or explicitly specialized~(\ref{temp.expl.spec}),
+template, whether they are \link{implicitly instantiated}{\ref{temp.inst}}, \link{partially
+specialized}{\ref{temp.class.spec}} or \link{explicitly specialized}{\ref{temp.expl.spec}},
 are friends of the class containing the template friend declaration.
 \begin{example}
 \begin{codeblock}
@@ -2314,15 +2314,15 @@ template< int X > class A<X,&array> { };        // error
 
 \end{example}
 \item
-The specialization shall be more specialized than the primary
-template~(\ref{temp.class.order}).
+The specialization shall be \deflink{more specialized}{\ref{temp.class.order}}
+than the primary template.
 
 \item
 The template parameter list of a specialization shall not contain default
 template argument values.\footnote{There is no way in which they could be used.}
 \item
 An argument shall not contain an unexpanded parameter pack. If
-an argument is a pack expansion~(\ref{temp.variadic}), it shall be
+an argument is a \deflink{pack expansion}{\ref{temp.variadic}}, it shall be
 the last argument in the template argument list.
 \end{itemize}
 
@@ -2343,7 +2343,7 @@ If exactly one matching specialization is found, the instantiation is
 generated from that specialization.
 \item
 If more than one matching specialization is found,
-the partial order rules~(\ref{temp.class.order}) are used to determine
+the \link{partial order rules}{\ref{temp.class.order}} are used to determine
 whether one of the specializations is more specialized than the
 others.
 If none of the specializations is more specialized than all of the
@@ -2357,7 +2357,7 @@ primary template.
 \pnum
 A partial specialization matches a given actual template argument
 list if the template arguments of the partial specialization can be
-deduced from the actual template argument list~(\ref{temp.deduct}).
+\link{deduced}{\ref{temp.deduct}} from the actual template argument list.
 \begin{example}
 \begin{codeblock}
 template<class T1, class T2, int I> class A             { };    // \#1
@@ -2406,8 +2406,8 @@ of the primary template.
 For two class template partial specializations,
 the first is \defn{more specialized} than the second if, given the following
 rewrite to two function templates, the first function template is more
-specialized than the second according to the ordering rules for function
-templates~(\ref{temp.func.order}):
+specialized than the second according to the \link{ordering rules for function
+templates}{\ref{temp.func.order}}:
 
 \begin{itemize}
 \item
@@ -2570,7 +2570,7 @@ declarations of non-template functions do not merely guide
 overload resolution of
 function template specializations
 with the same name.
-If such a non-template function is odr-used~(\ref{basic.def.odr}) in a program, it must be defined;
+If such a non-template function is \link{odr-used}{\ref{basic.def.odr}} in a program, it must be defined;
 it will not be implicitly instantiated using the function template definition.}
 
 \rSec3[temp.over.link]{Function template overloading}
@@ -2605,8 +2605,8 @@ void h(int* p) {
 \end{example}
 
 \pnum
-Such specializations are distinct functions and do not violate the one-definition
-rule~(\ref{basic.def.odr}).
+Such specializations are distinct functions and do not violate the
+\link{one-definition rule}{\ref{basic.def.odr}}.
 
 \pnum
 The signature of a function template
@@ -2658,11 +2658,11 @@ For example, a template type parameter can be used in the
 Two expressions involving template parameters are considered
 \defnx{equivalent}{expression!equivalent}
 if two function definitions containing the expressions would satisfy
-the one-definition rule~(\ref{basic.def.odr}), except that the tokens used
+the \link{one-definition rule}{\ref{basic.def.odr}}, except that the tokens used
 to name the template parameters may differ as long as a token used to
 name a template parameter in one expression is replaced by another token
 that names the same template parameter in the other expression. For
-determining whether two dependent names (\ref{temp.dep}) are
+determining whether two \link{dependent names}{\ref{temp.dep}} are
 equivalent, only the name itself is considered, not the result of name
 lookup in the context of the template. If multiple declarations of the
 same function template differ in the result of this name lookup, the
@@ -2742,7 +2742,7 @@ template <int I> void f(A<I>, A<I+1+2+3+4>);
 \indextext{ordering!function template partial|see{template, function, partial ordering}}%
 If a function template is overloaded,
 the use of a function template specialization might be ambiguous because
-template argument deduction~(\ref{temp.deduct}) may associate the function
+\link{template argument deduction}{\ref{temp.deduct}} may associate the function
 template specialization with more than one function template declaration.
 \defnx{Partial ordering}{template!function!partial ordering}
 of overloaded function template declarations is used in the following contexts
@@ -2760,8 +2760,8 @@ function template
 specialization
 is selected to match a placement operator new~(\ref{basic.stc.dynamic.deallocation}, \ref{expr.new});
 \item
-when a friend function declaration~(\ref{temp.friend}), an
-explicit instantiation~(\ref{temp.explicit}) or an explicit specialization~(\ref{temp.expl.spec}) refers to
+when a \link{friend function declaration}{\ref{temp.friend}}, an
+\link{explicit instantiation}{\ref{temp.explicit}} or an \link{explicit specialization}{\ref{temp.expl.spec}} refers to
 a function template specialization.
 \end{itemize}
 
@@ -2777,7 +2777,8 @@ process.
 
 \pnum
 To produce the transformed template, for each type, non-type, or template
-template parameter (including template parameter packs~(\ref{temp.variadic})
+template parameter (including
+\deflinkx{template parameter packs}{template parameter pack}{\ref{temp.variadic}}
 thereof) synthesize a unique type, value, or class template
 respectively and substitute it for each occurrence of that parameter
 in the function type of the template.
@@ -3053,7 +3054,7 @@ prefixed by
 does not denote a type
 or a class template,
 the specialization is ill-formed.
-The usual qualified name lookup~(\ref{basic.lookup.qual}) is used to find the
+The usual \link{qualified name lookup}{\ref{basic.lookup.qual}} is used to find the
 \grammarterm{qualified-id}
 even in the presence of
 \tcode{typename}.
@@ -3135,8 +3136,8 @@ member of a class template following the \grammarterm{declarator-id}, the keywor
 is not required when referring to the name of a previously
 declared member of the class template that declares a type
 or a class template.
-\begin{note} Such names can be found using unqualified name lookup~(\ref{basic.lookup.unqual}),
-class member lookup~(\ref{class.qual}) into the current instantiation~(\ref{temp.dep.type}),
+\begin{note} Such names can be found using \link{unqualified name lookup}{\ref{basic.lookup.unqual}},
+class member lookup~(\ref{class.qual}) into the \deflink{current instantiation}{\ref{temp.dep.type}},
 or class member access expression lookup~(\ref{basic.lookup.classref}) when the
 type of the object expression is the current instantiation~(\ref{temp.dep.expr}).
 \end{note}
@@ -3160,7 +3161,7 @@ The program is ill-formed, no diagnostic required, if:
 \begin{itemize}
 \item
 no valid specialization can be generated for a template
-or a substatement of a constexpr if statement~(\ref{stmt.if}) within a template
+or a substatement of a \deflink{constexpr if}{\ref{stmt.if}} statement within a template
 and the template is not instantiated, or
 \item
 every valid specialization of a variadic template requires an empty template
@@ -3191,7 +3192,7 @@ was a pack expansion and the corresponding pack is empty, or
 \item an instantiation uses a default argument or default template argument
 that had not been defined at the point at which the template was defined, or
 
-\item constant expression evaluation~(\ref{expr.const}) within the template
+\item \link{constant expression evaluation}{\ref{expr.const}} within the template
 instantiation uses
   \begin{itemize}
   \item the value of a \tcode{const} object of integral or unscoped enumeration type or
@@ -3343,7 +3344,7 @@ member functions of class templates are considered definitions~(\ref{temp.decls}
 
 \pnum
 Like normal (non-template) classes, class templates have an
-injected-class-name (Clause~\ref{class}).
+\deflink{injected-class-name}{Clause~\ref{class}}.
 The
 injected-class-name can be used
 as a \grammarterm{template-name} or a \grammarterm{type-name}.
@@ -3520,9 +3521,9 @@ if the name of the base class
 or the name of a member of the
 base class is the same as the name of a
 \grammarterm{template-parameter},
-the base class name or member name hides the
+the base class name or member name \link{hides}{\ref{basic.scope.hiding}} the
 \grammarterm{template-parameter}
-name~(\ref{basic.scope.hiding}).
+name.
 \begin{example}
 
 \begin{codeblock}
@@ -3578,15 +3579,15 @@ if
 
 \begin{itemize}
 \item
-any of the expressions in the \grammarterm{expression-list} is a pack
-expansion~(\ref{temp.variadic}),
+any of the expressions in the \grammarterm{expression-list} is a
+\deflink{pack expansion}{\ref{temp.variadic}},
 
 \item
 any of the expressions
 or \grammarterm{braced-init-list}{s}
 in the
 \grammarterm{expression-list}
-is type-dependent~(\ref{temp.dep.expr}), or
+is \link{type-dependent}{\ref{temp.dep.expr}}, or
 
 \item
 the \grammarterm{unqualified-id}
@@ -3627,7 +3628,7 @@ explicitly depend on the
 
 \pnum
 In the definition of a class or class template,
-the scope of a dependent base class~(\ref{temp.dep.type})
+the scope of a \deflinkx{dependent base class}{base class!dependent}{\ref{temp.dep.type}}
 is not examined during unqualified
 name lookup either at the point of definition of the
 class template or member or during an instantiation of
@@ -3696,7 +3697,7 @@ if it is
 \item
 in the definition of a class template, a nested class of a class template,
 a member of a class template, or a member of a nested class of a class template,
-the injected-class-name (Clause~\ref{class}) of the class template or nested class,
+the \deflink{injected-class-name}{Clause~\ref{class}} of the class template or nested class,
 \item
 in the definition of a primary class template
 or a member of a primary class template, the name of the
@@ -3714,8 +3715,8 @@ the class template followed by the template argument list of
 the partial specialization enclosed in
 \tcode{<>} (or an equivalent template alias specialization).
 If the \textit{n}th template parameter is
-a parameter pack, the \textit{n}th template argument is a pack
-expansion~(\ref{temp.variadic}) whose pattern is the name of
+a parameter pack, the \textit{n}th template argument is a
+\deflink{pack expansion}{\ref{temp.variadic}} whose pattern is the name of
 the parameter pack.
 \end{itemize}
 
@@ -3726,9 +3727,9 @@ template argument list in which the
 template argument has the value of the
 \textit{n}th
 template parameter of the class template.
-If the \textit{n}th template parameter is a template
-parameter pack~(\ref{temp.variadic}), the \textit{n}th template argument is a pack
-expansion~(\ref{temp.variadic}) whose pattern is the name of
+If the \textit{n}th template parameter is a
+\deflink{template parameter pack}{\ref{temp.variadic}}, the \textit{n}th template argument is a
+\deflink{pack expansion}{\ref{temp.variadic}} whose pattern is the name of
 the template parameter pack.
 
 \pnum
@@ -3826,10 +3827,10 @@ then the \grammarterm{qualified-id} is a member of an unknown specialization;
 see below. \end{note}
 
 \item
-An \grammarterm{id-expression} denoting the member in a class member access
-expression~(\ref{expr.ref}) for which the type of the object expression is the
-current instantiation, and the \grammarterm{id-expression}, when looked
-up~(\ref{basic.lookup.classref}), refers to at least one member of a class
+An \grammarterm{id-expression} denoting the member in a \link{class member access}{\ref{expr.ref}}
+expression for which the type of the object expression is the
+current instantiation, and the \grammarterm{id-expression}, when \link{looked
+up}{\ref{basic.lookup.classref}}, refers to at least one member of a class
 that is the current
 instantiation or a non-dependent base class thereof. \begin{note} If no such
 member is found, and the current instantiation has any dependent base classes,
@@ -3877,8 +3878,8 @@ dependent base class, and name lookup of the \grammarterm{qualified-id} does not
 find any member of a class that is the current instantiation or a non-dependent
 base class thereof.
 
-\item An \grammarterm{id-expression} denoting the member in a class member access
-expression~(\ref{expr.ref}) in which either
+\item An \grammarterm{id-expression} denoting the member in a
+\link{class member access}{\ref{expr.ref}} expression in which either
 \begin{itemize}
 \item the type of the object expression is the current instantiation, the
 current instantiation has at least one dependent base class, and name lookup
@@ -3969,11 +3970,11 @@ in which either the template name is a template parameter or any of the
 template arguments is a dependent type or an expression that is type-dependent
 or value-dependent or is a pack expansion
 \begin{note}
-This includes an injected-class-name (Clause \ref{class}) of a class template
+This includes an \deflink{injected-class-name}{Clause \ref{class}} of a class template
 used without a \grammarterm{template-argument-list}.
 \end{note}, or
 \item denoted by \tcode{decltype(}\grammarterm{expression}{}\tcode{)},
-where \grammarterm{expression} is type-dependent~(\ref{temp.dep.expr}).
+where \grammarterm{expression} is \link{type-dependent}{\ref{temp.dep.expr}}.
 \end{itemize}
 
 \pnum
@@ -4013,7 +4014,7 @@ an
 associated by name lookup with
 a non-type \grammarterm{template-parameter}
 declared with a type
-that contains a placeholder type~(\ref{dcl.spec.auto}),
+that contains a \deflink{placeholder type}{\ref{dcl.spec.auto}},
 
 \item
 an \grammarterm{identifier} associated by name lookup with one or more
@@ -4022,13 +4023,13 @@ with a return type that contains a placeholder type,
 
 \item
 an \grammarterm{identifier} associated by name lookup with
-a structured binding declaration~(\ref{dcl.struct.bind}) whose
+a \link{structured binding declaration}{\ref{dcl.struct.bind}} whose
 \grammarterm{brace-or-equal-initializer} is type-dependent,
 
 \item
 the
 \grammarterm{identifier}
-\tcode{__func__}~(\ref{dcl.fct.def.general}), where any enclosing function is a
+\linkx{\tcode{__func__}}{\idxcode{__func__}}{\ref{dcl.fct.def.general}}, where any enclosing function is a
 template, a member of a class template, or a generic lambda,
 
 \item
@@ -4095,7 +4096,7 @@ postfix-expression \terminal{->} pseudo-destructor-name\br
 see~\ref{support.types}.\end{note}
 
 \pnum
-A class member access expression~(\ref{expr.ref}) is
+A \link{class member access expression}{\ref{expr.ref}} is
 type-dependent if
 the expression refers to a member of the current instantiation and
 the type of the referenced member is dependent, or the class member access
@@ -4213,7 +4214,7 @@ An expression of the form \tcode{\&}\grammarterm{qualified-id} where the
 instantiation is value-dependent.
 An expression of the form \tcode{\&}\grammarterm{cast-expression}
 is also value-dependent if evaluating \grammarterm{cast-expression}
-as a core constant expression~(\ref{expr.const}) succeeds and
+as a \deflinkx{core constant expression}{expression!core constant}{\ref{expr.const}} succeeds and
 the result of the evaluation refers to a templated entity
 that is an object with static or thread storage duration or a member function.
 
@@ -4367,7 +4368,7 @@ within a translation unit.
 A specialization for any template may have points of instantiation in multiple
 translation units.
 If two different points of instantiation give a template specialization
-different meanings according to the one-definition rule~(\ref{basic.def.odr}),
+different meanings according to the \link{one-definition rule}{\ref{basic.def.odr}},
 the program is ill-formed, no diagnostic required.
 
 \rSec3[temp.dep.candidate]{Candidate functions}
@@ -4381,7 +4382,7 @@ rules~(\ref{basic.lookup.unqual}, \ref{basic.lookup.argdep}) except that:
 
 \begin{itemize}
 \item
-For the part of the lookup using unqualified name lookup~(\ref{basic.lookup.unqual}),
+For the part of the lookup using \link{unqualified name lookup}{\ref{basic.lookup.unqual}},
 only function declarations
 from the template definition context are found.
 \item
@@ -4486,11 +4487,11 @@ template<> int B<>::x = 1;              // specialize for \tcode{T == int}
 \end{example}
 
 \pnum
-An instantiated template specialization can be either implicitly
-instantiated~(\ref{temp.inst}) for a given argument list or be explicitly
-instantiated~(\ref{temp.explicit}).
+An instantiated template specialization can be either \link{implicitly
+instantiated}{\ref{temp.inst}} for a given argument list or be \link{explicitly
+instantiated}{\ref{temp.explicit}}.
 A specialization is a class, function, or class member that is either
-instantiated or explicitly specialized~(\ref{temp.expl.spec}).
+instantiated or \link{explicitly specialized}{\ref{temp.expl.spec}}.
 
 \pnum
 For a given template and a given set of
@@ -4538,7 +4539,7 @@ of type
 
 \pnum
 If a function declaration acquired its function type through
-a dependent type~(\ref{temp.dep.type}) without using the syntactic form of
+a \link{dependent type}{\ref{temp.dep.type}} without using the syntactic form of
 a function declarator, the program is ill-formed.
 \begin{example}
 
@@ -4555,9 +4556,9 @@ A<function> a;      // ill-formed: would declare \tcode{A<function>::t} as a sta
 
 \pnum
 \indextext{instantiation!template implicit}%
-Unless a class template specialization has been explicitly
-instantiated~(\ref{temp.explicit}) or explicitly
-specialized~(\ref{temp.expl.spec}),
+Unless a class template specialization has been \link{explicitly
+instantiated}{\ref{temp.explicit}} or \link{explicitly
+specialized}{\ref{temp.expl.spec}},
 the class template specialization is implicitly instantiated when the
 specialization is referenced in a context that requires a completely-defined
 object type or when the completeness of the class type affects the semantics
@@ -4586,7 +4587,7 @@ void g(D<int>* p, D<char>* pp, D<double>* ppp) {
 \end{codeblock}
 \end{example}
 If a class template has been declared, but not defined,
-at the point of instantiation~(\ref{temp.point}),
+at the \link{point of instantiation}{\ref{temp.point}},
 the instantiation yields an incomplete class type~(\ref{basic.types}).
 \begin{example}
 \begin{codeblock}
@@ -4596,7 +4597,7 @@ X<char> ch;         // error: incomplete type \tcode{X<char>}
 \end{example}
 \begin{note}
 Within a template declaration,
-a local class~(\ref{class.local}) or enumeration and the members of
+a \link{local class}{\ref{class.local}} or enumeration and the members of
 a local class are never considered to be entities that can be separately
 instantiated (this includes their default arguments,
 \grammarterm{noexcept-specifier}{s}, and non-static data member
@@ -4710,7 +4711,7 @@ variable template is implicitly instantiated when the variable template is
 referenced in a context that requires the value of the default argument.
 
 \pnum
-If the function selected by overload resolution~(\ref{over.match})
+If the function selected by \link{overload resolution}{\ref{over.match}}
 can be determined without instantiating a class template definition,
 it is unspecified whether that instantiation actually takes place.
 \begin{example}
@@ -4740,8 +4741,8 @@ a declaration of the specialization is implicitly instantiated~(\ref{temp.over})
 An implementation shall not implicitly instantiate a function template,
 a variable template,
 a member template, a non-virtual member function, a member class, a
-static data member of a class template, or a substatement of a constexpr if
-statement (\ref{stmt.if}), unless such instantiation is required.
+static data member of a class template, or a substatement of a
+\deflink{constexpr if}{\ref{stmt.if}} statement, unless such instantiation is required.
 It is unspecified whether or not an implementation implicitly instantiates a
 virtual member function of a class template if the virtual member function would
 not otherwise be instantiated.
@@ -4955,8 +4956,8 @@ of that entity unless the explicit instantiation is preceded by an explicit
 specialization of the entity with the same template arguments.
 If the
 \grammarterm{declaration}
-of the explicit instantiation names an implicitly-declared special member
-function (Clause~\ref{special}), the program is ill-formed.
+of the explicit instantiation names an implicitly-declared \link{special member
+function}{Clause~\ref{special}}, the program is ill-formed.
 
 \pnum
 For a given set of template arguments, if an explicit
@@ -5036,7 +5037,7 @@ explicit instantiation declarations have the
 effect of suppressing the implicit instantiation of the entity to which they
 refer. \begin{note} The intent is that an inline function that is the
 subject of an explicit instantiation declaration will still be implicitly
-instantiated when odr-used~(\ref{basic.def.odr}) so that the body can be considered for inlining, but
+instantiated when \link{odr-used}{\ref{basic.def.odr}} so that the body can be considered for inlining, but
 that no out-of-line copy of the inline function would be generated in the
 translation unit.\end{note}
 
@@ -5045,7 +5046,7 @@ If an entity is the subject of both an explicit instantiation declaration
 and an explicit instantiation definition in the same translation unit, the
 definition shall follow the declaration. An entity that is the subject of an
 explicit instantiation declaration and that is also used
-in a way that would otherwise cause an implicit instantiation~(\ref{temp.inst})
+in a way that would otherwise cause an \link{implicit instantiation}{\ref{temp.inst}}
 in the translation unit
 shall be the subject of an explicit instantiation definition somewhere in the
 program; otherwise the program is ill-formed, no diagnostic required.
@@ -5620,12 +5621,12 @@ in a friend declaration.
 \end{itemize}
 
 \pnum
-Trailing template arguments that can be deduced~(\ref{temp.deduct}) or
+Trailing template arguments that can be \link{deduced}{\ref{temp.deduct}} or
 obtained from default
 \grammarterm{template-argument}{s}
 may be omitted from the list of explicit
 \grammarterm{template-argument}{s}.
-A trailing template parameter pack~(\ref{temp.variadic}) not otherwise deduced will be
+A trailing \deflink{template parameter pack}{\ref{temp.variadic}} not otherwise deduced will be
 deduced to an empty sequence of template arguments.
 If all of the template arguments can be deduced, they may all be omitted;
 in this case, the empty template argument list
@@ -5731,7 +5732,7 @@ argument list for these function templates.
 
 \pnum
 \begin{note}
-For simple function names, argument dependent lookup~(\ref{basic.lookup.argdep})
+For simple function names, \link{argument dependent lookup}{\ref{basic.lookup.argdep}}
 applies even when the function name is not visible within the scope of the call.
 This is because the call still has the syntactic form of a function call~(\ref{basic.lookup.unqual}).
 But when a function template with explicit template arguments is used,
@@ -6079,7 +6080,7 @@ or array type.
 
 \item
 Attempting to create a function type in which a parameter type or the return type is an
-abstract class type~(\ref{class.abstract}).
+\link{abstract class type}{\ref{class.abstract}}.
 \end{itemize}
 \end{note}
 
@@ -6088,7 +6089,7 @@ abstract class type~(\ref{class.abstract}).
 In the following example,
 assuming a \tcode{signed char}
 cannot represent the value 1000,
-a narrowing conversion~(\ref{dcl.init.list})
+a \deflink{narrowing conversion}{\ref{dcl.init.list}}
 would be required
 to convert the \grammarterm{template-argument}
 of type \tcode{int} to \tcode{signed char},
@@ -6188,8 +6189,8 @@ is not a reference type:
 \item
 If
 \tcode{A}
-is an array type, the pointer type produced by the array-to-pointer
-standard conversion~(\ref{conv.array}) is used in place of
+is an array type, the pointer type produced by the \link{array-to-pointer
+standard conversion}{\ref{conv.array}} is used in place of
 \tcode{A}
 for type deduction;
 otherwise,
@@ -6197,7 +6198,7 @@ otherwise,
 If
 \tcode{A}
 is a function type, the pointer type produced by the
-function-to-pointer standard conversion~(\ref{conv.func}) is used in place
+\link{function-to-pointer standard conversion}{\ref{conv.func}} is used in place
 of
 \tcode{A}
 for type
@@ -6291,8 +6292,8 @@ The transformed \tcode{A}
 can be another pointer or pointer to member type that can be converted
 to the deduced
 \tcode{A}
-via a function pointer conversion~(\ref{conv.fctptr}) and/or
-qualification conversion~(\ref{conv.qual}).
+via a \link{function pointer conversion}{\ref{conv.fctptr}} and/or
+\link{qualification conversion}{\ref{conv.qual}}.
 
 \item
 If
@@ -6416,7 +6417,7 @@ will be checked during overload resolution.
 
 \pnum
 Template arguments can be deduced from the type specified when taking
-the address of an overloaded function~(\ref{over.over}).
+the address of an \link{overloaded function}{\ref{over.over}}.
 The function template's function type and the specified type
 are used as the types of
 \tcode{P}
@@ -6426,7 +6427,7 @@ and the deduction is done as
 described in~\ref{temp.deduct.type}.
 
 \pnum
-A placeholder type~(\ref{dcl.spec.auto}) in the return type of a
+A \deflink{placeholder type}{\ref{dcl.spec.auto}} in the return type of a
 function template is a non-deduced context. If template argument
 deduction succeeds for such a function, the return type is determined
 from instantiation of the function body.
@@ -6460,7 +6461,7 @@ is not a reference type:
 If
 \tcode{P}
 is an array type, the pointer type produced by the
-array-to-pointer standard conversion~(\ref{conv.array}) is used in place of
+\link{array-to-pointer standard conversion}{\ref{conv.array}} is used in place of
 \tcode{P}
 for type
 deduction; otherwise,
@@ -6468,7 +6469,7 @@ deduction; otherwise,
 If
 \tcode{P}
 is a function type, the pointer type produced by the
-function-to-pointer standard conversion~(\ref{conv.func}) is used in place of
+\link{function-to-pointer standard conversion}{\ref{conv.func}} is used in place of
 \tcode{P}
 for
 type deduction; otherwise,
@@ -6600,7 +6601,7 @@ after a function has been selected.}
 In the context of a call to a conversion function, the return types of
 the conversion function templates are used.
 \item
-In other contexts~(\ref{temp.func.order}) the function template's function
+In \link{other contexts}{\ref{temp.func.order}} the function template's function
 type is used.
 \end{itemize}
 
@@ -7089,7 +7090,7 @@ of $\texttt{P}_i$ is compared with each remaining argument in the
 template argument list of \tcode{A}. Each comparison deduces
 template arguments for subsequent positions in the template parameter
 packs expanded by $\texttt{P}_i$.
-During partial ordering~(\ref{temp.deduct.partial}), if $\texttt{A}_i$ was
+During \link{partial ordering}{\ref{temp.deduct.partial}}, if $\texttt{A}_i$ was
 originally a pack expansion:
 
 \begin{itemize}
@@ -7150,7 +7151,7 @@ each remaining parameter type in the parameter-type-list
 of \tcode{A}. Each comparison deduces template arguments for
 subsequent positions in the template parameter packs expanded by the
 function parameter pack.
-During partial ordering~(\ref{temp.deduct.partial}), if $\texttt{A}_i$ was
+During \link{partial ordering}{\ref{temp.deduct.partial}}, if $\texttt{A}_i$ was
 originally a function parameter pack:
 
 \begin{itemize}
@@ -7436,8 +7437,8 @@ int fv = f(g);                  // OK; \tcode{Types} contains \tcode{int}, \tcod
 In a declaration whose \grammarterm{declarator-id} refers to a specialization
 of a function template, template argument deduction is performed to identify
 the specialization to which the declaration refers. Specifically, this is done
-for explicit instantiations~(\ref{temp.explicit}), explicit specializations~(\ref{temp.expl.spec}),
-and certain friend declarations~(\ref{temp.friend}). This is also done to
+for \link{explicit instantiations}{\ref{temp.explicit}}, \link{explicit specializations}{\ref{temp.expl.spec}},
+and certain \link{friend declarations}{\ref{temp.friend}}. This is also done to
 determine whether a deallocation function template specialization matches a placement
 \tcode{operator new}~(\ref{basic.stc.dynamic.deallocation},~\ref{expr.new}).
 In all these cases, \tcode{P} is the type of the function template being considered
@@ -7460,8 +7461,8 @@ program is ill-formed.
 A function template can be overloaded either by (non-template) functions of its
 name or by (other) function templates of the same name.
 When a call to that name is written (explicitly, or implicitly using the
-operator notation), template argument deduction~(\ref{temp.deduct})
-and checking of any explicit template arguments~(\ref{temp.arg}) are performed
+operator notation), \link{template argument deduction}{\ref{temp.deduct}}
+and checking of any explicit \link{template arguments}{\ref{temp.arg}} are performed
 for each function template to find the template argument values (if any) that
 can be used with that function template to instantiate a function template
 specialization that can be invoked with the call arguments.
@@ -7593,9 +7594,9 @@ is present in some translation unit.
 Deduction guides are used
 when a \grammarterm{template-name} appears
 as a type specifier
-for a deduced class type~(\ref{dcl.type.class.deduct}).
+for a \link{deduced class type}{\ref{dcl.type.class.deduct}}.
 Deduction guides are not found by name lookup.
-Instead, when performing class template argument deduction~(\ref{over.match.class.deduct}),
+Instead, when performing class template \link{argument deduction}{\ref{over.match.class.deduct}},
 any deduction guides declared for the class template are considered.
 
 \begin{bnf}
diff --git a/source/threads.tex b/source/threads.tex
index 349bd42..13359f8 100644
--- a/source/threads.tex
+++ b/source/threads.tex
@@ -5,7 +5,7 @@
 
 \pnum
 The following subclauses describe components to create and manage
-threads~(\ref{intro.multithread}), perform mutual exclusion, and communicate conditions
+\deflinkx{threads}{thread}{\ref{intro.multithread}}, perform mutual exclusion, and communicate conditions
 and values
 between threads, as summarized in Table~\ref{tab:thread.lib.summary}.
 
@@ -32,7 +32,7 @@ the template argument shall return a value that is convertible to \tcode{bool}.
 
 \pnum
 Some functions described in this Clause are specified to throw exceptions of type
-\tcode{system_error}~(\ref{syserr.syserr}). Such exceptions shall be thrown if
+\link{\tcode{system_error}}{\ref{syserr.syserr}}. Such exceptions shall be thrown if
 any of the function's error conditions is detected or
 a call to
 an operating system or other underlying API results in an error that prevents the
@@ -129,7 +129,7 @@ and hardware. The finest resolution provided by an implementation is called the
 
 \pnum
 Implementation-provided clocks that are used for these functions shall meet the
-\tcode{TrivialClock} requirements (\ref{time.clock.req}).
+\link{\tcode{TrivialClock}}{\ref{time.clock.req}} requirements.
 
 \pnum
 A function that takes an argument which specifies a timeout will throw if,
@@ -227,8 +227,8 @@ exception is thrown then a lock shall not have been acquired for the current exe
 A type \tcode{L} meets the \tcode{TimedLockable} requirements if it meets the \tcode{Lockable}
 requirements and the following expressions are well-formed and have the specified semantics
 (\tcode{m} denotes a value of type \tcode{L}, \tcode{rel_time} denotes a value of an
-instantiation of \tcode{duration}~(\ref{time.duration}), and \tcode{abs_time} denotes a value
-of an instantiation of \tcode{time_point}~(\ref{time.point})).
+instantiation of \link{\tcode{duration}}{\ref{time.duration}}, and \tcode{abs_time} denotes a value
+of an instantiation of \link{\tcode{time_point}}{\ref{time.point}}).
 
 \begin{itemdecl}
 m.try_lock_for(rel_time)
@@ -396,7 +396,7 @@ equal to the \tcode{thread::id} object of any \tcode{thread} object that
 does not represent threads of execution.
 
 \pnum
-\tcode{thread::id} shall be a trivially copyable class (Clause~\ref{class}).
+\tcode{thread::id} shall be a \deflink{trivially copyable class}{Clause~\ref{class}}.
 The library may reuse the value of a \tcode{thread::id} of a terminated thread that can no longer be joined.
 
 \pnum
@@ -654,7 +654,7 @@ void join();
 \effects\ Blocks until the thread represented by \tcode{*this} has completed.
 
 \pnum
-\sync The completion of the thread represented by \tcode{*this} synchronizes with~(\ref{intro.multithread})
+\sync The completion of the thread represented by \tcode{*this} \deflinkx{synchronizes with}{synchronize with}{\ref{intro.multithread}}
 the corresponding successful
 \tcode{join()} return. \begin{note} Operations on
 \tcode{*this} are not synchronized. \end{note}
@@ -878,7 +878,7 @@ namespace std {
 
 \pnum
 A mutex object facilitates protection against data races and allows safe synchronization of
-data between execution agents~(\ref{thread.req.lockable}).
+data between \deflinkx{execution agents}{execution agent}{\ref{thread.req.lockable}}.
 An execution agent \term{owns} a mutex from the time it successfully calls one of the
 lock functions until it calls unlock. Mutexes can be either recursive or non-recursive, and can
 grant simultaneous ownership to one or many execution agents. Both
@@ -894,7 +894,7 @@ They shall meet the requirements set out in this section. In this description, \
 denotes an object of a mutex type.
 
 \pnum
-The mutex types shall meet the \tcode{Lockable} requirements~(\ref{thread.req.lockable.req}).
+The mutex types shall meet the \link{\tcode{Lockable}}{\ref{thread.req.lockable.req}} requirements.
 
 \pnum
 The mutex types shall be \tcode{DefaultConstructible} and \tcode{Destructible}. If
@@ -917,7 +917,7 @@ The implementation shall provide lock and unlock operations, as described below.
 For purposes of determining the existence of a data race, these behave as
 atomic operations~(\ref{intro.multithread}). The lock and unlock operations on
 a single mutex shall appear to occur in a single total order. \begin{note} This
-can be viewed as the modification order~(\ref{intro.multithread}) of the
+can be viewed as the \deflink{modification order}{\ref{intro.multithread}} of the
 mutex. \end{note}
 \begin{note} Construction and
 destruction of an object of a mutex type need not be thread-safe; other
@@ -944,7 +944,7 @@ thread does not own the mutex.
 
 \pnum
 \sync Prior \tcode{unlock()} operations on the same object shall
-\term{synchronize with}~(\ref{intro.multithread}) this operation.
+\deflink{synchronize with}{\ref{intro.multithread}} this operation.
 
 \pnum
 \throws \tcode{system_error} when
@@ -989,7 +989,7 @@ thread, otherwise \tcode{false}.
 
 \pnum
 \sync If \tcode{try_lock()} returns \tcode{true}, prior \tcode{unlock()} operations
-on the same object \term{synchronize with}~(\ref{intro.multithread}) this operation.
+on the same object \deflink{synchronize with}{\ref{intro.multithread}} this operation.
 \begin{note} Since \tcode{lock()} does not synchronize with a failed subsequent
 \tcode{try_lock()}, the visibility rules are weak enough that little would be
 known about the state after a failure, even in the absence of spurious failures. \end{note}
@@ -1012,7 +1012,7 @@ The expression \tcode{m.unlock()} shall be well-formed and have the following se
 \returntype \tcode{void}.
 
 \pnum
-\sync This operation synchronizes with~(\ref{intro.multithread}) subsequent
+\sync This operation \deflinkx{synchronizes with}{synchronize with}{\ref{intro.multithread}} subsequent
 lock operations that obtain ownership on the same object.
 
 \pnum
@@ -1060,9 +1060,9 @@ contains a mutex that is used to protect the reference count.
 \end{note}
 
 \pnum
-The class \tcode{mutex} shall satisfy all of the mutex
-requirements~(\ref{thread.mutex.requirements}). It shall be a standard-layout
-class (Clause~\ref{class}).
+The class \tcode{mutex} shall satisfy all of the \link{mutex
+requirements}{\ref{thread.mutex.requirements}}. It shall be a
+\deflink{standard-layout class}{Clause~\ref{class}}.
 
 \pnum
 \begin{note} A program may deadlock if the thread that owns a \tcode{mutex} object calls
@@ -1104,9 +1104,9 @@ thread to acquire ownership of that object will fail (for \tcode{try_lock()}) or
 (for \tcode{lock()}) until the first thread has completely released ownership.
 
 \pnum
-The class \tcode{recursive_mutex} shall satisfy all of the mutex
-requirements~(\ref{thread.mutex.requirements}). It shall be a standard-layout
-class (Clause~\ref{class}).
+The class \tcode{recursive_mutex} shall satisfy all of the \link{mutex
+requirements}{\ref{thread.mutex.requirements}}. It shall be a
+\deflink{standard-layout class}{Clause~\ref{class}}.
 
 \pnum
 A thread that owns a \tcode{recursive_mutex} object may acquire additional levels of
@@ -1135,13 +1135,13 @@ The \defn{timed mutex types} are the standard library types \tcode{timed_mutex},
 meet the requirements set out below.
 In this description, \tcode{m} denotes an object of a mutex type,
 \tcode{rel_time} denotes an object of an
-instantiation of \tcode{duration}~(\ref{time.duration}), and \tcode{abs_time} denotes an
+instantiation of \link{\tcode{duration}}{\ref{time.duration}}, and \tcode{abs_time} denotes an
 object of an
-instantiation of \tcode{time_point}~(\ref{time.point}).
+instantiation of \link{\tcode{time_point}}{\ref{time.point}}.
 
 \pnum
-The timed mutex types shall meet the \tcode{TimedLockable}
-requirements~(\ref{thread.req.lockable.timed}).
+The timed mutex types shall meet the
+\link{\tcode{TimedLockable}}{\ref{thread.req.lockable.timed}} requirements.
 
 \pnum
 The expression \tcode{m.try_lock_for(rel_time)} shall be well-formed and have the
@@ -1172,7 +1172,7 @@ lock is available, but implementations are expected to make a strong effort to d
 
 \pnum
 \sync If \tcode{try_lock_for()} returns \tcode{true}, prior \tcode{unlock()} operations
-on the same object \term{synchronize with}~(\ref{intro.multithread}) this operation.
+on the same object \deflink{synchronize with}{\ref{intro.multithread}} this operation.
 
 \pnum\throws Timeout-related exceptions~(\ref{thread.req.timing}).
 \end{itemdescr}
@@ -1204,7 +1204,7 @@ strong effort to do so. \end{note}
 
 \pnum
 \sync If \tcode{try_lock_until()} returns \tcode{true}, prior \tcode{unlock()}
-operations on the same object \term{synchronize with}~(\ref{intro.multithread})
+operations on the same object \deflink{synchronize with}{\ref{intro.multithread}}
 this operation.
 
 \pnum\throws Timeout-related exceptions~(\ref{thread.req.timing}).
@@ -1247,9 +1247,9 @@ call to \tcode{try_lock_for()} or \tcode{try_lock_until()} times out (having
 failed to obtain ownership).
 
 \pnum
-The class \tcode{timed_mutex} shall satisfy all of the timed mutex
-requirements~(\ref{thread.timedmutex.requirements}). It shall be a standard-layout
-class (Clause~\ref{class}).
+The class \tcode{timed_mutex} shall satisfy all of the \link{timed mutex
+requirements}{\ref{thread.timedmutex.requirements}}. It shall be a
+\deflink{standard-layout class}{Clause~\ref{class}}.
 
 \pnum
 The behavior of a program is undefined if:
@@ -1298,8 +1298,8 @@ ownership or the call to \tcode{try_lock_for()} or \tcode{try_lock_until()}
 times out (having failed to obtain ownership).
 
 \pnum
-The class \tcode{recursive_timed_mutex} shall satisfy all of the timed mutex
-requirements~(\ref{thread.timedmutex.requirements}). It shall be a standard-layout
+The class \tcode{recursive_timed_mutex} shall satisfy all of the \link{timed mutex
+requirements}{\ref{thread.timedmutex.requirements}}. It shall be a standard-layout
 class (Clause~\ref{class}).
 
 \pnum
@@ -1329,8 +1329,8 @@ The behavior of a program is undefined if:
 
 \pnum
 The standard library types \tcode{shared_mutex} and \tcode{shared_timed_mutex}
-are \defn{shared mutex types}. Shared mutex types shall meet the requirements of
-mutex types~(\ref{thread.mutex.requirements.mutex}), and additionally
+are \defn{shared mutex types}. Shared mutex types shall meet the \link{requirements of
+mutex types}{\ref{thread.mutex.requirements.mutex}}, and additionally
 shall meet the requirements set out below. In this description,
 \tcode{m} denotes an object of a shared mutex type.
 
@@ -1367,7 +1367,7 @@ If an exception is thrown then a shared lock shall not have been acquired for th
 \returntype \tcode{void}.
 
 \pnum
-\sync Prior \tcode{unlock()} operations on the same object shall synchronize with~(\ref{intro.multithread}) this operation.
+\sync Prior \tcode{unlock()} operations on the same object shall \deflink{synchronize with}{\ref{intro.multithread}} this operation.
 
 \pnum
 \throws \tcode{system_error} when an exception is required~(\ref{thread.req.exception}).
@@ -1394,7 +1394,7 @@ The expression \tcode{m.unlock_shared()} shall be well-formed and have the follo
 \returntype \tcode{void}.
 
 \pnum
-\sync This operation synchronizes with~(\ref{intro.multithread}) subsequent
+\sync This operation \deflinkx{synchronizes with}{synchronize with}{\ref{intro.multithread}} subsequent
 \tcode{lock()} operations that obtain ownership on the same object.
 
 \pnum
@@ -1423,7 +1423,7 @@ otherwise.
 
 \pnum
 \sync If \tcode{try_lock_shared()} returns \tcode{true}, prior \tcode{unlock()}
-operations on the same object synchronize with~(\ref{intro.multithread}) this
+operations on the same object \deflink{synchronize with}{\ref{intro.multithread}} this
 operation.
 
 \pnum
@@ -1465,7 +1465,7 @@ with shared ownership semantics.
 
 \pnum
 The class \tcode{shared_mutex} shall satisfy all of the
-shared mutex requirements~(\ref{thread.sharedmutex.requirements}).
+\link{shared mutex requirements}{\ref{thread.sharedmutex.requirements}}.
 It shall be a standard-layout class (Clause~\ref{class}).
 
 \pnum
@@ -1484,14 +1484,14 @@ The behavior of a program is undefined if:
 \pnum
 The standard library type \tcode{shared_timed_mutex} is a
 \defn{shared timed mutex type}. Shared timed mutex types shall meet the requirements of
-timed mutex types~(\ref{thread.timedmutex.requirements}),
-shared mutex types~(\ref{thread.sharedmutex.requirements}), and additionally
+\link{timed mutex types}{\ref{thread.timedmutex.requirements}},
+\link{shared mutex types}{\ref{thread.sharedmutex.requirements}}, and additionally
 shall meet the requirements set out below. In this description,
 \tcode{m} denotes an object of a shared timed mutex type,
 \tcode{rel_type} denotes an object of an instantiation of
-\tcode{duration}~(\ref{time.duration}), and
+\link{\tcode{duration}}{\ref{time.duration}}, and
 \tcode{abs_time} denotes an object of an instantiation of
-\tcode{time_point}~(\ref{time.point}).
+\link{\tcode{time_point}}{\ref{time.point}}.
 
 \pnum
 The expression \tcode{m.try_lock_shared_for(rel_time)} shall be well-formed and
@@ -1607,7 +1607,7 @@ ownership semantics.
 
 \pnum
 The class \tcode{shared_timed_mutex} shall satisfy all of the
-shared timed mutex requirements~(\ref{thread.sharedtimedmutex.requirements}).
+\link{shared timed mutex requirements}{\ref{thread.sharedtimedmutex.requirements}}.
 It shall be a standard-layout class (Clause~\ref{class}).
 
 \pnum
@@ -1681,11 +1681,11 @@ namespace std {
 \pnum
 An object of type \tcode{lock_guard} controls the ownership of a lockable object
 within a scope. A \tcode{lock_guard} object maintains ownership of a lockable
-object throughout the \tcode{lock_guard} object's lifetime~(\ref{basic.life}).
+object throughout the \tcode{lock_guard} object's \deflink{lifetime}{\ref{basic.life}}.
 The behavior of a program is undefined if the lockable object referenced by
 \tcode{pm} does not exist for the entire lifetime of the \tcode{lock_guard}
-object. The supplied \tcode{Mutex} type shall meet the \tcode{BasicLockable}
-requirements~(\ref{thread.req.lockable.basic}).
+object. The supplied \tcode{Mutex} type shall meet the
+\link{\tcode{BasicLockable}}{\ref{thread.req.lockable.basic}} requirements.
 
 \indexlibrary{\idxcode{lock_guard}!constructor}%
 \begin{itemdecl}
@@ -1760,15 +1760,15 @@ namespace std {
 \pnum
 An object of type \tcode{scoped_lock} controls the ownership of lockable objects
 within a scope. A \tcode{scoped_lock} object maintains ownership of lockable
-objects throughout the \tcode{scoped_lock} object's lifetime~(\ref{basic.life}).
+objects throughout the \tcode{scoped_lock} object's \deflink{lifetime}{\ref{basic.life}}.
 The behavior of a program is undefined if the lockable objects referenced by
 \tcode{pm} do not exist for the entire lifetime of the \tcode{scoped_lock}
 object.
 When \tcode{sizeof...(MutexTypes)} is \tcode{1},
 the supplied \tcode{Mutex} type
-shall meet the \tcode{BasicLockable} requirements~(\ref{thread.req.lockable.basic}).
+shall meet the \link{\tcode{BasicLockable}}{\ref{thread.req.lockable.basic}} requirements.
 Otherwise, each of the mutex types
-shall meet the \tcode{Lockable} requirements~(\ref{thread.req.lockable.req}).
+shall meet the \link{\tcode{Lockable}}{\ref{thread.req.lockable.req}} requirements.
 
 \indexlibrary{\idxcode{scoped_lock}!constructor}%
 \begin{itemdecl}
@@ -1882,16 +1882,16 @@ acquisition, to another \tcode{unique_lock} object. Objects of type \tcode{uniqu
 copyable but are movable. The behavior of a program is undefined if the contained pointer
 \tcode{pm} is not null and the lockable object pointed
 to by \tcode{pm} does not exist for the entire remaining
-lifetime~(\ref{basic.life}) of the \tcode{unique_lock} object. The supplied
-\tcode{Mutex} type shall meet the \tcode{BasicLockable}
-requirements~(\ref{thread.req.lockable.basic}).
+\deflink{lifetime}{\ref{basic.life}} of the \tcode{unique_lock} object. The supplied
+\tcode{Mutex} type shall meet the
+\link{\tcode{BasicLockable}}{\ref{thread.req.lockable.basic}} requirements.
 
 \pnum
 \begin{note} \tcode{unique_lock<Mutex>} meets the \tcode{BasicLockable} requirements. If \tcode{Mutex}
-meets the \tcode{Lockable} requirements~(\ref{thread.req.lockable.req}),
+meets the \link{\tcode{Lockable}}{\ref{thread.req.lockable.req}} requirements,
 \tcode{unique_lock<Mutex>} also meets the \tcode{Lockable} requirements;
 if \tcode{Mutex}
-meets the \tcode{TimedLockable} requirements~(\ref{thread.req.lockable.timed}),
+meets the \link{\tcode{TimedLockable}}{\ref{thread.req.lockable.timed}} requirements,
 \tcode{unique_lock<Mutex>} also meets the \tcode{TimedLockable} requirements. \end{note}
 
 \rSec4[thread.lock.unique.cons]{\tcode{unique_lock} constructors, destructor, and assignment}
@@ -1946,8 +1946,8 @@ unique_lock(mutex_type& m, try_to_lock_t);
 \begin{itemdescr}
 \pnum
 \requires
-The supplied \tcode{Mutex} type shall meet the \tcode{Lockable}
-requirements~(\ref{thread.req.lockable.req}).
+The supplied \tcode{Mutex} type shall meet the
+\link{\tcode{Lockable}}{\ref{thread.req.lockable.req}} requirements.
 If \tcode{mutex_type} is not a recursive mutex the calling thread does not own the mutex.
 
 \pnum
@@ -1987,7 +1987,7 @@ template <class Clock, class Duration>
 \pnum
 \requires If \tcode{mutex_type} is not a recursive mutex the calling thread
 does not own the mutex. The supplied \tcode{Mutex} type shall meet the
-\tcode{TimedLockable} requirements~(\ref{thread.req.lockable.timed}).
+\link{\tcode{TimedLockable}}{\ref{thread.req.lockable.timed}} requirements.
 
 \pnum
 \effects Constructs an object of type \tcode{unique_lock} and calls \tcode{m.try_lock_until(abs_time)}.
@@ -2007,7 +2007,7 @@ template <class Rep, class Period>
 \begin{itemdescr}
 \pnum
 \requires If \tcode{mutex_type} is not a recursive mutex the calling thread does not own the mutex.
-The supplied \tcode{Mutex} type shall meet the \tcode{TimedLockable} requirements~(\ref{thread.req.lockable.timed}).
+The supplied \tcode{Mutex} type shall meet the \link{\tcode{TimedLockable}}{\ref{thread.req.lockable.timed}} requirements.
 
 \pnum
 \effects Constructs an object of type \tcode{unique_lock} and calls \tcode{m.try_lock_for(rel_time)}.
@@ -2087,8 +2087,8 @@ bool try_lock();
 
 \begin{itemdescr}
 \pnum
-\requires The supplied \tcode{Mutex} shall meet the \tcode{Lockable}
-requirements~(\ref{thread.req.lockable.req}).
+\requires The supplied \tcode{Mutex} shall meet the
+\link{\tcode{Lockable}}{\ref{thread.req.lockable.req}} requirements.
 
 \pnum
 \effects As if by \tcode{pm->try_lock()}.
@@ -2121,8 +2121,8 @@ template <class Clock, class Duration>
 
 \begin{itemdescr}
 \pnum
-\requires The supplied \tcode{Mutex} type shall meet the \tcode{TimedLockable}
-requirements~(\ref{thread.req.lockable.timed}).
+\requires The supplied \tcode{Mutex} type shall meet the
+\link{\tcode{TimedLockable}}{\ref{thread.req.lockable.timed}} requirements.
 
 \pnum
 \effects As if by \tcode{pm->try_lock_until(abs_time)}.
@@ -2155,7 +2155,7 @@ template <class Rep, class Period>
 
 \begin{itemdescr}
 \pnum
-\requires The supplied \tcode{Mutex} type shall meet the \tcode{TimedLockable} requirements~(\ref{thread.req.lockable.timed}).
+\requires The supplied \tcode{Mutex} type shall meet the \link{\tcode{TimedLockable}}{\ref{thread.req.lockable.timed}} requirements.
 
 \pnum
 \effects As if by \tcode{pm->try_lock_for(rel_time)}.
@@ -2327,9 +2327,9 @@ acquisition, to another \tcode{shared_lock} object. Objects of type
 \tcode{shared_lock} are not copyable but are movable. The behavior of a program
 is undefined if the contained pointer \tcode{pm} is not null and the lockable
 object pointed to by \tcode{pm} does not exist for the entire remaining
-lifetime~(\ref{basic.life}) of the \tcode{shared_lock} object. The supplied
-\tcode{Mutex} type shall meet the shared mutex
-requirements~(\ref{thread.sharedtimedmutex.requirements}).
+\deflink{lifetime}{\ref{basic.life}} of the \tcode{shared_lock} object. The supplied
+\tcode{Mutex} type shall meet the \link{shared mutex
+requirements}{\ref{thread.sharedtimedmutex.requirements}}.
 
 \pnum
 \begin{note} \tcode{shared_lock<Mutex>} meets the \tcode{TimedLockable}
@@ -2701,10 +2701,11 @@ mutex_type* mutex() const noexcept;
 
 \rSec2[thread.lock.algorithm]{Generic locking algorithms}
 
-\indexlibrary{\idxcode{try_lock}}%
+\begin{indexed}{\indexlibrary{\idxcode{try_lock}}}
 \begin{itemdecl}
 template <class L1, class L2, class... L3> int try_lock(L1&, L2&, L3&...);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2725,10 +2726,11 @@ otherwise a zero-based index value that indicates the argument for which \tcode{
 returned \tcode{false}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{lock}}%
+\begin{indexed}{\indexlibrary{\idxcode{lock}}}
 \begin{itemdecl}
 template <class L1, class L2, class... L3> void lock(L1&, L2&, L3&...);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -2817,7 +2819,7 @@ earlier returning execution. \end{note}
 
 \pnum
 \sync For any given \tcode{once_flag}: all active executions occur in a total
-order; completion of an active execution synchronizes with~(\ref{intro.multithread})
+order; completion of an active execution \deflinkx{synchronizes with}{synchronize with}{\ref{intro.multithread}}
 the start of the next one in this total order; and the returning execution
 synchronizes with the return from all passive executions.
 
@@ -3341,8 +3343,9 @@ exceptions~(\ref{thread.req.timing}) or any exception thrown by \tcode{pred}.
 \rSec2[thread.condition.condvarany]{Class \tcode{condition_variable_any}}
 
 \pnum
-A \tcode{Lock} type shall meet the \tcode{BasicLockable}
-requirements~(\ref{thread.req.lockable.basic}). \begin{note} All of the standard
+A \tcode{Lock} type shall meet the
+\link{\tcode{BasicLockable}}{\ref{thread.req.lockable.basic}} requirements.
+\begin{note} All of the standard
 mutex types meet this requirement. If a \tcode{Lock} type other than one of the
 standard mutex types or a \tcode{unique_lock} wrapper for a standard mutex type
 is used with \tcode{condition_variable_any}, the user must ensure that any
@@ -3692,7 +3695,7 @@ namespace std {
 \end{codeblock}
 
 \pnum
-The \tcode{enum} type \tcode{launch} is a bitmask type~(\ref{bitmask.types}) with
+The \tcode{enum} type \tcode{launch} is a \link{bitmask type}{\ref{bitmask.types}} with
 elements \tcode{launch::async} and \tcode{launch::deferred}.
 \begin{note} Implementations can provide bitmasks to specify restrictions on task
 interaction by functions launched by \tcode{async()} applicable to a
@@ -3877,25 +3880,24 @@ the state object.
 
 \pnum
 Calls to functions that successfully set the stored result of a shared
-state synchronize
-with~(\ref{intro.multithread}) calls to functions
+state \deflink{synchronize with}{\ref{intro.multithread}} calls to functions
 successfully detecting the ready state resulting from that setting.
 The storage of the result
 (whether normal or exceptional) into the shared state
-synchronizes with~(\ref{intro.multithread})
+\deflinkx{synchronizes with}{synchronize with}{\ref{intro.multithread}}
 the successful return from a call to a waiting function on the shared state.
 
 \pnum
 Some functions (e.g., \tcode{promise::set_value_at_thread_exit}) delay making
 the shared state ready until the calling thread exits. The destruction of
-each of that thread's objects with thread storage duration~(\ref{basic.stc.thread})
+each of that thread's objects with \link{thread storage duration}{\ref{basic.stc.thread}}
 is sequenced before making that shared state ready.
 
 \pnum
-Access to the result of the same shared state may conflict~(\ref{intro.multithread}).
+Access to the result of the same shared state may \deflink{conflict}{\ref{intro.multithread}}.
 \begin{note} This explicitly specifies that the result of the shared state is
-visible in the objects that reference this state in the sense of data race
-avoidance~(\ref{res.on.data.races}). For example, concurrent accesses through
+visible in the objects that reference this state in the sense of \link{data race
+avoidance}{\ref{res.on.data.races}}. For example, concurrent accesses through
 references returned by \tcode{shared_future::get()}~(\ref{futures.shared_future})
 must either use read-only operations or provide additional synchronization.
 \end{note}
@@ -3959,7 +3961,7 @@ template <class R, class Alloc>
 
 \begin{itemdescr}
 \pnum
-\requires \tcode{Alloc} shall be an Allocator~(\ref{allocator.requirements}).
+\requires \tcode{Alloc} shall be an \link{Allocator}{\ref{allocator.requirements}}.
 \end{itemdescr}
 
 
@@ -4196,8 +4198,8 @@ The class template \tcode{future} defines a type for asynchronous return objects
 do not share their shared state with other asynchronous return objects.
 A default-constructed \tcode{future} object has no
 shared state. A \tcode{future} object with shared state can be created by
-functions on asynchronous providers~(\ref{futures.state}) or by the move constructor
-and shares its shared state with
+functions on \deflinkx{asynchronous providers}{asynchronous provider}{\ref{futures.state}}
+or by the move constructor and shares its shared state with
 the original asynchronous provider. The result (value or exception) of
 a \tcode{future} object
 can be
@@ -4486,7 +4488,7 @@ object has no shared state. A \tcode{shared_future} object with
 shared state can
 be created
 by conversion from a \tcode{future} object and shares its shared state with the
-original asynchronous provider~(\ref{futures.state}) of the shared state.
+original \deflink{asynchronous provider}{\ref{futures.state}} of the shared state.
 The result (value or exception) of a \tcode{shared_future} object
 can be set by
 calling a respective function on an
@@ -4899,12 +4901,12 @@ Regardless of the provided \tcode{policy} argument,
 \begin{itemize}
 \item
 the invocation of \tcode{async}
-synchronizes with~(\ref{intro.multithread}) the invocation of \tcode{f}. \begin{note}
+\deflinkx{synchronizes with}{synchronize with}{\ref{intro.multithread}} the invocation of \tcode{f}. \begin{note}
 This statement applies even when the corresponding \tcode{future} object is moved to
 another thread. \end{note}; and
 
 \item
-the completion of the function \tcode{f} is sequenced before~(\ref{intro.multithread}) the
+the completion of the function \tcode{f} is sequenced before~(\ref{intro.multithread}) the % todo
 shared state is made ready. \begin{note} \tcode{f} might not be called at all,
 so its completion might never happen. \end{note}
 \end{itemize}
@@ -4920,7 +4922,7 @@ out~(\ref{thread.thread.member});
 
 \item
 the associated thread completion
-synchronizes with~(\ref{intro.multithread})
+\deflinkx{synchronizes with}{synchronize with}{\ref{intro.multithread}}
 the return from
 the first function
 that successfully detects the ready status of the shared state or
@@ -5257,5 +5259,5 @@ template <class R, class Alloc>
 
 \begin{itemdescr}
 \pnum
-\requires \tcode{Alloc} shall be an Allocator~(\ref{allocator.requirements}).
+\requires \tcode{Alloc} shall be an \link{Allocator}{\ref{allocator.requirements}}.
 \end{itemdescr}
diff --git a/source/utilities.tex b/source/utilities.tex
index e6d2df0..8e1849f 100644
--- a/source/utilities.tex
+++ b/source/utilities.tex
@@ -166,7 +166,7 @@ namespace std {
     explicit piecewise_construct_t() = default;
   };
   inline constexpr piecewise_construct_t piecewise_construct{};
-  template <class... Types> class tuple;        // defined in \tcode{<tuple>} (\ref{tuple.syn})
+  template <class... Types> class tuple;        // defined in \link{\tcode{<tuple>}}{\ref{tuple.syn}}
 
   // in-place construction
   struct in_place_t {
@@ -183,19 +183,13 @@ namespace std {
       explicit in_place_index_t() = default;
     };
   template <size_t I> inline constexpr in_place_index_t<I> in_place_index{};
-@
-\indexlibrary{\idxcode{chars_format}}%
-\indexlibrarymember{scientific}{chars_format}%
-\indexlibrarymember{fixed}{chars_format}%
-\indexlibrarymember{hex}{chars_format}%
-\indexlibrarymember{general}{chars_format}%
-@
+
   // floating-point format for primitive numerical conversion
-  enum class chars_format {
-    scientific = @\unspec@,
-    fixed = @\unspec@,
-    hex = @\unspec@,
-    general = fixed | scientific
+  enum class @\libentity{chars_format}@ {
+    @\libmember{scientific}{chars_format}@ = @\unspec@,
+    @\libmember{fixed}{chars_format}@ = @\unspec@,
+    @\libmember{hex}{chars_format}@ = @\unspec@,
+    @\libmember{general}{chars_format}@ = fixed | scientific
   };
 @
 \indexlibrary{\idxcode{to_chars_result}}%
@@ -257,7 +251,7 @@ and various function templates that operate on \tcode{pair} objects.
 
 \pnum
 The type \tcode{chars_format}
-is a bitmask type~(\ref{bitmask.types})
+is a \link{bitmask type}{\ref{bitmask.types}}
 with elements
 \tcode{scientific},
 \tcode{fixed},
@@ -278,7 +272,7 @@ template <class T> bool operator!=(const T& x, const T& y);
 \begin{itemdescr}
 \pnum
 \requires
-Type \tcode{T} is \tcode{EqualityComparable} (Table~\ref{tab:equalitycomparable}).
+Type \tcode{T} is \link{\tcode{EqualityComparable}}{Table~\ref{tab:equalitycomparable}}.
 
 \pnum
 \returns
@@ -293,7 +287,7 @@ template <class T> bool operator>(const T& x, const T& y);
 \begin{itemdescr}
 \pnum
 \requires
-Type \tcode{T} is \tcode{LessThanComparable} (Table~\ref{tab:lessthancomparable}).
+Type \tcode{T} is \link{\tcode{LessThanComparable}}{Table~\ref{tab:lessthancomparable}}.
 
 \pnum
 \returns
@@ -308,7 +302,7 @@ template <class T> bool operator<=(const T& x, const T& y);
 \begin{itemdescr}
 \pnum
 \requires
-Type \tcode{T} is \tcode{LessThanComparable} (Table~\ref{tab:lessthancomparable}).
+Type \tcode{T} is \link{\tcode{LessThanComparable}}{Table~\ref{tab:lessthancomparable}}.
 
 \pnum
 \returns
@@ -323,7 +317,7 @@ template <class T> bool operator>=(const T& x, const T& y);
 \begin{itemdescr}
 \pnum
 \requires
-Type \tcode{T} is \tcode{LessThanComparable} (Table~\ref{tab:lessthancomparable}).
+Type \tcode{T} is \link{\tcode{LessThanComparable}}{Table~\ref{tab:lessthancomparable}}.
 
 \pnum
 \returns
@@ -360,9 +354,9 @@ is_nothrow_move_constructible_v<T> && is_nothrow_move_assignable_v<T>
 Type
 \tcode{T}
 shall be
-\tcode{MoveConstructible} (Table~\ref{tab:moveconstructible})
+\link{\tcode{MoveConstructible}}{Table~\ref{tab:moveconstructible}}
 and
-\tcode{MoveAssignable} (Table~\ref{tab:moveassignable}).
+\link{\tcode{MoveAssignable}}{Table~\ref{tab:moveassignable}}.
 
 \pnum
 \effects
@@ -383,7 +377,7 @@ unless \tcode{is_swappable_v<T>} is \tcode{true}.
 
 \pnum
 \requires
-\tcode{a[i]} shall be swappable with~(\ref{swappable.requirements}) \tcode{b[i]}
+\tcode{a[i]} shall be \deflink{swappable with}{\ref{swappable.requirements}} \tcode{b[i]}
 for all \tcode{i} in the range \range{0}{N}.
 
 \pnum
@@ -532,7 +526,7 @@ template <class T> constexpr add_const_t<T>& as_const(T& t) noexcept;
 
 \pnum
 The library provides the function template \tcode{declval} to simplify the definition of
-expressions which occur as unevaluated operands (Clause~\ref{expr}).
+expressions which occur as \deflinkx{unevaluated operands}{unevaluated operand}{Clause~\ref{expr}}.
 
 \indexlibrary{\idxcode{declval}}%
 \begin{itemdecl}
@@ -541,7 +535,7 @@ template <class T> add_rvalue_reference_t<T> declval() noexcept;    // as uneval
 
 \begin{itemdescr}
 \pnum
-\remarks If this function is odr-used~(\ref{basic.def.odr}), the program is ill-formed.
+\remarks If this function is \link{odr-used}{\ref{basic.def.odr}}, the program is ill-formed.
 
 \pnum
 \remarks The template parameter \tcode{T} of \tcode{declval} may be an incomplete type.
@@ -1147,7 +1141,7 @@ void swap(pair& p) noexcept(@\seebelow@);
 \begin{itemdescr}
 \pnum
 \requires
-\tcode{first} shall be swappable with~(\ref{swappable.requirements})
+\tcode{first} shall be \deflink{swappable with}{\ref{swappable.requirements}}
 \tcode{p.first} and \tcode{second} shall be swappable with \tcode{p.second}.
 
 \pnum
@@ -1374,7 +1368,7 @@ inline constexpr piecewise_construct_t piecewise_construct{};
 The \tcode{struct} \tcode{piecewise_construct_t} is an empty structure type
 used as a unique type to disambiguate constructor and function overloading. Specifically,
 \tcode{pair} has a constructor with \tcode{piecewise_construct_t} as the
-first argument, immediately followed by two \tcode{tuple}~(\ref{tuple}) arguments used
+first argument, immediately followed by two \link{\tcode{tuple}}{\ref{tuple}} arguments used
 for piecewise construction of the elements of the \tcode{pair} object.
 
 \rSec1[tuple]{Tuples}
@@ -1808,11 +1802,11 @@ template <class Alloc, class U1, class U2>
 \begin{itemdescr}
 \pnum
 \requires \tcode{Alloc} shall meet the requirements for an
-\tcode{Allocator}~(\ref{allocator.requirements}).
+\link{\tcode{Allocator}}{\ref{allocator.requirements}}.
 
 \pnum
 \effects Equivalent to the preceding constructors except that each element is constructed with
-uses-allocator construction~(\ref{allocator.uses.construction}).
+\deflink{uses-allocator construction}{\ref{allocator.uses.construction}}.
 \end{itemdescr}
 
 \rSec3[tuple.assign]{Assignment}
@@ -2176,7 +2170,7 @@ template <class T> struct tuple_size;
 \begin{itemdescr}
 \pnum
 \remarks All specializations of \tcode{tuple_size} shall meet the
-\tcode{UnaryTypeTrait} requirements~(\ref{meta.rqmts}) with a
+\deflink{\tcode{UnaryTypeTrait}}{\ref{meta.rqmts}} requirements with a
 base characteristic of \tcode{integral_constant<size_t, N>}
 for some \tcode{N}.
 \end{itemdescr}
@@ -2219,7 +2213,8 @@ template <class T> class tuple_size<const volatile T>;
 Let \tcode{\placeholder{TS}} denote \tcode{tuple_size<T>} of the \cv-unqualified type \tcode{T}.
 If the expression \tcode{\placeholder{TS}::value} is well-formed
 when treated as an unevaluated operand, then each
-of the three templates shall meet the \tcode{UnaryTypeTrait} requirements~(\ref{meta.rqmts})
+of the three templates shall meet the
+\deflink{\tcode{UnaryTypeTrait}}{\ref{meta.rqmts}} requirements
 with a base characteristic of
 \begin{codeblock}
 integral_constant<size_t, @\placeholder{TS}@::value>
@@ -2254,8 +2249,9 @@ template <size_t I, class T> class tuple_element<I, const volatile T>;
 \begin{itemdescr}
 \pnum
 Let \tcode{\placeholder{TE}} denote \tcode{tuple_element_t<I, T>} of the \cv-unqualified type \tcode{T}. Then
-each of the three templates shall meet the \tcode{TransformationTrait}
-requirements~(\ref{meta.rqmts}) with a member typedef \tcode{type} that names the following
+each of the three templates shall meet the
+\deflinkx{\tcode{TransformationTrait}}{TransformationTrait}{\ref{meta.rqmts}}
+requirements with a member typedef \tcode{type} that names the following
 type:
 
 \begin{itemize}
@@ -2469,7 +2465,7 @@ template <class... Types, class Alloc>
 
 \begin{itemdescr}
 \pnum
-\requires \tcode{Alloc} shall be an \tcode{Allocator}~(\ref{allocator.requirements}).
+\requires \tcode{Alloc} shall be an \link{\tcode{Allocator}}{\ref{allocator.requirements}}.
 
 \pnum
 \begin{note} Specialization of this trait informs other library components that
@@ -2677,7 +2673,7 @@ otherwise the conversion returns \tcode{false}.
 Member \tcode{val} is provided for exposition only. When an \tcode{optional<T>} object contains a value, \tcode{val} points to the contained value.
 
 \pnum
-\tcode{T} shall be an object type and shall satisfy the requirements of \tcode{Destructible} (Table~\ref{tab:destructible}).
+\tcode{T} shall be an object type and shall satisfy the requirements of \link{\tcode{Destructible}}{Table~\ref{tab:destructible}}.
 
 \rSec3[optional.ctor]{Constructors}
 
@@ -2695,7 +2691,8 @@ constexpr optional(nullopt_t) noexcept;
 \pnum
 \remarks
 No contained value is initialized.
-For every object type \tcode{T} these constructors shall be constexpr constructors (\ref{dcl.constexpr}).
+For every object type \tcode{T} these constructors shall be
+\deflinkx{constexpr constructors}{specifier!constexpr!constructor}{\ref{dcl.constexpr}}.
 \end{itemdescr}
 
 \indexlibrary{\idxcode{optional}!constructor}%
@@ -4579,12 +4576,12 @@ template <class Alloc, size_t I, class U, class... Args>
 \begin{itemdescr}
 \pnum
 \requires
-\tcode{Alloc} shall meet the requirements for an Allocator~(\ref{allocator.requirements}).
+\tcode{Alloc} shall meet the requirements for an \link{Allocator}{\ref{allocator.requirements}}.
 
 \pnum
 \effects
 Equivalent to the preceding constructors except that the contained value is
-constructed with uses-allocator construction~(\ref{allocator.uses.construction}).
+constructed with \deflink{uses-allocator construction}{\ref{allocator.uses.construction}}.
 \end{itemdescr}
 
 \rSec3[variant.dtor]{Destructor}
@@ -4976,7 +4973,7 @@ template <class T> struct variant_size;
 \pnum
 \remarks
 All specializations of \tcode{variant_size} shall meet the
-\tcode{UnaryTypeTrait} requirements~(\ref{meta.rqmts})
+\deflink{\tcode{UnaryTypeTrait}}{\ref{meta.rqmts}} requirements
 with a base characteristic of \tcode{integral_constant<size_t, N>} for some \tcode{N}.
 \end{itemdescr}
 
@@ -4991,7 +4988,7 @@ template <class T> class variant_size<const volatile T>;
 \pnum
 Let \tcode{VS} denote \tcode{variant_size<T>} of the cv-unqualified
 type \tcode{T}. Then each of the three templates shall meet the
-\tcode{UnaryTypeTrait} requirements~(\ref{meta.rqmts}) with a
+\deflink{\tcode{UnaryTypeTrait}}{\ref{meta.rqmts}} requirements with a
 base characteristic of \tcode{integral_constant<size_t, VS::value>}.
 \end{itemdescr}
 
@@ -5013,7 +5010,7 @@ template <size_t I, class T> class variant_alternative<I, const volatile T>;
 \pnum
 Let \tcode{VA} denote \tcode{variant_alternative<I, T>} of the
 cv-unqualified type \tcode{T}. Then each of the three templates shall
-meet the \tcode{TransformationTrait} requirements~(\ref{meta.rqmts}) with a
+meet the \deflinkx{\tcode{TransformationTrait}}{TransformationTrait}{\ref{meta.rqmts}} requirements with a
 member typedef \tcode{type} that names the following type:
 \begin{itemize}
 \item for the first specialization, \tcode{add_const_t<VA::type>},
@@ -5307,12 +5304,13 @@ For \tcode{sizeof...(Variants) > 1}, the invocation of the callable object has
 no complexity requirements.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{monostate}}%
 \rSec2[variant.monostate]{Class \tcode{monostate}}
 
+\begin{indexed}{\indexlibrary{\idxcode{monostate}}}
 \begin{itemdecl}
 struct monostate{};
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -5433,7 +5431,7 @@ template <class... Types, class Alloc>
 
 \begin{itemdescr}
 \pnum
-\requires \tcode{Alloc} shall be an Allocator~(\ref{allocator.requirements}).
+\requires \tcode{Alloc} shall be an \link{Allocator}{\ref{allocator.requirements}}.
 
 \pnum
 \begin{note}
@@ -5502,7 +5500,8 @@ public:
 \end{codeblock}
 
 \pnum
-Objects of type \tcode{bad_any_cast} are thrown by a failed \tcode{any_cast}~(\ref{any.nonmembers}).
+Objects of type \tcode{bad_any_cast} are thrown by a failed
+\linkx{\tcode{any_cast}}{\idxcode{any_cast}}{\ref{any.nonmembers}}.
 
 \indexlibrarymember{what}{bad_any_access}%
 \begin{itemdecl}
@@ -5974,7 +5973,7 @@ template <class T, class U, class... Args>
 Equivalent to: \tcode{return any(in_place_type<T>, il, std::forward<Args>(args)...);}
 \end{itemdescr}
 
-\indexlibrary{\idxcode{any_cast}}%
+\begin{indexed}{\indexlibrary{\idxcode{any_cast}}}
 \begin{itemdecl}
 template<class T>
   T any_cast(const any& operand);
@@ -5983,6 +5982,7 @@ template<class T>
 template<class T>
   T any_cast(any&& operand);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -6034,13 +6034,14 @@ any_cast<string&>(y);                       // error; cannot
 \end{example}
 \end{itemdescr}
 
-\indexlibrary{\idxcode{any_cast}}%
+\begin{indexed}{\indexlibrary{\idxcode{any_cast}}}
 \begin{itemdecl}
 template<class T>
   const T* any_cast(const any* operand) noexcept;
 template<class T>
   T* any_cast(any* operand) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -6069,7 +6070,7 @@ bool is_string(const any& operand) {
 
 \begin{codeblock}
 #include <string>
-#include <iosfwd>   // for \tcode{istream} (\ref{istream.syn}), \tcode{ostream} (\ref{ostream.syn}), see \ref{iosfwd.syn}
+#include <iosfwd>   // for \link{\tcode{istream}}{\ref{istream.syn}}, \link{\tcode{ostream}}{\ref{ostream.syn}}, see \ref{iosfwd.syn}
 
 namespace std {
   template <size_t N> class bitset;
@@ -6211,19 +6212,19 @@ errors, each associated with a distinct exception:
 an
 \term{invalid-argument}
 error is associated with exceptions of type
-\tcode{invalid_argument}~(\ref{invalid.argument});
+\link{\tcode{invalid_argument}}{\ref{invalid.argument}};
 \indexlibrary{\idxcode{invalid_argument}}%
 \item
 an
 \term{out-of-range}
 error is associated with exceptions of type
-\tcode{out_of_range}~(\ref{out.of.range});
+\link{\tcode{out_of_range}}{\ref{out.of.range}};
 \indexlibrary{\idxcode{out_of_range}}%
 \item
 an
 \term{overflow}
 error is associated with exceptions of type
-\tcode{overflow_error}~(\ref{overflow.error}).
+\link{\tcode{overflow_error}}{\ref{overflow.error}}.
 \indexlibrary{\idxcode{overflow_error}}%
 \end{itemize}
 
@@ -6254,8 +6255,8 @@ Constructs an object of class
 \tcode{bitset<N>},
 initializing the first \tcode{M} bit positions to the corresponding bit
 values in \tcode{val}.
-\tcode{M} is the smaller of \tcode{N} and the number of bits in the value
-representation~(\ref{basic.types}) of \tcode{unsigned long long}.
+\tcode{M} is the smaller of \tcode{N} and the number of bits in the
+\deflink{value representation}{\ref{basic.types}} of \tcode{unsigned long long}.
 If \tcode{M < N}, the remaining bit positions are initialized to zero.
 \end{itemdescr}
 
@@ -6809,8 +6810,8 @@ is equivalent to
 \throws Nothing.
 
 \pnum
-\remarks For the purpose of determining the presence of a data
-race~(\ref{intro.multithread}), any access or update through the resulting
+\remarks For the purpose of determining the presence of a
+\deflink{data race}{\ref{intro.multithread}}, any access or update through the resulting
 reference potentially accesses or modifies, respectively, the entire
 underlying bitset.
 \end{itemdescr}
@@ -6871,7 +6872,7 @@ template <class charT, class traits, size_t N>
 
 \begin{itemdescr}
 \pnum
-A formatted input function~(\ref{istream.formatted}).
+A \link{formatted input function}{\ref{istream.formatted}}.
 
 \pnum
 \effects
@@ -6931,8 +6932,8 @@ os << x.template to_string<charT, traits, allocator<charT>>(
 
 \pnum
 This subclause describes the contents of the header
-\tcode{<memory>}~(\ref{memory.syn}) and some
-of the contents of the header \tcode{<cstdlib>}~(\ref{cstdlib.syn}).
+\link{\tcode{<memory>}}{\ref{memory.syn}} and some
+of the contents of the header \link{\tcode{<cstdlib>}}{\ref{cstdlib.syn}}.
 
 \rSec2[memory.syn]{Header \tcode{<memory>} synopsis}
 
@@ -7350,8 +7351,8 @@ void declare_reachable(void* p);
 
 \begin{itemdescr}
 \pnum
-\requires \tcode{p} shall be a safely-derived
-pointer~(\ref{basic.stc.dynamic.safety}) or a null pointer value.
+\requires \tcode{p} shall be a \deflink{safely-derived pointer}{\ref{basic.stc.dynamic.safety}}
+or a null pointer value.
 
 \pnum
 \effects If \tcode{p} is not null, the complete object referenced by \tcode{p}
@@ -7443,8 +7444,8 @@ pointer_safety get_pointer_safety() noexcept;
 
 \begin{itemdescr}
 \pnum
-\returns \tcode{pointer_safety::strict} if the implementation has strict pointer
-safety~(\ref{basic.stc.dynamic.safety}). It is
+\returns \tcode{pointer_safety::strict} if the implementation has
+\deflink{strict pointer safety}{\ref{basic.stc.dynamic.safety}}. It is
 \impldef{whether \tcode{get_pointer_safety} returns
 \tcode{pointer_safety::relaxed} or
 \tcode{pointer_safety::\brk{}preferred} if the implementation has relaxed pointer safety}
@@ -7511,7 +7512,7 @@ The \tcode{allocator_arg_t} struct is an empty structure type used as a unique t
 disambiguate constructor and function overloading. Specifically, several types (see
 \tcode{tuple}~\ref{tuple}) have constructors with \tcode{allocator_arg_t} as the first
 argument, immediately followed by an argument of a type that satisfies the
-\tcode{Allocator} requirements~(\ref{allocator.requirements}).
+\link{\tcode{Allocator}}{\ref{allocator.requirements}} requirements.
 
 \rSec2[allocator.uses]{\tcode{uses_allocator}}
 
@@ -7525,8 +7526,9 @@ template <class T, class Alloc> struct uses_allocator;
 \begin{itemdescr}
 \pnum
 \remarks Automatically detects whether \tcode{T} has a nested \tcode{allocator_type} that
-is convertible from \tcode{Alloc}. Meets the \tcode{BinaryTypeTrait}
-requirements~(\ref{meta.rqmts}). The implementation shall provide a definition that is
+is convertible from \tcode{Alloc}. Meets the
+\deflinkx{\tcode{BinaryTypeTrait}}{BinaryTypeTrait}{\ref{meta.rqmts}} requirements.
+The implementation shall provide a definition that is
 derived from \tcode{true_type} if the \grammarterm{qualified-id} \tcode{T::allocator_type}
 is valid and denotes a type~(\ref{temp.deduct}) and
 \tcode{is_convertible_v<Alloc, T::allocator_type> != false}, otherwise it shall be
@@ -7803,11 +7805,12 @@ static void deallocate(Alloc& a, pointer p, size_type n);
 \throws Nothing.
 \end{itemdescr}
 
-\indexlibrarymember{construct}{allocator_traits}%
+\begin{indexed}{\indexlibrarymember{construct}{allocator_traits}}
 \begin{itemdecl}
 template <class T, class... Args>
   static void construct(Alloc& a, T* p, Args&&... args);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -7816,11 +7819,12 @@ if that call is well-formed;
 otherwise, invokes \tcode{::new (static_cast<void*>(p)) T(std::forward<Args>(args)...)}.
 \end{itemdescr}
 
-\indexlibrarymember{destroy}{allocator_traits}%
+\begin{indexed}{\indexlibrarymember{destroy}{allocator_traits}}
 \begin{itemdecl}
 template <class T>
   static void destroy(Alloc& a, T* p);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -7880,7 +7884,7 @@ namespace std {
 
 \pnum
 Except for the destructor, member functions of the default allocator shall not introduce
-data races~(\ref{intro.multithread}) as a result of concurrent calls to those member
+\deflinkx{data races}{data race}{\ref{intro.multithread}} as a result of concurrent calls to those member
 functions from different threads. Calls to these functions that allocate or deallocate a
 particular unit of storage shall occur in a single total order, and each such
 deallocation call shall happen before the next allocation (if any) in this order.
@@ -7898,7 +7902,7 @@ A pointer to the initial element of an array of storage of size \tcode{n}
 
 \pnum
 \remarks
-the storage is obtained by calling \tcode{::operator new}~(\ref{new.delete}),
+the storage is obtained by calling \link{\tcode{::operator new}}{\ref{new.delete}},
 but it is unspecified when or how often this
 function is called.
 
@@ -7926,7 +7930,7 @@ Deallocates the storage referenced by \tcode{p} .
 \pnum
 \remarks
 Uses
-\tcode{::operator delete}~(\ref{new.delete}),
+\link{\tcode{::operator delete}}{\ref{new.delete}},
 but it is unspecified
 when this function is called.
 \end{itemdescr}
@@ -7966,11 +7970,11 @@ the names of template parameters are used to express type requirements.
 \item
 If an algorithm's template parameter is named \tcode{InputIterator},
 the template argument shall satisfy the requirements
-of an input iterator~(\ref{input.iterators}).
+of an \link{input iterator}{\ref{input.iterators}}.
 \item
 If an algorithm's template parameter is named \tcode{ForwardIterator},
 the template argument shall satisfy the requirements
-of a forward iterator~(\ref{forward.iterators}), and
+of a \link{forward iterator}{\ref{forward.iterators}}, and
 is required to have the property that no exceptions are thrown
 from increment, assignment, comparison, or indirection through valid iterators.
 \end{itemize}
@@ -7991,7 +7995,7 @@ presence of an overloaded \tcode{operator\&}.
 
 \pnum
 \remarks An expression \tcode{addressof(E)}
-is a constant subexpression~(\ref{defns.const.subexpr})
+is a \link{constant subexpression}{\ref{defns.const.subexpr}}
 if \tcode{E} is an lvalue constant subexpression.
 \end{itemdescr}
 
@@ -8093,12 +8097,13 @@ for (; first != last; ++result, (void) ++first)
 \tcode{result}.
 \end{itemdescr}
 
-\indexlibrary{\idxcode{uninitialized_copy_n}}%
+\begin{indexed}{\indexlibrary{\idxcode{uninitialized_copy_n}}}
 \begin{itemdecl}
 template <class InputIterator, class Size, class ForwardIterator>
   ForwardIterator uninitialized_copy_n(InputIterator first, Size n,
                                        ForwardIterator result);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -8236,11 +8241,12 @@ for (; first!=last; ++first)
 \end{codeblock}
 \end{itemdescr}
 
-\indexlibrary{\idxcode{destroy_n}}%
+\begin{indexed}{\indexlibrary{\idxcode{destroy_n}}}
 \begin{itemdecl}
 template <class ForwardIterator, class Size>
   ForwardIterator destroy_n(ForwardIterator first, Size n);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -8258,19 +8264,15 @@ return first;
 \pnum
 \indextext{\idxhdr{cstdlib}}%
 \begin{note}
-The header \tcode{<cstdlib>}~(\ref{cstdlib.syn})
+The header \link{\tcode{<cstdlib>}}{\ref{cstdlib.syn}}
 declares the functions described in this subclause.
 \end{note}
 
-\indexlibrary{\idxcode{aligned_alloc}}%
-\indexlibrary{\idxcode{calloc}}%
-\indexlibrary{\idxcode{malloc}}%
-\indexlibrary{\idxcode{realloc}}%
 \begin{itemdecl}
-void* aligned_alloc(size_t alignment, size_t size);
-void* calloc(size_t nmemb, size_t size);
-void* malloc(size_t size);
-void* realloc(void* ptr, size_t size);
+void* @\libentity{aligned_alloc}@(size_t alignment, size_t size);
+void* @\libentity{calloc}@(size_t nmemb, size_t size);
+void* @\libentity{malloc}@(size_t size);
+void* @\libentity{realloc}@(void* ptr, size_t size);
 \end{itemdecl}
 
 \begin{itemdescr}
@@ -8579,8 +8581,9 @@ namespace std {
 \pnum
 The default type for the template parameter \tcode{D} is
 \tcode{default_delete}. A client-supplied template argument
-\tcode{D} shall be a function
-object type~(\ref{function.objects}), lvalue reference to function, or
+\tcode{D} shall be a
+\deflinkx{function object type}{function object!type}{\ref{function.objects}},
+lvalue reference to function, or
 lvalue reference to function object type
 for which, given
 a value \tcode{d} of type \tcode{D} and a value
@@ -8590,7 +8593,7 @@ pointer as appropriate for that deleter.
 
 \pnum
 If the deleter's type \tcode{D} is not a reference type, \tcode{D} shall satisfy
-the requirements of \tcode{Destructible} (Table~\ref{tab:destructible}).
+the requirements of \link{\tcode{Destructible}}{Table~\ref{tab:destructible}}.
 
 \pnum
 If the \grammarterm{qualified-id} \tcode{remove_reference_t<D>::pointer} is valid and denotes a
@@ -8598,7 +8601,7 @@ type~(\ref{temp.deduct}), then \tcode{unique_ptr<T,
 D>::pointer} shall be a synonym for \tcode{remove_reference_t<D>::pointer}. Otherwise
 \tcode{unique_ptr<T, D>::pointer} shall be a synonym for \tcode{element_type*}. The type \tcode{unique_ptr<T,
 D>::pointer} shall
-satisfy the requirements of \tcode{NullablePointer} (\ref{nullablepointer.requirements}).
+satisfy the requirements of \link{\tcode{NullablePointer}}{\ref{nullablepointer.requirements}}.
 
 \pnum
 \begin{example} Given an allocator type \tcode{X}~(\ref{allocator.requirements}) and
@@ -8617,7 +8620,7 @@ constexpr unique_ptr(nullptr_t) noexcept;
 \begin{itemdescr}
 \pnum
 \requires \tcode{D} shall
-satisfy the requirements of \tcode{DefaultConstructible} (Table~\ref{tab:defaultconstructible}),
+satisfy the requirements of \link{\tcode{DefaultConstructible}}{Table~\ref{tab:defaultconstructible}},
 and that construction shall not throw an exception.
 
 \pnum
@@ -8642,7 +8645,7 @@ explicit unique_ptr(pointer p) noexcept;
 \begin{itemdescr}
 \pnum
 \requires \tcode{D} shall
-satisfy the requirements of \tcode{DefaultConstructible} (Table~\ref{tab:defaultconstructible}),
+satisfy the requirements of \link{\tcode{DefaultConstructible}}{Table~\ref{tab:defaultconstructible}},
 and that construction shall not throw an exception.
 
 \pnum
@@ -8739,8 +8742,8 @@ unique_ptr(unique_ptr&& u) noexcept;
 \begin{itemdescr}
 \pnum
 \requires If \tcode{D} is not a reference type,
-\tcode{D} shall satisfy the requirements of \tcode{MoveConstructible}
-(Table~\ref{tab:moveconstructible}).
+\tcode{D} shall satisfy the requirements of
+\link{\tcode{MoveConstructible}}{Table~\ref{tab:moveconstructible}}.
 Construction
 of the deleter from an rvalue of type \tcode{D} shall not
 throw an exception.
@@ -8801,10 +8804,11 @@ to the stored deleter that was constructed from
 
 \rSec4[unique.ptr.single.dtor]{\tcode{unique_ptr} destructor}
 
-\indexlibrary{\idxcode{unique_ptr}!destructor}%
+\begin{indexed}{\indexlibrary{\idxcode{unique_ptr}!destructor}}
 \begin{itemdecl}
 ~unique_ptr();
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -8828,7 +8832,7 @@ unique_ptr& operator=(unique_ptr&& u) noexcept;
 \begin{itemdescr}
 \pnum
 \requires If \tcode{D} is not a reference type, \tcode{D} shall satisfy the
-requirements of \tcode{MoveAssignable} (Table~\ref{tab:moveassignable}) and assignment
+requirements of \link{\tcode{MoveAssignable}}{Table~\ref{tab:moveassignable}} and assignment
 of the deleter from an rvalue of type \tcode{D} shall not throw an exception.
 Otherwise, \tcode{D} is a reference type;
 \tcode{remove_reference_t<D>} shall satisfy the \tcode{CopyAssignable}
@@ -9003,7 +9007,7 @@ void swap(unique_ptr& u) noexcept;
 \begin{itemdescr}
 \pnum
 \requires \tcode{get_deleter()} shall be
-swappable~(\ref{swappable.requirements}) and shall
+\link{swappable}{\ref{swappable.requirements}} and shall
 not throw an exception
 under \tcode{swap}.
 
@@ -9334,8 +9338,9 @@ common_type_t<typename unique_ptr<T1, D1>::pointer,
               typename unique_ptr<T2, D2>::pointer>
 \end{codeblock}
 Then the specialization
-\tcode{less<\placeholder{CT}>} shall be a function object type~(\ref{function.objects}) that
-induces a strict weak ordering~(\ref{alg.sorting}) on the pointer values.
+\tcode{less<\placeholder{CT}>} shall be a
+\deflinkx{function object type}{function object!type}{\ref{function.objects}} that
+induces a \link{strict weak ordering}{\ref{alg.sorting}} on the pointer values.
 
 \pnum
 \returns \tcode{less<\placeholder{CT}>()(x.get(), y.get())}.
@@ -9415,9 +9420,9 @@ template <class T, class D>
 
 \begin{itemdescr}
 \pnum
-\requires The specialization \tcode{less<unique_ptr<T, D>::pointer>} shall be
-a function object type~(\ref{function.objects}) that induces a strict weak
-ordering~(\ref{alg.sorting}) on the pointer values.
+\requires The specialization \tcode{less<unique_ptr<T, D>::pointer>} shall be a
+\deflinkx{function object type}{function object!type}{\ref{function.objects}}
+that induces a \link{strict weak ordering}{\ref{alg.sorting}} on the pointer values.
 
 \pnum
 \returns
@@ -9673,7 +9678,7 @@ In the constructor definitions below,
 enables \tcode{shared_from_this} with \tcode{p},
 for a pointer \tcode{p} of type \tcode{Y*},
 means that if \tcode{Y} has an unambiguous and accessible base class
-that is a specialization of \tcode{enable_shared_from_this}~(\ref{util.smartptr.enab}),
+that is a specialization of \link{\tcode{enable_shared_from_this}}{\ref{util.smartptr.enab}},
 then \tcode{remove_cv_t<Y>*} shall be implicitly convertible to \tcode{T*} and
 the constructor evaluates the statement:
 \begin{codeblock}
@@ -10147,7 +10152,7 @@ template<class T, class A, class... Args>
 \requires The expression \tcode{::new (pv) T(std::forward<Args>(args)...)},
 where \tcode{pv} has type \tcode{void*} and points to storage suitable
 to hold an object of type \tcode{T}, shall be well formed. \tcode{A} shall
-be an allocator~(\ref{allocator.requirements}). The copy constructor
+be an \link{allocator}{\ref{allocator.requirements}}. The copy constructor
 and destructor of \tcode{A} shall not throw exceptions.
 
 \pnum
@@ -10559,10 +10564,11 @@ template<class Y> weak_ptr(weak_ptr<Y>&& r) noexcept;
 
 \rSec4[util.smartptr.weak.dest]{\tcode{weak_ptr} destructor}
 
-\indexlibrary{\idxcode{weak_ptr}!destructor}%
+\begin{indexed}{\indexlibrary{\idxcode{weak_ptr}!destructor}}
 \begin{itemdecl}
 ~weak_ptr();
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\effects  Destroys this \tcode{weak_ptr} object but has no
@@ -10672,11 +10678,12 @@ both empty.
 
 \rSec4[util.smartptr.weak.spec]{\tcode{weak_ptr} specialized algorithms}
 
-\indexlibrarymember{swap}{weak_ptr}%
+\begin{indexed}{\indexlibrarymember{swap}{weak_ptr}}
 \begin{itemdecl}
 template<class T>
   void swap(weak_ptr<T>& a, weak_ptr<T>& b) noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum\effects  Equivalent to \tcode{a.swap(b)}.
@@ -10688,7 +10695,7 @@ template<class T>
 The class template \tcode{owner_less} allows ownership-based mixed comparisons of shared
 and weak pointers.
 
-\indexlibrary{\idxcode{owner_less}}%
+\begin{indexed}{\indexlibrary{\idxcode{owner_less}}}
 \begin{codeblock}
 namespace std {
   template<class T = void> struct owner_less;
@@ -10719,6 +10726,7 @@ namespace std {
   };
 }
 \end{codeblock}
+\end{indexed}
 
 \indexlibrarymember{operator()}{owner_less}%
 \pnum \tcode{operator()(x, y)} shall return \tcode{x.owner_before(y)}. \begin{note}
@@ -10848,11 +10856,12 @@ template<class T>
 \throws Nothing.
 \end{itemdescr}
 
-\indexlibrarymember{atomic_load}{shared_ptr}%
+\begin{indexed}{\indexlibrarymember{atomic_load}{shared_ptr}}
 \begin{itemdecl}
 template<class T>
   shared_ptr<T> atomic_load(const shared_ptr<T>* p);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -10865,11 +10874,12 @@ template<class T>
 \throws Nothing.
 \end{itemdescr}
 
-\indexlibrarymember{atomic_load_explicit}{shared_ptr}%
+\begin{indexed}{\indexlibrarymember{atomic_load_explicit}{shared_ptr}}
 \begin{itemdecl}
 template<class T>
   shared_ptr<T> atomic_load_explicit(const shared_ptr<T>* p, memory_order mo);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -11104,7 +11114,7 @@ namespace std::pmr {
 \pnum
 The \tcode{memory_resource} class is an abstract interface to an unbounded set of classes encapsulating memory resources.
 
-\indexlibrary{\idxcode{memory_resource}}%
+\begin{indexed}{\indexlibrary{\idxcode{memory_resource}}}
 \begin{codeblock}
 class memory_resource {
   static constexpr size_t max_align = alignof(max_align_t); // \expos
@@ -11124,14 +11134,16 @@ private:
   virtual bool do_is_equal(const memory_resource& other) const noexcept = 0;
 };
 \end{codeblock}
+\end{indexed}
 
 
 \rSec3[mem.res.public]{\tcode{memory_resource} public member functions}
 
-\indexlibrary{\idxcode{memory_resource}!destructor}%
+\begin{indexed}{\indexlibrary{\idxcode{memory_resource}!destructor}}
 \begin{itemdecl}
 ~memory_resource();
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -11139,10 +11151,11 @@ private:
 Destroys this \tcode{memory_resource}.
 \end{itemdescr}
 
-\indexlibrarymember{allocate}{memory_resource}%
+\begin{indexed}{\indexlibrarymember{allocate}{memory_resource}}
 \begin{itemdecl}
 void* allocate(size_t bytes, size_t alignment = max_align);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -11150,10 +11163,11 @@ void* allocate(size_t bytes, size_t alignment = max_align);
 Equivalent to: \tcode{return do_allocate(bytes, alignment);}
 \end{itemdescr}
 
-\indexlibrarymember{deallocate}{memory_resource}%
+\begin{indexed}{\indexlibrarymember{deallocate}{memory_resource}}
 \begin{itemdecl}
 void deallocate(void* p, size_t bytes, size_t alignment = max_align);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -11161,10 +11175,11 @@ void deallocate(void* p, size_t bytes, size_t alignment = max_align);
 Equivalent to: \tcode{do_deallocate(p, bytes, alignment);}
 \end{itemdescr}
 
-\indexlibrarymember{is_equal}{memory_resource}%
+\begin{indexed}{\indexlibrarymember{is_equal}{memory_resource}}
 \begin{itemdecl}
 bool is_equal(const memory_resource& other) const noexcept;
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -11261,7 +11276,7 @@ bool operator!=(const memory_resource& a, const memory_resource& b) noexcept;
 
 \pnum
 A specialization of class template \tcode{pmr::polymorphic_allocator}
-conforms to the \tcode{Allocator} requirements (\ref{allocator.requirements}).
+conforms to the \link{\tcode{Allocator} requirements}{\ref{allocator.requirements}}.
 Constructed with different memory resources,
 different instances of the same specialization of \tcode{pmr::polymorphic_allocator}
 can exhibit entirely different allocation behavior.
@@ -11371,10 +11386,11 @@ Sets \tcode{memory_rsrc} to \tcode{other.resource()}.
 
 \rSec3[mem.poly.allocator.mem]{\tcode{polymorphic_allocator} member functions}
 
-\indexlibrarymember{allocate}{polymorphic_allocator}%
+\begin{indexed}{\indexlibrarymember{allocate}{polymorphic_allocator}}
 \begin{itemdecl}
 Tp* allocate(size_t n);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -11385,10 +11401,11 @@ return static_cast<Tp*>(memory_rsrc->allocate(n * sizeof(Tp), alignof(Tp)));
 \end{codeblock}
 \end{itemdescr}
 
-\indexlibrarymember{deallocate}{polymorphic_allocator}%
+\begin{indexed}{\indexlibrarymember{deallocate}{polymorphic_allocator}}
 \begin{itemdecl}
 void deallocate(Tp* p, size_t n);
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -12003,7 +12020,7 @@ void* do_allocate(size_t bytes, size_t alignment) override;
 A pointer to allocated storage (\ref{basic.stc.dynamic.deallocation})
 with a size of at least \tcode{bytes}.
 The size and alignment of the allocated memory shall meet the requirements
-for a class derived from \tcode{memory_resource}~(\ref{mem.res}).
+for a class derived from \link{\tcode{memory_resource}}{\ref{mem.res}}.
 
 \pnum
 \effects
@@ -12227,7 +12244,7 @@ void* do_allocate(size_t bytes, size_t alignment) override;
 A pointer to allocated storage (\ref{basic.stc.dynamic.deallocation})
 with a size of at least \tcode{bytes}.
 The size and alignment of the allocated memory shall meet the requirements
-for a class derived from \tcode{memory_resource}~(\ref{mem.res}).
+for a class derived from \link{\tcode{memory_resource}}{\ref{mem.res}}.
 
 \pnum
 \effects
@@ -12701,7 +12718,7 @@ template <class T1, class T2, class... Args1, class... Args2>
 \begin{itemdescr}
 \pnum
 \requires all of the types in \tcode{Args1} and \tcode{Args2} shall be
-\tcode{CopyConstructible} (Table~\ref{tab:copyconstructible}).
+\link{\tcode{CopyConstructible}}{Table~\ref{tab:copyconstructible}}.
 
 \pnum
 \effects Constructs a \tcode{tuple} object \tcode{xprime} from \tcode{x} by the
@@ -12887,8 +12904,8 @@ template <class OuterA1, class OuterA2, class... InnerAllocs>
 \rSec1[function.objects]{Function objects}
 
 \pnum
-A \defnx{function object type}{function object!type} is an object
-type~(\ref{basic.types}) that can be the type of the
+A \defnx{function object type}{function object!type} is an
+\deflink{object type}{\ref{basic.types}} that can be the type of the
 \grammarterm{postfix-expression} in a function call
 (\ref{expr.call},~\ref{over.match.call}).\footnote{Such a type is a function
 pointer or a class type which has a member \tcode{operator()} or a class type
@@ -13069,7 +13086,8 @@ A \defn{call signature} is the name of a return type followed by a
 parenthesized comma-separated list of zero or more argument types.
 
 \pnum
-A \defn{callable type} is a function object type~(\ref{function.objects}) or a pointer to member.
+A \defn{callable type} is a
+\deflinkx{function object type}{function object!type}{\ref{function.objects}} or a pointer to member.
 
 \pnum
 A \defn{callable object} is an object of a callable type.
@@ -13130,7 +13148,7 @@ to \tcode{R}.
 \indextext{call wrapper}%
 \indextext{call wrapper!simple}%
 \indextext{call wrapper!forwarding}%
-Every call wrapper~(\ref{func.def}) shall be
+Every \deflinkx{call wrapper}{call wrapper type}{\ref{func.def}} shall be
 \tcode{MoveConstructible}.
 A \defn{forwarding call wrapper} is a
 call wrapper that can be called with an arbitrary argument list
@@ -13206,7 +13224,8 @@ namespace std {
 around a reference to an object or function of type \tcode{T}.
 
 \pnum
-\tcode{reference_wrapper<T>} shall be a trivially copyable type~(\ref{basic.types}).
+\tcode{reference_wrapper<T>} shall be a
+\deflinkx{trivially copyable type}{trivially copyable types}{\ref{basic.types}}.
 
 \rSec3[refwrap.const]{\tcode{reference_wrapper} construct/copy/destroy}
 
@@ -13765,12 +13784,13 @@ template <class T, class U> constexpr auto operator()(T&& t, U&& u) const
 
 \rSec3[comparisons.less_equal]{Class template \tcode{less_equal}}
 
-\indexlibrary{\idxcode{less_equal}}%
+\begin{indexed}{\indexlibrary{\idxcode{less_equal}}}
 \begin{itemdecl}
 template <class T = void> struct less_equal {
   constexpr bool operator()(const T& x, const T& y) const;
 };
 \end{itemdecl}
+\end{indexed}
 
 \indexlibrarymember{operator()}{less_equal}%
 \begin{itemdecl}
@@ -13810,12 +13830,13 @@ operators in the language~(\ref{expr.log.and}, \ref{expr.log.or}, \ref{expr.unar
 
 \rSec3[logical.operations.and]{Class template \tcode{logical_and}}
 
-\indexlibrary{\idxcode{logical_and}}%
+\begin{indexed}{\indexlibrary{\idxcode{logical_and}}}
 \begin{itemdecl}
 template <class T = void> struct logical_and {
   constexpr bool operator()(const T& x, const T& y) const;
 };
 \end{itemdecl}
+\end{indexed}
 
 \indexlibrarymember{operator()}{logical_and}%
 \begin{itemdecl}
@@ -13848,12 +13869,13 @@ template <class T, class U> constexpr auto operator()(T&& t, U&& u) const
 
 \rSec3[logical.operations.or]{Class template \tcode{logical_or}}
 
-\indexlibrary{\idxcode{logical_or}}%
+\begin{indexed}{\indexlibrary{\idxcode{logical_or}}}
 \begin{itemdecl}
 template <class T = void> struct logical_or {
   constexpr bool operator()(const T& x, const T& y) const;
 };
 \end{itemdecl}
+\end{indexed}
 
 \indexlibrarymember{operator()}{logical_or}%
 \begin{itemdecl}
@@ -13886,12 +13908,13 @@ template <class T, class U> constexpr auto operator()(T&& t, U&& u) const
 
 \rSec3[logical.operations.not]{Class template \tcode{logical_not}}
 
-\indexlibrary{\idxcode{logical_not}}%
+\begin{indexed}{\indexlibrary{\idxcode{logical_not}}}
 \begin{itemdecl}
 template <class T = void> struct logical_not {
   constexpr bool operator()(const T& x) const;
 };
 \end{itemdecl}
+\end{indexed}
 
 \indexlibrarymember{operator()}{logical_not}%
 \begin{itemdecl}
@@ -13932,12 +13955,13 @@ operators in the language~(\ref{expr.bit.and}, \ref{expr.or},
 
 \rSec3[bitwise.operations.and]{Class template \tcode{bit_and}}
 
-\indexlibrary{\idxcode{bit_and}}%
+\begin{indexed}{\indexlibrary{\idxcode{bit_and}}}
 \begin{itemdecl}
 template <class T = void> struct bit_and {
   constexpr T operator()(const T& x, const T& y) const;
 };
 \end{itemdecl}
+\end{indexed}
 
 \indexlibrarymember{operator()}{bit_and}%
 \begin{itemdecl}
@@ -13970,12 +13994,13 @@ template <class T, class U> constexpr auto operator()(T&& t, U&& u) const
 
 \rSec3[bitwise.operations.or]{Class template \tcode{bit_or}}
 
-\indexlibrary{\idxcode{bit_or}}%
+\begin{indexed}{\indexlibrary{\idxcode{bit_or}}}
 \begin{itemdecl}
 template <class T = void> struct bit_or {
   constexpr T operator()(const T& x, const T& y) const;
 };
 \end{itemdecl}
+\end{indexed}
 
 \indexlibrarymember{operator()}{bit_or}%
 \begin{itemdecl}
@@ -14008,12 +14033,13 @@ template <class T, class U> constexpr auto operator()(T&& t, U&& u) const
 
 \rSec3[bitwise.operations.xor]{Class template \tcode{bit_xor}}
 
-\indexlibrary{\idxcode{bit_xor}}%
+\begin{indexed}{\indexlibrary{\idxcode{bit_xor}}}
 \begin{itemdecl}
 template <class T = void> struct bit_xor {
   constexpr T operator()(const T& x, const T& y) const;
 };
 \end{itemdecl}
+\end{indexed}
 
 \indexlibrarymember{operator()}{bit_xor}%
 \begin{itemdecl}
@@ -14133,7 +14159,7 @@ explicit @\placeholdernc{call_wrapper}@(F&& f);
 \requires
 \tcode{FD} shall satisfy the requirements of \tcode{MoveConstructible}.
 \tcode{is_constructible_v<FD, F>} shall be \tcode{true}.
-\tcode{fd} shall be a callable object~(\ref{func.def}).
+\tcode{fd} shall be a \deflink{callable object}{\ref{func.def}}.
 
 \pnum
 \effects
@@ -14203,7 +14229,7 @@ uses \tcode{is_bind_expression} to detect subexpressions.
 
 \pnum
 Instantiations of the \tcode{is_bind_expression} template shall meet
-the \tcode{UnaryTypeTrait} requirements~(\ref{meta.rqmts}). The implementation
+the \deflink{\tcode{UnaryTypeTrait}}{\ref{meta.rqmts}} requirements. The implementation
 shall provide a definition that has a base characteristic of
 \tcode{true_type} if \tcode{T} is a type returned from \tcode{bind},
 otherwise it shall have a base characteristic of \tcode{false_type}.
@@ -14227,7 +14253,7 @@ The class template \tcode{is_placeholder} can be used to detect the standard pla
 
 \pnum
 Instantiations of the \tcode{is_placeholder} template shall meet
-the \tcode{UnaryTypeTrait} requirements~(\ref{meta.rqmts}). The implementation
+the \deflink{\tcode{UnaryTypeTrait}}{\ref{meta.rqmts}} requirements. The implementation
 shall provide a definition that has the base characteristic of
 \tcode{integral_constant<int, \placeholder{J}>} if \tcode{T} is the type of
 \tcode{std::placeholders::_\placeholder{J}}, otherwise it shall have a
@@ -14274,7 +14300,7 @@ The cv-qualifiers \cv{} of the call wrapper \tcode{g},
 as specified below, shall be neither \tcode{volatile} nor \tcode{const volatile}.
 
 \pnum\returns
-A forwarding call wrapper \tcode{g}~(\ref{func.require}).
+A \deflink{forwarding call wrapper}{\ref{func.require}} \tcode{g}.
 The effect of \tcode{g($\tcode{u}_1$, $\tcode{u}_2$, \ldots, $\tcode{u}_M$)} shall
 be
 \begin{codeblock}
@@ -14317,7 +14343,7 @@ as specified below, shall be neither \tcode{volatile} nor \tcode{const volatile}
 
 \pnum
 \returns
-A forwarding call wrapper \tcode{g}~(\ref{func.require}).
+A \deflink{forwarding call wrapper}{\ref{func.require}} \tcode{g}.
 The effect of
 \tcode{g($\tcode{u}_1$, $\tcode{u}_2$, \ldots, $\tcode{u}_M$)} shall be
 \begin{codeblock}
@@ -14412,7 +14438,7 @@ template<class R, class T> @\unspec@ mem_fn(R T::* pm) noexcept;
 
 \begin{itemdescr}
 \pnum
-\returns A simple call wrapper~(\ref{func.def}) \tcode{fn}
+\returns A simple \deflink{call wrapper}{\ref{func.def}} \tcode{fn}
 such that the expression \tcode{fn(t, a2, ..., aN)} is equivalent
 to \tcode{\placeholdernc{INVOKE}(pm, t, a2, ..., aN)}~(\ref{func.require}).
 \end{itemdescr}
@@ -14529,23 +14555,23 @@ namespace std {
 \pnum
 The \tcode{function} class template provides polymorphic wrappers that
 generalize the notion of a function pointer. Wrappers can store, copy,
-and call arbitrary callable objects~(\ref{func.def}), given a call
-signature~(\ref{func.def}), allowing functions to be first-class objects.
+and call arbitrary \deflinkx{callable objects}{callable object}{\ref{func.def}}, given a
+\deflink{call signature}{\ref{func.def}}, allowing functions to be first-class objects.
 
 \pnum
 \indextext{callable type}%
-A callable type~(\ref{func.def}) \tcode{F}
+A \deflink{callable type}{\ref{func.def}} \tcode{F}
 is \defn{Lvalue-Callable} for argument
 types \tcode{ArgTypes}
 and return type \tcode{R}
 if the expression
 \tcode{\placeholdernc{INVOKE}<R>(declval<F\&>(), declval<ArgTypes>()...)},
-considered as an unevaluated operand (Clause~\ref{expr}), is
+considered as an \deflink{unevaluated operand}{Clause~\ref{expr}}, is
 well formed~(\ref{func.require}).
 
 \pnum
-The \tcode{function} class template is a call
-wrapper~(\ref{func.def}) whose call signature~(\ref{func.def})
+The \tcode{function} class template is a
+\deflink{call wrapper}{\ref{func.def}} whose \deflink{call signature}{\ref{func.def}}
 is \tcode{R(ArgTypes...)}.
 
 \pnum
@@ -14631,7 +14657,7 @@ template<class F> function(F f);
 
 \pnum
 \remarks This constructor template shall not participate in overload resolution unless
-\tcode{F} is Lvalue-Callable~(\ref{func.wrap.func}) for argument types
+\tcode{F} is \deflink{Lvalue-Callable}{\ref{func.wrap.func}} for argument types
 \tcode{ArgTypes...} and return type \tcode{R}.
 
 \pnum
@@ -14734,7 +14760,7 @@ template<class F> function& operator=(F&& f);
 
 \pnum\remarks This assignment operator shall not participate in overload
 resolution unless \tcode{decay_t<F>} is
-Lvalue-Callable~(\ref{func.wrap.func}) for argument types \tcode{ArgTypes...} and
+\deflink{Lvalue-Callable}{\ref{func.wrap.func}} for argument types \tcode{ArgTypes...} and
 return type \tcode{R}.
 \end{itemdescr}
 
@@ -14793,7 +14819,7 @@ R operator()(ArgTypes... args) const;
 \begin{itemdescr}
 \pnum
 \returns \tcode{\placeholdernc{INVOKE}<R>(f, std::forward<ArgTypes>(args)...)}~(\ref{func.require}),
-where \tcode{f} is the target object~(\ref{func.def}) of \tcode{*this}.
+where \tcode{f} is the \deflink{target object}{\ref{func.def}} of \tcode{*this}.
 
 \pnum\throws
 \tcode{bad_function_call} if \tcode{!*this}; otherwise, any
@@ -14865,7 +14891,8 @@ template<class R, class... ArgTypes>
 \rSec2[func.search]{Searchers}
 
 \pnum
-This subclause provides function object types (\ref{function.objects}) for
+This subclause provides
+\deflinkx{function object types}{function object!type}{\ref{function.objects}} for
 operations that search for a sequence \range{pat\textunderscore\nobreak first}{pat_last} in another
 sequence \range{first}{last} that is provided to the object's function call
 operator.  The first sequence (the pattern to be searched for) is provided to
@@ -15176,7 +15203,7 @@ these values are \tcode{false}:
 \tcode{is_copy_assignable_v<H>}, and
 \tcode{is_move_assignable_v<H>}.
 Disabled specializations of \tcode{hash}
-are not function object types~(\ref{function.objects}).
+are not \deflinkx{function object types}{function object!type}{\ref{function.objects}}.
 \begin{note}
 This means that the specialization of \tcode{hash} exists, but
 any attempts to use it as a \tcode{Hash} will be ill-formed.
@@ -15185,11 +15212,11 @@ any attempts to use it as a \tcode{Hash} will be ill-formed.
 \pnum
 An enabled specialization \tcode{hash<Key>} will:
 \begin{itemize}
-\item satisfy the \tcode{Hash} requirements~(\ref{hash.requirements}),
+\item satisfy the \link{\tcode{Hash} requirements}{\ref{hash.requirements}},
 with \tcode{Key} as the function
-call argument type, the \tcode{Default\-Constructible} requirements (Table~\ref{tab:defaultconstructible}),
-the \tcode{CopyAssignable} requirements (Table~\ref{tab:copyassignable}),
-\item be swappable~(\ref{swappable.requirements}) for lvalues,
+call argument type, the \link{\tcode{Default\-Constructible} requirements}{Table~\ref{tab:defaultconstructible}},
+the \link{\tcode{CopyAssignable} requirements}{Table~\ref{tab:copyassignable}},
+\item be \link{swappable}{\ref{swappable.requirements}} for lvalues,
 \item satisfy the requirement that if \tcode{k1 == k2} is \tcode{true}, \tcode{h(k1) == h(k2)} is
 also \tcode{true}, where \tcode{h} is an object of type \tcode{hash<Key>} and \tcode{k1} and \tcode{k2}
 are objects of type \tcode{Key};
@@ -15228,7 +15255,7 @@ property being described. It shall be \tcode{DefaultConstructible},
 and publicly and unambiguously derived, directly or indirectly, from
 its \defn{base characteristic}, which is
 a specialization of the template
-\tcode{integral_constant}~(\ref{meta.help}), with
+\linkx{\tcode{integral_constant}}{\idxcode{integral_constant}}{\ref{meta.help}}, with
 the arguments to the template \tcode{integral_constant} determined by the
 requirements for the particular property being described.
 The member names of the base characteristic shall not be hidden and shall be
@@ -15244,7 +15271,7 @@ and publicly and unambiguously derived, directly or
 indirectly, from
 its \term{base characteristic}, which is a specialization
 of the template
-\tcode{integral_constant}~(\ref{meta.help}), with
+\linkx{\tcode{integral_constant}}{\idxcode{integral_constant}}{\ref{meta.help}}, with
 the arguments to the template \tcode{integral_constant} determined by the
 requirements for the particular relationship being described.
 The member names of the base characteristic shall not be hidden and shall be
@@ -15643,6 +15670,7 @@ to instantiate a template in this subclause.
 
 \rSec2[meta.help]{Helper classes}
 
+\begin{indexed}{\indexlibrary{\idxcode{integral_constant}}}
 \begin{codeblock}
 namespace std {
   template <class T, T v>
@@ -15655,8 +15683,8 @@ namespace std {
   };
 }
 \end{codeblock}
+\end{indexed}
 
-\indexlibrary{\idxcode{integral_constant}}%
 \indexlibrary{\idxcode{bool_constant}}%
 \indexlibrary{\idxcode{true_type}}%
 \indexlibrary{\idxcode{false_type}}%
@@ -15676,7 +15704,7 @@ properties of a type at compile time.
 
 \pnum
 Each of these templates shall be a
-\tcode{UnaryTypeTrait}~(\ref{meta.rqmts})
+\deflink{\tcode{UnaryTypeTrait}}{\ref{meta.rqmts}}
 with a base characteristic of
 \tcode{true_type} if the corresponding condition is \tcode{true}, otherwise
 \tcode{false_type}.
@@ -15716,31 +15744,31 @@ has a \tcode{value} member that evaluates to \tcode{true}.
 \indexlibrary{\idxcode{is_integral}}%
 \tcode{template <class T>}\br
  \tcode{struct is_integral;}        &
-\tcode{T} is an integral type~(\ref{basic.fundamental})                 &   \\ \rowsep
+\tcode{T} is an \deflink{integral type}{\ref{basic.fundamental}}                 &   \\ \rowsep
 \indexlibrary{\idxcode{is_floating_point}}%
 \tcode{template <class T>}\br
  \tcode{struct is_floating_point;}  &
-\tcode{T} is a floating-point type~(\ref{basic.fundamental})            &   \\ \rowsep
+\tcode{T} is a \deflink{floating-point type}{\ref{basic.fundamental}}            &   \\ \rowsep
 \indexlibrary{\idxcode{is_array}}%
 \tcode{template <class T>}\br
  \tcode{struct is_array;}           &
 \tcode{T} is an array type~(\ref{basic.compound}) of known or unknown extent    &
-Class template \tcode{array}~(\ref{array})
+Class template \link{\tcode{array}}{\ref{array}}
 is not an array type.                   \\ \rowsep
 \indexlibrary{\idxcode{is_pointer}}%
 \tcode{template <class T>}\br
  \tcode{struct is_pointer;}         &
-\tcode{T} is a pointer type~(\ref{basic.compound})                      &
+\tcode{T} is a \deflinkx{pointer type}{type!pointer}{\ref{basic.compound}}                      &
 Includes pointers to functions
 but not pointers to non-static members.                        \\ \rowsep
 \indexlibrary{\idxcode{is_lvalue_reference}}%
 \tcode{template <class T>}\br
  \tcode{struct is_lvalue_reference;}    &
- \tcode{T} is an lvalue reference type~(\ref{dcl.ref})   &   \\ \rowsep
+ \tcode{T} is an \deflinkx{lvalue reference type}{lvalue reference}{\ref{dcl.ref}}   &   \\ \rowsep
 \indexlibrary{\idxcode{is_rvalue_reference}}%
 \tcode{template <class T>}\br
  \tcode{struct is_rvalue_reference;}    &
- \tcode{T} is an rvalue reference type~(\ref{dcl.ref})   &   \\ \rowsep
+ \tcode{T} is an \deflinkx{rvalue reference type}{rvalue reference}{\ref{dcl.ref}}   &   \\ \rowsep
 \indexlibrary{\idxcode{is_member_object_pointer}}%
 \tcode{template <class T>}\br
  \tcode{struct is_member_object_pointer;}&
@@ -15792,23 +15820,23 @@ For any given type \tcode{T}, the result of applying one of these templates to
 \indexlibrary{\idxcode{is_arithmetic}}%
 \tcode{template <class T>}\br
  \tcode{struct is_arithmetic;}          &
- \tcode{T} is an arithmetic type~(\ref{basic.fundamental})              &   \\ \rowsep
+ \tcode{T} is an \deflinkx{arithmetic type}{type!arithmetic}{\ref{basic.fundamental}}              &   \\ \rowsep
 \indexlibrary{\idxcode{is_fundamental}}%
 \tcode{template <class T>}\br
  \tcode{struct is_fundamental;}         &
- \tcode{T} is a fundamental type~(\ref{basic.fundamental})              &   \\ \rowsep
+ \tcode{T} is a \link{fundamental type}{\ref{basic.fundamental}}              &   \\ \rowsep
 \indexlibrary{\idxcode{is_object}}%
 \tcode{template <class T>}\br
  \tcode{struct is_object;}              &
- \tcode{T} is an object type~(\ref{basic.types})                            &   \\ \rowsep
+ \tcode{T} is an \deflink{object type}{\ref{basic.types}}                            &   \\ \rowsep
 \indexlibrary{\idxcode{is_scalar}}%
 \tcode{template <class T>}\br
  \tcode{struct is_scalar;}              &
- \tcode{T} is a scalar type~(\ref{basic.types})                         &   \\ \rowsep
+ \tcode{T} is a \deflink{scalar type}{\ref{basic.types}}                         &   \\ \rowsep
 \indexlibrary{\idxcode{is_compound}}%
 \tcode{template <class T>}\br
  \tcode{struct is_compound;}            &
- \tcode{T} is a compound type~(\ref{basic.compound})                        &   \\ \rowsep
+ \tcode{T} is a \link{compound type}{\ref{basic.compound}}                        &   \\ \rowsep
 \indexlibrary{\idxcode{is_member_pointer}}%
 \tcode{template <class T>}\br
  \tcode{struct is_member_pointer;}      &
@@ -15837,7 +15865,7 @@ the argument must be a complete type.
 For the purpose of defining the templates in this subclause,
 a function call expression \tcode{declval<T>()} for any type \tcode{T}
 is considered to be a trivial~(\ref{basic.types}, \ref{special}) function call
-that is not an odr-use~(\ref{basic.def.odr}) of \tcode{declval}
+that is not an \link{odr-use}{\ref{basic.def.odr}} of \tcode{declval}
 in the context of the corresponding definition
 notwithstanding the restrictions of~\ref{declval}.
 
@@ -15853,39 +15881,39 @@ notwithstanding the restrictions of~\ref{declval}.
 \indexlibrary{\idxcode{is_const}}%
 \tcode{template <class T>}\br
  \tcode{struct is_const;}               &
- \tcode{T} is const-qualified~(\ref{basic.type.qualifier})                  &   \\ \rowsep
+ \tcode{T} is \deflink{const-qualified}{\ref{basic.type.qualifier}}                  &   \\ \rowsep
 
 \indexlibrary{\idxcode{is_volatile}}%
 \tcode{template <class T>}\br
  \tcode{struct is_volatile;}            &
- \tcode{T} is volatile-qualified~(\ref{basic.type.qualifier})                   &   \\ \rowsep
+ \tcode{T} is \deflink{volatile-qualified}{\ref{basic.type.qualifier}}                   &   \\ \rowsep
 
 
 \indexlibrary{\idxcode{is_trivial}}%
 \tcode{template <class T>}\br
  \tcode{struct is_trivial;}                 &
- \tcode{T} is a trivial type~(\ref{basic.types})     &
+ \tcode{T} is a \deflinkx{trivial type}{trivial types}{\ref{basic.types}}     &
  \tcode{remove_all_extents_t<T>} shall be a complete
  type or \cv{}~\tcode{void}.                \\ \rowsep
 
 \indexlibrary{\idxcode{is_trivially_copyable}}%
 \tcode{template <class T>}\br
  \tcode{struct is_trivially_copyable;}      &
- \tcode{T} is a trivially copyable type~(\ref{basic.types}) &
+ \tcode{T} is a \deflinkx{trivially copyable type}{trivially copyable types}{\ref{basic.types}} &
  \tcode{remove_all_extents_t<T>} shall be a complete type or
  \cv{}~\tcode{void}.                               \\ \rowsep
 
 \indexlibrary{\idxcode{is_standard_layout}}%
 \tcode{template <class T>}\br
  \tcode{struct is_standard_layout;}                 &
- \tcode{T} is a standard-layout type~(\ref{basic.types})   &
+ \tcode{T} is a \deflinkx{standard-layout type}{standard-layout types}{\ref{basic.types}}   &
  \tcode{remove_all_extents_t<T>} shall be a complete
  type or \cv{}~\tcode{void}.                \\ \rowsep
 
 \indexlibrary{\idxcode{is_pod}}%
 \tcode{template <class T>}\br
  \tcode{struct is_pod;}                 &
- \tcode{T} is a POD type~(\ref{basic.types})                                &
+ \tcode{T} is a \deflinkx{POD type}{type!POD}{\ref{basic.types}}                                &
  \tcode{remove_all_extents_t<T>} shall be a complete
  type or \cv{}~\tcode{void}.                \\ \rowsep
 
@@ -15901,13 +15929,13 @@ notwithstanding the restrictions of~\ref{declval}.
 \indexlibrary{\idxcode{is_polymorphic}}%
 \tcode{template <class T>}\br
  \tcode{struct is_polymorphic;}         &
- \tcode{T} is a polymorphic class~(\ref{class.virtual})                             &
+ \tcode{T} is a \deflinkx{polymorphic class}{class!polymorphic}{\ref{class.virtual}} &
  If \tcode{T} is a non-union class type, \tcode{T} shall be a complete type.                \\ \rowsep
 
 \indexlibrary{\idxcode{is_abstract}}%
 \tcode{template <class T>}\br
  \tcode{struct is_abstract;}            &
- \tcode{T} is an abstract class~(\ref{class.abstract})                              &
+ \tcode{T} is an \deflinkx{abstract class}{class!abstract}{\ref{class.abstract}} &
  If \tcode{T} is a non-union class type, \tcode{T} shall be a complete type.                \\ \rowsep
 
 \indexlibrary{\idxcode{is_final}}%
@@ -15959,7 +15987,7 @@ notwithstanding the restrictions of~\ref{declval}.
 \indexlibrary{\idxcode{is_copy_constructible}}%
 \tcode{template <class T>}\br
   \tcode{struct is_copy_constructible;} &
-  For a referenceable type \tcode{T} (\ref{defns.referenceable}), the same result as
+  For a \link{referenceable type}{\ref{defns.referenceable}} \tcode{T}, the same result as
   \tcode{is_constructible_v<T, const T\&>}, otherwise \tcode{false}. &
   \tcode{T} shall be a complete type, \cv{}~\tcode{void},
   or an array of unknown bound. \\ \rowsep
@@ -15976,8 +16004,8 @@ notwithstanding the restrictions of~\ref{declval}.
 \tcode{template <class T, class U>}\br
   \tcode{struct is_assignable;} &
   The expression \tcode{declval<T>() =} \tcode{declval<U>()} is well-formed
-  when treated as an unevaluated
-  operand (Clause~\ref{expr}). Access checking is performed as if in a context
+  when treated as an \deflink{unevaluated operand}{Clause~\ref{expr}}.
+  Access checking is performed as if in a context
   unrelated to \tcode{T} and \tcode{U}. Only the validity of the immediate context
   of the assignment expression is considered. \begin{note} The compilation of the
   expression can result in side effects such as the instantiation of class template
@@ -16008,7 +16036,7 @@ notwithstanding the restrictions of~\ref{declval}.
   \tcode{struct is_swappable_with;} &
   The expressions \tcode{swap(declval<T>(), declval<U>())} and
   \tcode{swap(declval<U>(), declval<T>())} are each well-formed
-  when treated as an unevaluated operand (Clause~\ref{expr})
+  when treated as an \deflink{unevaluated operand}{Clause~\ref{expr}}
   in an overload-resolution context
   for swappable values~(\ref{swappable.requirements}).
   Access checking is performed as if in a context
@@ -16045,7 +16073,7 @@ notwithstanding the restrictions of~\ref{declval}.
   for which the expression
   \tcode{declval<U\&>().\~U()}
   is well-formed
-  when treated as an unevaluated operand (Clause \ref{expr}),
+  when treated as an \deflink{unevaluated operand}{Clause \ref{expr}},
   where \tcode{U} is
   \tcode{remove_all_extents<T>}. &
   \tcode{T} shall be a complete type, \cv{}~\tcode{void},
@@ -16219,7 +16247,7 @@ notwithstanding the restrictions of~\ref{declval}.
 \indexlibrary{\idxcode{has_virtual_destructor}}%
 \tcode{template <class T>}\br
  \tcode{struct has_virtual_destructor;} &
- \tcode{T} has a virtual destructor~(\ref{class.dtor}) &
+ \tcode{T} has a virtual \link{destructor}{\ref{class.dtor}} &
  If \tcode{T} is a non-union class type, \tcode{T} shall be a complete type.                \\ \rowsep
 
 \indexlibrary{\idxcode{has_unique_object_representations}}%
@@ -16348,7 +16376,7 @@ properties of types at compile time.
 \end{libreqtab2a}
 
 \pnum
-Each of these templates shall be a \tcode{UnaryTypeTrait}~(\ref{meta.rqmts}) with a
+Each of these templates shall be a \deflink{\tcode{UnaryTypeTrait}}{\ref{meta.rqmts}} with a
 base characteristic of \tcode{integral_constant<size_t, Value>}.
 
 \pnum
@@ -16384,7 +16412,7 @@ relationships between types at compile time.
 
 \pnum
 Each of these templates shall be a
-\tcode{BinaryTypeTrait}~(\ref{meta.rqmts})
+\deflinkx{\tcode{BinaryTypeTrait}}{BinaryTypeTrait}{\ref{meta.rqmts}}
 with a base characteristic of
 \tcode{true_type} if the corresponding condition is true, otherwise
 \tcode{false_type}.
@@ -16468,7 +16496,7 @@ not possibly cv-qualified versions of the same type,
 For the purpose of defining the templates in this subclause,
 a function call expression \tcode{declval<T>()} for any type \tcode{T}
 is considered to be a trivial~(\ref{basic.types}, \ref{special}) function call
-that is not an odr-use~(\ref{basic.def.odr}) of \tcode{declval}
+that is not an \link{odr-use}{\ref{basic.def.odr}} of \tcode{declval}
 in the context of the corresponding definition
 notwithstanding the restrictions of~\ref{declval}.
 
@@ -16521,7 +16549,7 @@ type to another following some predefined rule.
 
 \pnum
 Each of the templates in this subclause shall be a
-\tcode{TransformationTrait}~(\ref{meta.rqmts}).
+\deflinkx{\tcode{TransformationTrait}}{TransformationTrait}{\ref{meta.rqmts}}.
 
 \rSec3[meta.trans.cv]{Const-volatile modifications}
 
@@ -16609,7 +16637,7 @@ Each of the templates in this subclause shall be a
 \indexlibrary{\idxcode{add_lvalue_reference}}%
 \tcode{template <class T>\br
  struct add_lvalue_reference;}                     &
- If \tcode{T} names a referenceable type (\ref{defns.referenceable}) then
+ If \tcode{T} names a \link{referenceable type}{\ref{defns.referenceable}} then
  the member typedef \tcode{type} names \tcode{T\&};
  otherwise, \tcode{type} names \tcode{T}.
  \begin{note}
@@ -16641,14 +16669,14 @@ Each of the templates in this subclause shall be a
 \indexlibrary{\idxcode{make_signed}}%
 \tcode{template <class T>}\br
  \tcode{struct make_signed;} &
- If \tcode{T} names a (possibly cv-qualified) signed integer
- type~(\ref{basic.fundamental}) then the member typedef
+ If \tcode{T} names a (possibly cv-qualified)
+ \deflink{signed integer type}{\ref{basic.fundamental}} then the member typedef
  \tcode{type} names the type \tcode{T}; otherwise,
  if \tcode{T} names a (possibly cv-qualified) unsigned integer
  type then \tcode{type} names the corresponding
  signed integer type, with the same cv-qualifiers as \tcode{T};
- otherwise, \tcode{type} names the signed integer type with smallest
- rank~(\ref{conv.rank}) for which
+ otherwise, \tcode{type} names the signed integer type with \link{smallest
+ rank}{\ref{conv.rank}} for which
  \tcode{sizeof(T) == sizeof(type)}, with the same
  cv-qualifiers as \tcode{T}.\br
  \requires{} \tcode{T} shall be a (possibly cv-qualified)
@@ -16658,14 +16686,14 @@ Each of the templates in this subclause shall be a
 \indexlibrary{\idxcode{make_unsigned}}%
 \tcode{template <class T>}\br
  \tcode{struct make_unsigned;} &
- If \tcode{T} names a (possibly cv-qualified) unsigned integer
- type~(\ref{basic.fundamental}) then the member typedef
+ If \tcode{T} names a (possibly cv-qualified)
+ \deflink{unsigned integer type}{\ref{basic.fundamental}} then the member typedef
  \tcode{type} names the type \tcode{T}; otherwise,
  if \tcode{T} names a (possibly cv-qualified) signed integer
  type then \tcode{type} names the corresponding
  unsigned integer type, with the same cv-qualifiers as \tcode{T};
- otherwise, \tcode{type} names the unsigned integer type with smallest
- rank~(\ref{conv.rank}) for which
+ otherwise, \tcode{type} names the unsigned integer type with \link{smallest
+ rank}{\ref{conv.rank}} for which
  \tcode{sizeof(T) == sizeof(type)}, with the same
  cv-qualifiers as \tcode{T}.\br
  \requires{} \tcode{T} shall be a (possibly cv-qualified)
@@ -16743,7 +16771,7 @@ assert((is_same_v<remove_all_extents_t<int[][3]>, int>));
 \indexlibrary{\idxcode{add_pointer}}%
 \tcode{template <class T>\br
  struct add_pointer;}                       &
- If \tcode{T} names a referenceable type (\ref{defns.referenceable}) or a
+ If \tcode{T} names a \link{referenceable type}{\ref{defns.referenceable}} or a
  \cv{}~\tcode{void} type then
  the member typedef \tcode{type} names the same type as
  \tcode{remove_reference_t<T>*};
@@ -16798,8 +16826,8 @@ assert((is_same_v<remove_all_extents_t<int[][3]>, int>));
  \tcode{remove_extent_t<U>*}. If \tcode{is_function_v<U>} is \tcode{true},
  the member typedef \tcode{type} shall equal \tcode{add_pointer_t<U>}. Otherwise
  the member typedef \tcode{type} equals \tcode{remove_cv_t<U>}.
- \begin{note} This behavior is similar to the lvalue-to-rvalue~(\ref{conv.lval}),
- array-to-pointer~(\ref{conv.array}), and function-to-pointer~(\ref{conv.func})
+ \begin{note} This behavior is similar to the \link{lvalue-to-rvalue}{\ref{conv.lval}},
+ \link{array-to-pointer}{\ref{conv.array}}, and \link{function-to-pointer}{\ref{conv.func}}
  conversions applied when an lvalue expression is used as an rvalue, but also
  strips \cv-qualifiers from class types in order to more closely model by-value
  argument passing. \end{note}
@@ -16833,14 +16861,14 @@ assert((is_same_v<remove_all_extents_t<int[][3]>, int>));
  &
  The member typedef \tcode{type} names the underlying type
  of \tcode{T}.\br
- \requires{} \tcode{T} shall be a complete enumeration type~(\ref{dcl.enum}) \\ \rowsep
+ \requires{} \tcode{T} shall be a complete \link{enumeration type}{\ref{dcl.enum}} \\ \rowsep
 
 \tcode{template <class Fn,}\br
  \tcode{class... ArgTypes>}\br
  \tcode{struct invoke_result;}
  &
  If the expression \tcode{\placeholdernc{INVOKE}(declval<Fn>(), declval<ArgTypes>()...)}
- is well formed when treated as an unevaluated operand (Clause~\ref{expr}),
+ is well formed when treated as an \deflink{unevaluated operand}{Clause~\ref{expr}},
  the member typedef \tcode{type} names the type
  \tcode{decltype(\placeholdernc{INVOKE}(declval<Fn>(), declval<ArgTypes>()...))};
  otherwise, there shall be no member \tcode{type}. Access checking is
@@ -16859,9 +16887,8 @@ assert((is_same_v<remove_all_extents_t<int[][3]>, int>));
  unknown bound.\\
 \end{libreqtab2a}
 
-\indexlibrary{\idxcode{aligned_storage}}%
 \pnum
-\begin{note} A typical implementation would define \tcode{aligned_storage} as:
+\begin{note} A typical implementation would define \libentity{aligned_storage} as:
 
 \begin{codeblock}
 template <size_t Len, size_t Alignment>
@@ -16874,13 +16901,12 @@ struct aligned_storage {
 \end{note}
 
 \pnum
-It is \impldef{support for extended alignment} whether any extended alignment is
-supported~(\ref{basic.align}).
+It is \impldef{support for extended alignment} whether any
+\deflink{extended alignment}{\ref{basic.align}} is supported.
 
-\indexlibrary{\idxcode{common_type}}%
 \pnum
 Note A:
-For the \tcode{common_type} trait applied to a parameter pack \tcode{T} of types,
+For the \libentity{common_type} trait applied to a parameter pack \tcode{T} of types,
 the member \tcode{type} shall be either defined or not present as follows:
 
 \begin{itemize}
@@ -16977,10 +17003,11 @@ static_assert(is_same_v<invoke_result_t<PMD, const S*>, const char&>);
 This subclause describes type traits for applying logical operators
 to other type traits.
 
-\indexlibrary{\idxcode{conjunction}}%
+\begin{indexed}{\indexlibrary{\idxcode{conjunction}}}
 \begin{itemdecl}
 template<class... B> struct conjunction : @\seebelow@ { };
 \end{itemdecl}
+\end{indexed}
 
 \begin{itemdescr}
 \pnum
@@ -17328,8 +17355,8 @@ the typedef shall not be defined.
 
 \pnum
 \indexlibrary{\idxcode{chrono}}%
-This subclause describes the chrono library~(\ref{time.syn}) and various C
-functions~(\ref{ctime.syn}) that provide generally useful time
+This subclause describes the \link{chrono library}{\ref{time.syn}} and various \link{C
+functions}{\ref{ctime.syn}} that provide generally useful time
 utilities.
 
 \rSec2[time.syn]{Header \tcode{<chrono>} synopsis}
@@ -17526,8 +17553,8 @@ The origin of the clock's \tcode{time_point} is referred to as the clock's \defn
 
 \pnum
 In Table~\ref{tab:time.clock} \tcode{C1} and \tcode{C2} denote clock types. \tcode{t1} and
-\tcode{t2} are values returned by \tcode{C1::now()} where the call returning \tcode{t1} happens
-before~(\ref{intro.multithread}) the call returning \tcode{t2} and both of these calls
+\tcode{t2} are values returned by \tcode{C1::now()} where the call returning \tcode{t1}
+\deflink{happens before}{\ref{intro.multithread}} the call returning \tcode{t2} and both of these calls
 occur
 before \tcode{C1::time_point::max()}.
 \begin{note} This means \tcode{C1} did not wrap around between \tcode{t1} and
@@ -17580,20 +17607,20 @@ SI definition is a measure of the quality of implementation. \end{note}
 A type \tcode{TC} meets the \tcode{TrivialClock} requirements if:
 
 \begin{itemize}
-\item \tcode{TC} satisfies the \tcode{Clock} requirements~(\ref{time.clock.req}),
+\item \tcode{TC} satisfies the \link{\tcode{Clock} requirements}{\ref{time.clock.req}},
 
 \item the types \tcode{TC::rep}, \tcode{TC::duration}, and \tcode{TC::time_point}
-satisfy the requirements of \tcode{EqualityCom\-parable} (Table~\ref{tab:equalitycomparable}),
-\tcode{LessThanComparable} (Table~\ref{tab:lessthancomparable}),
-\tcode{DefaultConstructible} (Table~\ref{tab:defaultconstructible}),
-\tcode{CopyCon\-structible} (Table~\ref{tab:copyconstructible}),
-\tcode{CopyAssignable} (Table~\ref{tab:copyassignable}),
-\tcode{Destructible} (Table~\ref{tab:destructible}), and the requirements of
-numeric types~(\ref{numeric.requirements}). \begin{note} This means, in particular,
+satisfy the requirements of \link{\tcode{EqualityCom\-parable}}{Table~\ref{tab:equalitycomparable}},
+\link{\tcode{LessThanComparable}}{Table~\ref{tab:lessthancomparable}},
+\link{\tcode{DefaultConstructible}}{Table~\ref{tab:defaultconstructible}},
+\link{\tcode{CopyCon\-structible}}{Table~\ref{tab:copyconstructible}},
+\link{\tcode{CopyAssignable}}{Table~\ref{tab:copyassignable}},
+\link{\tcode{Destructible}}{Table~\ref{tab:destructible}}, and the requirements of
+\link{numeric types}{\ref{numeric.requirements}}. \begin{note} This means, in particular,
 that operations on these types will not throw exceptions. \end{note}
 
 \item lvalues of the types \tcode{TC::rep}, \tcode{TC::duration}, and
-\tcode{TC::time_point} are swappable~(\ref{swappable.requirements}),
+\tcode{TC::time_point} are \link{swappable}{\ref{swappable.requirements}},
 
 \item the function \tcode{TC::now()} does not throw exceptions, and
 
@@ -18524,7 +18551,7 @@ public:
 \end{codeblock}
 
 \pnum
-\tcode{Clock} shall meet the Clock requirements~(\ref{time.clock.req}).
+\tcode{Clock} shall meet the \link{Clock requirements}{\ref{time.clock.req}}.
 
 \pnum
 If \tcode{Duration} is not an instance of \tcode{duration},
@@ -18837,8 +18864,7 @@ unless \tcode{ToDuration} is a specialization of \tcode{duration}, and
 
 \pnum
 The types defined in this subclause shall satisfy the
-\tcode{TrivialClock}
-requirements~(\ref{time.clock.req}).
+\link{\tcode{TrivialClock} requirements}{\ref{time.clock.req}}.
 
 \rSec3[time.clock.system]{Class \tcode{system_clock}}
 \indexlibrary{\idxcode{system_clock}}%
@@ -19009,8 +19035,7 @@ The contents of the header \tcode{<ctime>} are the same as the C standard librar
 
 \pnum
 The functions \tcode{asctime}, \tcode{ctime}, \tcode{gmtime}, and
-\tcode{localtime} are not required to avoid data
-races~(\ref{res.on.data.races}).
+\tcode{localtime} are not required to \link{avoid data races}{\ref{res.on.data.races}}.
 
 \xref ISO C~7.27.
 
@@ -19055,9 +19080,9 @@ namespace std {
 
 \pnum
 The class \tcode{type_index} provides a simple wrapper for
-\tcode{type_info} which can be used as an index type in associative
-containers~(\ref{associative}) and in unordered associative
-containers~(\ref{unord}).
+\tcode{type_info} which can be used as an index type in
+\link{associative containers}{\ref{associative}} and in
+\link{unordered associative containers}{\ref{unord}}.
 
 \rSec2[type.index.members]{\tcode{type_index} members}
 
-- 
2.7.4


From 58b66754960039c49477042508c4cffa096fa891 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sat, 25 Feb 2017 18:01:58 +0100
Subject: [PATCH 38/45] Add and use \weblink for external references.

---
 source/macros.tex | 4 ++++
 source/regex.tex  | 2 +-
 2 files changed, 5 insertions(+), 1 deletion(-)

diff --git a/source/macros.tex b/source/macros.tex
index 9abb6ee..e39dda3 100644
--- a/source/macros.tex
+++ b/source/macros.tex
@@ -559,6 +559,10 @@
 	% Convenience macro for when the link
 	% text is also the definition key.
 
+\newcommand{\weblink}[2]{#1}
+	%   arg 0: link text
+	%   arg 1: URL
+
 \newcommand{\indexedspan}[2]{#1#2}
 	%   arg 0: text
 	%   arg 1: indices (zero or more \index commands)
diff --git a/source/regex.tex b/source/regex.tex
index b7fd51e..f03cf81 100644
--- a/source/regex.tex
+++ b/source/regex.tex
@@ -856,7 +856,7 @@ set the flags \tcode{match_not_bol} and \tcode{match_not_bow} shall be ignored b
 When a regular expression match is to be replaced by a
 new string, the new string shall be constructed using the rules used by
 the ECMAScript replace function in ECMA-262,
-part 15.5.4.11 String.prototype.replace. In
+part 15.5.4.11 \weblink{String.prototype.replace}{https://tc39.github.io/ecma262/#sec-string.prototype.replace}. In
 addition, during search and replace operations all non-overlapping
 occurrences of the regular expression shall be located and replaced, and
 sections of the input that did not match the expression shall be copied
-- 
2.7.4


From 9842d4c72160d4c9e54cf4e77934b0bc42c2e0d4 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sun, 26 Feb 2017 01:07:19 +0100
Subject: [PATCH 39/45] Remove unwanted paragraph breaks.

---
 source/expressions.tex | 3 ---
 1 file changed, 3 deletions(-)

diff --git a/source/expressions.tex b/source/expressions.tex
index 9b4087e..971c0f4 100644
--- a/source/expressions.tex
+++ b/source/expressions.tex
@@ -2669,13 +2669,10 @@ if \tcode{T1} and \tcode{T2} are different,
 there is a \deflink{cv-decomposition}{\ref{conv.qual}} of \tcode{T1}
 yielding \placeholder{n} such that
 \tcode{T2} has a cv-decomposition of the form
-
 \begin{indented}
 $cv_0^2$ $P_0^2$ $cv_1^2$ $P_1^2$ $\cdots$ $cv_{n-1}^2$ $P_{n-1}^2$ $cv_n^2$ $\mathtt{U}_2$,
 \end{indented}
-
 and there is no qualification conversion that converts \tcode{T1} to
-
 \begin{indented}
 $cv_0^2$ $P_0^1$ $cv_1^2$ $P_1^1$ $\cdots$ $cv_{n-1}^2$ $P_{n-1}^1$ $cv_n^2$ $\mathtt{U}_1$.
 \end{indented}
-- 
2.7.4


From b787acb08b229f3325644cc619abf6c29c5dff55 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sun, 26 Feb 2017 13:04:04 +0100
Subject: [PATCH 40/45] Remove some index entries that cause unnecessary
 duplicate ids.

---
 source/classes.tex   | 2 +-
 source/lib-intro.tex | 2 +-
 source/templates.tex | 5 +++--
 3 files changed, 5 insertions(+), 4 deletions(-)

diff --git a/source/classes.tex b/source/classes.tex
index 9961464..e49a214 100644
--- a/source/classes.tex
+++ b/source/classes.tex
@@ -111,7 +111,7 @@ as equality comparison, can be defined by the user; see~\ref{over.oper}.
 
 \pnum
 \indextext{\idxcode{struct}!\tcode{class} versus}%
-\indextext{structure}%
+%\indextext{structure}%
 \indextext{\idxcode{union}!\tcode{class} versus}%
 A \term{union} is a class defined with the \grammarterm{class-key}
 \tcode{union};
diff --git a/source/lib-intro.tex b/source/lib-intro.tex
index 94922be..7d1d75b 100644
--- a/source/lib-intro.tex
+++ b/source/lib-intro.tex
@@ -540,7 +540,7 @@ Paragraphs labeled ``\textsc{See also}'' contain cross-references to the relevan
 of this International Standard and the ISO C standard.
 
 \rSec2[conventions]{Other conventions}
-\indextext{conventions}%
+%\indextext{conventions}%
 
 \pnum
 This subclause describes several editorial conventions used to describe the contents
diff --git a/source/templates.tex b/source/templates.tex
index 3014fe7..c7ad75c 100644
--- a/source/templates.tex
+++ b/source/templates.tex
@@ -3547,7 +3547,8 @@ template<class B, class a> struct X : A {
 Inside a template, some constructs have semantics which may differ from one
 instantiation to another.
 Such a construct
-\defnx{depends}{name!dependent}
+%\defnx{depends}{name!dependent} <--- same index key as 28 lines down
+depends
 on the template parameters.
 In particular, types and expressions may depend on the type
 and/or
@@ -6715,7 +6716,7 @@ at least as specialized as the argument type.
 \pnum
 \indextext{at least as specialized as|see{more specialized}}%
 Function template \tcode{F}
-is \defnx{at least as specialized as}{more specialized}
+is \textit{at least as specialized as}
 function template \tcode{G} if,
 for each pair of types used to determine the ordering,
 the type from \tcode{F}
-- 
2.7.4


From bb1ed362fff108e39d24e59a55dba934e3226236 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sun, 26 Feb 2017 13:11:19 +0100
Subject: [PATCH 41/45] [temp.class.order] Merge \defn with index entry.

---
 source/templates.tex | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/source/templates.tex b/source/templates.tex
index c7ad75c..100897e 100644
--- a/source/templates.tex
+++ b/source/templates.tex
@@ -2402,9 +2402,8 @@ of the primary template.
 \rSec3[temp.class.order]{Partial ordering of class template specializations}
 
 \pnum
-\indextext{more specialized!class template}%
 For two class template partial specializations,
-the first is \defn{more specialized} than the second if, given the following
+the first is \defnx{more specialized}{more specialized!class template} than the second if, given the following
 rewrite to two function templates, the first function template is more
 specialized than the second according to the \link{ordering rules for function
 templates}{\ref{temp.func.order}}:
-- 
2.7.4


From 441810e346258d9c9331744313aa6135e3ee252a Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sun, 26 Feb 2017 13:55:28 +0100
Subject: [PATCH 42/45] Use \techterm where appropriate.

Or more specifically: where necessary to prevent cxxdraft-htmlgen from generating duplicate IDs
(since it generates anchors for all \term{}s).
---
 source/classes.tex     |  2 +-
 source/expressions.tex |  8 ++++----
 source/iostreams.tex   | 42 +++++++++++++++++++++---------------------
 source/iterators.tex   |  8 ++++----
 source/lib-intro.tex   | 20 ++++++++++----------
 source/special.tex     |  4 ++--
 source/utilities.tex   |  2 +-
 7 files changed, 43 insertions(+), 43 deletions(-)

diff --git a/source/classes.tex b/source/classes.tex
index e49a214..ff7fbcf 100644
--- a/source/classes.tex
+++ b/source/classes.tex
@@ -113,7 +113,7 @@ as equality comparison, can be defined by the user; see~\ref{over.oper}.
 \indextext{\idxcode{struct}!\tcode{class} versus}%
 %\indextext{structure}%
 \indextext{\idxcode{union}!\tcode{class} versus}%
-A \term{union} is a class defined with the \grammarterm{class-key}
+A \techterm{union} is a class defined with the \grammarterm{class-key}
 \tcode{union};
 \indextext{access control!\idxcode{union} default member}%
 it holds at most one data member at a time~(\ref{class.union}).
diff --git a/source/expressions.tex b/source/expressions.tex
index 971c0f4..5b985cb 100644
--- a/source/expressions.tex
+++ b/source/expressions.tex
@@ -2941,8 +2941,8 @@ In particular, \tcode{sizeof(bool)}, \tcode{sizeof(char16_t)},
 implementation-defined.\footnote{\tcode{sizeof(bool)} is not required to be \tcode{1}.}
 \end{note}
 \begin{note}
-See~\ref{intro.memory} for the definition of \term{byte}
-and~\ref{basic.types} for the definition of \term{object representation}.
+See~\ref{intro.memory} for the definition of \techterm{byte}
+and~\ref{basic.types} for the definition of \techterm{object representation}.
 \end{note}
 
 \pnum
@@ -3624,11 +3624,11 @@ used as the operand of the \grammarterm{delete-expression}.
 
 \pnum
 \indextext{\idxcode{delete}!undefined}%
-In the first alternative (\term{delete object}), if the static type of
+In the first alternative (\techterm{delete object}), if the static type of
 the object to be deleted is different from its dynamic type, the static type shall be
 a base class of the dynamic type of the object to be deleted and the static type shall
 have a virtual destructor or the behavior is undefined. In the second
-alternative (\term{delete array}) if the dynamic type of the object to
+alternative (\techterm{delete array}) if the dynamic type of the object to
 be deleted differs from its static type, the behavior is undefined.
 
 \pnum
diff --git a/source/iostreams.tex b/source/iostreams.tex
index 1bd90f1..6775701 100644
--- a/source/iostreams.tex
+++ b/source/iostreams.tex
@@ -3020,16 +3020,16 @@ namespace std {
 The class template
 \tcode{basic_streambuf}
 serves as an abstract base class for deriving various
-\term{stream buffers}
+\techterm{stream buffers}
 whose objects each control two
-\term{character sequences}:
+\techterm{character sequences}:
 \begin{itemize}
 \item
 a character
-\term{input sequence};
+\techterm{input sequence};
 \item
 a character
-\term{output sequence}.
+\techterm{output sequence}.
 \end{itemize}
 
 \rSec3[streambuf.cons]{\tcode{basic_streambuf} constructors}
@@ -3734,7 +3734,7 @@ is null or
 where \tcode{c} is the first
 \textit{character}
 of the
-\term{pending sequence},
+\techterm{pending sequence},
 without moving the input sequence position past it.
 If the pending sequence is null then the function returns
 \tcode{traits::eof()}
@@ -3742,7 +3742,7 @@ to indicate failure.
 
 \pnum
 The
-\term{pending sequence}
+\techterm{pending sequence}
 of characters is defined as the concatenation of
 \begin{itemize}
 \item the empty sequence if \tcode{gptr()} is null, otherwise the
@@ -3755,7 +3755,7 @@ some (possibly empty) sequence of characters read from the input sequence.
 
 \pnum
 The
-\term{result character}
+\techterm{result character}
 is
 the first character of the pending sequence if it is non-empty,
 otherwise
@@ -3763,7 +3763,7 @@ the next character that would be read from the input sequence.
 
 \pnum
 The
-\term{backup sequence}
+\techterm{backup sequence}
 is the empty sequence if \tcode{eback()} is null, otherwise the
 characters in
 \range{eback()}{gptr()}.
@@ -3868,7 +3868,7 @@ returns
 Other calls shall also satisfy that constraint.
 
 The
-\term{pending sequence}
+\techterm{pending sequence}
 is defined as for
 \tcode{underflow()},
 with the modifications that
@@ -3952,7 +3952,7 @@ int_type overflow(int_type c = traits::eof());
 \pnum
 \effects
 Consumes some initial subsequence of the characters of the
-\term{pending sequence}.
+\techterm{pending sequence}.
 The pending sequence is defined as the concatenation of
 \begin{itemize}
 \item
@@ -4264,15 +4264,15 @@ controlled by a stream buffer.
 \pnum
 Two groups of member function signatures share common properties:
 the
-\term{formatted input functions}
+\techterm{formatted input functions}
 (or
-\term{extractors})
+\techterm{extractors})
 and the
-\term{unformatted input functions.}
+\techterm{unformatted input functions.}
 Both groups of input functions are described as if they obtain (or
-\term{extract})
+\techterm{extract})
 input
-\term{characters}
+\techterm{characters}
 by calling
 \tcode{rdbuf()->sbumpc()}
 or
@@ -5822,15 +5822,15 @@ controlled by a stream buffer.
 \pnum
 Two groups of member function signatures share common properties:
 the
-\term{formatted output functions}
+\techterm{formatted output functions}
 (or
-\term{inserters})
+\techterm{inserters})
 and the
-\term{unformatted output functions.}
+\techterm{unformatted output functions.}
 Both groups of output functions generate (or
-\term{insert})
+\techterm{insert})
 output
-\term{characters}
+\techterm{characters}
 by actions equivalent to calling
 \tcode{rdbuf()->sputc(int_type)}.
 They may use other public members of
@@ -7323,7 +7323,7 @@ is derived from
 \tcode{basic_streambuf}
 to associate possibly the input sequence and possibly
 the output sequence with a sequence of arbitrary
-\term{characters}.
+\techterm{characters}.
 The sequence can be initialized from, or made available as, an object of class
 \tcode{basic_string}.
 
diff --git a/source/iterators.tex b/source/iterators.tex
index 264a455..c9e4500 100644
--- a/source/iterators.tex
+++ b/source/iterators.tex
@@ -398,7 +398,7 @@ does not imply
 (Equality does not guarantee the substitution property or referential transparency.)
 Algorithms on input iterators should never attempt to pass through the same iterator twice.
 They should be
-\term{single pass}
+\techterm{single pass}
 algorithms.
 Value type \tcode{T} is not required to be a \link{\tcode{CopyAssignable}}{Table~\ref{tab:copyassignable}} type.
 These algorithms can be used with istreams as the source of the input data through the
@@ -463,7 +463,7 @@ is on the left side of the assignment statement.
 \textit{Assignment through the same value of the iterator happens only once.}
 Algorithms on output iterators should never attempt to pass through the same iterator twice.
 They should be
-\term{single pass}
+\techterm{single pass}
 algorithms.
 Equality and inequality might not be defined.
 Algorithms that take output iterators can be used with ostreams as the destination
@@ -2575,7 +2575,7 @@ If the iterator fails to read and store a value of \tcode{T}
 on the stream returns
 \tcode{true}),
 the iterator becomes equal to the
-\term{end-of-stream}
+\techterm{end-of-stream}
 iterator value.
 The constructor with no arguments
 \tcode{istream_iterator()}
@@ -2966,7 +2966,7 @@ is evaluated, the iterator advances to the next input character.
 If the end of stream is reached (\tcode{streambuf_type::sgetc()} returns
 \tcode{traits::eof()}),
 the iterator becomes equal to the
-\term{end-of-stream}
+\techterm{end-of-stream}
 iterator value.
 The default constructor
 \tcode{istreambuf_iterator()}
diff --git a/source/lib-intro.tex b/source/lib-intro.tex
index 7d1d75b..b41933c 100644
--- a/source/lib-intro.tex
+++ b/source/lib-intro.tex
@@ -224,7 +224,7 @@ that is not list-initialization~(\ref{dcl.init.list})
 \definition{handler function}{defns.handler}
 \indexdefn{function!handler}%
 a
-\term{non-reserved function}
+\techterm{non-reserved function}
 whose definition may be provided by a \Cpp{} program\\
 \begin{note}
 A \Cpp{} program may designate a handler function at various points in its execution by
@@ -294,7 +294,7 @@ including reference types. \end{note}
 \definition{replacement function}{defns.replacement}
 \indexdefn{function!replacement}%
 a
-\term{non-reserved function}
+\techterm{non-reserved function}
 whose definition is provided by a \Cpp{} program\\
 \begin{note}
 Only one definition for such a function is in effect for the duration of the program's
@@ -310,9 +310,9 @@ previously encountered
 \definition{required behavior}{defns.required.behavior}
 \indexdefn{behavior!required}%
 a description of
-\term{replacement function}
+\techterm{replacement function}
 and
-\term{handler function}
+\techterm{handler function}
 semantics
 applicable to both the behavior provided by the implementation and
 the behavior of any such function definition in the program\\
@@ -694,17 +694,17 @@ bitmask types:
 \begin{itemize}
 \item
 To
-\term{set}
+\techterm{set}
 a value \textit{Y} in an object \textit{X}
 is to evaluate the expression \textit{X} \tcode{|=} \textit{Y}.
 \item
 To
-\term{clear}
+\techterm{clear}
 a value \textit{Y} in an object
 \textit{X} is to evaluate the expression \textit{X} \tcode{\&= \~}\textit{Y}.
 \item
 The value \textit{Y}
-\term{is set}
+\techterm{is set}
 in the object
 \textit{X} if the expression \textit{X} \tcode{\&} \textit{Y} is nonzero.
 \end{itemize}
@@ -795,17 +795,17 @@ a length value, maintained separately from the character sequence.}
 
 \pnum
 The
-\term{length} of an \ntbs{}
+\techterm{length} of an \ntbs{}
 is the number of elements that
 precede the terminating null character.
 \indextext{NTBS}%
 An
-\term{empty} \ntbs{}
+\techterm{empty} \ntbs{}
 has a length of zero.
 
 \pnum
 The
-\term{value} of an \ntbs{}
+\techterm{value} of an \ntbs{}
 is the sequence of values of the
 elements up to and including the terminating null character.
 \indextext{NTBS}%
diff --git a/source/special.tex b/source/special.tex
index 34a5a7a..96619f8 100644
--- a/source/special.tex
+++ b/source/special.tex
@@ -2677,7 +2677,7 @@ otherwise the copy/move constructor is
 A copy/move constructor
 that is defaulted and not defined as deleted
 is
-\term{implicitly defined}
+\techterm{implicitly defined}
 if it is \link{odr-used}{\ref{basic.def.odr}}
 or when it is explicitly defaulted after its first declaration.
 \begin{note}
@@ -2995,7 +2995,7 @@ otherwise the copy/move assignment operator is
 A copy/move assignment operator for a class \tcode{X}
 that is defaulted and not defined as deleted
 is
-\term{implicitly defined}
+\techterm{implicitly defined}
 when
 it is \link{odr-used}{\ref{basic.def.odr}} (e.g., when it is selected by overload resolution
 to assign to an object of its class type)
diff --git a/source/utilities.tex b/source/utilities.tex
index 8e1849f..c9904de 100644
--- a/source/utilities.tex
+++ b/source/utilities.tex
@@ -15269,7 +15269,7 @@ arguments that help define the relationship being described. It shall
 be \tcode{DefaultConstructible}, \tcode{CopyConstructible},
 and publicly and unambiguously derived, directly or
 indirectly, from
-its \term{base characteristic}, which is a specialization
+its \techterm{base characteristic}, which is a specialization
 of the template
 \linkx{\tcode{integral_constant}}{\idxcode{integral_constant}}{\ref{meta.help}}, with
 the arguments to the template \tcode{integral_constant} determined by the
-- 
2.7.4


From e11aba39a1291ba15ce2d1b1369dbc7e8c7e6443 Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sun, 26 Feb 2017 14:02:26 +0100
Subject: [PATCH 43/45] Replace \term with \grammarterm where appropriate.

---
 source/access.tex       | 2 +-
 source/preprocessor.tex | 4 ++--
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/source/access.tex b/source/access.tex
index 96b22d4..f884cf7 100644
--- a/source/access.tex
+++ b/source/access.tex
@@ -683,7 +683,7 @@ shall have one of the following forms:
 \end{ncsimplebnf}
 
 \begin{note} A \tcode{friend} declaration may be the
-\term{declaration} in a \grammarterm{template-declaration}
+\grammarterm{declaration} in a \grammarterm{template-declaration}
 (Clause~\ref{temp}, \ref{temp.friend}).\end{note} If the
 type specifier in a \tcode{friend} declaration designates a (possibly
 cv-qualified) class type, that class is declared as a friend; otherwise, the
diff --git a/source/preprocessor.tex b/source/preprocessor.tex
index 45f41fb..c36ce31 100644
--- a/source/preprocessor.tex
+++ b/source/preprocessor.tex
@@ -379,11 +379,11 @@ check whether the identifier is or is not currently defined as a macro name.
 Their conditions are equivalent to
 \tcode{\#if}
 \tcode{defined}
-\term{identifier}
+\grammarterm{identifier}
 and
 \tcode{\#if}
 \tcode{!defined}
-\term{identifier}
+\grammarterm{identifier}
 respectively.
 
 \pnum
-- 
2.7.4


From 4273f0473e0b52ae31a814e184b0b0f07efb4d7f Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Sun, 26 Feb 2017 17:29:53 +0100
Subject: [PATCH 44/45] Index second definition of 'object expression'.

---
 source/expressions.tex | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/source/expressions.tex b/source/expressions.tex
index 5b985cb..bd0960b 100644
--- a/source/expressions.tex
+++ b/source/expressions.tex
@@ -3947,7 +3947,7 @@ The expression \tcode{E1->*E2} is converted into the equivalent form
 
 \pnum
 Abbreviating \grammarterm{pm-expression}\tcode{.*}\grammarterm{cast-expression} as \tcode{E1.*E2}, \tcode{E1}
-is called the \term{object expression}.
+is called the \defn{object expression}.
 If the dynamic type of \tcode{E1} does not
 contain the member to which
 \tcode{E2} refers, the behavior is undefined.
-- 
2.7.4


From 79701f1a87c5609badcceff4a7a5403e8555d96e Mon Sep 17 00:00:00 2001
From: Eelis van der Weegen <eelis@eelis.net>
Date: Mon, 20 Mar 2017 20:59:23 +0100
Subject: [PATCH 45/45] Use \newcommand instead of \def.

---
 source/iostreams.tex | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/source/iostreams.tex b/source/iostreams.tex
index 6775701..7f51deb 100644
--- a/source/iostreams.tex
+++ b/source/iostreams.tex
@@ -10665,7 +10665,7 @@ For Windows-based operating systems,
 
 \rSec3[fs.path.generic]{Generic pathname format}
 
-\def\impldefrootname{\impldef{supported \grammarterm{root-name}{s} in addition to
+\newcommand{\impldefrootname}{\impldef{supported \grammarterm{root-name}{s} in addition to
 any operating system dependent \grammarterm{root-name}{s}}}
 
 \begin{ncbnf}
-- 
2.7.4

